{"version":3,"file":"InlineEditFlow.js","names":["InlineEditFlow","_dec","defineUI5Class","_dec2","hookable","_dec3","methodOverride","_dec4","_dec5","_dec6","_dec7","_class","_class2","_BaseControllerExtens","_this","_len","arguments","length","args","Array","_key","call","this","inlineEditControls","_exports","_inheritsLoose","_proto","prototype","isInlineEditPossible","base","getAppComponent","getInlineEditService","doesPageHaveInlineEdit","getRoutingTargetName","inlineEditSave","async","model","getView","getModel","messages","Messaging","getMessageModel","getData","hasTechnicalMessages","some","message","messageHandling","isNonTechnicalMessage","setShowFooter","hasPendingChanges","CommonUtils","INLINEEDIT_UPDATEGROUPID","inlineEditEnd","removeAllMessages","submitBatch","error","Log","warning","inlineEditDiscard","resetChanges","refreshDescription","control","setProperty","startInlineEdit","propertyFullyQualifiedName","bindingContextPath","controlTrigger","getBindingContext","getProperty","DraftExistsDialog","open","resetIndicatorPopup","inlineEditService","dependentProperties","getInlineConnectedProperties","inlineEditStart","focusHandling","inlineEditControl","closeInlineEditPopupEditMode","focus","properties","abortTimerBeforeSave","undefined","alreadyRegisteredControls","map","getId","includes","push","inlineEditBindingContextPath","isPropertyConsideredForInlineEdit","handleInlineEditPatchSent","event","patchPromise","Promise","resolve","reject","getSource","attachEventOnce","patchCompletedEvent","bSuccess","getParameter","resourceBundle","Lib","getResourceBundleFor","MessageToast","show","getText","handleInlineEditSaveFailed","metaModel","getMetaModel","propagateInlineFieldGroupIdToMessageButton","target","getTargets","targetMetaContext","createBindingContext","getMetaPath","messageTargetDataModelObject","MetaModelConverter","getInvolvedDataModelObjects","isProperty","targetObject","targetFullyQualifiedName","fullyQualifiedName","delayedCallToSave","timerBeforeSave","setTimeout","e","onBeforeNavigation","dialogResult","openInlineEditBeforeNavigationDialogAndWaitForResult","BeforeNavigationDialog","onBeforeAnyEditFlowAction","BeforeActionDialog","onBeforeEdit","onBeforeCreate","onBeforeDelete","onBeforeExecuteAction","footerControls","getFooter","findAggregatedObjects","managedObject","isA","childFieldGroupIds","Set","getFieldGroupIds","add","setFieldGroupIds","from","BaseControllerExtension","_applyDecoratedDescriptor","Object","getOwnPropertyDescriptor"],"sources":["./InlineEditFlow.ts"],"sourcesContent":["import type { Property } from \"@sap-ux/vocabularies-types\";\nimport Log from \"sap/base/Log\";\nimport { defineUI5Class, methodOverride, type EnhanceWithUI5 } from \"sap/fe/base/ClassSupport\";\nimport { hookable } from \"sap/fe/base/HookSupport\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type PageController from \"sap/fe/core/PageController\";\nimport BaseControllerExtension from \"sap/fe/core/controllerextensions/BaseControllerExtension\";\nimport messageHandling from \"sap/fe/core/controllerextensions/messageHandler/messageHandling\";\nimport BeforeActionDialog from \"sap/fe/core/controls/inlineEditFlow/BeforeActionDialog\";\nimport BeforeNavigationDialog, { type DIALOGRESULT } from \"sap/fe/core/controls/inlineEditFlow/BeforeNavigationDialog\";\nimport * as MetaModelConverter from \"sap/fe/core/converters/MetaModelConverter\";\nimport { isProperty } from \"sap/fe/core/helpers/TypeGuards\";\nimport { type DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport type Field from \"sap/fe/macros/Field\";\nimport type InlineEdit from \"sap/fe/macros/inlineEdit/InlineEdit\";\nimport MessageToast from \"sap/m/MessageToast\";\nimport type UI5Event from \"sap/ui/base/Event\";\nimport type ManagedObject from \"sap/ui/base/ManagedObject\";\nimport type Control from \"sap/ui/core/Control\";\nimport Lib from \"sap/ui/core/Lib\";\nimport Messaging from \"sap/ui/core/Messaging\";\nimport type Message from \"sap/ui/core/message/Message\";\nimport type { ODataContextBinding$PatchSentEvent } from \"sap/ui/model/odata/v4/ODataContextBinding\";\nimport DraftExistsDialog from \"../controls/inlineEditFlow/DraftExistsDialog\";\n\n@defineUI5Class(\"sap.fe.core.controllerextensions.InlineEditFlow\")\nexport default class InlineEditFlow extends BaseControllerExtension {\n\tprotected base!: PageController;\n\n\tprivate inlineEditControls: Control[] = [];\n\n\tprivate inlineEditBindingContextPath?: string;\n\n\tprivate abortTimerBeforeSave?: Function;\n\n\tprivate patchPromise?: Promise<UI5Event>;\n\n\t/**\n\t * Method to know if there can be inline edit on the page.\n\t * @returns True if inline edit is possible\n\t */\n\tisInlineEditPossible(): boolean {\n\t\treturn this.base.getAppComponent().getInlineEditService().doesPageHaveInlineEdit(this.base.getRoutingTargetName());\n\t}\n\n\t/**\n\t * Save the inline edit changes.\n\t * @returns A promise that resolved once the batch has returned.\n\t */\n\tasync inlineEditSave(): Promise<void> {\n\t\tconst model = this.base.getView().getModel();\n\n\t\tconst messages = Messaging.getMessageModel().getData();\n\t\tconst hasTechnicalMessages = messages.some((message: Message) => !messageHandling.isNonTechnicalMessage(message));\n\t\tif (hasTechnicalMessages) {\n\t\t\tthis.base.setShowFooter(true);\n\t\t\t// if there are invalid types we should not try to save\n\t\t\treturn;\n\t\t}\n\t\tif (!model.hasPendingChanges(CommonUtils.INLINEEDIT_UPDATEGROUPID)) {\n\t\t\tthis.inlineEditEnd();\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tMessaging.removeAllMessages();\n\t\t\tawait model.submitBatch(CommonUtils.INLINEEDIT_UPDATEGROUPID);\n\t\t} catch (error: unknown) {\n\t\t\tLog.warning(\"Error while saving inline edit changes\");\n\t\t}\n\t}\n\n\t/**\n\t * Discard the inline edit changes.\n\t */\n\tinlineEditDiscard(): void {\n\t\tthis.base.getView().getModel().resetChanges(CommonUtils.INLINEEDIT_UPDATEGROUPID);\n\t\tthis.inlineEditEnd(true);\n\t}\n\n\t/**\n\t * End the inline edit.\n\t * @param refreshDescription\n\t */\n\tinlineEditEnd(refreshDescription?: boolean): void {\n\t\tMessaging.removeAllMessages();\n\t\tthis.base.setShowFooter(false);\n\t\tfor (const control of this.inlineEditControls) {\n\t\t\t(control as EnhanceWithUI5<Field> & InlineEdit).inlineEditEnd(refreshDescription);\n\t\t}\n\t\tthis.inlineEditControls = [];\n\t\tthis.base.getView().getModel(\"ui\").setProperty(\"/isInlineEditActive\", false);\n\t}\n\n\t/**\n\t * Start the inline edit on the bindingContextPath for the propertyFullyQualifiedName.\n\t * @param propertyFullyQualifiedName\n\t * @param bindingContextPath\n\t * @param controlTrigger\n\t */\n\tstartInlineEdit(\n\t\tpropertyFullyQualifiedName: string,\n\t\tbindingContextPath: string,\n\t\tcontrolTrigger?: EnhanceWithUI5<Field> & InlineEdit\n\t): void {\n\t\tif (controlTrigger?.getBindingContext()?.getProperty(\"HasDraftEntity\")) {\n\t\t\t// there is already a draft on the entity. We should not start inline edit\n\t\t\tnew DraftExistsDialog(this.base.getView()).open();\n\t\t\tcontrolTrigger?.resetIndicatorPopup();\n\t\t\treturn;\n\t\t}\n\t\tconst inlineEditService = this.base.getAppComponent().getInlineEditService();\n\t\tconst dependentProperties = inlineEditService.getInlineConnectedProperties(\n\t\t\tthis.base.getRoutingTargetName(),\n\t\t\tpropertyFullyQualifiedName\n\t\t);\n\n\t\tthis.inlineEditStart([], dependentProperties?.length ? dependentProperties : [propertyFullyQualifiedName], bindingContextPath);\n\t\tthis.base.getView().getModel(\"ui\").setProperty(\"/isInlineEditActive\", true);\n\t}\n\n\t/**\n\t * Focus handling for inline edit. When one field gets focus, all other inline edit popups, that are currently opened, should be closed.\n\t * @param inlineEditControl Controls which are currently in inline edit mode.\n\t */\n\tfocusHandling(inlineEditControl: Control): void {\n\t\tfor (const control of this.inlineEditControls) {\n\t\t\tif (control !== inlineEditControl) {\n\t\t\t\t(control as EnhanceWithUI5<Field> & InlineEdit).closeInlineEditPopupEditMode();\n\t\t\t} else if (control === inlineEditControl) {\n\t\t\t\tcontrol.focus();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Confirm the start of the inline edit on the bindingContextPath for the properties.\n\t * @param inlineEditControls The fields that are currently in inline edit mode.\n\t * @param properties\n\t * @param bindingContextPath\n\t */\n\t@hookable(\"Before\")\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tasync inlineEditStart(inlineEditControls: Control[], properties: string[], bindingContextPath: string): Promise<void> {\n\t\tif (this.abortTimerBeforeSave) {\n\t\t\t// if there is  a timer to save\n\t\t\tthis.abortTimerBeforeSave();\n\t\t\tthis.abortTimerBeforeSave = undefined;\n\t\t\tawait this.inlineEditSave();\n\t\t}\n\t\tconst alreadyRegisteredControls = this.inlineEditControls.map((control: Control) => control.getId());\n\t\tfor (const control of inlineEditControls) {\n\t\t\tif (!alreadyRegisteredControls.includes(control.getId())) {\n\t\t\t\tthis.inlineEditControls.push(control);\n\t\t\t}\n\t\t}\n\t\tthis.inlineEditBindingContextPath = bindingContextPath;\n\t\treturn;\n\t}\n\n\t/**\n\t * Convenience method to determine if a property should be considered for inline edit.\n\t * @param propertyFullyQualifiedName\n\t * @returns True when the property is considered for Inline edit.\n\t */\n\tisPropertyConsideredForInlineEdit(propertyFullyQualifiedName: string): boolean {\n\t\treturn this.base\n\t\t\t.getAppComponent()\n\t\t\t.getInlineEditService()\n\t\t\t.isPropertyConsideredForInlineEdit(this.base.getRoutingTargetName(), propertyFullyQualifiedName);\n\t}\n\n\t/**\n\t * Handles the patchSent event: handle inline edit save success or failure.\n\t * @param event The event sent by the binding\n\t */\n\tasync handleInlineEditPatchSent(event: ODataContextBinding$PatchSentEvent): Promise<void> {\n\t\tthis.patchPromise = new Promise<UI5Event>((resolve, reject) => {\n\t\t\tevent.getSource().attachEventOnce(\"patchCompleted\", (patchCompletedEvent: UI5Event<{ success: boolean }>) => {\n\t\t\t\tconst bSuccess = patchCompletedEvent.getParameter(\"success\");\n\t\t\t\tif (bSuccess) {\n\t\t\t\t\tresolve(patchCompletedEvent);\n\t\t\t\t} else {\n\t\t\t\t\treject(patchCompletedEvent);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\ttry {\n\t\t\tawait this.patchPromise;\n\t\t\tthis.patchPromise = undefined;\n\t\t\tconst resourceBundle = Lib.getResourceBundleFor(\"sap.fe.core\");\n\t\t\tif (resourceBundle) {\n\t\t\t\tMessageToast.show(resourceBundle.getText(\"C_INLINE_EDIT_SAVED\"));\n\t\t\t}\n\t\t\tthis.inlineEditEnd();\n\t\t} catch (patchCompletedEvent) {\n\t\t\tthis.patchPromise = undefined;\n\t\t\tthis.handleInlineEditSaveFailed();\n\t\t}\n\t}\n\n\t/**\n\t * Method to show the errors when the inline edit save fails.\n\t */\n\thandleInlineEditSaveFailed(): void {\n\t\tconst metaModel = this.base.getView().getModel().getMetaModel();\n\n\t\tconst messages = Messaging.getMessageModel().getData();\n\t\tif (messages.length) {\n\t\t\tthis.base.setShowFooter(true);\n\t\t\tthis.propagateInlineFieldGroupIdToMessageButton();\n\t\t}\n\t\tif (!this.inlineEditBindingContextPath) {\n\t\t\treturn;\n\t\t}\n\t\tfor (const message of messages) {\n\t\t\tfor (const target of message.getTargets()) {\n\t\t\t\tconst targetMetaContext = metaModel.createBindingContext(metaModel.getMetaPath(target));\n\t\t\t\tconst messageTargetDataModelObject = targetMetaContext\n\t\t\t\t\t? MetaModelConverter.getInvolvedDataModelObjects<unknown>(targetMetaContext)\n\t\t\t\t\t: null;\n\t\t\t\tif (isProperty(messageTargetDataModelObject?.targetObject)) {\n\t\t\t\t\tconst targetFullyQualifiedName =\n\t\t\t\t\t\t(messageTargetDataModelObject as unknown as DataModelObjectPath<Property>)?.targetObject?.fullyQualifiedName ?? \"\";\n\t\t\t\t\tif (this.isPropertyConsideredForInlineEdit(targetFullyQualifiedName)) {\n\t\t\t\t\t\tthis.startInlineEdit(targetFullyQualifiedName, this.inlineEditBindingContextPath);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Performs a delayedCall when you focus out of a field.\n\t */\n\tasync delayedCallToSave(): Promise<void> {\n\t\tif (this.abortTimerBeforeSave || this.patchPromise) {\n\t\t\t// if there is already a timer running or a save in process do nothing\n\t\t\treturn;\n\t\t}\n\t\tconst timerBeforeSave = new Promise<void>((resolve, reject) => {\n\t\t\tthis.abortTimerBeforeSave = reject;\n\t\t\tsetTimeout(() => resolve(), 500);\n\t\t});\n\t\ttry {\n\t\t\tawait timerBeforeSave;\n\t\t\tthis.abortTimerBeforeSave = undefined;\n\t\t\tthis.inlineEditSave();\n\t\t} catch (e) {\n\t\t\t// Nothing to see it is just someone that cancelled the timer\n\t\t}\n\t}\n\n\t/**\n\t * Method to ensure we leave inline edit before any navigation..\n\t * @returns Promise that retruns true if we need to cancel navigation and stay in inline edit\n\t */\n\t@methodOverride(\"routing\")\n\tasync onBeforeNavigation(): Promise<boolean> {\n\t\tif (this.inlineEditControls.length > 0) {\n\t\t\t// there are controls in inline edit we need to prevent the navigation and show the dialog\n\t\t\tif (this.abortTimerBeforeSave) {\n\t\t\t\tthis.abortTimerBeforeSave();\n\t\t\t\tthis.abortTimerBeforeSave = undefined;\n\t\t\t}\n\t\t\tif (!this.base.getView().getModel().hasPendingChanges(CommonUtils.INLINEEDIT_UPDATEGROUPID)) {\n\t\t\t\t// fields are in inline edit and there are no pending changes. We need to show the dialog\n\t\t\t\tthis.inlineEditEnd();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tif (this.patchPromise) {\n\t\t\t\t\tawait this.patchPromise;\n\t\t\t\t} else {\n\t\t\t\t\tconst dialogResult = await this.openInlineEditBeforeNavigationDialogAndWaitForResult();\n\t\t\t\t\tif (dialogResult === \"Save\") {\n\t\t\t\t\t\t// we save and wait for the patchPromise\n\t\t\t\t\t\tawait this.inlineEditSave();\n\t\t\t\t\t\tif (this.base.getView().getModel().hasPendingChanges(CommonUtils.INLINEEDIT_UPDATEGROUPID)) {\n\t\t\t\t\t\t\t// if after saves there are still changes this means save has failed. we need to cancel navigation\n\t\t\t\t\t\t\tthis.focusHandling(this.inlineEditControls[0]);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (dialogResult === \"Cancel\") {\n\t\t\t\t\t\tthis.focusHandling(this.inlineEditControls[0]);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// we discard the changes\n\t\t\t\t\t\tthis.inlineEditDiscard();\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.focusHandling(this.inlineEditControls[0]);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Method to open the dialog before navigation.\n\t * @returns Promise that returns the dialog choice once the user has clicked on ok or cancel\n\t */\n\tasync openInlineEditBeforeNavigationDialogAndWaitForResult(): Promise<DIALOGRESULT> {\n\t\treturn new Promise<DIALOGRESULT>((resolve) => {\n\t\t\tnew BeforeNavigationDialog(this.base.getView(), resolve).open();\n\t\t});\n\t}\n\n\t/**\n\t * Method to ensure we leave inline edit before any standard edit flowaction.\n\t * @returns Promise that reject and triggers save or discard if we are in inline edit\n\t */\n\tasync onBeforeAnyEditFlowAction(): Promise<void> {\n\t\tif (this.inlineEditControls.length > 0) {\n\t\t\tif (this.abortTimerBeforeSave) {\n\t\t\t\tthis.abortTimerBeforeSave();\n\t\t\t\tthis.abortTimerBeforeSave = undefined;\n\t\t\t}\n\t\t\tif (!this.base.getView().getModel().hasPendingChanges(CommonUtils.INLINEEDIT_UPDATEGROUPID)) {\n\t\t\t\t// fields are in inline edit and there are no pending changes. We don't need to show the dialog\n\t\t\t\tthis.inlineEditEnd();\n\t\t\t\treturn Promise.resolve();\n\t\t\t}\n\t\t\tnew BeforeActionDialog(this.base.getView()).open();\n\t\t\t// there are controls in inline edit we need to prevent the action and show the dialog\n\t\t\treturn Promise.reject();\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Handle before edit.\n\t * @returns Promise that reject if edit needs to be cancelled\n\t */\n\t@methodOverride(\"editFlow\")\n\tasync onBeforeEdit(): Promise<void> {\n\t\treturn this.onBeforeAnyEditFlowAction();\n\t}\n\n\t/**\n\t * Handle before create.\n\t * @returns Promise that reject if cretae needs to be cancelled\n\t */\n\t@methodOverride(\"editFlow\")\n\tasync onBeforeCreate(): Promise<void> {\n\t\treturn this.onBeforeAnyEditFlowAction();\n\t}\n\n\t/**\n\t * Handle before delete.\n\t * @returns Promise that reject if delete needs to be cancelled\n\t */\n\t@methodOverride(\"editFlow\")\n\tasync onBeforeDelete(): Promise<void> {\n\t\treturn this.onBeforeAnyEditFlowAction();\n\t}\n\n\t/**\n\t * Handle before action.\n\t * @returns Promise that reject if delete needs to be cancelled\n\t */\n\t@methodOverride(\"editFlow\")\n\tasync onBeforeExecuteAction(): Promise<void> {\n\t\treturn this.onBeforeAnyEditFlowAction();\n\t}\n\n\t/**\n\t * Propagate the field group id to the message button.\n\t */\n\tprivate propagateInlineFieldGroupIdToMessageButton(): void {\n\t\t// we propagate the fieldgroupId to the footer and all its descendants to ensure that\n\t\t// clicking on the footer does not trigger a focusout and a save for the inline edit\n\t\tconst footerControls =\n\t\t\t(this.base\n\t\t\t\t.getFooter()\n\t\t\t\t?.findAggregatedObjects(true, (managedObject: ManagedObject) => managedObject.isA<Control>(\"sap.ui.core.Control\")) as\n\t\t\t\t| Control[]\n\t\t\t\t| undefined) ?? [];\n\n\t\tfor (const control of footerControls) {\n\t\t\tconst childFieldGroupIds = new Set(control.getFieldGroupIds());\n\t\t\tchildFieldGroupIds.add(\"InlineEdit\");\n\t\t\tcontrol.setFieldGroupIds(Array.from(childFieldGroupIds));\n\t\t}\n\t}\n}\n"],"mappings":";;;;wzCA0BqBA,GAAcC,EADlCC,EAAe,mDAAkDC,EAmHhEC,EAAS,UAASC,EAoHlBC,EAAe,WAAUC,EA+EzBD,EAAe,YAAWE,EAS1BF,EAAe,YAAWG,EAS1BH,EAAe,YAAWI,EAS1BJ,EAAe,YAAWL,EAAAU,GAAAC,EAAA,SAAAC,GAAA,SAAAb,IAAA,IAAAc,EAAA,QAAAC,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAA,CAAAF,EAAAE,GAAAJ,UAAAI,EAAA,CAAAN,EAAAD,EAAAQ,KAAAC,QAAAJ,IAAAI,KAAAR,EA7UnBS,mBAAgC,GAAE,OAAAT,CAAA,CAAAU,EAAAxB,EAAAyB,EAAAzB,EAAAa,GAAA,IAAAa,EAAA1B,EAAA2B,UAQ1CD,EAIAE,qBAAA,SAAAA,IACC,OAAON,KAAKO,KAAKC,kBAAkBC,uBAAuBC,uBAAuBV,KAAKO,KAAKI,uBAC5F,EAEAP,EAIMQ,eAANC,eAAMD,IACL,MAAME,EAAQd,KAAKO,KAAKQ,UAAUC,WAElC,MAAMC,EAAWC,EAAUC,kBAAkBC,UAC7C,MAAMC,EAAuBJ,EAASK,KAAMC,IAAsBC,EAAgBC,sBAAsBF,IACxG,GAAIF,EAAsB,CACzBrB,KAAKO,KAAKmB,cAAc,MAExB,MACD,CACA,IAAKZ,EAAMa,kBAAkBC,EAAYC,0BAA2B,CACnE7B,KAAK8B,gBACL,MACD,CACA,IACCZ,EAAUa,0BACJjB,EAAMkB,YAAYJ,EAAYC,yBACrC,CAAE,MAAOI,GACRC,EAAIC,QAAQ,yCACb,CACD,EAEA/B,EAGAgC,kBAAA,SAAAA,IACCpC,KAAKO,KAAKQ,UAAUC,WAAWqB,aAAaT,EAAYC,0BACxD7B,KAAK8B,cAAc,KACpB,EAEA1B,EAIA0B,cAAA,SAAAA,EAAcQ,GACbpB,EAAUa,oBACV/B,KAAKO,KAAKmB,cAAc,OACxB,IAAK,MAAMa,KAAWvC,KAAKC,mBAAoB,CAC7CsC,EAA+CT,cAAcQ,EAC/D,CACAtC,KAAKC,mBAAqB,GAC1BD,KAAKO,KAAKQ,UAAUC,SAAS,MAAMwB,YAAY,sBAAuB,MACvE,EAEApC,EAMAqC,gBAAA,SAAAA,EACCC,EACAC,EACAC,GAEA,GAAIA,GAAgBC,qBAAqBC,YAAY,kBAAmB,CAEvE,IAAIC,EAAkB/C,KAAKO,KAAKQ,WAAWiC,OAC3CJ,GAAgBK,sBAChB,MACD,CACA,MAAMC,EAAoBlD,KAAKO,KAAKC,kBAAkBC,uBACtD,MAAM0C,EAAsBD,EAAkBE,6BAC7CpD,KAAKO,KAAKI,uBACV+B,GAGD1C,KAAKqD,gBAAgB,GAAIF,GAAqBxD,OAASwD,EAAsB,CAACT,GAA6BC,GAC3G3C,KAAKO,KAAKQ,UAAUC,SAAS,MAAMwB,YAAY,sBAAuB,KACvE,EAEApC,EAIAkD,cAAA,SAAAA,EAAcC,GACb,IAAK,MAAMhB,KAAWvC,KAAKC,mBAAoB,CAC9C,GAAIsC,IAAYgB,EAAmB,CACjChB,EAA+CiB,8BACjD,MAAO,GAAIjB,IAAYgB,EAAmB,CACzChB,EAAQkB,OACT,CACD,CACD,EAEArD,EAQMiD,gBAFNxC,eAEMwC,EAAgBpD,EAA+ByD,EAAsBf,GAC1E,GAAI3C,KAAK2D,qBAAsB,CAE9B3D,KAAK2D,uBACL3D,KAAK2D,qBAAuBC,gBACtB5D,KAAKY,gBACZ,CACA,MAAMiD,EAA4B7D,KAAKC,mBAAmB6D,IAAKvB,GAAqBA,EAAQwB,SAC5F,IAAK,MAAMxB,KAAWtC,EAAoB,CACzC,IAAK4D,EAA0BG,SAASzB,EAAQwB,SAAU,CACzD/D,KAAKC,mBAAmBgE,KAAK1B,EAC9B,CACD,CACAvC,KAAKkE,6BAA+BvB,EACpC,MACD,EAEAvC,EAKA+D,kCAAA,SAAAA,EAAkCzB,GACjC,OAAO1C,KAAKO,KACVC,kBACAC,uBACA0D,kCAAkCnE,KAAKO,KAAKI,uBAAwB+B,EACvE,EAEAtC,EAIMgE,0BAANvD,eAAMuD,EAA0BC,GAC/BrE,KAAKsE,aAAe,IAAIC,QAAkB,CAACC,EAASC,KACnDJ,EAAMK,YAAYC,gBAAgB,iBAAmBC,IACpD,MAAMC,EAAWD,EAAoBE,aAAa,WAClD,GAAID,EAAU,CACbL,EAAQI,EACT,KAAO,CACNH,EAAOG,EACR,MAGF,UACO5E,KAAKsE,aACXtE,KAAKsE,aAAeV,UACpB,MAAMmB,EAAiBC,EAAIC,qBAAqB,eAChD,GAAIF,EAAgB,CACnBG,EAAaC,KAAKJ,EAAeK,QAAQ,uBAC1C,CACApF,KAAK8B,eACN,CAAE,MAAO8C,GACR5E,KAAKsE,aAAeV,UACpB5D,KAAKqF,4BACN,CACD,EAEAjF,EAGAiF,2BAAA,SAAAA,IACC,MAAMC,EAAYtF,KAAKO,KAAKQ,UAAUC,WAAWuE,eAEjD,MAAMtE,EAAWC,EAAUC,kBAAkBC,UAC7C,GAAIH,EAAStB,OAAQ,CACpBK,KAAKO,KAAKmB,cAAc,MACxB1B,KAAKwF,4CACN,CACA,IAAKxF,KAAKkE,6BAA8B,CACvC,MACD,CACA,IAAK,MAAM3C,KAAWN,EAAU,CAC/B,IAAK,MAAMwE,KAAUlE,EAAQmE,aAAc,CAC1C,MAAMC,EAAoBL,EAAUM,qBAAqBN,EAAUO,YAAYJ,IAC/E,MAAMK,EAA+BH,EAClCI,EAAmBC,4BAAqCL,GACxD,KACH,GAAIM,EAAWH,GAA8BI,cAAe,CAC3D,MAAMC,EACJL,GAA2EI,cAAcE,oBAAsB,GACjH,GAAIpG,KAAKmE,kCAAkCgC,GAA2B,CACrEnG,KAAKyC,gBAAgB0D,EAA0BnG,KAAKkE,6BACrD,CACD,CACD,CACD,CACD,EAEA9D,EAGMiG,kBAANxF,eAAMwF,IACL,GAAIrG,KAAK2D,sBAAwB3D,KAAKsE,aAAc,CAEnD,MACD,CACA,MAAMgC,EAAkB,IAAI/B,QAAc,CAACC,EAASC,KACnDzE,KAAK2D,qBAAuBc,EAC5B8B,WAAW,IAAM/B,IAAW,OAE7B,UACO8B,EACNtG,KAAK2D,qBAAuBC,UAC5B5D,KAAKY,gBACN,CAAE,MAAO4F,GACR,CAEF,EAEApG,EAKMqG,mBADN5F,eACM4F,IACL,GAAIzG,KAAKC,mBAAmBN,OAAS,EAAG,CAEvC,GAAIK,KAAK2D,qBAAsB,CAC9B3D,KAAK2D,uBACL3D,KAAK2D,qBAAuBC,SAC7B,CACA,IAAK5D,KAAKO,KAAKQ,UAAUC,WAAWW,kBAAkBC,EAAYC,0BAA2B,CAE5F7B,KAAK8B,gBACL,OAAO,KACR,CACA,IACC,GAAI9B,KAAKsE,aAAc,OAChBtE,KAAKsE,YACZ,KAAO,CACN,MAAMoC,QAAqB1G,KAAK2G,uDAChC,GAAID,IAAiB,OAAQ,OAEtB1G,KAAKY,iBACX,GAAIZ,KAAKO,KAAKQ,UAAUC,WAAWW,kBAAkBC,EAAYC,0BAA2B,CAE3F7B,KAAKsD,cAActD,KAAKC,mBAAmB,IAC3C,OAAO,IACR,CACD,MAAO,GAAIyG,IAAiB,SAAU,CACrC1G,KAAKsD,cAActD,KAAKC,mBAAmB,IAC3C,OAAO,IACR,KAAO,CAEND,KAAKoC,mBACN,CACA,OAAO,KACR,CACD,CAAE,MAAOoE,GACRxG,KAAKsD,cAActD,KAAKC,mBAAmB,IAC3C,OAAO,IACR,CACD,CACA,OAAO,KACR,EAEAG,EAIMuG,qDAAN9F,eAAM8F,IACL,OAAO,IAAIpC,QAAuBC,IACjC,IAAIoC,EAAuB5G,KAAKO,KAAKQ,UAAWyD,GAASxB,QAE3D,EAEA5C,EAIMyG,0BAANhG,eAAMgG,IACL,GAAI7G,KAAKC,mBAAmBN,OAAS,EAAG,CACvC,GAAIK,KAAK2D,qBAAsB,CAC9B3D,KAAK2D,uBACL3D,KAAK2D,qBAAuBC,SAC7B,CACA,IAAK5D,KAAKO,KAAKQ,UAAUC,WAAWW,kBAAkBC,EAAYC,0BAA2B,CAE5F7B,KAAK8B,gBACL,OAAOyC,QAAQC,SAChB,CACA,IAAIsC,EAAmB9G,KAAKO,KAAKQ,WAAWiC,OAE5C,OAAOuB,QAAQE,QAChB,CACA,OAAOF,QAAQC,SAChB,EAEApE,EAKM2G,aADNlG,eACMkG,IACL,OAAO/G,KAAK6G,2BACb,EAEAzG,EAKM4G,eADNnG,eACMmG,IACL,OAAOhH,KAAK6G,2BACb,EAEAzG,EAKM6G,eADNpG,eACMoG,IACL,OAAOjH,KAAK6G,2BACb,EAEAzG,EAKM8G,sBADNrG,eACMqG,IACL,OAAOlH,KAAK6G,2BACb,EAEAzG,EAGQoF,2CAAR,SAAQA,IAGP,MAAM2B,EACJnH,KAAKO,KACJ6G,aACCC,sBAAsB,KAAOC,GAAiCA,EAAcC,IAAa,yBAE3E,GAElB,IAAK,MAAMhF,KAAW4E,EAAgB,CACrC,MAAMK,EAAqB,IAAIC,IAAIlF,EAAQmF,oBAC3CF,EAAmBG,IAAI,cACvBpF,EAAQqF,iBAAiB/H,MAAMgI,KAAKL,GACrC,CACD,EAAC,OAAA9I,CAAA,CAvB0B,CAhVgBoJ,GAAuBC,EAAAzI,EAAAe,UAAA,mBAAAxB,GAAAmJ,OAAAC,yBAAA3I,EAAAe,UAAA,mBAAAf,EAAAe,WAAA0H,EAAAzI,EAAAe,UAAA,sBAAAtB,GAAAiJ,OAAAC,yBAAA3I,EAAAe,UAAA,sBAAAf,EAAAe,WAAA0H,EAAAzI,EAAAe,UAAA,gBAAApB,GAAA+I,OAAAC,yBAAA3I,EAAAe,UAAA,gBAAAf,EAAAe,WAAA0H,EAAAzI,EAAAe,UAAA,kBAAAnB,GAAA8I,OAAAC,yBAAA3I,EAAAe,UAAA,kBAAAf,EAAAe,WAAA0H,EAAAzI,EAAAe,UAAA,kBAAAlB,GAAA6I,OAAAC,yBAAA3I,EAAAe,UAAA,kBAAAf,EAAAe,WAAA0H,EAAAzI,EAAAe,UAAA,yBAAAjB,GAAA4I,OAAAC,yBAAA3I,EAAAe,UAAA,yBAAAf,EAAAe,WAAAf,KAAAD,GAAAa,EAAAxB,EAAA,OAAAwB,CAAA","ignoreList":[]}
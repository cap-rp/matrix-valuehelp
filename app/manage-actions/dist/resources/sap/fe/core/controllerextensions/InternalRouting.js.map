{"version":3,"file":"InternalRouting.js","names":["InternalRouting","_dec","defineUI5Class","_dec2","methodOverride","_dec3","_dec4","publicExtension","_dec5","extensible","OverrideExecution","After","_dec6","_dec7","_dec8","_dec9","_dec10","_dec11","_dec12","_dec13","_dec14","_dec15","finalExtension","_dec16","_dec17","_dec18","_dec19","_dec20","_dec21","_dec22","Before","_class","_class2","_ControllerExtension","apply","this","arguments","_inheritsLoose","_proto","prototype","onExit","_oRoutingService","_fnRouteMatchedBound","detachRouteMatched","onInit","_oView","base","getView","_oAppComponent","CommonUtils","getAppComponent","_oPageComponent","Component","getOwnerComponentFor","_oRouter","getRouter","_oRouterProxy","getRouterProxy","Error","getService","then","oRoutingService","isA","_onRouteMatched","bind","attachRouteMatched","_oTargetInformation","getTargetInformationFor","catch","onRouteMatched","onRouteMatchedFinished","onBeforeBinding","_bindingContext","_mParameters","beforeSetBindingContext","bindingContext","oRouting","getController","routing","onAfterBinding","getRootViewController","onContextBoundToView","afterSetBindingContext","deferredCreation","navigateToTarget","async","oContext","sNavigationTargetName","bPreserveHistory","delayedUsage","oNavigationConfiguration","getNavigationConfiguration","oDetailRoute","detail","sRouteName","route","mParameterMapping","parameters","navigateTo","getHashForNavigation","context","navigationTargetName","navigationConfiguration","detailRoute","routeName","parameterMapping","getHashFromRoute","navigateToRoute","sTargetRouteName","oParameters","navigateToContext","length","undefined","createOnNavigateParameters","mode","activateRouteMatchSynchronization","createContextPromise","createdContext","checkNoHashChange","editable","persistOPScroll","updateFCLLevel","forceFocus","oError","Log","error","callExtension","internalModel","getModel","setProperty","contextToNavigate","hiddenBinding","backPath","getPathToNavigateBack","getPath","bindContext","getBoundContext","overrideNav","onBeforeNavigation","destroy","Promise","resolve","FCLLevel","getFCLLevel","reason","NavigationReason","RowPress","model","metaModel","getMetaModel","isPathOnDraftRoot","contextForNavigation","getContextForNavigationWithCollaboration","getContextForNavigationFromTreeOrAnalyticalTable","getViewData","originalContext","ModelHelper","isCollaborationDraftSupported","getProperty","draftOrActiveContext","getDraftOrActiveContext","objectPath","getInvolvedDataModelObjects","getMetaContext","redirectedToNonDraft","targetEntityType","annotations","UI","HeaderInfo","TypeName","name","isFclEnabled","contextToReplaceWith","getKeepAliveContext","replaceWith","EditState","setEditStateDirty","parentBinding","getBinding","aggregation","getAggregation","hierarchyQualifier","group","aggregate","navigateBackFromContext","navigateForwardToContext","getBindingContext","navigateBackFromTransientState","sHash","getHash","includes","navBack","navigateToMessagePage","sErrorMessage","mParameters","navToHash","getDefaultCreateHash","displayErrorPage","isCurrentStateImpactedBy","_isViewPartOfRoute","routeInformation","aTargets","targets","targetName","viewLevel","routeLevel","getRoutingService","addBindingCleanupPromise","setTimeout","collaborativeDraft","isConnected","disconnect","_setBindingContext","_buildBindingPath","routeArguments","bindingPattern","navigationParameters","path","replace","deferred","sKey","sValue","bTargetEditable","bActionCreate","oEvent","getParameter","getBindingContextPattern","contextPattern","mArguments","getParameters","oNavigationParameters","bindPromise","oModel","_bindDeferred","EditFlowAction","isOpenInEditMode","_bindPageForEdit","_bindPage","finally","toString","updateUIStateForView","targetPath","createDeferredContext","listBinding","parentContext","data","_bindPageToContext","technicalPath","resolvePath","isStickyEditMode","isSticky","isStickySessionSupported","activeContext","useContext","_createContext","editFlow","editDocument","_bindPageToPath","resourceBundle","Library","getResourceBundleFor","getText","title","description","message","e","messageHandler","showMessages","sTargetPath","oCurrentContext","_getBindingContext","sCurrentPath","oUseContext","oRootViewController","shouldRefreshContext","hasPendingChanges","isDraftSupported","resetChanges","getSideEffectsService","requestSideEffects","$NavigationPropertyPath","getGroupId","err","bPersistOPScroll","showPlaceholder","bShowPlaceholder","AppStateChanged","RestoreHistory","isEditStateDirty","_refreshBindingContext","oParentListBinding","_setKeepAlive","isExiting","isContextUsedInPages","sPath","oPageComponent","sEntitySet","getEntitySet","sContextPath","getContextPath","oMetaModel","$$groupId","$$updateGroupId","$$patchWithoutSideEffects","inlineEditFlow","isInlineEditPossible","INLINEEDIT_UPDATEGROUPID","oDraftRoot","getObject","oDraftNode","dataModelObject","getContext","alternateAndSecondaryKeys","getAlternateAndSecondaryKeys","targetEntitySet","semanticKeys","Common","SemanticKey","map","key","value","_getKeepAliveContext","propertiesToRequest","concat","requestProperty","requestObject","propertiesToSelect","sMessagesPath","getMessagesPath","push","$select","join","oPreviousBinding","getUpdateGroupId","oHiddenBinding","attachEventOnce","BusyLocker","lock","holdMessagesForControl","onDataReceived","boundContext","addSelf","isLocked","unlock","mParams","errorStatus","status","cause","oResourceBundle","isInitialLoad503Error","shellBack","isDataReceivedError","control","releaseHoldByControl","oBindingContext","oSideEffectsService","sRootContextPath","aNavigationPropertyPaths","aPropertyPaths","oSideEffects","targetProperties","targetEntities","getBindingPaths","oBinding","aDependentBindings","sRelativePath","slice","getDependentBindings","item","i","reduce","targetProperty","index","indexOf","oPreviousContext","oTargetControl","setBindingContext","isKeepAlive","bKeepAlive","fnBeforeDestroy","bRequestMessages","endsWith","sMetaPath","getMetaPath","setKeepAlive","keptAliveSegments","split","additionnalSegments","pop","keptAlivePath","oKeepAliveContext","reverse","additionnalPath","switchFullScreen","oSource","oFCLHelperModel","bIsFullScreen","sNextLayout","getRightmostContext","_routing","layout","warning","closeColumn","oViewData","noPreservationCache","isDocumentModified","UiModelConstants","DocumentModified","isHiddenDraftEnabled","getEnvironmentCapabilities","getCapabilities","HiddenDraft","enabled","skipDiscardPopover","skipBackNavigation","cancelDocument","draft","processDataLossOrDraftDiscardConfirmation","Function","NavigationType","BackNavigation","messageHandling","removeTransistionMessageForContext","ControllerExtension","_applyDecoratedDescriptor","Object","getOwnPropertyDescriptor"],"sources":["./InternalRouting.ts"],"sourcesContent":["import type { EntitySet, EntityType } from \"@sap-ux/vocabularies-types\";\nimport Log from \"sap/base/Log\";\nimport type { EnhanceWithUI5 } from \"sap/fe/base/ClassSupport\";\nimport { defineUI5Class, extensible, finalExtension, methodOverride, publicExtension } from \"sap/fe/base/ClassSupport\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport type { FEView } from \"sap/fe/core/BaseController\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type PageController from \"sap/fe/core/PageController\";\nimport type TemplateComponent from \"sap/fe/core/TemplateComponent\";\nimport BusyLocker from \"sap/fe/core/controllerextensions/BusyLocker\";\nimport { type NavigationToErrorPageResult, type ShowMessagesParameters } from \"sap/fe/core/controllerextensions/MessageHandler\";\nimport type { BindContextParameters } from \"sap/fe/core/controllerextensions/editFlow/draft\";\nimport draft from \"sap/fe/core/controllerextensions/editFlow/draft\";\nimport { getDraftOrActiveContext, isPathOnDraftRoot, resolvePath } from \"sap/fe/core/controllerextensions/routing/ContextPathHelper\";\nimport NavigationReason from \"sap/fe/core/controllerextensions/routing/NavigationReason\";\nimport type RouterProxy from \"sap/fe/core/controllerextensions/routing/RouterProxy\";\nimport EditState from \"sap/fe/core/helpers/EditState\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport type FclController from \"sap/fe/core/rootView/Fcl.controller\";\nimport type { RoutingNavigationInfo, RoutingNavigationParameters, RoutingService } from \"sap/fe/core/services/RoutingServiceFactory\";\nimport type Event from \"sap/ui/base/Event\";\nimport Component from \"sap/ui/core/Component\";\nimport Library from \"sap/ui/core/Lib\";\nimport type { RoutingTarget } from \"sap/ui/core/Manifest\";\nimport ControllerExtension from \"sap/ui/core/mvc/ControllerExtension\";\nimport OverrideExecution from \"sap/ui/core/mvc/OverrideExecution\";\nimport type Router from \"sap/ui/core/routing/Router\";\nimport type Binding from \"sap/ui/model/Binding\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataContextBinding from \"sap/ui/model/odata/v4/ODataContextBinding\";\nimport type ODataListBinding from \"sap/ui/model/odata/v4/ODataListBinding\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport type ODataPropertyBinding from \"sap/ui/model/odata/v4/ODataPropertyBinding\";\nimport type { HiddenDraft } from \"../converters/ManifestSettings\";\nimport { getInvolvedDataModelObjects } from \"../converters/MetaModelConverter\";\nimport type { SideEffectsTargetType } from \"../services/SideEffectsServiceFactory\";\nimport { addSelf } from \"./collaboration/CollaborationCommon\";\nimport UiModelConstants from \"./editFlow/editFlowConstants\";\nimport messageHandling from \"./messageHandler/messageHandling\";\n\ntype RouteInformation = {\n\ttargets?: unknown[];\n\trouteLevel: number;\n};\n/**\n * {@link sap.ui.core.mvc.ControllerExtension Controller extension}\n * @since 1.74.0\n */\n@defineUI5Class(\"sap.fe.core.controllerextensions.InternalRouting\")\nclass InternalRouting extends ControllerExtension {\n\tprivate base!: PageController;\n\n\tprivate _oView!: FEView;\n\n\tprivate _oAppComponent!: AppComponent;\n\n\tprivate _oPageComponent!: EnhanceWithUI5<TemplateComponent> | null;\n\n\tprivate _oRouter!: Router;\n\n\tprivate _oRoutingService!: RoutingService;\n\n\tprivate _oRouterProxy!: RouterProxy;\n\n\tprivate _fnRouteMatchedBound?: Function;\n\n\tprotected _oTargetInformation!: RoutingTarget;\n\n\t@methodOverride()\n\tonExit(): void {\n\t\tif (this._oRoutingService && this._fnRouteMatchedBound) {\n\t\t\tthis._oRoutingService.detachRouteMatched(this._fnRouteMatchedBound);\n\t\t}\n\t}\n\n\t@methodOverride()\n\tonInit(): void {\n\t\tthis._oView = this.base.getView();\n\t\tthis._oAppComponent = CommonUtils.getAppComponent(this._oView);\n\t\tthis._oPageComponent = Component.getOwnerComponentFor(this._oView) as EnhanceWithUI5<TemplateComponent>;\n\t\tthis._oRouter = this._oAppComponent.getRouter();\n\t\tthis._oRouterProxy = this._oAppComponent.getRouterProxy();\n\n\t\tif (!this._oAppComponent || !this._oPageComponent) {\n\t\t\tthrow new Error(\"Failed to initialize controler extension 'sap.fe.core.controllerextesions.InternalRouting\");\n\t\t}\n\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t// @ts-ignore\n\t\tif (this._oAppComponent === this._oPageComponent) {\n\t\t\t// The view isn't hosted in a dedicated UIComponent, but directly in the app\n\t\t\t// --> just keep the view\n\t\t\tthis._oPageComponent = null;\n\t\t}\n\n\t\tthis._oAppComponent\n\t\t\t.getService(\"routingService\")\n\t\t\t.then((oRoutingService: RoutingService) => {\n\t\t\t\tthis._oRoutingService = oRoutingService;\n\t\t\t\tif (this._oPageComponent?.isA(\"sap.fe.core.ReuseComponent\") !== true) {\n\t\t\t\t\t// Reuse components can potentially embed a view with a page controller, we want to avoid attaching the route matched event in this case\n\t\t\t\t\tthis._fnRouteMatchedBound = this._onRouteMatched.bind(this);\n\t\t\t\t\tthis._oRoutingService.attachRouteMatched({}, this._fnRouteMatchedBound);\n\t\t\t\t}\n\t\t\t\tthis._oTargetInformation = oRoutingService.getTargetInformationFor(this._oPageComponent || this._oView)! ?? {};\n\t\t\t\treturn;\n\t\t\t})\n\t\t\t.catch(function () {\n\t\t\t\tthrow new Error(\"This controller extension cannot work without a 'routingService' on the main AppComponent\");\n\t\t\t});\n\t}\n\n\t/**\n\t * Triggered every time this controller is a navigation target.\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\tonRouteMatched(): void {\n\t\t/**/\n\t}\n\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\tonRouteMatchedFinished(): void {\n\t\t/**/\n\t}\n\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\tonBeforeBinding(_bindingContext: Context | null, _mParameters?: unknown): void {}\n\n\tbeforeSetBindingContext(bindingContext: Context | null, _mParameters?: unknown): void {\n\t\tthis.onBeforeBinding(bindingContext, _mParameters);\n\t\tconst oRouting = this.base.getView().getController().routing;\n\t\tif (oRouting && oRouting.onBeforeBinding) {\n\t\t\toRouting.onBeforeBinding(bindingContext);\n\t\t}\n\t}\n\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\tonAfterBinding(bindingContext: Context | null, _mParameters?: unknown): void {\n\t\tthis._oAppComponent.getRootViewController().onContextBoundToView(bindingContext);\n\t}\n\n\tafterSetBindingContext(bindingContext: Context | null, _mParameters?: object): void {\n\t\tthis.onAfterBinding(bindingContext, { ..._mParameters, deferredCreation: true });\n\t\tconst oRouting = this.base.getView().getController().routing;\n\t\tif (oRouting && oRouting.onAfterBinding) {\n\t\t\toRouting.onAfterBinding(bindingContext);\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////////////\n\t// Methods triggering a navigation after a user action\n\t// (e.g. click on a table row, button, etc...)\n\t///////////////////////////////////////////////////////////\n\n\t/**\n\t * Navigates to the specified navigation target.\n\t * @param oContext Context instance\n\t * @param sNavigationTargetName Name of the navigation target\n\t * @param bPreserveHistory True to force the new URL to be added at the end of the browser history (no replace)\n\t * @param delayedUsage True to return a function for executing the navigation, False to execute the navigation immediately\n\t */\n\tasync navigateToTarget(\n\t\toContext: Context,\n\t\tsNavigationTargetName: string,\n\t\tbPreserveHistory?: boolean,\n\t\tdelayedUsage?: true\n\t): Promise<() => void>;\n\n\t@publicExtension()\n\tasync navigateToTarget(\n\t\toContext: Context,\n\t\tsNavigationTargetName: string,\n\t\tbPreserveHistory?: boolean,\n\t\tdelayedUsage?: boolean\n\t): Promise<(() => void) | void> {\n\t\tconst oNavigationConfiguration =\n\t\t\tthis._oPageComponent &&\n\t\t\tthis._oPageComponent.getNavigationConfiguration &&\n\t\t\tthis._oPageComponent.getNavigationConfiguration(sNavigationTargetName);\n\t\tif (oNavigationConfiguration) {\n\t\t\tconst oDetailRoute = oNavigationConfiguration.detail;\n\t\t\tconst sRouteName = oDetailRoute.route;\n\t\t\tconst mParameterMapping = oDetailRoute.parameters;\n\t\t\treturn this._oRoutingService.navigateTo(oContext, sRouteName, mParameterMapping, bPreserveHistory, delayedUsage);\n\t\t} else {\n\t\t\treturn this._oRoutingService.navigateTo(oContext, null, null, bPreserveHistory, delayedUsage);\n\t\t}\n\t}\n\n\t/**\n\t * Get the Hash we're navigating to.\n\t * @param context Context instance\n\t * @param navigationTargetName Name of the navigation target\n\t * @returns The Hash we're navigating to\n\t */\n\tasync getHashForNavigation(context: Context, navigationTargetName: string): Promise<string> {\n\t\tconst navigationConfiguration = this?._oPageComponent?.getNavigationConfiguration(navigationTargetName);\n\t\tif (navigationConfiguration) {\n\t\t\tconst detailRoute = navigationConfiguration.detail;\n\t\t\tconst routeName = detailRoute.route;\n\t\t\tconst parameterMapping = detailRoute.parameters;\n\t\t\treturn this._oRoutingService.getHashFromRoute(context, routeName, parameterMapping);\n\t\t} else {\n\t\t\treturn this._oRoutingService.getHashFromRoute(context, null);\n\t\t}\n\t}\n\n\t/**\n\t * Navigates to the specified navigation target route.\n\t * @param sTargetRouteName Name of the target route\n\t * @param [oParameters] Parameters to be used with route to create the target hash\n\t * @returns Promise that is resolved when the navigation is finalized\n\t */\n\t@publicExtension()\n\tasync navigateToRoute(sTargetRouteName: string, oParameters?: object): Promise<boolean> {\n\t\treturn this._oRoutingService.navigateToRoute(sTargetRouteName, oParameters);\n\t}\n\n\t/**\n\t * Navigates to a specific context.\n\t * @param context The context to be navigated to\n\t * @param parameters Optional navigation parameters\n\t * @returns Promise resolved to 'true' when the navigation has been triggered, 'false' if the navigation did not happen\n\t */\n\tasync navigateToContext(context: Context | ODataListBinding, parameters: RoutingNavigationParameters = {}): Promise<boolean> {\n\t\tif (context.isA<ODataListBinding>(\"sap.ui.model.odata.v4.ODataListBinding\")) {\n\t\t\tif (parameters.createOnNavigateParameters?.mode === \"Async\") {\n\t\t\t\t// the context is either created async (Promise)\n\t\t\t\t// We need to activate the routeMatchSynchro on the RouterProxy to avoid that\n\t\t\t\t// the subsequent call to navigateToContext conflicts with the current one\n\t\t\t\tthis._oRouterProxy.activateRouteMatchSynchronization();\n\n\t\t\t\tparameters.createOnNavigateParameters.createContextPromise\n\t\t\t\t\t.then(async (createdContext) => {\n\t\t\t\t\t\t// once the context is returned we navigate into it\n\t\t\t\t\t\treturn this.navigateToContext(createdContext, {\n\t\t\t\t\t\t\tcheckNoHashChange: parameters.checkNoHashChange,\n\t\t\t\t\t\t\teditable: parameters.editable,\n\t\t\t\t\t\t\tpersistOPScroll: parameters.persistOPScroll,\n\t\t\t\t\t\t\tupdateFCLLevel: parameters.updateFCLLevel,\n\t\t\t\t\t\t\tforceFocus: parameters.forceFocus\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.catch(function (oError: unknown) {\n\t\t\t\t\t\tLog.error(\"Error with the async context\", oError as string);\n\t\t\t\t\t});\n\t\t\t} else if (parameters.createOnNavigateParameters?.mode !== \"Deferred\") {\n\t\t\t\t// Navigate to a list binding not yet supported\n\t\t\t\tthrow \"navigation to a list binding is not yet supported\";\n\t\t\t}\n\t\t} else if (parameters.callExtension) {\n\t\t\tconst internalModel = this._oView.getModel(\"internal\");\n\t\t\tinternalModel.setProperty(\"/paginatorCurrentContext\", null);\n\n\t\t\t// Storing the selected context to use it in internal route navigation if necessary.\n\t\t\tlet contextToNavigate: Context | null = context;\n\t\t\tlet hiddenBinding: ODataContextBinding | undefined;\n\t\t\tif (parameters.updateFCLLevel === -1) {\n\t\t\t\t// If we're navigating back, we need to find the \"parent\" context\n\t\t\t\tconst backPath = this._oRoutingService.getPathToNavigateBack(context.getPath());\n\t\t\t\t// As we don't call the extension when navigating back to the LR, backPath is never empty so we can safely create a context\n\t\t\t\thiddenBinding = context.getModel().bindContext(backPath);\n\t\t\t\tcontextToNavigate = hiddenBinding.getBoundContext();\n\t\t\t}\n\t\t\tconst overrideNav = await this.base.getView().getController().routing.onBeforeNavigation({ bindingContext: contextToNavigate });\n\t\t\thiddenBinding?.destroy();\n\t\t\tif (overrideNav) {\n\t\t\t\tinternalModel.setProperty(\"/paginatorCurrentContext\", context);\n\t\t\t\treturn Promise.resolve(true);\n\t\t\t}\n\t\t}\n\n\t\tparameters.FCLLevel = this.getFCLLevel();\n\n\t\t// In case we're navigating from a table in a ListReport with draft, there's special handling for collaboration and tree table.\n\t\t// We may not navigate to the context the user clicked on.\n\t\tif (parameters.reason === NavigationReason.RowPress && context.isA<Context>(\"sap.ui.model.odata.v4.Context\")) {\n\t\t\tconst model = context.getModel();\n\t\t\tconst metaModel = model.getMetaModel();\n\n\t\t\tif (isPathOnDraftRoot(context.getPath(), metaModel)) {\n\t\t\t\tconst contextForNavigation =\n\t\t\t\t\t(await this.getContextForNavigationWithCollaboration(context, parameters)) ??\n\t\t\t\t\t(await this.getContextForNavigationFromTreeOrAnalyticalTable(context));\n\n\t\t\t\t// Use another instance for navigation\n\t\t\t\tif (contextForNavigation) {\n\t\t\t\t\tcontext = contextForNavigation;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this._oRoutingService.navigateToContext(context, parameters, this._oView.getViewData(), this._oTargetInformation);\n\t}\n\n\t/**\n\t * Retrieves the context to use for navigation in case we're navigating to a draft instance from the LR and we're in a collaboration application.\n\t * @param originalContext\n\t * @param parameters\n\t * @returns The context to use for navigation if it's different from the original context, null otherwise\n\t */\n\tprivate async getContextForNavigationWithCollaboration(\n\t\toriginalContext: Context,\n\t\tparameters: RoutingNavigationParameters\n\t): Promise<Context | null> {\n\t\tconst model = originalContext.getModel();\n\t\tconst metaModel = model.getMetaModel();\n\t\tif (ModelHelper.isCollaborationDraftSupported(metaModel) && originalContext.getProperty(\"IsActiveEntity\") === false) {\n\t\t\t// If we're in a collaboration application, and we're navigating to a draft instance from the LR,\n\t\t\t// We want to check if the draft instance exists first. Otherwise we navigate to the original (draft) version.\n\t\t\tconst draftOrActiveContext = await getDraftOrActiveContext(originalContext);\n\n\t\t\tif (draftOrActiveContext !== null && originalContext.getPath() !== draftOrActiveContext.getPath()) {\n\t\t\t\t// Notify the user that we have navigated to the saved instance\n\t\t\t\tconst objectPath = getInvolvedDataModelObjects(metaModel.getMetaContext(originalContext.getPath()));\n\t\t\t\tparameters.redirectedToNonDraft =\n\t\t\t\t\t(objectPath.targetEntityType.annotations.UI?.HeaderInfo?.TypeName as unknown as string) ??\n\t\t\t\t\tobjectPath.targetEntityType.name;\n\n\t\t\t\tif (this._oAppComponent.getRootViewController().isFclEnabled()) {\n\t\t\t\t\t// FCL: replace the context in the list binding\n\t\t\t\t\tconst contextToReplaceWith = model.getKeepAliveContext(draftOrActiveContext.getPath());\n\t\t\t\t\toriginalContext.replaceWith(contextToReplaceWith);\n\t\t\t\t} else {\n\t\t\t\t\t// Fullscreen: trigger a refresh of the list binding\n\t\t\t\t\tEditState.setEditStateDirty();\n\t\t\t\t}\n\n\t\t\t\t// Use the saved instance for navigation\n\t\t\t\treturn draftOrActiveContext;\n\t\t\t}\n\t\t}\n\n\t\t// Use the original context\n\t\treturn null;\n\t}\n\n\t/**\n\t * Retrieves the context to use for navigation in case we're navigating to an active instance from the LR and we're in a Tree or Analytical table.\n\t * @param originalContext\n\t * @returns The context to use for navigation if it's different from the original context, null otherwise\n\t */\n\tprivate async getContextForNavigationFromTreeOrAnalyticalTable(originalContext: Context): Promise<Context | null> {\n\t\tconst parentBinding = originalContext.getBinding();\n\t\tif (!parentBinding.isA<ODataListBinding>(\"sap.ui.model.odata.v4.ODataListBinding\")) {\n\t\t\t// The context doesn't belong to a list binding\n\t\t\treturn null;\n\t\t}\n\t\tconst aggregation = parentBinding.getAggregation() as\n\t\t\t| { hierarchyQualifier?: string; group?: object; aggregate?: object }\n\t\t\t| undefined;\n\t\tif (!aggregation?.hierarchyQualifier && !aggregation?.group && !aggregation?.aggregate) {\n\t\t\t// The context doesn't belong to a hierarchical/analytical list binding\n\t\t\treturn null;\n\t\t}\n\n\t\tif (originalContext.getProperty(\"IsActiveEntity\") === true && originalContext.getProperty(\"HasDraftEntity\") === true) {\n\t\t\t// If we're in a Tree/Analytical table, and we're navigating to an active instance instance that has a draft,\n\t\t\t// --> We try to navigate to the draft instance (if it still exists)\n\t\t\tconst draftOrActiveContext = await getDraftOrActiveContext(originalContext);\n\n\t\t\tif (draftOrActiveContext !== null && originalContext.getPath() !== draftOrActiveContext.getPath()) {\n\t\t\t\t// Use the draft instance for navigation\n\t\t\t\treturn draftOrActiveContext;\n\t\t\t}\n\t\t}\n\n\t\t// Use the original context\n\t\treturn null;\n\t}\n\n\t/**\n\t * Navigates backwards from a context.\n\t * @param context Context to be navigated from\n\t * @param [parameters] Optional navigation parameters\n\t * @returns Promise resolved when the navigation has been triggered\n\t */\n\tasync navigateBackFromContext(context: Context, parameters: RoutingNavigationParameters = {}): Promise<boolean> {\n\t\tparameters.updateFCLLevel = -1;\n\n\t\treturn this.navigateToContext(context, parameters);\n\t}\n\n\t/**\n\t * Navigates forwards to a context.\n\t * @param context Context to be navigated to\n\t * @param parameters Optional navigation parameters\n\t * @returns Promise resolved when the navigation has been triggered\n\t */\n\tasync navigateForwardToContext(context: Context | ODataListBinding, parameters: RoutingNavigationParameters = {}): Promise<boolean> {\n\t\tif (this._oView.getBindingContext(\"internal\")?.getProperty(\"messageFooterContainsErrors\") === true) {\n\t\t\treturn Promise.resolve(true);\n\t\t}\n\n\t\tparameters.updateFCLLevel = 1;\n\n\t\treturn this.navigateToContext(context, parameters);\n\t}\n\n\t/**\n\t * Navigates back in history if the current hash corresponds to a transient state.\n\t */\n\t@publicExtension()\n\t@finalExtension()\n\tnavigateBackFromTransientState(): void {\n\t\tconst sHash = this._oRouterProxy.getHash();\n\n\t\t// if triggered while navigating to (...), we need to navigate back\n\t\tif (sHash.includes(\"(...)\")) {\n\t\t\tthis._oRouterProxy.navBack();\n\t\t}\n\t}\n\n\t/**\n\t * Displays an error (illustrated message) in the page.\n\t * @param sErrorMessage\n\t * @param mParameters\n\t * @returns A promise\n\t */\n\tasync navigateToMessagePage(sErrorMessage: string, mParameters: NavigationToErrorPageResult): Promise<boolean> {\n\t\tmParameters = mParameters || {};\n\t\tif (this._oRouterProxy.getHash().includes(\"i-action=create\") || this._oRouterProxy.getHash().includes(\"i-action=autoCreate\")) {\n\t\t\treturn this._oRouterProxy.navToHash(this._oRoutingService.getDefaultCreateHash());\n\t\t} else {\n\t\t\treturn this._oAppComponent.getRootViewController().displayErrorPage(sErrorMessage, mParameters, this.getFCLLevel());\n\t\t}\n\t}\n\n\t/**\n\t * Checks if one of the current views on the screen is bound to a given context.\n\t * @param oContext\n\t * @returns `true` if the state is impacted by the context\n\t */\n\t@publicExtension()\n\t@finalExtension()\n\tisCurrentStateImpactedBy(oContext: Context): boolean {\n\t\treturn this._oRoutingService.isCurrentStateImpactedBy(oContext);\n\t}\n\n\t_isViewPartOfRoute(routeInformation?: RouteInformation): boolean {\n\t\tconst aTargets = routeInformation?.targets;\n\t\tif (!aTargets || !aTargets.includes(this._oTargetInformation.targetName)) {\n\t\t\t// If the target for this view has a view level greater than the route level, it means this view comes \"after\" the route\n\t\t\t// in terms of navigation.\n\t\t\t// In such case, we remove its binding context, to avoid this view to have data if we navigate to it later on\n\t\t\t// This is done in a timeout to allow for focusout events to be processed before properly in collaborative draft\n\t\t\tif ((this._oTargetInformation.viewLevel ?? 0) >= (routeInformation?.routeLevel ?? 0)) {\n\t\t\t\tthis._oAppComponent.getRoutingService().addBindingCleanupPromise(\n\t\t\t\t\tnew Promise<void>((resolve) => {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tif (routeInformation?.routeLevel === 0 && this.base.collaborativeDraft.isConnected()) {\n\t\t\t\t\t\t\t\t// The route has level 0 --> we need to leave the collaboration session as no OP is displayed\n\t\t\t\t\t\t\t\tthis.base.collaborativeDraft.disconnect();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis._setBindingContext(null); // This also call setKeepAlive(false) on the current context\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t}, 0);\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t_buildBindingPath(\n\t\trouteArguments: Record<string, string | object>,\n\t\tbindingPattern: string,\n\t\tnavigationParameters: RoutingNavigationInfo\n\t): { path: string; deferred: boolean } {\n\t\tlet path = bindingPattern.replace(\":?query:\", \"\");\n\t\tlet deferred = false;\n\n\t\tfor (const sKey in routeArguments) {\n\t\t\tconst sValue = routeArguments[sKey];\n\n\t\t\tif (typeof sValue !== \"string\") {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (sValue === \"...\" && bindingPattern.includes(`{${sKey}}`)) {\n\t\t\t\tdeferred = true;\n\t\t\t\t// Sometimes in preferredMode = create, the edit button is shown in background when the\n\t\t\t\t// action parameter dialog shows up, setting bTargetEditable passes editable as true\n\t\t\t\t// to onBeforeBinding in _bindTargetPage function\n\t\t\t\tnavigationParameters.bTargetEditable = true;\n\t\t\t}\n\t\t\tpath = path.replace(`{${sKey}}`, sValue);\n\t\t}\n\t\tif ((routeArguments[\"?query\"] as Record<string, string>)?.[\"i-action\"]?.includes(\"create\")) {\n\t\t\tnavigationParameters.bActionCreate = true;\n\t\t}\n\n\t\t// the binding path is always absolute\n\t\tif (path && path[0] !== \"/\") {\n\t\t\tpath = `/${path}`;\n\t\t}\n\n\t\treturn { path, deferred };\n\t}\n\n\t///////////////////////////////////////////////////////////\n\t// Methods to bind the page when a route is matched\n\t///////////////////////////////////////////////////////////\n\n\t/**\n\t * Called when a route is matched.\n\t * Builds the binding context from the navigation parameters, and bind the page accordingly.\n\t * @param oEvent\n\t */\n\t_onRouteMatched(\n\t\toEvent: Event<{\n\t\t\trouteInformation?: RouteInformation;\n\t\t\troutePattern: string;\n\t\t\tnavigationInfo: RoutingNavigationInfo;\n\t\t\targuments: Record<string, string | object>;\n\t\t}>\n\t): void {\n\t\t// Check if the target for this view is part of the event targets (i.e. is a target for the current route).\n\t\t// If not, we don't need to bind it --> return\n\t\tif (!this._isViewPartOfRoute(oEvent.getParameter(\"routeInformation\"))) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Retrieve the binding context pattern\n\t\tlet bindingPattern;\n\t\tif (this._oPageComponent && this._oPageComponent.getBindingContextPattern) {\n\t\t\tbindingPattern = this._oPageComponent.getBindingContextPattern();\n\t\t}\n\t\tbindingPattern = bindingPattern ?? this._oTargetInformation.contextPattern;\n\n\t\tif (bindingPattern === null || bindingPattern === undefined) {\n\t\t\t// Don't do this if we already got sTarget == '', which is a valid target pattern\n\t\t\tbindingPattern = oEvent.getParameter(\"routePattern\");\n\t\t}\n\n\t\t// Replace the parameters by their values in the binding context pattern\n\t\tconst mArguments = oEvent.getParameters().arguments;\n\t\tconst oNavigationParameters = oEvent.getParameter(\"navigationInfo\");\n\t\tconst { path, deferred } = this._buildBindingPath(mArguments, bindingPattern, oNavigationParameters);\n\n\t\tthis.onRouteMatched();\n\n\t\tlet bindPromise;\n\t\tconst oModel = this._oView.getModel();\n\t\tif (deferred) {\n\t\t\tbindPromise = this._bindDeferred(path, oNavigationParameters);\n\t\t} else if (\n\t\t\toNavigationParameters.reason !== NavigationReason.EditFlowAction &&\n\t\t\t(this._oRouterProxy.getHash().includes(\"i-action=edit\") || (this._oPageComponent?.isOpenInEditMode?.() ?? false))\n\t\t) {\n\t\t\tbindPromise = this._bindPageForEdit(path, oModel, oNavigationParameters);\n\t\t} else {\n\t\t\tbindPromise = this._bindPage(path, oModel, oNavigationParameters);\n\t\t}\n\n\t\tbindPromise\n\t\t\t.finally(() => {\n\t\t\t\tthis.onRouteMatchedFinished();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tLog.error(\"Error during page binding \" + error.toString());\n\t\t\t});\n\n\t\tthis._oAppComponent.getRootViewController().updateUIStateForView(this._oView, this.getFCLLevel());\n\t}\n\n\t/**\n\t * Deferred binding (during object creation).\n\t * @param targetPath The path to the deffered context\n\t * @param navigationParameters Navigation parameters\n\t * @returns A promise\n\t */\n\tasync _bindDeferred(targetPath: string, navigationParameters: RoutingNavigationInfo): Promise<void> {\n\t\tthis.beforeSetBindingContext(null, { editable: navigationParameters.bTargetEditable });\n\n\t\tif (!navigationParameters.createOnNavigateParameters || navigationParameters.createOnNavigateParameters.mode === \"Deferred\") {\n\t\t\t// either the context shall be created in the target page (deferred Context) or it shall\n\t\t\t// be created async but the user refreshed the page / bookmarked this URL\n\t\t\t// TODO: currently the target component creates this document but we shall move this to\n\t\t\t// a central place\n\t\t\tif (this._oPageComponent && this._oPageComponent.createDeferredContext) {\n\t\t\t\tthis._oPageComponent.createDeferredContext(\n\t\t\t\t\ttargetPath,\n\t\t\t\t\tnavigationParameters.createOnNavigateParameters?.listBinding,\n\t\t\t\t\tnavigationParameters.createOnNavigateParameters?.parentContext,\n\t\t\t\t\tnavigationParameters.createOnNavigateParameters?.data,\n\t\t\t\t\t!!navigationParameters.bActionCreate\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// remove the context to avoid showing old data\n\t\tthis._setBindingContext(null);\n\n\t\tthis.afterSetBindingContext(null);\n\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Sets the binding context for the page from a path, if the app is started with the preferred mode edit.\n\t *\n\t * If the context points to an active entity, it is directly converted to draft using the EditFlow controller extension.\n\t * @param targetPath\n\t * @param model\n\t * @param navigationParameters\n\t * @returns A Promise resolved once the binding has been set on the page\n\t */\n\tasync _bindPageForEdit(targetPath: string, model: ODataModel, navigationParameters: RoutingNavigationInfo): Promise<void | Context> {\n\t\tif (targetPath === \"\") {\n\t\t\treturn Promise.resolve(this._bindPageToContext(null, model, navigationParameters));\n\t\t}\n\n\t\ttry {\n\t\t\tconst technicalPath: string = await resolvePath(targetPath, model, this._oRoutingService, this._oRouter);\n\t\t\tconst metaModel = model.getMetaModel();\n\t\t\t// check for sticky & sticky edit session\n\t\t\tconst isStickyEditMode = CommonUtils.isStickyEditMode(this.base.getView());\n\t\t\tconst isSticky = ModelHelper.isStickySessionSupported(metaModel);\n\t\t\tif (technicalPath.includes(\"IsActiveEntity=true\") || (isSticky && !isStickyEditMode)) {\n\t\t\t\t// create context or use the one the user clicked on\n\t\t\t\tconst activeContext =\n\t\t\t\t\tnavigationParameters.useContext?.getPath() === technicalPath\n\t\t\t\t\t\t? navigationParameters.useContext\n\t\t\t\t\t\t: this._createContext(technicalPath, model);\n\n\t\t\t\t// edit document\n\t\t\t\treturn await this.base.editFlow.editDocument(activeContext);\n\t\t\t} else {\n\t\t\t\treturn this._bindPageToPath(technicalPath, model, navigationParameters);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.core\")!;\n\n\t\t\tthis.navigateToMessagePage(resourceBundle.getText(\"C_COMMON_SAPFE_DATA_RECEIVED_ERROR\"), {\n\t\t\t\ttitle: resourceBundle.getText(\"C_COMMON_SAPFE_ERROR\"),\n\t\t\t\tdescription: (error as Error).message\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Sets the binding context of the page from a path.\n\t * @param targetPath The path to the context\n\t * @param model The OData model\n\t * @param navigationParameters Navigation parameters\n\t * @returns A Promise resolved once the binding on the page is set\n\t */\n\tasync _bindPage(targetPath: string, model: ODataModel, navigationParameters: RoutingNavigationInfo): Promise<void> {\n\t\tif (targetPath === \"\") {\n\t\t\t// The page binding is done asynchronously, to make sure _onRouteMatched is called for all targets before, and the binding cleanup promises are properly stored in the routing service.\n\t\t\treturn Promise.resolve().then(() => {\n\t\t\t\tthis._bindPageToContext(null, model, navigationParameters);\n\t\t\t\treturn;\n\t\t\t});\n\t\t}\n\n\t\ttry {\n\t\t\tconst technicalPath = await resolvePath(targetPath, model, this._oRoutingService, this._oRouter);\n\t\t\tthis._bindPageToPath(technicalPath, model, navigationParameters);\n\t\t} catch (e) {\n\t\t\tawait this.base.messageHandler.showMessages({});\n\t\t}\n\t}\n\n\t/**\n\t * Sets the binding context for the page from a path.\n\t * @param sTargetPath The path to build the context (this is a path in the model, so only technical keys are allowed).\n\t * @param oModel The OData model\n\t * @param oNavigationParameters Navigation parameters\n\t */\n\t_bindPageToPath(sTargetPath: string, oModel: ODataModel, oNavigationParameters: RoutingNavigationInfo): void {\n\t\tconst oCurrentContext = this._getBindingContext(),\n\t\t\tsCurrentPath = oCurrentContext && oCurrentContext.getPath(),\n\t\t\toUseContext = oNavigationParameters.useContext as Context | undefined | null;\n\n\t\tconst oRootViewController = this._oAppComponent.getRootViewController();\n\n\t\t// We set the binding context only if it's different from the current one\n\t\t// or if we have a context already selected\n\t\tif (oUseContext && oUseContext.getPath() === sTargetPath) {\n\t\t\tif (oUseContext !== oCurrentContext) {\n\t\t\t\tlet shouldRefreshContext = false;\n\t\t\t\t// We already have the context to be used, and it's not the current one\n\n\t\t\t\t// In case of FCL, if we're reusing a context from a table (through navigation), we refresh it to avoid outdated data\n\t\t\t\t// We don't wait for the refresh to be completed (requestRefresh), so that the corresponding query goes into the same\n\t\t\t\t// batch as the ones from controls in the page.\n\t\t\t\tif (oRootViewController.isFclEnabled() && oNavigationParameters.reason === NavigationReason.RowPress) {\n\t\t\t\t\tconst metaModel = oUseContext.getModel().getMetaModel();\n\t\t\t\t\tif (!oUseContext.getBinding().hasPendingChanges() && ModelHelper.isDraftSupported(metaModel, oUseContext.getPath())) {\n\t\t\t\t\t\tshouldRefreshContext = true;\n\t\t\t\t\t} else if (\n\t\t\t\t\t\tthis.base.collaborativeDraft.isConnected() ||\n\t\t\t\t\t\t(ModelHelper.isDraftSupported(metaModel, oUseContext.getPath()) &&\n\t\t\t\t\t\t\tModelHelper.isCollaborationDraftSupported(metaModel))\n\t\t\t\t\t) {\n\t\t\t\t\t\t// If there are pending changes but we're in collaboration draft, we force the refresh (discarding pending changes) as we need to have the latest version.\n\t\t\t\t\t\t// When navigating from LR to OP, the view is not connected yet --> check if we're in draft with collaboration from the metamodel\n\t\t\t\t\t\toUseContext.getBinding().resetChanges();\n\t\t\t\t\t\tshouldRefreshContext = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._bindPageToContext(oUseContext, oModel, oNavigationParameters);\n\t\t\t\tif (shouldRefreshContext) {\n\t\t\t\t\tthis._oAppComponent\n\t\t\t\t\t\t.getSideEffectsService()\n\t\t\t\t\t\t.requestSideEffects([{ $NavigationPropertyPath: \"\" }], oUseContext, oUseContext.getBinding().getGroupId())\n\t\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\t\tLog.error(`Cannot refresh context: ${err}`);\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if (oNavigationParameters.reason === NavigationReason.EditFlowAction) {\n\t\t\t\t// We have the same context but an editflow action happened (e.g. CancelDocument in sticky mode)\n\t\t\t\t// --> We need to call onBefore/AfterBinding to refresh the object page properly\n\t\t\t\tthis.beforeSetBindingContext(oUseContext, {\n\t\t\t\t\teditable: oNavigationParameters.bTargetEditable,\n\t\t\t\t\tlistBinding: oUseContext.getBinding(),\n\t\t\t\t\tbPersistOPScroll: oNavigationParameters.bPersistOPScroll,\n\t\t\t\t\treason: oNavigationParameters.reason,\n\t\t\t\t\tshowPlaceholder: oNavigationParameters.bShowPlaceholder\n\t\t\t\t});\n\t\t\t\tthis.afterSetBindingContext(oUseContext, { redirectedToNonDraft: oNavigationParameters?.redirectedToNonDraft });\n\t\t\t}\n\t\t} else if (sCurrentPath !== sTargetPath || oNavigationParameters.reason === NavigationReason.EditFlowAction) {\n\t\t\t// We need to create a new context for its path\n\t\t\tthis._bindPageToContext(this._createContext(sTargetPath, oModel), oModel, oNavigationParameters);\n\t\t} else if (\n\t\t\toNavigationParameters.reason !== NavigationReason.AppStateChanged &&\n\t\t\toNavigationParameters.reason !== NavigationReason.RestoreHistory &&\n\t\t\tEditState.isEditStateDirty() &&\n\t\t\t!oRootViewController.isFclEnabled() &&\n\t\t\toCurrentContext\n\t\t) {\n\t\t\tthis._refreshBindingContext(oCurrentContext);\n\t\t}\n\t}\n\n\t/**\n\t * Binds the page to a context.\n\t * @param oContext Context to be bound\n\t * @param oModel The OData model\n\t * @param oNavigationParameters Navigation parameters\n\t */\n\t_bindPageToContext(oContext: Context | null, oModel: ODataModel, oNavigationParameters: RoutingNavigationInfo): void {\n\t\tif (!oContext) {\n\t\t\tthis.beforeSetBindingContext(null);\n\t\t\tthis.afterSetBindingContext(null);\n\t\t\treturn;\n\t\t}\n\n\t\tconst oParentListBinding = oContext.getBinding();\n\t\tconst oRootViewController = this._oAppComponent.getRootViewController();\n\t\tif (oRootViewController.isFclEnabled()) {\n\t\t\tif (!oParentListBinding || !oParentListBinding.isA(\"sap.ui.model.odata.v4.ODataListBinding\")) {\n\t\t\t\t// if the parentBinding is not a listBinding, we create a new context\n\t\t\t\toContext = this._createContext(oContext.getPath(), oModel);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tthis._setKeepAlive(\n\t\t\t\t\toContext,\n\t\t\t\t\ttrue,\n\t\t\t\t\t() => {\n\t\t\t\t\t\tif (oContext && !this._oAppComponent.isExiting && oRootViewController.isContextUsedInPages(oContext)) {\n\t\t\t\t\t\t\tthis.navigateBackFromContext(oContext);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\ttrue // Load messages, otherwise they don't get refreshed later, e.g. for side effects\n\t\t\t\t);\n\t\t\t} catch (oError) {\n\t\t\t\t// setKeepAlive throws an exception if the parent listbinding doesn't have $$ownRequest=true\n\t\t\t\t// This case for custom fragments is supported, but an error is logged to make the lack of synchronization apparent\n\t\t\t\tLog.error(\n\t\t\t\t\t`View for ${oContext.getPath()} won't be synchronized. Parent listBinding must have binding parameter $$ownRequest=true`\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (!oParentListBinding || oParentListBinding.isA(\"sap.ui.model.odata.v4.ODataListBinding\")) {\n\t\t\t// We need to recreate the context otherwise we get errors\n\t\t\toContext = this._createContext(oContext.getPath(), oModel);\n\t\t}\n\n\t\t// Set the binding context with the proper before/after callbacks\n\t\tthis.beforeSetBindingContext(oContext, {\n\t\t\teditable: oNavigationParameters.bTargetEditable,\n\t\t\tlistBinding: oParentListBinding,\n\t\t\tbPersistOPScroll: oNavigationParameters.bPersistOPScroll,\n\t\t\treason: oNavigationParameters.reason,\n\t\t\tshowPlaceholder: oNavigationParameters.bShowPlaceholder\n\t\t});\n\n\t\tthis._setBindingContext(oContext);\n\t\tthis.afterSetBindingContext(oContext, { redirectedToNonDraft: oNavigationParameters?.redirectedToNonDraft });\n\t}\n\n\t/**\n\t * Creates a context from a path.\n\t * @param sPath The path\n\t * @param oModel The OData model\n\t * @returns The created context\n\t */\n\t_createContext(sPath: string, oModel: ODataModel): Context {\n\t\tconst oPageComponent = this._oPageComponent,\n\t\t\tsEntitySet = oPageComponent && oPageComponent.getEntitySet && oPageComponent.getEntitySet(),\n\t\t\tsContextPath =\n\t\t\t\t(oPageComponent && oPageComponent.getContextPath && oPageComponent.getContextPath()) || (sEntitySet && `/${sEntitySet}`),\n\t\t\toMetaModel = oModel.getMetaModel(),\n\t\t\tisCollaborationDraftSupported = ModelHelper.isCollaborationDraftSupported(oMetaModel),\n\t\t\tmParameters: BindContextParameters = {\n\t\t\t\t$$groupId: \"$auto.Heroes\",\n\t\t\t\t$$updateGroupId: \"$auto\",\n\t\t\t\t$$patchWithoutSideEffects: true\n\t\t\t};\n\t\tif (this.base.inlineEditFlow.isInlineEditPossible()) {\n\t\t\t// if inline edit is enabled on the page and this is the active entity, we need to update the group id to inline\n\t\t\tmParameters.$$updateGroupId = sPath.includes(\"IsActiveEntity=true\") ? CommonUtils.INLINEEDIT_UPDATEGROUPID : \"$auto\";\n\t\t}\n\t\t// In case of draft: $select the state flags (HasActiveEntity, HasDraftEntity, and IsActiveEntity) and semantic keys (for creating the semantic URL)\n\t\tconst oDraftRoot = oMetaModel.getObject(`${sContextPath}@com.sap.vocabularies.Common.v1.DraftRoot`);\n\t\tconst oDraftNode = oMetaModel.getObject(`${sContextPath}@com.sap.vocabularies.Common.v1.DraftNode`);\n\t\tconst dataModelObject = sContextPath\n\t\t\t? oMetaModel.getContext(sContextPath) && getInvolvedDataModelObjects(oMetaModel.getContext(sContextPath))\n\t\t\t: null;\n\t\tconst alternateAndSecondaryKeys = ModelHelper.getAlternateAndSecondaryKeys(\n\t\t\tdataModelObject?.targetEntityType as EntityType,\n\t\t\tdataModelObject?.targetEntitySet as EntitySet\n\t\t);\n\t\tconst semanticKeys = oDraftRoot\n\t\t\t? dataModelObject?.targetEntityType.annotations.Common?.SemanticKey?.map((key) => key.value) ?? []\n\t\t\t: [];\n\t\tconst oRootViewController = this._oAppComponent.getRootViewController();\n\t\tif (oRootViewController.isFclEnabled()) {\n\t\t\tconst oContext = this._getKeepAliveContext(oModel, sPath, false, mParameters);\n\t\t\tif (!oContext) {\n\t\t\t\tthrow new Error(`Cannot create keepAlive context ${sPath}`);\n\t\t\t} else if (oDraftRoot || oDraftNode) {\n\t\t\t\tconst propertiesToRequest = [\"HasActiveEntity\", \"HasDraftEntity\", \"IsActiveEntity\"].concat(semanticKeys);\n\t\t\t\tif (oContext.getProperty(\"IsActiveEntity\") === undefined) {\n\t\t\t\t\toContext.requestProperty(propertiesToRequest);\n\t\t\t\t\tif (oDraftRoot) {\n\t\t\t\t\t\toContext.requestObject(\"DraftAdministrativeData\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// when switching between draft and edit we need to ensure those properties are requested again even if they are in the binding's cache\n\t\t\t\t\t// otherwise when you edit and go to the saved version you have no way of switching back to the edit version\n\t\t\t\t\toContext.requestSideEffects(oDraftRoot ? propertiesToRequest.concat([\"DraftAdministrativeData\"]) : propertiesToRequest);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn oContext;\n\t\t} else {\n\t\t\tconst propertiesToSelect: string[] = [];\n\t\t\tif (sContextPath) {\n\t\t\t\tconst sMessagesPath = ModelHelper.getMessagesPath(oMetaModel, sContextPath);\n\t\t\t\tif (sMessagesPath) {\n\t\t\t\t\tpropertiesToSelect.push(sMessagesPath);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// In case of draft: $select the state flags (HasActiveEntity, HasDraftEntity, and IsActiveEntity)\n\t\t\tif (oDraftRoot || oDraftNode) {\n\t\t\t\tpropertiesToSelect.push(\"HasActiveEntity\", \"HasDraftEntity\", \"IsActiveEntity\");\n\t\t\t\tpropertiesToSelect.push(...semanticKeys);\n\t\t\t}\n\t\t\tpropertiesToSelect.push(...alternateAndSecondaryKeys);\n\n\t\t\tif (isCollaborationDraftSupported && oDraftRoot) {\n\t\t\t\tpropertiesToSelect.push(\"DraftAdministrativeData/DraftAdministrativeUser\");\n\t\t\t}\n\n\t\t\tif (propertiesToSelect.length) {\n\t\t\t\tmParameters.$select = propertiesToSelect.join(\",\");\n\t\t\t}\n\n\t\t\tif (this._oView.getBindingContext()) {\n\t\t\t\tconst oPreviousBinding = this._oView.getBindingContext()?.getBinding();\n\t\t\t\tif (oPreviousBinding) {\n\t\t\t\t\toModel.resetChanges(oPreviousBinding.getUpdateGroupId());\n\t\t\t\t\toPreviousBinding.destroy();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst oHiddenBinding = oModel.bindContext(sPath, undefined, mParameters);\n\n\t\t\toHiddenBinding.attachEventOnce(\"dataRequested\", () => {\n\t\t\t\tBusyLocker.lock(this._oView);\n\t\t\t\tthis.base.messageHandler.holdMessagesForControl(this._oView);\n\t\t\t});\n\t\t\toHiddenBinding.attachEventOnce(\"dataReceived\", this.onDataReceived.bind(this));\n\t\t\tconst boundContext = oHiddenBinding.getBoundContext();\n\t\t\tif (isCollaborationDraftSupported && sPath.includes(\"IsActiveEntity=false\")) {\n\t\t\t\taddSelf(oMetaModel, sContextPath!, oModel, boundContext);\n\t\t\t}\n\t\t\treturn boundContext;\n\t\t}\n\t}\n\n\t@publicExtension()\n\tasync onDataReceived(oEvent: Event<{ error: { status?: number; cause?: { status?: number }; message?: string } }>): Promise<void> {\n\t\tconst error = oEvent?.getParameter(\"error\");\n\t\tif (BusyLocker.isLocked(this._oView)) {\n\t\t\tBusyLocker.unlock(this._oView);\n\t\t}\n\n\t\tif (error) {\n\t\t\t// TODO: in case of 404 the text shall be different\n\t\t\tconst messageHandler = this.base.messageHandler;\n\t\t\tlet mParams: ShowMessagesParameters = {};\n\t\t\tconst errorStatus = error.status ?? error.cause?.status;\n\t\t\ttry {\n\t\t\t\tconst oResourceBundle = Library.getResourceBundleFor(\"sap.fe.core\")!;\n\t\t\t\tif (errorStatus === 503) {\n\t\t\t\t\tmParams = {\n\t\t\t\t\t\tisInitialLoad503Error: true,\n\t\t\t\t\t\tshellBack: true\n\t\t\t\t\t};\n\t\t\t\t} else if (errorStatus === 400) {\n\t\t\t\t\tmParams = {\n\t\t\t\t\t\ttitle: oResourceBundle.getText(\"C_COMMON_SAPFE_ERROR\"),\n\t\t\t\t\t\tdescription: oResourceBundle.getText(\"C_COMMON_SAPFE_DATA_RECEIVED_ERROR_DESCRIPTION\"),\n\t\t\t\t\t\tisDataReceivedError: true,\n\t\t\t\t\t\tshellBack: true\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tmParams = {\n\t\t\t\t\t\ttitle: oResourceBundle.getText(\"C_COMMON_SAPFE_ERROR\"),\n\t\t\t\t\t\tdescription: error?.message,\n\t\t\t\t\t\tisDataReceivedError: true,\n\t\t\t\t\t\tshellBack: true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} catch (oError: unknown) {\n\t\t\t\tLog.error(\"Error while getting the core resource bundle\", oError as string);\n\t\t\t} finally {\n\t\t\t\tmParams.control = this._oView;\n\t\t\t\tawait messageHandler.showMessages(mParams);\n\t\t\t}\n\t\t} else {\n\t\t\tawait this.base.messageHandler.releaseHoldByControl(this._oView);\n\t\t}\n\t}\n\n\t/**\n\t * Requests side effects on a binding context to \"refresh\" it.\n\t * TODO: get rid of this once provided by the model\n\t * a refresh on the binding context does not work in case a creation row with a transient context is\n\t * used. also a requestSideEffects with an empty path would fail due to the transient context\n\t * therefore we get all dependent bindings (via private model method) to determine all paths and then\n\t * request them.\n\t * @param oBindingContext Context to be refreshed\n\t */\n\t_refreshBindingContext(oBindingContext: Context): void {\n\t\tconst oPageComponent = this._oPageComponent;\n\t\tconst oSideEffectsService = this._oAppComponent.getSideEffectsService();\n\t\tconst sRootContextPath = oBindingContext.getPath();\n\t\tconst sEntitySet = oPageComponent && oPageComponent.getEntitySet && oPageComponent.getEntitySet();\n\t\tconst sContextPath =\n\t\t\t(oPageComponent && oPageComponent.getContextPath && oPageComponent.getContextPath()) || (sEntitySet && `/${sEntitySet}`);\n\t\tconst oMetaModel = this._oView.getModel().getMetaModel();\n\t\tlet sMessagesPath;\n\t\tconst aNavigationPropertyPaths: string[] = [];\n\t\tconst aPropertyPaths: string[] = [];\n\t\tconst oSideEffects: SideEffectsTargetType = {\n\t\t\ttargetProperties: [],\n\t\t\ttargetEntities: []\n\t\t};\n\n\t\tfunction getBindingPaths(oBinding: Binding): void {\n\t\t\tlet aDependentBindings;\n\t\t\tconst sRelativePath = (oBinding.getContext()?.getPath() ?? \"\").replace(sRootContextPath, \"\"); // If no context, this is an absolute binding so no relative path\n\t\t\tconst sPath = (sRelativePath ? `${sRelativePath.slice(1)}/` : sRelativePath) + oBinding.getPath();\n\n\t\t\tif (oBinding.isA<ODataContextBinding>(\"sap.ui.model.odata.v4.ODataContextBinding\")) {\n\t\t\t\t// if (sPath === \"\") {\n\t\t\t\t// now get the dependent bindings\n\t\t\t\taDependentBindings = oBinding.getDependentBindings();\n\t\t\t\tif (aDependentBindings) {\n\t\t\t\t\t// ask the dependent bindings (and only those with the specified groupId\n\t\t\t\t\t//if (aDependentBindings.length > 0) {\n\t\t\t\t\tfor (const item of aDependentBindings) {\n\t\t\t\t\t\tgetBindingPaths(item);\n\t\t\t\t\t}\n\t\t\t\t} else if (!aNavigationPropertyPaths.includes(sPath)) {\n\t\t\t\t\taNavigationPropertyPaths.push(sPath);\n\t\t\t\t}\n\t\t\t} else if (oBinding.isA<ODataListBinding>(\"sap.ui.model.odata.v4.ODataListBinding\")) {\n\t\t\t\tif (!aNavigationPropertyPaths.includes(sPath)) {\n\t\t\t\t\taNavigationPropertyPaths.push(sPath);\n\t\t\t\t}\n\t\t\t} else if (oBinding.isA<ODataPropertyBinding>(\"sap.ui.model.odata.v4.ODataPropertyBinding\")) {\n\t\t\t\tif (!aPropertyPaths.includes(sPath)) {\n\t\t\t\t\taPropertyPaths.push(sPath);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (sContextPath) {\n\t\t\tsMessagesPath = ModelHelper.getMessagesPath(oMetaModel, sContextPath);\n\t\t}\n\n\t\t// binding of the context must have $$PatchWithoutSideEffects true, this bound context may be needed to be fetched from the dependent binding\n\t\tgetBindingPaths(oBindingContext.getBinding());\n\n\t\tlet i;\n\t\tfor (i = 0; i < aNavigationPropertyPaths.length; i++) {\n\t\t\toSideEffects.targetEntities.push({\n\t\t\t\t$NavigationPropertyPath: aNavigationPropertyPaths[i]\n\t\t\t});\n\t\t}\n\t\toSideEffects.targetProperties = aPropertyPaths;\n\t\tif (sMessagesPath) {\n\t\t\toSideEffects.targetProperties.push(sMessagesPath);\n\t\t}\n\t\t//all this logic to be replaced with a SideEffects request for an empty path (refresh everything), after testing transient contexts\n\t\toSideEffects.targetProperties = oSideEffects.targetProperties.reduce((targets: string[], targetProperty) => {\n\t\t\tif (targetProperty) {\n\t\t\t\tconst index = targetProperty.indexOf(\"/\");\n\t\t\t\ttargets.push(index > 0 ? targetProperty.slice(0, index) : targetProperty);\n\t\t\t}\n\t\t\treturn targets;\n\t\t}, []);\n\t\t// OData model will take care of duplicates\n\t\toSideEffectsService.requestSideEffects([...oSideEffects.targetEntities, ...oSideEffects.targetProperties], oBindingContext);\n\t}\n\n\t/**\n\t * Gets the binding context of the page or the component.\n\t * @returns The binding context\n\t */\n\t_getBindingContext(): Context | null | undefined {\n\t\tif (this._oPageComponent) {\n\t\t\treturn this._oPageComponent.getBindingContext() as Context;\n\t\t} else {\n\t\t\treturn this._oView.getBindingContext();\n\t\t}\n\t}\n\n\t/**\n\t * Sets the binding context of the page or the component.\n\t * @param oContext The binding context\n\t */\n\t_setBindingContext(oContext: Context | null): void {\n\t\tlet oPreviousContext, oTargetControl;\n\t\tif (this._oPageComponent) {\n\t\t\toPreviousContext = this._oPageComponent.getBindingContext() as Context;\n\t\t\toTargetControl = this._oPageComponent;\n\t\t} else {\n\t\t\toPreviousContext = this._oView.getBindingContext();\n\t\t\toTargetControl = this._oView;\n\t\t}\n\n\t\toTargetControl.setBindingContext(oContext);\n\n\t\tif (oPreviousContext?.isKeepAlive() && oPreviousContext !== oContext) {\n\t\t\tthis._setKeepAlive(oPreviousContext, false);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the flexible column layout (FCL) level corresponding to the view (-1 if the app is not FCL).\n\t * @returns The level\n\t */\n\tgetFCLLevel(): number {\n\t\treturn this._oTargetInformation.FCLLevel;\n\t}\n\n\t_setKeepAlive(\n\t\toContext: Context,\n\t\tbKeepAlive: boolean,\n\t\tfnBeforeDestroy?: Parameters<Context[\"setKeepAlive\"]>[1],\n\t\tbRequestMessages?: boolean\n\t): void {\n\t\tif (oContext.getPath().endsWith(\")\")) {\n\t\t\t// We keep the context alive only if they're part of a collection, i.e. if the path ends with a ')'\n\t\t\tconst oMetaModel = oContext.getModel().getMetaModel();\n\t\t\tconst sMetaPath = oMetaModel.getMetaPath(oContext.getPath());\n\t\t\tconst sMessagesPath = ModelHelper.getMessagesPath(oMetaModel, sMetaPath);\n\t\t\toContext.setKeepAlive(bKeepAlive, fnBeforeDestroy, !!sMessagesPath && bRequestMessages);\n\t\t}\n\t}\n\n\t_getKeepAliveContext(\n\t\toModel: ODataModel,\n\t\tpath: string,\n\t\tbRequestMessages?: boolean,\n\t\tparameters?: BindContextParameters\n\t): Context | undefined {\n\t\t// Get the path for the context that is really kept alive (part of a collection)\n\t\t// i.e. remove all segments not ending with a ')'\n\t\tconst keptAliveSegments = path.split(\"/\");\n\t\tconst additionnalSegments: string[] = [];\n\t\twhile (keptAliveSegments.length && !keptAliveSegments[keptAliveSegments.length - 1].endsWith(\")\")) {\n\t\t\tadditionnalSegments.push(keptAliveSegments.pop()!);\n\t\t}\n\n\t\tif (keptAliveSegments.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst keptAlivePath = keptAliveSegments.join(\"/\");\n\t\tconst oKeepAliveContext = oModel.getKeepAliveContext(keptAlivePath, bRequestMessages, parameters);\n\n\t\tif (additionnalSegments.length === 0) {\n\t\t\treturn oKeepAliveContext;\n\t\t} else {\n\t\t\tadditionnalSegments.reverse();\n\t\t\tconst additionnalPath = additionnalSegments.join(\"/\");\n\t\t\treturn oModel.bindContext(additionnalPath, oKeepAliveContext).getBoundContext();\n\t\t}\n\t}\n\n\t/**\n\t * Switches between column and full-screen mode when FCL is used.\n\t *\n\t */\n\n\t@publicExtension()\n\t@finalExtension()\n\tswitchFullScreen(): void {\n\t\tconst oSource = this.base.getView();\n\t\tconst oFCLHelperModel = oSource.getModel(\"fclhelper\"),\n\t\t\tbIsFullScreen = oFCLHelperModel.getProperty(\"/actionButtonsInfo/isFullScreen\"),\n\t\t\tsNextLayout = oFCLHelperModel.getProperty(\n\t\t\t\tbIsFullScreen ? \"/actionButtonsInfo/exitFullScreen\" : \"/actionButtonsInfo/fullScreen\"\n\t\t\t),\n\t\t\toRootViewController = this._oAppComponent.getRootViewController();\n\n\t\tconst oContext = (oRootViewController as FclController).getRightmostContext\n\t\t\t? (oRootViewController as FclController).getRightmostContext()!\n\t\t\t: oSource.getBindingContext();\n\n\t\tthis.base._routing.navigateToContext(oContext, { layout: sNextLayout }).catch(function () {\n\t\t\tLog.warning(\"cannot switch between column and fullscreen\");\n\t\t});\n\t}\n\n\t/**\n\t * Closes the column for the current view in a FCL.\n\t *\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.Before)\n\tasync closeColumn(): Promise<void> {\n\t\tconst oViewData = this._oView.getViewData();\n\t\tconst oContext = this._oView.getBindingContext();\n\t\tconst oMetaModel = oContext.getModel().getMetaModel();\n\t\tconst navigationParameters: RoutingNavigationParameters = {\n\t\t\tnoPreservationCache: true,\n\t\t\tlayout: this._oView.getModel(\"fclhelper\").getProperty(\"/actionButtonsInfo/closeColumn\")\n\t\t};\n\n\t\tconst isDocumentModified =\n\t\t\t!!this.getView()?.getModel(\"ui\")?.getProperty(UiModelConstants.DocumentModified) || !oContext.getProperty(\"HasActiveEntity\");\n\t\tconst isHiddenDraftEnabled = (this._oAppComponent.getEnvironmentCapabilities()?.getCapabilities()?.HiddenDraft as HiddenDraft)\n\t\t\t.enabled;\n\n\t\tif (!isDocumentModified && isHiddenDraftEnabled) {\n\t\t\tconst mParameters = {\n\t\t\t\tskipDiscardPopover: true,\n\t\t\t\tskipBackNavigation: true\n\t\t\t};\n\t\t\tawait this.base.editFlow.cancelDocument(oContext, mParameters);\n\t\t\tthis.navigateBackFromContext(oContext, navigationParameters);\n\t\t} else if (oViewData?.viewLevel === 1 && ModelHelper.isDraftSupported(oMetaModel, oContext.getPath())) {\n\t\t\tdraft.processDataLossOrDraftDiscardConfirmation(\n\t\t\t\t() => {\n\t\t\t\t\t// We don't have callExtension=true in this case, as there's a user validation with the dataloss dialog\n\t\t\t\t\t// and it wouldn't make sense to cancel the navigation after this confirmation\n\t\t\t\t\tthis.navigateBackFromContext(oContext, navigationParameters);\n\t\t\t\t},\n\t\t\t\tFunction.prototype,\n\t\t\t\toContext,\n\t\t\t\tthis._oView.getController(),\n\t\t\t\ttrue,\n\t\t\t\tdraft.NavigationType.BackNavigation\n\t\t\t);\n\t\t} else {\n\t\t\tnavigationParameters.callExtension = true;\n\t\t\tthis.navigateBackFromContext(oContext, navigationParameters);\n\t\t}\n\t\t// Removes transition message for the specified context\n\t\tmessageHandling.removeTransistionMessageForContext(oContext);\n\t}\n}\n\nexport default InternalRouting;\n"],"mappings":"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","ignoreList":[]}
{"version":3,"names":["InlineEditFlow","_dec","defineUI5Class","_dec2","hookable","_dec3","methodOverride","_dec4","_dec5","_dec6","_dec7","_class","_class2","_BaseControllerExtens","_this","_len","arguments","length","args","Array","_key","call","inlineEditControls","_exports","_inheritsLoose","_proto","prototype","isInlineEditPossible","base","getAppComponent","getInlineEditService","doesPageHaveInlineEdit","getRoutingTargetName","inlineEditSave","model","getView","getModel","messages","Messaging","getMessageModel","getData","hasTechnicalMessages","some","message","messageHandling","isNonTechnicalMessage","setShowFooter","hasPendingChanges","CommonUtils","INLINEEDIT_UPDATEGROUPID","inlineEditEnd","removeAllMessages","submitBatch","error","Log","warning","inlineEditDiscard","resetChanges","refreshDescription","control","setProperty","startInlineEdit","propertyFullyQualifiedName","bindingContextPath","controlTrigger","getBindingContext","getProperty","DraftExistsDialog","open","resetIndicatorPopup","inlineEditService","dependentProperties","getInlineConnectedProperties","inlineEditStart","focusHandling","inlineEditControl","closeInlineEditPopupEditMode","focus","properties","abortTimerBeforeSave","undefined","alreadyRegisteredControls","map","getId","includes","push","inlineEditBindingContextPath","isPropertyConsideredForInlineEdit","handleInlineEditPatchSent","event","patchPromise","Promise","resolve","reject","getSource","attachEventOnce","patchCompletedEvent","bSuccess","getParameter","resourceBundle","Lib","getResourceBundleFor","MessageToast","show","getText","handleInlineEditSaveFailed","metaModel","getMetaModel","propagateInlineFieldGroupIdToMessageButton","target","getTargets","targetMetaContext","createBindingContext","getMetaPath","messageTargetDataModelObject","MetaModelConverter","getInvolvedDataModelObjects","isProperty","targetObject","targetFullyQualifiedName","fullyQualifiedName","delayedCallToSave","timerBeforeSave","setTimeout","e","onBeforeNavigation","dialogResult","openInlineEditBeforeNavigationDialogAndWaitForResult","BeforeNavigationDialog","onBeforeAnyEditFlowAction","BeforeActionDialog","onBeforeEdit","onBeforeCreate","onBeforeDelete","onBeforeExecuteAction","footerControls","getFooter","findAggregatedObjects","managedObject","isA","childFieldGroupIds","Set","getFieldGroupIds","add","setFieldGroupIds","from","BaseControllerExtension","_applyDecoratedDescriptor","Object","getOwnPropertyDescriptor"],"sourceRoot":".","sources":["InlineEditFlow.ts"],"sourcesContent":["import type { Property } from \"@sap-ux/vocabularies-types\";\nimport Log from \"sap/base/Log\";\nimport { defineUI5Class, methodOverride, type EnhanceWithUI5 } from \"sap/fe/base/ClassSupport\";\nimport { hookable } from \"sap/fe/base/HookSupport\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type PageController from \"sap/fe/core/PageController\";\nimport BaseControllerExtension from \"sap/fe/core/controllerextensions/BaseControllerExtension\";\nimport messageHandling from \"sap/fe/core/controllerextensions/messageHandler/messageHandling\";\nimport BeforeActionDialog from \"sap/fe/core/controls/inlineEditFlow/BeforeActionDialog\";\nimport BeforeNavigationDialog, { type DIALOGRESULT } from \"sap/fe/core/controls/inlineEditFlow/BeforeNavigationDialog\";\nimport * as MetaModelConverter from \"sap/fe/core/converters/MetaModelConverter\";\nimport { isProperty } from \"sap/fe/core/helpers/TypeGuards\";\nimport { type DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport type Field from \"sap/fe/macros/Field\";\nimport type InlineEdit from \"sap/fe/macros/inlineEdit/InlineEdit\";\nimport MessageToast from \"sap/m/MessageToast\";\nimport type UI5Event from \"sap/ui/base/Event\";\nimport type ManagedObject from \"sap/ui/base/ManagedObject\";\nimport type Control from \"sap/ui/core/Control\";\nimport Lib from \"sap/ui/core/Lib\";\nimport Messaging from \"sap/ui/core/Messaging\";\nimport type Message from \"sap/ui/core/message/Message\";\nimport type { ODataContextBinding$PatchSentEvent } from \"sap/ui/model/odata/v4/ODataContextBinding\";\nimport DraftExistsDialog from \"../controls/inlineEditFlow/DraftExistsDialog\";\n\n@defineUI5Class(\"sap.fe.core.controllerextensions.InlineEditFlow\")\nexport default class InlineEditFlow extends BaseControllerExtension {\n\tprotected base!: PageController;\n\n\tprivate inlineEditControls: Control[] = [];\n\n\tprivate inlineEditBindingContextPath?: string;\n\n\tprivate abortTimerBeforeSave?: Function;\n\n\tprivate patchPromise?: Promise<UI5Event>;\n\n\t/**\n\t * Method to know if there can be inline edit on the page.\n\t * @returns True if inline edit is possible\n\t */\n\tisInlineEditPossible(): boolean {\n\t\treturn this.base.getAppComponent().getInlineEditService().doesPageHaveInlineEdit(this.base.getRoutingTargetName());\n\t}\n\n\t/**\n\t * Save the inline edit changes.\n\t * @returns A promise that resolved once the batch has returned.\n\t */\n\tasync inlineEditSave(): Promise<void> {\n\t\tconst model = this.base.getView().getModel();\n\n\t\tconst messages = Messaging.getMessageModel().getData();\n\t\tconst hasTechnicalMessages = messages.some((message: Message) => !messageHandling.isNonTechnicalMessage(message));\n\t\tif (hasTechnicalMessages) {\n\t\t\tthis.base.setShowFooter(true);\n\t\t\t// if there are invalid types we should not try to save\n\t\t\treturn;\n\t\t}\n\t\tif (!model.hasPendingChanges(CommonUtils.INLINEEDIT_UPDATEGROUPID)) {\n\t\t\tthis.inlineEditEnd();\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tMessaging.removeAllMessages();\n\t\t\tawait model.submitBatch(CommonUtils.INLINEEDIT_UPDATEGROUPID);\n\t\t} catch (error: unknown) {\n\t\t\tLog.warning(\"Error while saving inline edit changes\");\n\t\t}\n\t}\n\n\t/**\n\t * Discard the inline edit changes.\n\t */\n\tinlineEditDiscard(): void {\n\t\tthis.base.getView().getModel().resetChanges(CommonUtils.INLINEEDIT_UPDATEGROUPID);\n\t\tthis.inlineEditEnd(true);\n\t}\n\n\t/**\n\t * End the inline edit.\n\t * @param refreshDescription\n\t */\n\tinlineEditEnd(refreshDescription?: boolean): void {\n\t\tMessaging.removeAllMessages();\n\t\tthis.base.setShowFooter(false);\n\t\tfor (const control of this.inlineEditControls) {\n\t\t\t(control as EnhanceWithUI5<Field> & InlineEdit).inlineEditEnd(refreshDescription);\n\t\t}\n\t\tthis.inlineEditControls = [];\n\t\tthis.base.getView().getModel(\"ui\").setProperty(\"/isInlineEditActive\", false);\n\t}\n\n\t/**\n\t * Start the inline edit on the bindingContextPath for the propertyFullyQualifiedName.\n\t * @param propertyFullyQualifiedName\n\t * @param bindingContextPath\n\t * @param controlTrigger\n\t */\n\tstartInlineEdit(\n\t\tpropertyFullyQualifiedName: string,\n\t\tbindingContextPath: string,\n\t\tcontrolTrigger?: EnhanceWithUI5<Field> & InlineEdit\n\t): void {\n\t\tif (controlTrigger?.getBindingContext()?.getProperty(\"HasDraftEntity\")) {\n\t\t\t// there is already a draft on the entity. We should not start inline edit\n\t\t\tnew DraftExistsDialog(this.base.getView()).open();\n\t\t\tcontrolTrigger?.resetIndicatorPopup();\n\t\t\treturn;\n\t\t}\n\t\tconst inlineEditService = this.base.getAppComponent().getInlineEditService();\n\t\tconst dependentProperties = inlineEditService.getInlineConnectedProperties(\n\t\t\tthis.base.getRoutingTargetName(),\n\t\t\tpropertyFullyQualifiedName\n\t\t);\n\n\t\tthis.inlineEditStart([], dependentProperties?.length ? dependentProperties : [propertyFullyQualifiedName], bindingContextPath);\n\t\tthis.base.getView().getModel(\"ui\").setProperty(\"/isInlineEditActive\", true);\n\t}\n\n\t/**\n\t * Focus handling for inline edit. When one field gets focus, all other inline edit popups, that are currently opened, should be closed.\n\t * @param inlineEditControl Controls which are currently in inline edit mode.\n\t */\n\tfocusHandling(inlineEditControl: Control): void {\n\t\tfor (const control of this.inlineEditControls) {\n\t\t\tif (control !== inlineEditControl) {\n\t\t\t\t(control as EnhanceWithUI5<Field> & InlineEdit).closeInlineEditPopupEditMode();\n\t\t\t} else if (control === inlineEditControl) {\n\t\t\t\tcontrol.focus();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Confirm the start of the inline edit on the bindingContextPath for the properties.\n\t * @param inlineEditControls The fields that are currently in inline edit mode.\n\t * @param properties\n\t * @param bindingContextPath\n\t */\n\t@hookable(\"Before\")\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tasync inlineEditStart(inlineEditControls: Control[], properties: string[], bindingContextPath: string): Promise<void> {\n\t\tif (this.abortTimerBeforeSave) {\n\t\t\t// if there is  a timer to save\n\t\t\tthis.abortTimerBeforeSave();\n\t\t\tthis.abortTimerBeforeSave = undefined;\n\t\t\tawait this.inlineEditSave();\n\t\t}\n\t\tconst alreadyRegisteredControls = this.inlineEditControls.map((control: Control) => control.getId());\n\t\tfor (const control of inlineEditControls) {\n\t\t\tif (!alreadyRegisteredControls.includes(control.getId())) {\n\t\t\t\tthis.inlineEditControls.push(control);\n\t\t\t}\n\t\t}\n\t\tthis.inlineEditBindingContextPath = bindingContextPath;\n\t\treturn;\n\t}\n\n\t/**\n\t * Convenience method to determine if a property should be considered for inline edit.\n\t * @param propertyFullyQualifiedName\n\t * @returns True when the property is considered for Inline edit.\n\t */\n\tisPropertyConsideredForInlineEdit(propertyFullyQualifiedName: string): boolean {\n\t\treturn this.base\n\t\t\t.getAppComponent()\n\t\t\t.getInlineEditService()\n\t\t\t.isPropertyConsideredForInlineEdit(this.base.getRoutingTargetName(), propertyFullyQualifiedName);\n\t}\n\n\t/**\n\t * Handles the patchSent event: handle inline edit save success or failure.\n\t * @param event The event sent by the binding\n\t */\n\tasync handleInlineEditPatchSent(event: ODataContextBinding$PatchSentEvent): Promise<void> {\n\t\tthis.patchPromise = new Promise<UI5Event>((resolve, reject) => {\n\t\t\tevent.getSource().attachEventOnce(\"patchCompleted\", (patchCompletedEvent: UI5Event<{ success: boolean }>) => {\n\t\t\t\tconst bSuccess = patchCompletedEvent.getParameter(\"success\");\n\t\t\t\tif (bSuccess) {\n\t\t\t\t\tresolve(patchCompletedEvent);\n\t\t\t\t} else {\n\t\t\t\t\treject(patchCompletedEvent);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\ttry {\n\t\t\tawait this.patchPromise;\n\t\t\tthis.patchPromise = undefined;\n\t\t\tconst resourceBundle = Lib.getResourceBundleFor(\"sap.fe.core\");\n\t\t\tif (resourceBundle) {\n\t\t\t\tMessageToast.show(resourceBundle.getText(\"C_INLINE_EDIT_SAVED\"));\n\t\t\t}\n\t\t\tthis.inlineEditEnd();\n\t\t} catch (patchCompletedEvent) {\n\t\t\tthis.patchPromise = undefined;\n\t\t\tthis.handleInlineEditSaveFailed();\n\t\t}\n\t}\n\n\t/**\n\t * Method to show the errors when the inline edit save fails.\n\t */\n\thandleInlineEditSaveFailed(): void {\n\t\tconst metaModel = this.base.getView().getModel().getMetaModel();\n\n\t\tconst messages = Messaging.getMessageModel().getData();\n\t\tif (messages.length) {\n\t\t\tthis.base.setShowFooter(true);\n\t\t\tthis.propagateInlineFieldGroupIdToMessageButton();\n\t\t}\n\t\tif (!this.inlineEditBindingContextPath) {\n\t\t\treturn;\n\t\t}\n\t\tfor (const message of messages) {\n\t\t\tfor (const target of message.getTargets()) {\n\t\t\t\tconst targetMetaContext = metaModel.createBindingContext(metaModel.getMetaPath(target));\n\t\t\t\tconst messageTargetDataModelObject = targetMetaContext\n\t\t\t\t\t? MetaModelConverter.getInvolvedDataModelObjects<unknown>(targetMetaContext)\n\t\t\t\t\t: null;\n\t\t\t\tif (isProperty(messageTargetDataModelObject?.targetObject)) {\n\t\t\t\t\tconst targetFullyQualifiedName =\n\t\t\t\t\t\t(messageTargetDataModelObject as unknown as DataModelObjectPath<Property>)?.targetObject?.fullyQualifiedName ?? \"\";\n\t\t\t\t\tif (this.isPropertyConsideredForInlineEdit(targetFullyQualifiedName)) {\n\t\t\t\t\t\tthis.startInlineEdit(targetFullyQualifiedName, this.inlineEditBindingContextPath);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Performs a delayedCall when you focus out of a field.\n\t */\n\tasync delayedCallToSave(): Promise<void> {\n\t\tif (this.abortTimerBeforeSave || this.patchPromise) {\n\t\t\t// if there is already a timer running or a save in process do nothing\n\t\t\treturn;\n\t\t}\n\t\tconst timerBeforeSave = new Promise<void>((resolve, reject) => {\n\t\t\tthis.abortTimerBeforeSave = reject;\n\t\t\tsetTimeout(() => resolve(), 500);\n\t\t});\n\t\ttry {\n\t\t\tawait timerBeforeSave;\n\t\t\tthis.abortTimerBeforeSave = undefined;\n\t\t\tthis.inlineEditSave();\n\t\t} catch (e) {\n\t\t\t// Nothing to see it is just someone that cancelled the timer\n\t\t}\n\t}\n\n\t/**\n\t * Method to ensure we leave inline edit before any navigation..\n\t * @returns Promise that retruns true if we need to cancel navigation and stay in inline edit\n\t */\n\t@methodOverride(\"routing\")\n\tasync onBeforeNavigation(): Promise<boolean> {\n\t\tif (this.inlineEditControls.length > 0) {\n\t\t\t// there are controls in inline edit we need to prevent the navigation and show the dialog\n\t\t\tif (this.abortTimerBeforeSave) {\n\t\t\t\tthis.abortTimerBeforeSave();\n\t\t\t\tthis.abortTimerBeforeSave = undefined;\n\t\t\t}\n\t\t\tif (!this.base.getView().getModel().hasPendingChanges(CommonUtils.INLINEEDIT_UPDATEGROUPID)) {\n\t\t\t\t// fields are in inline edit and there are no pending changes. We need to show the dialog\n\t\t\t\tthis.inlineEditEnd();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tif (this.patchPromise) {\n\t\t\t\t\tawait this.patchPromise;\n\t\t\t\t} else {\n\t\t\t\t\tconst dialogResult = await this.openInlineEditBeforeNavigationDialogAndWaitForResult();\n\t\t\t\t\tif (dialogResult === \"Save\") {\n\t\t\t\t\t\t// we save and wait for the patchPromise\n\t\t\t\t\t\tawait this.inlineEditSave();\n\t\t\t\t\t\tif (this.base.getView().getModel().hasPendingChanges(CommonUtils.INLINEEDIT_UPDATEGROUPID)) {\n\t\t\t\t\t\t\t// if after saves there are still changes this means save has failed. we need to cancel navigation\n\t\t\t\t\t\t\tthis.focusHandling(this.inlineEditControls[0]);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (dialogResult === \"Cancel\") {\n\t\t\t\t\t\tthis.focusHandling(this.inlineEditControls[0]);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// we discard the changes\n\t\t\t\t\t\tthis.inlineEditDiscard();\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.focusHandling(this.inlineEditControls[0]);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Method to open the dialog before navigation.\n\t * @returns Promise that returns the dialog choice once the user has clicked on ok or cancel\n\t */\n\tasync openInlineEditBeforeNavigationDialogAndWaitForResult(): Promise<DIALOGRESULT> {\n\t\treturn new Promise<DIALOGRESULT>((resolve) => {\n\t\t\tnew BeforeNavigationDialog(this.base.getView(), resolve).open();\n\t\t});\n\t}\n\n\t/**\n\t * Method to ensure we leave inline edit before any standard edit flowaction.\n\t * @returns Promise that reject and triggers save or discard if we are in inline edit\n\t */\n\tasync onBeforeAnyEditFlowAction(): Promise<void> {\n\t\tif (this.inlineEditControls.length > 0) {\n\t\t\tif (this.abortTimerBeforeSave) {\n\t\t\t\tthis.abortTimerBeforeSave();\n\t\t\t\tthis.abortTimerBeforeSave = undefined;\n\t\t\t}\n\t\t\tif (!this.base.getView().getModel().hasPendingChanges(CommonUtils.INLINEEDIT_UPDATEGROUPID)) {\n\t\t\t\t// fields are in inline edit and there are no pending changes. We don't need to show the dialog\n\t\t\t\tthis.inlineEditEnd();\n\t\t\t\treturn Promise.resolve();\n\t\t\t}\n\t\t\tnew BeforeActionDialog(this.base.getView()).open();\n\t\t\t// there are controls in inline edit we need to prevent the action and show the dialog\n\t\t\treturn Promise.reject();\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Handle before edit.\n\t * @returns Promise that reject if edit needs to be cancelled\n\t */\n\t@methodOverride(\"editFlow\")\n\tasync onBeforeEdit(): Promise<void> {\n\t\treturn this.onBeforeAnyEditFlowAction();\n\t}\n\n\t/**\n\t * Handle before create.\n\t * @returns Promise that reject if cretae needs to be cancelled\n\t */\n\t@methodOverride(\"editFlow\")\n\tasync onBeforeCreate(): Promise<void> {\n\t\treturn this.onBeforeAnyEditFlowAction();\n\t}\n\n\t/**\n\t * Handle before delete.\n\t * @returns Promise that reject if delete needs to be cancelled\n\t */\n\t@methodOverride(\"editFlow\")\n\tasync onBeforeDelete(): Promise<void> {\n\t\treturn this.onBeforeAnyEditFlowAction();\n\t}\n\n\t/**\n\t * Handle before action.\n\t * @returns Promise that reject if delete needs to be cancelled\n\t */\n\t@methodOverride(\"editFlow\")\n\tasync onBeforeExecuteAction(): Promise<void> {\n\t\treturn this.onBeforeAnyEditFlowAction();\n\t}\n\n\t/**\n\t * Propagate the field group id to the message button.\n\t */\n\tprivate propagateInlineFieldGroupIdToMessageButton(): void {\n\t\t// we propagate the fieldgroupId to the footer and all its descendants to ensure that\n\t\t// clicking on the footer does not trigger a focusout and a save for the inline edit\n\t\tconst footerControls =\n\t\t\t(this.base\n\t\t\t\t.getFooter()\n\t\t\t\t?.findAggregatedObjects(true, (managedObject: ManagedObject) => managedObject.isA<Control>(\"sap.ui.core.Control\")) as\n\t\t\t\t| Control[]\n\t\t\t\t| undefined) ?? [];\n\n\t\tfor (const control of footerControls) {\n\t\t\tconst childFieldGroupIds = new Set(control.getFieldGroupIds());\n\t\t\tchildFieldGroupIds.add(\"InlineEdit\");\n\t\t\tcontrol.setFieldGroupIds(Array.from(childFieldGroupIds));\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[],"file":"InlineEditFlow-dbg.js"}
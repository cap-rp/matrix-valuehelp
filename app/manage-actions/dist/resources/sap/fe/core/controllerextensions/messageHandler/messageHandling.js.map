{"version":3,"file":"messageHandling.js","names":["ButtonType","MLib","aResolveFunctions","dialogControl","oBackButton","messageView","fnFormatTechnicalDetails","sPreviousGroupName","insertDetail","oProperty","property","substring","Math","max","lastIndexOf","insertGroupName","sHTML","groupName","getPaths","sTD","forEach","fnFormatDescription","fnGetHighestMessagePriority","aMessages","sMessagePriority","MessageType","None","iLength","length","oMessageCount","Error","Warning","Success","Information","i","getType","fnModifyETagMessagesOnly","oResourceBundle","concurrentEditFlag","Messaging","getMessageModel","getObject","bMessagesModified","sEtagMessage","oMessage","oTechnicalDetails","getTechnicalDetails","httpStatus","isConcurrentModification","getText","removeMessages","setMessage","setTargets","addMessages","dialogCloseHandler","close","setVisible","msgView","getContent","oMessageDialogModel","getModel","setData","removeUnboundTransitionMessages","getRetryAfterMessage","bMessageDialog","dNow","Date","Library","getResourceBundleFor","sRetryAfterMessage","retryAfter","dRetryAfter","oDateFormat","getFullYear","DateFormat","getDateTimeInstance","pattern","format","getMonth","getDate","hasTransitionErrorsOrWarnings","getMessages","undefined","some","message","prepareMessageViewForDialog","bStrictHandlingFlow","multi412","oMessageTemplate","descriptionBinding","technicalDetailsBinding","MessageItem","counter","path","title","subtitle","longtextUrl","type","description","markupDescription","MessageView","showDetailsPageHeader","itemSelect","items","template","setGroupItems","Button","icon","IconPool","getIconURI","visible","press","navigateBack","this","setModel","isNonTechnicalMessage","technicalDetails","originalMessage","getCode","getTransitionMessagesForUIDecision","showBoundTransition","_context","transitionMessages","concat","executeOnBeforeShowMessages","onBeforeShowMessage","messagesToShow","uiElementToUse","fnGetMsgSubtitle","showBoundMessages","showMessageParameters","showMessageDialog","showMessageBox","showChangeSetErrorDialog","filteredMessages","fnGetMessageSubtitle","containsBoundTransistion","containsBoundTransition","getUIDecisions","customMessages","context","arguments","control","actionName","viewType","showStateMessages","messageDialogParameter","addCustomMessages","call","uiDecisionIntermittent","filters","getFiltersForMessages","getMessagesToShow","removeMessageShownInMessageStrip","processMessagesFromChangesetFailure","hasEtagMessage","modifyETagMessagesOnly","checkIfAllAreSameSuccessMessages","genericSuccessMessage","addGenericSuccessMessage","getResourceModel","messageToShow","getDescription","getDescriptionUrl","messageHandling","updateMessageObjectGroupName","contextNeedsEtagRefresh","resourceModel","showMessageDialogParameter","selectionContexts","aSelectedContexts","Array","isArray","boundActionName","entitySetName","entitySet","includes","split","suffixResourceKey","Message","target","persistent","code","referenceMsg","checkFailed","msg","idx","getMessage","getAdditionalText","async","showMessagesInUI","uiDecisions","Promise","resolve","showMessageToast","showMessageDialogControl","showMessageBoxControl","Filter","operator","FilterOperator","NE","value1","isNonTechnicalMessageFilter","test","fnCheckControlIdInDialog","aControlIds","isMessageOutOfParameterDialog","push","caseSensitive","EQ","getTargets","and","_ref","retMessages","genericMsgs","nonGenericMsgs","fe","feTechnicalDetails","changeSetPreTextForSingleError","preText","techDetailsForNonGenericMessage","singleErrorPreText","singleGenericMessageId","getId","existingTechDetails","setTechnicalDetails","messageCode","text","getSorterForMessages","Sorter","obj1","obj2","rankA","getMessageRank","rankB","transistionMessages","listBinding","bindList","currentContexts","getCurrentContexts","messages","map","currentContext","oUniqueObj","filter","obj","MessageToast","show","uiDecision","runToTest","highestPriority","highestPriorityText","resourceBundle","strictHandlingFlow","messageDialogModel","JSONModel","messageObject","sorter","getBinding","sort","isOpen","Dialog","resizable","endButton","escapeHandler","completionPromise","customHeader","Bar","contentMiddle","Text","contentLeft","contentWidth","contentHeight","verticalScrolling","closeOnNavigation","afterClose","item","removeAllContent","addContent","setBeginButton","hasPendingChanges","resetChanges","refresh","Emphasized","destroyBeginButton","getItems","getTranslatedTextForMessageDialog","setState","getCustomHeader","getContentMiddle","setText","open","messageTechnicalDetails","retryAfterMessage","startTag","closeTag","formattedTextString","messageHeader","formattedText","FormattedText","htmlText","ManagedObject","escapeSettingsValue","showMessageBoxPerType","onClose","closeMessageBox","bind","messageShown","callBack","messagesToRemove","allMsgs","getData","genericMessage","find","MessageBox","error","warning","success","information","boundContextMessages","getPath","getPersistent","aModelDataArray","sActionName","aModelData","generalGroupText","isA","setGroupNameLRTable","setGroupNameOPDisplayMode","getLastActionTextAndActionName","oElem","oRowBinding","getRowBinding","sElemeBindingPath","indexOf","allRowContexts","rowContext","contextPath","identifierColumn","getParent","getIdentifierColumn","rowIdentifier","columnPropertyName","getTableColProperty","sTableTargetColName","getTableColInfo","getHeader","updateAddtionalTextForMessageInOPTable","mdcTable","targetTableInfo","getContexts","columnNameSuffix","setAdditionalText","updateHeaderNameForMessageInOPTable","subsection","headerName","getHeaderVisible","tableHeader","getTitle","setGroupNameOPTableDisplayMode","viewContext","groupNameIsGeneral","setSectionNameInGroup","childTableElement","findElements","oElement","getTableColumnDataAndSetSubtile","fnCallbackSetGroupName","oTargetTableInfo","oViewContext","getBindingContext","opLayout","bIsGeneralGroupName","getVisibleSectionsFromObjectPageLayout","oSection","subSections","getSubSections","oSubSection","sLastActionText","toString","aMessage","oTable","fnSetGroupName","getTableAndTargetInfo","sControlId","bIsCreationRow","oTableRowContext","getControlIds","sId","isControlInTable","oControl","UI5Element","getElementById","isControlPartOfCreationRow","subTitle","getMessageSubtitle","oTableRowBindingContexts","tableRowBindingContexts","tableRowContext","tableTargetColName","table","isCreationRow","targetedControl","messageSubtitle","rowSubtitleValue","tableColProperty","getTableColumnVisibilityInfo","colFromTableSettings","fetchColumnInfo","isInactive","label","tableColBindingContextTextAnnotation","getTableColBindingContextForTextAnnotation","tableColTextAnnotationPath","tableColTextArrangement","getValue","getTableColValue","oColumnInfo","determineColumnInfo","sColumnIndicator","sColumnValue","bindingContext","key","oModel","oMetaModel","getMetaModel","sMetaPath","getMetaPath","createBindingContext","sColNameFromMessageObj","pop","getKeyColumnInfo","oColFromTableSettings","availability","oParentControl","sHighestPriority","removeTransitionMessages","removeBoundTransitionMessages","sPathToBeRemoved","getMessagesFromMessageModel","oMessageModel","startsWith","oContext","bBoundMessages","bTransitionOnly","aTransitionMessages","backendMessages","aMessagesToBeDeleted","setMessageSubtitle","aContexts","additionalText","subtitleColumn","errorContext","oObjectPageLayout","getSections","getVisible","getControlFromMessageRelatingToSubSection","subSection","oMessageObject","fnFilterUponIds","a","b","oContextPath","fnRegExpescape","s","replace","contextPathToEscape","RegExp","sTableTargetColProperty","oTableTargetCol","getColumns","column","getPropertyKey","oCustomColumn","getControlDelegate","getColumnsFor","oColumn","propertyInfos","name","aColumns","columnDefinition","propertyInfo","bIsTableTargetColVisible","oTableColInfo","oItem","createSectionGroupName","section","bMultipleSubSections","includeTableGroupName","bIsOrphanElement","aElements","oParentElement","getMessagesForContext","controlIds","errorFieldControl","index","Infinity","errorControlId","controlId","fieldRankinDialog","focus","removeTransistionMessageForContext","messagesInModel","isMessageStripMessage","isSingleTarget","isTargetMatching","isTransitionMessage","removeContextMessagesfromModel","contexts","removeMessagesForActionParameterDialog","messagesToBeRemoved"],"sources":["./messageHandling.ts"],"sourcesContent":["import type ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport type ResourceModel from \"sap/fe/core/ResourceModel\";\nimport type { CustomMessage, ShowMessageDialogParameter } from \"sap/fe/core/controllerextensions/MessageHandler\";\nimport { getResourceModel } from \"sap/fe/core/helpers/ResourceModelHelper\";\nimport type Field from \"sap/fe/macros/Field\";\nimport type TableAPI from \"sap/fe/macros/table/TableAPI\";\nimport type { TableColumnProperties } from \"sap/fe/macros/table/TableAPI\";\nimport type TableDelegate from \"sap/fe/macros/table/delegates/TableDelegate\";\nimport Bar from \"sap/m/Bar\";\nimport Button from \"sap/m/Button\";\nimport Dialog from \"sap/m/Dialog\";\nimport FormattedText from \"sap/m/FormattedText\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport MessageItem from \"sap/m/MessageItem\";\nimport MessageToast from \"sap/m/MessageToast\";\nimport MessageView from \"sap/m/MessageView\";\nimport type Table from \"sap/m/Table\";\nimport Text from \"sap/m/Text\";\nimport MLib from \"sap/m/library\";\nimport ManagedObject from \"sap/ui/base/ManagedObject\";\nimport type Control from \"sap/ui/core/Control\";\nimport UI5Element from \"sap/ui/core/Element\";\nimport IconPool from \"sap/ui/core/IconPool\";\nimport Library from \"sap/ui/core/Lib\";\nimport Messaging from \"sap/ui/core/Messaging\";\nimport DateFormat from \"sap/ui/core/format/DateFormat\";\nimport Message from \"sap/ui/core/message/Message\";\nimport MessageType from \"sap/ui/core/message/MessageType\";\nimport type View from \"sap/ui/core/mvc/View\";\nimport type MDCTable from \"sap/ui/mdc/Table\";\nimport type Column from \"sap/ui/mdc/table/Column\";\nimport type Binding from \"sap/ui/model/Binding\";\nimport type Context from \"sap/ui/model/Context\";\nimport Filter from \"sap/ui/model/Filter\";\nimport FilterOperator from \"sap/ui/model/FilterOperator\";\nimport Sorter from \"sap/ui/model/Sorter\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type MessageModel from \"sap/ui/model/message/MessageModel\";\nimport type ODataV4Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataListBinding from \"sap/ui/model/odata/v4/ODataListBinding\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type UITable from \"sap/ui/table/Table\";\nimport type ObjectPageLayout from \"sap/uxap/ObjectPageLayout\";\nimport type ObjectPageSection from \"sap/uxap/ObjectPageSection\";\nimport type ObjectPageSubSection from \"sap/uxap/ObjectPageSubSection\";\nimport type { AnnotationTableColumn, CustomBasedTableColumn, TableColumn } from \"../../converters/controls/Common/table/Columns\";\n\nconst ButtonType = MLib.ButtonType;\nlet aResolveFunctions: ((param1: void | Dialog) => void)[] = [];\nlet dialogControl: Dialog;\nlet oBackButton: Button;\nlet messageView: MessageView;\n\nexport type MessageWithHeader = Message & {\n\theaderName?: string;\n\ttarget?: string;\n\tadditionalText?: string;\n};\n\nexport type TargetTableInfoType = {\n\toTableRowBindingContexts: ODataV4Context[];\n\toTableRowContext: ODataV4Context | undefined;\n\tsTableTargetColName: string | undefined;\n\tsTableTargetColProperty: string | undefined;\n\ttableHeader?: string;\n};\n\ntype ColInfoAndSubtitleType = {\n\toTargetTableInfo: TargetTableInfoType;\n\tsubTitle?: string | null;\n};\n\ntype ColumnInfoType = {\n\tsColumnValue: string | undefined;\n\tsColumnIndicator: string;\n};\n\nexport type SupportedUIElement = \"Dialog\" | \"Box\" | \"Toast\" | \"None\";\n\n// FE related technical information to be stored with the message.\n// Like, this would be used to store pre-text with the message when it is the only message to be shown in UI.\ntype FEMessageTechnicalDetails = object & {\n\tfe?: {\n\t\tchangeSetPreTextForSingleError?: string;\n\t\tsingleErrorPreText?: string;\n\t\tsingleGenericMessageId?: string;\n\t};\n};\n\nexport type MessageUIDecisions = {\n\tuiElementToUse: SupportedUIElement;\n\tmessagesToShow: Message[];\n\tcontainsBoundTransition: boolean;\n\tcontextNeedsEtagRefresh?: ODataV4Context;\n};\n\nexport type messageHandlingType = {\n\tisNonTechnicalMessage: (message: Message) => boolean;\n\tgetMessages: (bBoundMessages?: boolean, bTransitionOnly?: boolean, sPathToBeRemoved?: string) => Message[];\n\thasTransitionErrorsOrWarnings(): boolean;\n\tgetUIDecisions: (\n\t\tcustomMessages: CustomMessage[] | undefined,\n\t\tcontext: ODataV4Context,\n\t\tshowBoundTransition?: boolean,\n\t\tconcurrentEditFlag?: boolean,\n\t\tcontrol?: Control,\n\t\tactionName?: string | undefined,\n\t\tonBeforeShowMessage?: (messages: Message[], showMessageParameters: ShowMessageParameters) => ShowMessageParameters,\n\t\tviewType?: string,\n\t\tshowStateMessages?: boolean,\n\t\tmessageDialogParameter?: ShowMessageDialogParameter\n\t) => MessageUIDecisions;\n\tshowMessagesInUI: (uiDecision: MessageUIDecisions) => Promise<void>;\n\tremoveUnboundTransitionMessages: () => void;\n\tmodifyETagMessagesOnly: (oResourceBundle: ResourceBundle, concurrentEditFlag: boolean | undefined) => boolean;\n\tremoveBoundTransitionMessages: (sPathToBeRemoved?: string) => void;\n\tgetRetryAfterMessage: (oMessage: Message, bMessageDialog?: true) => string | undefined;\n\tprepareMessageViewForDialog: (\n\t\toMessageDialogModel: JSONModel,\n\t\tbStrictHandlingFlow: boolean,\n\t\tisMulti412?: boolean\n\t) => {\n\t\tmessageView: MessageView;\n\t\toBackButton: Button;\n\t};\n\tsetMessageSubtitle: (oTable: MDCTable, aContexts: Context[], message: MessageWithHeader) => void;\n\tgetVisibleSectionsFromObjectPageLayout: (oObjectPageLayout: Control) => ObjectPageSection[];\n\tgetControlFromMessageRelatingToSubSection: (subSection: ObjectPageSubSection, oMessageObject: MessageWithHeader) => UI5Element[];\n\tfnFilterUponIds: (aControlIds: string[], oItem: UI5Element) => boolean;\n\tgetTableAndTargetInfo: (\n\t\toTable: MDCTable,\n\t\toMessageObject: MessageWithHeader,\n\t\toElement: UI5Element | undefined,\n\t\toRowBinding: Binding\n\t) => TargetTableInfoType;\n\tcreateSectionGroupName: (\n\t\tsection: ObjectPageSection,\n\t\tsubSection: ObjectPageSubSection,\n\t\tbMultipleSubSections: boolean,\n\t\toTargetTableInfo: TargetTableInfoType,\n\t\tresourceModel: ResourceModel,\n\t\tincludeTableGroupName?: boolean\n\t) => string;\n\tbIsOrphanElement: (oElement: UI5Element, aElements: UI5Element[]) => boolean;\n\tgetLastActionTextAndActionName: (sActionName: string | undefined) => string;\n\tgetTableColumnDataAndSetSubtile: (\n\t\taMessage: MessageWithHeader,\n\t\toTable: MDCTable,\n\t\toElement: UI5Element | undefined,\n\t\toRowBinding: Binding,\n\t\tsActionName: string | undefined,\n\t\tsetSectionNameInGroup: boolean,\n\t\tfnCallbackSetGroupName: Function\n\t) => ColInfoAndSubtitleType;\n\tgetTableColInfo: (\n\t\toTable: MDCTable,\n\t\tsTableTargetColProperty: string\n\t) => { sTableTargetColName: string | undefined; sTableTargetColProperty: string | undefined };\n\tgetTableColProperty: (oTable: Control, oMessageObject: MessageWithHeader, oContextPath?: string | RegExp) => string;\n\tgetMessageSubtitle: (\n\t\tmessage: MessageWithHeader,\n\t\toTableRowBindingContexts: ODataV4Context[],\n\t\toTableRowContext: ODataV4Context | undefined,\n\t\tsTableTargetColName: string | undefined,\n\t\toTable: MDCTable,\n\t\tbIsCreationRow: boolean | undefined,\n\t\toTargetedControl?: Control\n\t) => string | null | undefined;\n\tdetermineColumnInfo: (oColFromTableSettings: TableColumn | undefined, resourceModel: ResourceModel) => ColumnInfoType;\n\tfetchColumnInfo: (oMessage: MessageWithHeader, oTable: MDCTable) => TableColumn | undefined;\n\tgetTableColBindingContextForTextAnnotation: (\n\t\ttable: MDCTable,\n\t\ttableRowContext: ODataV4Context | undefined,\n\t\ttableColProperty: TableColumnProperties\n\t) => Context | null | undefined;\n\tgetMessageRank: (obj: MessageWithHeader) => number;\n\tfnCallbackSetGroupName: (aMessage: MessageWithHeader, sActionName: string | undefined, bIsGeneralGroupName?: boolean) => void;\n\tsetGroupNameOPDisplayMode: (aModelData: MessageWithHeader, sActionName: string | undefined, control: View) => void;\n\tupdateMessageObjectGroupName: (\n\t\tmessagesToShow: MessageWithHeader[],\n\t\tcontrol: Control | undefined,\n\t\tsActionName: string | undefined,\n\t\tviewType: string | undefined\n\t) => void;\n\tsetGroupNameLRTable: (control: Control | undefined, aModelData: MessageWithHeader, sActionName: string | undefined) => void;\n\tisControlInTable: (oTable: MDCTable, sControlId: string) => UI5Element[] | boolean;\n\tisControlPartOfCreationRow: (oControl: UI5Element | undefined) => boolean;\n\tremoveMessageShownInMessageStrip: (transientMessages: Message[], context: Context) => Message[];\n\tgetFiltersForMessages: (showBoundTransition: boolean, showStateMessages?: boolean) => Filter[];\n\tshowMessageToast: (message: Message) => Promise<void>;\n\tshowMessageDialogControl: (uiDecisions: MessageUIDecisions, runToTest?: boolean) => Promise<void | Dialog>;\n\tshowMessageBoxControl: (uiDecisions: MessageUIDecisions) => Promise<void>;\n\tgetMessagesForContext: (context: ODataV4Context) => Message[];\n\tisMessageOutOfParameterDialog: (aControlIds: string[]) => boolean;\n\tremoveContextMessagesfromModel: (messages?: Message[], context?: Context[]) => void;\n\tremoveMessagesForActionParameterDialog: (Messages: Message[]) => Message[];\n\tsetGroupNameOPTableDisplayMode(\n\t\tsubsection: ObjectPageSubSection,\n\t\tmdcTable: MDCTable,\n\t\tmessage: MessageWithHeader,\n\t\tviewContext: Context | null | undefined,\n\t\tgroupNameIsGeneral: boolean,\n\t\tactionName?: string\n\t): boolean;\n\tupdateAddtionalTextForMessageInOPTable(mdcTable: MDCTable, message: MessageWithHeader, targetTableInfo: TargetTableInfoType): void;\n\tupdateHeaderNameForMessageInOPTable(\n\t\tsubsection: ObjectPageSubSection,\n\t\tmdcTable: MDCTable,\n\t\tmessage: MessageWithHeader,\n\t\ttargetTableInfo: TargetTableInfoType\n\t): void;\n\tcloseMessageBox(messageShown: MessageWithHeader, callBack: (value: void) => void, singleGenericMessageId: string): void;\n\tremoveTransistionMessageForContext: (oContext: Context) => void;\n\tcheckIfAllAreSameSuccessMessages: (messagesToShow: MessageWithHeader[]) => boolean;\n\taddGenericSuccessMessage: (\n\t\tresourceModel: ResourceModel,\n\t\tshowMessageDialogParameter?: ShowMessageDialogParameter\n\t) => MessageWithHeader | undefined;\n};\n\nfunction fnFormatTechnicalDetails(): string {\n\tlet sPreviousGroupName: string;\n\n\t// Insert technical detail if it exists\n\tfunction insertDetail(oProperty: { groupName: string; property: string }): string {\n\t\treturn oProperty.property\n\t\t\t? \"( ${\" +\n\t\t\t\t\toProperty.property +\n\t\t\t\t\t'} ? (\"<p>' +\n\t\t\t\t\toProperty.property.substring(Math.max(oProperty.property.lastIndexOf(\"/\"), oProperty.property.lastIndexOf(\".\")) + 1) +\n\t\t\t\t\t' : \" + ' +\n\t\t\t\t\t\"${\" +\n\t\t\t\t\toProperty.property +\n\t\t\t\t\t'} + \"</p>\") : \"\" )'\n\t\t\t: \"\";\n\t}\n\t// Insert groupname if it exists\n\tfunction insertGroupName(oProperty: { groupName: string; property: string }): string {\n\t\tlet sHTML = \"\";\n\t\tif (oProperty.groupName && oProperty.property && oProperty.groupName !== sPreviousGroupName) {\n\t\t\tsHTML += \"( ${\" + oProperty.property + '} ? \"<br><h3>' + oProperty.groupName + '</h3>\" : \"\" ) + ';\n\t\t\tsPreviousGroupName = oProperty.groupName;\n\t\t}\n\t\treturn sHTML;\n\t}\n\n\t// List of technical details to be shown\n\tfunction getPaths(): { groupName: string; property: string }[] {\n\t\tconst sTD = \"technicalDetails\"; // name of property in message model data for technical details\n\t\treturn [\n\t\t\t{ groupName: \"\", property: `${sTD}/status` },\n\t\t\t{ groupName: \"\", property: `${sTD}/statusText` },\n\t\t\t{ groupName: \"Application\", property: `${sTD}/error/@SAP__common.Application/ComponentId` },\n\t\t\t{ groupName: \"Application\", property: `${sTD}/error/@SAP__common.Application/ServiceId` },\n\t\t\t{ groupName: \"Application\", property: `${sTD}/error/@SAP__common.Application/ServiceRepository` },\n\t\t\t{ groupName: \"Application\", property: `${sTD}/error/@SAP__common.Application/ServiceVersion` },\n\t\t\t{ groupName: \"ErrorResolution\", property: `${sTD}/error/@SAP__common.ErrorResolution/Analysis` },\n\t\t\t{ groupName: \"ErrorResolution\", property: `${sTD}/error/@SAP__common.ErrorResolution/Note` },\n\t\t\t{ groupName: \"ErrorResolution\", property: `${sTD}/error/@SAP__common.ErrorResolution/DetailedNote` },\n\t\t\t{ groupName: \"ErrorResolution\", property: `${sTD}/error/@SAP__common.ExceptionCategory` },\n\t\t\t{ groupName: \"ErrorResolution\", property: `${sTD}/error/@SAP__common.TimeStamp` },\n\t\t\t{ groupName: \"ErrorResolution\", property: `${sTD}/error/@SAP__common.TransactionId` },\n\t\t\t{ groupName: \"Messages\", property: `${sTD}/error/code` },\n\t\t\t{ groupName: \"Messages\", property: `${sTD}/error/message` }\n\t\t];\n\t}\n\n\tlet sHTML = \"Object.keys(\" + \"${technicalDetails}\" + ').length > 0 ? \"<h2>Technical Details</h2>\" : \"\" ';\n\tgetPaths().forEach(function (oProperty: { groupName: string; property: string }) {\n\t\tsHTML = `${sHTML + insertGroupName(oProperty)}${insertDetail(oProperty)} + `;\n\t});\n\treturn sHTML;\n}\nfunction fnFormatDescription(): string {\n\treturn \"(${\" + \"description} ? (${\" + 'description}) : \"\")';\n}\n/**\n * Calculates the highest priority message type(Error/Warning/Success/Information) from the available messages.\n * @param [aMessages] Messages list\n * @returns Highest priority message from the available messages\n */\nfunction fnGetHighestMessagePriority(aMessages: MessageItem[]): MessageType {\n\tlet sMessagePriority = MessageType.None;\n\tconst iLength = aMessages.length;\n\tconst oMessageCount = { Error: 0, Warning: 0, Success: 0, Information: 0 };\n\n\tfor (let i = 0; i < iLength; i++) {\n\t\t++oMessageCount[aMessages[i].getType() as keyof typeof oMessageCount];\n\t}\n\tif (oMessageCount[MessageType.Error] > 0) {\n\t\tsMessagePriority = MessageType.Error;\n\t} else if (oMessageCount[MessageType.Warning] > 0) {\n\t\tsMessagePriority = MessageType.Warning;\n\t} else if (oMessageCount[MessageType.Success] > 0) {\n\t\tsMessagePriority = MessageType.Success;\n\t} else if (oMessageCount[MessageType.Information] > 0) {\n\t\tsMessagePriority = MessageType.Information;\n\t}\n\treturn sMessagePriority;\n}\n// function which modify e-Tag messages only.\n// returns : true, if any e-Tag message is modified, otherwise false.\nfunction fnModifyETagMessagesOnly(oResourceBundle: ResourceBundle, concurrentEditFlag: boolean | undefined): boolean {\n\tconst aMessages = Messaging.getMessageModel().getObject(\"/\");\n\tlet bMessagesModified = false;\n\tlet sEtagMessage = \"\";\n\taMessages.forEach(function (oMessage: Message, i: number) {\n\t\tconst oTechnicalDetails = oMessage.getTechnicalDetails && (oMessage.getTechnicalDetails() as MessageTechnicalDetails);\n\t\tif (oTechnicalDetails && oTechnicalDetails.httpStatus === 412 && oTechnicalDetails.isConcurrentModification) {\n\t\t\tif (concurrentEditFlag) {\n\t\t\t\tsEtagMessage =\n\t\t\t\t\tsEtagMessage || oResourceBundle.getText(\"C_APP_COMPONENT_SAPFE_ETAG_TECHNICAL_ISSUES_CONCURRENT_MODIFICATION\");\n\t\t\t} else {\n\t\t\t\tsEtagMessage = sEtagMessage || oResourceBundle.getText(\"C_APP_COMPONENT_SAPFE_ETAG_TECHNICAL_ISSUES\");\n\t\t\t}\n\t\t\tMessaging.removeMessages(aMessages[i]);\n\t\t\toMessage.setMessage(sEtagMessage);\n\t\t\toMessage.setTargets([\"\"]);\n\t\t\tMessaging.addMessages(oMessage);\n\t\t\tbMessagesModified = true;\n\t\t}\n\t});\n\treturn bMessagesModified;\n}\n// Dialog close Handling\nfunction dialogCloseHandler(): void {\n\tdialogControl.close();\n\toBackButton.setVisible(false);\n\tconst msgView = dialogControl.getContent()[0] as MessageView;\n\tconst oMessageDialogModel = msgView.getModel() as JSONModel | undefined;\n\tif (oMessageDialogModel) {\n\t\toMessageDialogModel.setData({});\n\t}\n\tremoveUnboundTransitionMessages();\n}\nfunction getRetryAfterMessage(oMessage: Message, bMessageDialog?: boolean): string | undefined {\n\tconst dNow = new Date();\n\tconst oTechnicalDetails = oMessage.getTechnicalDetails() as MessageTechnicalDetails | undefined;\n\tconst oResourceBundle = Library.getResourceBundleFor(\"sap.fe.core\")!;\n\tlet sRetryAfterMessage;\n\tif (oTechnicalDetails && oTechnicalDetails.httpStatus === 503 && oTechnicalDetails.retryAfter) {\n\t\tconst dRetryAfter = oTechnicalDetails.retryAfter;\n\t\tlet oDateFormat;\n\t\tif (dNow.getFullYear() !== dRetryAfter.getFullYear()) {\n\t\t\t//different years\n\t\t\toDateFormat = DateFormat.getDateTimeInstance({\n\t\t\t\tpattern: \"MMMM dd, yyyy 'at' hh:mm a\"\n\t\t\t});\n\t\t\tsRetryAfterMessage = oResourceBundle.getText(\"C_MESSAGE_HANDLING_SAPFE_503_ERROR\", [oDateFormat.format(dRetryAfter)]);\n\t\t} else if (dNow.getFullYear() == dRetryAfter.getFullYear()) {\n\t\t\t//same year\n\t\t\tif (bMessageDialog) {\n\t\t\t\t//less than 2 min\n\t\t\t\tsRetryAfterMessage = `${oResourceBundle.getText(\"C_MESSAGE_HANDLING_SAPFE_503_TITLE\")} ${oResourceBundle.getText(\n\t\t\t\t\t\"C_MESSAGE_HANDLING_SAPFE_503_DESC\"\n\t\t\t\t)}`;\n\t\t\t} else if (dNow.getMonth() !== dRetryAfter.getMonth() || dNow.getDate() !== dRetryAfter.getDate()) {\n\t\t\t\toDateFormat = DateFormat.getDateTimeInstance({\n\t\t\t\t\tpattern: \"MMMM dd 'at' hh:mm a\"\n\t\t\t\t}); //different months or different days of same month\n\t\t\t\tsRetryAfterMessage = oResourceBundle.getText(\"C_MESSAGE_HANDLING_SAPFE_503_ERROR\", [oDateFormat.format(dRetryAfter)]);\n\t\t\t} else {\n\t\t\t\t//same day\n\t\t\t\toDateFormat = DateFormat.getDateTimeInstance({\n\t\t\t\t\tpattern: \"hh:mm a\"\n\t\t\t\t});\n\t\t\t\tsRetryAfterMessage = oResourceBundle.getText(\"C_MESSAGE_HANDLING_SAPFE_503_ERROR_DAY\", [oDateFormat.format(dRetryAfter)]);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (oTechnicalDetails && oTechnicalDetails.httpStatus === 503 && !oTechnicalDetails.retryAfter) {\n\t\tsRetryAfterMessage = oResourceBundle.getText(\"C_MESSAGE_HANDLING_SAPFE_503_ERROR_NO_RETRY_AFTER\");\n\t}\n\treturn sRetryAfterMessage;\n}\n\n/**\n * Checks if there are any warning or error messages(bound and unbound)..\n * @returns Boolean indicating existence of messages\n */\nfunction hasTransitionErrorsOrWarnings(): boolean {\n\treturn [...getMessages(undefined, true), ...getMessages(true, true)].some(function (message: Message) {\n\t\treturn message.getType() === \"Error\" || message.getType() === \"Warning\";\n\t});\n}\n\nfunction prepareMessageViewForDialog(\n\toMessageDialogModel: JSONModel,\n\tbStrictHandlingFlow: boolean,\n\tmulti412?: boolean\n): {\n\tmessageView: MessageView;\n\toBackButton: Button;\n} {\n\tlet oMessageTemplate: MessageItem;\n\tif (!bStrictHandlingFlow) {\n\t\tconst descriptionBinding = '{= ${description} ? \"<html><body>\" + ' + fnFormatDescription() + ' + \"</html></body>\" : \"\" }';\n\t\tconst technicalDetailsBinding =\n\t\t\t'{= ${technicalDetails} ? \"<html><body>\" + ' + fnFormatTechnicalDetails() + ' + \"</html></body>\" : \"\" }';\n\t\toMessageTemplate = new MessageItem(undefined, {\n\t\t\tcounter: { path: \"counter\" },\n\t\t\ttitle: \"{message}\",\n\t\t\tsubtitle: \"{additionalText}\",\n\t\t\tlongtextUrl: \"{descriptionUrl}\",\n\t\t\ttype: { path: \"type\" },\n\t\t\tgroupName: \"{headerName}\",\n\t\t\tdescription: descriptionBinding + technicalDetailsBinding,\n\t\t\tmarkupDescription: true\n\t\t});\n\t} else if (multi412) {\n\t\toMessageTemplate = new MessageItem(undefined, {\n\t\t\tcounter: { path: \"counter\" },\n\t\t\ttitle: \"{message}\",\n\t\t\tsubtitle: \"{additionalText}\",\n\t\t\tlongtextUrl: \"{descriptionUrl}\",\n\t\t\ttype: { path: \"type\" },\n\t\t\tdescription: \"{description}\",\n\t\t\tmarkupDescription: true\n\t\t});\n\t} else {\n\t\toMessageTemplate = new MessageItem({\n\t\t\ttitle: \"{message}\",\n\t\t\ttype: { path: \"type\" },\n\t\t\tlongtextUrl: \"{descriptionUrl}\"\n\t\t});\n\t}\n\tmessageView = new MessageView({\n\t\tshowDetailsPageHeader: false,\n\t\titemSelect: function (): void {\n\t\t\toBackButton.setVisible(true);\n\t\t},\n\t\titems: {\n\t\t\tpath: \"/\",\n\t\t\ttemplate: oMessageTemplate,\n\t\t\tlength: 9999\n\t\t}\n\t});\n\tmessageView.setGroupItems(true);\n\toBackButton =\n\t\toBackButton ||\n\t\tnew Button({\n\t\t\ticon: IconPool.getIconURI(\"nav-back\"),\n\t\t\tvisible: false,\n\t\t\tpress: function (this: Button): void {\n\t\t\t\tmessageView.navigateBack();\n\t\t\t\tthis.setVisible(false);\n\t\t\t}\n\t\t});\n\t// Update proper ETag Mismatch error\n\tmessageView.setModel(oMessageDialogModel);\n\treturn {\n\t\tmessageView,\n\t\toBackButton\n\t};\n}\n\nexport type ShowMessageParameters = {\n\tshowMessageBox?: boolean;\n\tshowMessageDialog?: boolean;\n\tshowChangeSetErrorDialog?: boolean;\n\tfilteredMessages?: Message[];\n\tfnGetMessageSubtitle?: Function;\n\tcontainsBoundTransistion?: boolean;\n};\n\nfunction isNonTechnicalMessage(message: Message): boolean {\n\tconst technicalDetails = message.getTechnicalDetails() as MessageTechnicalDetails | undefined;\n\tif (\n\t\t(technicalDetails &&\n\t\t\t((technicalDetails.originalMessage !== undefined && technicalDetails.originalMessage !== null) ||\n\t\t\t\t(technicalDetails.httpStatus !== undefined && technicalDetails.httpStatus !== null))) ||\n\t\tmessage.getCode()\n\t) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n/**\n * Get transition messages for creating the UI decision to show messages.\n * @param showBoundTransition Should bound transition messages be shown.\n * @param _context Binding context of the page.\n * @returns Transition messages relevant to show in UI.\n */\nfunction getTransitionMessagesForUIDecision(this: messageHandlingType, showBoundTransition: boolean, _context: ODataV4Context): Message[] {\n\tlet transitionMessages = this.getMessages();\n\tif (showBoundTransition) {\n\t\t//bound Transistion Messages\n\t\ttransitionMessages = transitionMessages.concat(this.getMessages(true, true));\n\t}\n\treturn transitionMessages;\n}\n\n/**\n * Execute 'onBeforeShowMessages' callback to let the caller influence the UI decision to show messages.\n * @param transitionMessages Transition messages.\n * @param onBeforeShowMessage Callback.\n * @returns ShowMessageParameters Infromation to change UI decision based on onBeforeShowMessages callback implementation.\n */\nfunction executeOnBeforeShowMessages(\n\ttransitionMessages: MessageWithHeader[],\n\tonBeforeShowMessage?: (messages: Message[], showMessageParameters: ShowMessageParameters) => ShowMessageParameters\n): {\n\tuiElementToUse: SupportedUIElement;\n\tmessagesToShow: MessageWithHeader[];\n\tfnGetMessageSubtitle?: Function;\n\tshowChangeSetErrorDialog?: boolean;\n\tcontainsBoundTransition?: boolean;\n} {\n\tlet messagesToShow = [...transitionMessages];\n\tlet uiElementToUse: SupportedUIElement =\n\t\ttransitionMessages.length === 1 && transitionMessages[0].getCode() === \"503\" ? \"Box\" : \"Dialog\";\n\tlet fnGetMsgSubtitle: Function | undefined;\n\tlet showBoundMessages: boolean | undefined;\n\n\tif (onBeforeShowMessage) {\n\t\t// The callback onBeforeShowMessage alters the UIElement to use in a different format(showMessageDialog and showMessageBox).\n\t\tconst showMessageParameters: ShowMessageParameters = {\n\t\t\tshowMessageDialog: uiElementToUse === \"Dialog\",\n\t\t\tshowMessageBox: uiElementToUse === \"Box\"\n\t\t};\n\t\tconst {\n\t\t\tshowMessageBox,\n\t\t\tshowMessageDialog,\n\t\t\tshowChangeSetErrorDialog,\n\t\t\tfilteredMessages,\n\t\t\tfnGetMessageSubtitle,\n\t\t\tcontainsBoundTransistion\n\t\t} = onBeforeShowMessage(transitionMessages, showMessageParameters);\n\t\tif (showMessageBox === true) {\n\t\t\tuiElementToUse = \"Box\";\n\t\t} else if (showMessageDialog === true) {\n\t\t\tuiElementToUse = \"Dialog\";\n\t\t} else {\n\t\t\tuiElementToUse = \"None\";\n\t\t}\n\t\tshowBoundMessages = containsBoundTransistion;\n\t\tfnGetMsgSubtitle = fnGetMessageSubtitle;\n\t\tif (showChangeSetErrorDialog || containsBoundTransistion === false) {\n\t\t\tmessagesToShow = filteredMessages ?? [];\n\t\t}\n\t}\n\n\treturn {\n\t\tuiElementToUse,\n\t\tmessagesToShow,\n\t\tfnGetMessageSubtitle: fnGetMsgSubtitle,\n\t\tcontainsBoundTransition: showBoundMessages\n\t};\n}\n\n/**\n * Create UI decisions for showing messages.\n *\n * These shall contain the messages to show and the UI element to use.\n * It would also hold information for after process like..\n * 1. refresh context due to etag mismatch.\n * 2. do we show bound messages and hence clear them after we show the UI element.\n * @param customMessages Custom messages to add to message model and show.\n * @param context Binding context of the page.\n * @param showBoundTransition Should bound transition messages be shown.\n * @param concurrentEditFlag Is this a concurrent edit scenario.\n * @param control Source control.\n * @param actionName Name of the action whose process requested for messages to be shown.\n * @param onBeforeShowMessage Callback to influence UI decision before creating final UI decision.\n * @param viewType View type, list report or object page.\n * @param showStateMessages Should state messages be shown.\n * @param messageDialogParameter\n * @returns UI decisions used to show messages.\n */\nfunction getUIDecisions(\n\tthis: messageHandlingType,\n\tcustomMessages: CustomMessage[] | undefined,\n\tcontext: ODataV4Context,\n\tshowBoundTransition = false,\n\tconcurrentEditFlag?: boolean,\n\tcontrol?: Control,\n\tactionName?: string | undefined,\n\tonBeforeShowMessage?: (messages: Message[], showMessageParameters: ShowMessageParameters) => ShowMessageParameters,\n\tviewType?: string,\n\tshowStateMessages = false,\n\tmessageDialogParameter?: ShowMessageDialogParameter\n): MessageUIDecisions {\n\t// Add Custom messages\n\t// TODO: Will these messages be part of transitionMessages?\n\tif (customMessages && customMessages.length) {\n\t\taddCustomMessages(customMessages);\n\t}\n\n\t// Get transistion Messages\n\tconst transitionMessages = getTransitionMessagesForUIDecision.call(this, showBoundTransition, context);\n\n\t// UI representation of the Dialog\n\tconst uiDecisionIntermittent = executeOnBeforeShowMessages.call(this, transitionMessages, onBeforeShowMessage);\n\tlet { messagesToShow, uiElementToUse = \"Dialog\" } = uiDecisionIntermittent;\n\t// Get Filters for Unbound Messages\n\tshowBoundTransition = uiDecisionIntermittent.containsBoundTransition ?? showBoundTransition;\n\tconst filters = getFiltersForMessages(showBoundTransition, showStateMessages);\n\tmessagesToShow = getMessagesToShow(filters, messagesToShow ?? []);\n\t// handle context bound messages, If there is a single message of which is bounded to the context then remove that from the dialog\n\tmessagesToShow = removeMessageShownInMessageStrip(messagesToShow, context);\n\t({ messagesToShow, uiElementToUse } = processMessagesFromChangesetFailure({ messagesToShow, uiElementToUse }));\n\t// Modify ETag Messages\n\tconst hasEtagMessage = this.modifyETagMessagesOnly(Library.getResourceBundleFor(\"sap.fe.core\")!, concurrentEditFlag);\n\n\tif (messagesToShow.length > 0 && uiElementToUse !== \"None\") {\n\t\tif (messagesToShow.length > 1 && checkIfAllAreSameSuccessMessages(messagesToShow)) {\n\t\t\tconst genericSuccessMessage = addGenericSuccessMessage(getResourceModel(control as Control), messageDialogParameter);\n\t\t\tmessagesToShow = genericSuccessMessage ? [genericSuccessMessage] : [messagesToShow[0]];\n\t\t}\n\t\tif (messagesToShow.length === 1) {\n\t\t\tconst messageToShow = messagesToShow[0];\n\t\t\tif (messageToShow.getType() === MessageType.Success) {\n\t\t\t\tuiElementToUse = \"Toast\";\n\t\t\t} else if (hasEtagMessage || messageToShow.getDescription()?.length || messageToShow.getDescriptionUrl()?.length) {\n\t\t\t\tuiElementToUse = \"Dialog\";\n\t\t\t} else {\n\t\t\t\t// We would show single message in message box only when:\n\t\t\t\t// 1. It is not an Etag message.\n\t\t\t\t// 2. There is no message description or description url available for long text.\n\t\t\t\tuiElementToUse = \"Box\";\n\t\t\t}\n\t\t}\n\t\tmessageHandling.updateMessageObjectGroupName(messagesToShow, control, actionName, viewType);\n\t\tconst fnGetMessageSubtitle = uiDecisionIntermittent.fnGetMessageSubtitle;\n\t\tif (fnGetMessageSubtitle) {\n\t\t\tmessagesToShow.forEach(function (oMessage: Message) {\n\t\t\t\tfnGetMessageSubtitle(oMessage);\n\t\t\t});\n\t\t}\n\t}\n\n\treturn {\n\t\tmessagesToShow,\n\t\tuiElementToUse,\n\t\tcontextNeedsEtagRefresh: hasEtagMessage ? context : undefined,\n\t\tcontainsBoundTransition: showBoundTransition\n\t};\n}\n\n/**\n * Adding a generic success message to message model for readability.\n * @param resourceModel Resource model for message text\n * @param showMessageDialogParameter Selected contexts for which the message is shown.\n * @returns Message with generic success message.\n */\nfunction addGenericSuccessMessage(\n\tresourceModel: ResourceModel,\n\tshowMessageDialogParameter?: ShowMessageDialogParameter\n): MessageWithHeader | undefined {\n\tconst selectionContexts = showMessageDialogParameter?.aSelectedContexts;\n\tif (selectionContexts && Array.isArray(selectionContexts) && selectionContexts?.length > 1 && resourceModel) {\n\t\tlet actionName = showMessageDialogParameter?.boundActionName;\n\t\tconst entitySetName = showMessageDialogParameter?.entitySet;\n\t\tactionName = actionName?.includes(\".\") ? actionName?.split(\".\")[actionName?.split(\".\").length - 1] : actionName;\n\t\tconst suffixResourceKey = actionName && entitySetName ? `${entitySetName}|${actionName}` : \"\";\n\t\treturn new Message({\n\t\t\tmessage: resourceModel.getText(\"C_COMMON_SUCCESS_MESSAGE\", [selectionContexts?.length], suffixResourceKey),\n\t\t\ttype: MessageType.Success,\n\t\t\ttarget: \"\",\n\t\t\tpersistent: true,\n\t\t\tcode: \"C_COMMON_SUCCESS_MESSAGE\"\n\t\t});\n\t}\n}\n/**\n * Check is all are same success messages.\n * @param messagesToShow Initial messages to show.\n * @returns If all are same success messages.\n */\nfunction checkIfAllAreSameSuccessMessages(messagesToShow: MessageWithHeader[]): boolean {\n\tlet referenceMsg: MessageWithHeader;\n\tconst checkFailed = messagesToShow.some((msg, idx) => {\n\t\tif (msg.getType() !== MessageType.Success) {\n\t\t\t// Non success message\n\t\t\treturn true;\n\t\t}\n\t\tif (idx === 0) {\n\t\t\t// 1st Message\n\t\t\treferenceMsg = msg;\n\t\t\treturn false;\n\t\t} else if (\n\t\t\treferenceMsg.getCode() === msg.getCode() &&\n\t\t\treferenceMsg.getMessage() === msg.getMessage() &&\n\t\t\treferenceMsg.getDescription() === msg.getDescription() &&\n\t\t\treferenceMsg.getDescriptionUrl() === msg.getDescriptionUrl() &&\n\t\t\treferenceMsg.getAdditionalText() === msg.getAdditionalText()\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t});\n\n\treturn !checkFailed;\n}\n\n/**\n * Show messages in the decided UI Element.\n * @param uiDecisions UI Decision to be used to show the messages.\n * @returns Promise that resolves or rejects based on user interaction with the UI element.\n */\nasync function showMessagesInUI(uiDecisions: MessageUIDecisions): Promise<void> {\n\tconst { messagesToShow, uiElementToUse } = uiDecisions;\n\n\t// Show Dialog / MessageBox / MessageToast\n\tif (messagesToShow.length === 0) {\n\t\t// Don't show the popup if there are no messages\n\t\treturn Promise.resolve(undefined);\n\t} else if (uiElementToUse === \"Toast\") {\n\t\treturn messageHandling.showMessageToast(messagesToShow[0]);\n\t} else if (uiElementToUse === \"Dialog\") {\n\t\tawait messageHandling.showMessageDialogControl(uiDecisions);\n\t\treturn Promise.resolve(undefined);\n\t} else if (uiElementToUse === \"Box\") {\n\t\treturn messageHandling.showMessageBoxControl(uiDecisions);\n\t} else {\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\n/**\n * Get model filters for getting the relevant messages.\n * @param showBoundTransition Should bound transition messages be shown.\n * @param showStateMessages Should state messages be shown.\n * @returns Model filters\n */\nfunction getFiltersForMessages(showBoundTransition: boolean, showStateMessages = false): Filter[] {\n\tconst filters = showStateMessages ? [] : [new Filter({ path: \"persistent\", operator: FilterOperator.NE, value1: false })];\n\tconst isNonTechnicalMessageFilter = new Filter({ path: \"\", test: isNonTechnicalMessage });\n\n\tif (showStateMessages || showBoundTransition) {\n\t\t// Add the filter for both state messages or bound transition messages\n\t\tconst fnCheckControlIdInDialog = function (aControlIds: string[]): boolean {\n\t\t\treturn messageHandling.isMessageOutOfParameterDialog(aControlIds);\n\t\t};\n\t\tfilters.push(\n\t\t\tnew Filter({\n\t\t\t\tpath: \"controlIds\",\n\t\t\t\ttest: fnCheckControlIdInDialog,\n\t\t\t\tcaseSensitive: true\n\t\t\t})\n\t\t);\n\n\t\tif (showBoundTransition && !showStateMessages) {\n\t\t\t// Add extra filter if only bound transition messages are shown\n\t\t\tfilters.push(new Filter({ path: \"persistent\", operator: FilterOperator.EQ, value1: true }));\n\t\t\tfilters.push(isNonTechnicalMessageFilter);\n\t\t}\n\t} else {\n\t\t// Only unbound messages should be shown\n\t\tfilters.push(\n\t\t\tnew Filter({\n\t\t\t\tfilters: [\n\t\t\t\t\tnew Filter({\n\t\t\t\t\t\tpath: \"\",\n\t\t\t\t\t\ttest: (message: Message) => message.getTargets().length === 0 || message.getTargets()[0] === \"\"\n\t\t\t\t\t}),\n\t\t\t\t\tisNonTechnicalMessageFilter\n\t\t\t\t],\n\t\t\t\tand: true\n\t\t\t})\n\t\t);\n\t}\n\n\treturn filters;\n}\n\nfunction processMessagesFromChangesetFailure({\n\tmessagesToShow,\n\tuiElementToUse\n}: Pick<MessageUIDecisions, \"uiElementToUse\" | \"messagesToShow\">): Pick<MessageUIDecisions, \"uiElementToUse\" | \"messagesToShow\"> {\n\tlet retMessages = [...messagesToShow];\n\tif (messagesToShow.length === 2) {\n\t\t// There are 2 message:\n\t\t// 1. Generic error changeset message added by FE.\n\t\t// 2. Main error message from the interaction.\n\t\t// We remove the generic message, show only an enhanced 'Main error message' with a generic messsage pre-text in the message box.\n\t\tconst genericMsgs: Message[] = [];\n\t\tconst nonGenericMsgs: Message[] = [];\n\t\tmessagesToShow.forEach((message) => {\n\t\t\tif (message.getCode() === \"FE_CUSTOM_MESSAGE_CHANGESET_ALL_FAILED\") {\n\t\t\t\tgenericMsgs.push(message);\n\t\t\t} else {\n\t\t\t\tnonGenericMsgs.push(message);\n\t\t\t}\n\t\t});\n\t\tif (genericMsgs.length === 1) {\n\t\t\tconst { fe: feTechnicalDetails } = (genericMsgs[0].getTechnicalDetails() || {}) as FEMessageTechnicalDetails;\n\t\t\tif (feTechnicalDetails?.changeSetPreTextForSingleError) {\n\t\t\t\tconst preText = feTechnicalDetails?.changeSetPreTextForSingleError;\n\t\t\t\tif (preText) {\n\t\t\t\t\tconst techDetailsForNonGenericMessage: FEMessageTechnicalDetails = {\n\t\t\t\t\t\tfe: {\n\t\t\t\t\t\t\tsingleErrorPreText: preText,\n\t\t\t\t\t\t\tsingleGenericMessageId: genericMsgs[0].getId()\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tconst existingTechDetails = nonGenericMsgs[0].getTechnicalDetails() ?? {};\n\t\t\t\t\t// combine existing technical details if any, with the change set information we want to add.\n\t\t\t\t\tnonGenericMsgs[0].setTechnicalDetails({ ...existingTechDetails, ...techDetailsForNonGenericMessage });\n\t\t\t\t\tretMessages = nonGenericMsgs;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn {\n\t\tmessagesToShow: retMessages,\n\t\tuiElementToUse: retMessages.length === 1 && uiElementToUse !== \"None\" ? \"Box\" : uiElementToUse\n\t};\n}\n\n/**\n * Add the custom messages to message model.\n * @param customMessages Custom messages to add.\n */\nfunction addCustomMessages(customMessages: CustomMessage[]): void {\n\tcustomMessages.forEach(function (oMessage: CustomMessage) {\n\t\tconst messageCode = oMessage.code ? oMessage.code : \"\";\n\t\tMessaging.addMessages(\n\t\t\tnew Message({\n\t\t\t\tmessage: oMessage.text,\n\t\t\t\ttype: oMessage.type,\n\t\t\t\ttarget: \"\",\n\t\t\t\tpersistent: true,\n\t\t\t\tcode: messageCode\n\t\t\t})\n\t\t);\n\t\t//The target and persistent properties of the message are hardcoded as \"\" and true because the function deals with only unbound messages.\n\t});\n}\n\nfunction getSorterForMessages(): Sorter {\n\treturn new Sorter(\"\", undefined, undefined, (obj1: MessageWithHeader, obj2: MessageWithHeader) => {\n\t\tconst rankA = getMessageRank(obj1);\n\t\tconst rankB = getMessageRank(obj2);\n\n\t\tif (rankA < rankB) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (rankA > rankB) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t});\n}\n\nfunction getMessagesToShow(filters: Filter[], transistionMessages: Message[]): MessageWithHeader[] {\n\tlet messagesToShow: MessageWithHeader[] = [...transistionMessages];\n\tconst listBinding = Messaging.getMessageModel().bindList(\"/\", undefined, undefined, filters),\n\t\tcurrentContexts = listBinding.getCurrentContexts();\n\tif (currentContexts.length > 0) {\n\t\t// if false, show messages in dialog\n\t\t// As fitering has already happened here hence\n\t\t// using the message model again for the message dialog view and then filtering on that binding again is unnecessary.\n\t\t// So we create new json model to use for the message dialog view.\n\t\tconst messages = currentContexts.map((currentContext) => currentContext.getObject());\n\t\tconst oUniqueObj: Record<string, boolean> = {};\n\n\t\tmessagesToShow = messages.concat(messagesToShow).filter(function (obj: Message) {\n\t\t\t// remove entries having duplicate message ids\n\t\t\treturn !oUniqueObj[obj.getId()] && (oUniqueObj[obj.getId()] = true);\n\t\t});\n\t}\n\treturn messagesToShow;\n}\n\nasync function showMessageToast(message: Message): Promise<void> {\n\treturn new Promise<void>((resolve) => {\n\t\tMessageToast.show(message.getMessage());\n\t\tMessaging.removeMessages(message);\n\t\tresolve(undefined);\n\t});\n}\n\nasync function showMessageDialogControl(uiDecision: MessageUIDecisions, runToTest = false): Promise<void | Dialog> {\n\tlet highestPriority;\n\tlet highestPriorityText;\n\treturn new Promise(function (resolve: (param1: void | Dialog) => void) {\n\t\taResolveFunctions.push(resolve);\n\t\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.core\")!;\n\t\tconst strictHandlingFlow = false;\n\t\tconst { messagesToShow, contextNeedsEtagRefresh } = uiDecision;\n\t\tconst messageDialogModel = new JSONModel(messagesToShow);\n\t\tconst messageObject = prepareMessageViewForDialog(messageDialogModel, strictHandlingFlow);\n\t\tconst sorter = getSorterForMessages();\n\t\t(messageObject.messageView.getBinding(\"items\") as ODataListBinding).sort(sorter);\n\n\t\tif (!dialogControl || !dialogControl.isOpen()) {\n\t\t\tdialogControl = new Dialog({\n\t\t\t\tresizable: true,\n\t\t\t\tendButton: new Button({\n\t\t\t\t\tpress: function (): void {\n\t\t\t\t\t\tdialogCloseHandler();\n\t\t\t\t\t\t// also remove bound transition messages if we were showing them\n\t\t\t\t\t\tMessaging.removeMessages(messagesToShow);\n\t\t\t\t\t},\n\t\t\t\t\ttext: resourceBundle.getText(\"C_COMMON_SAPFE_CLOSE\")\n\t\t\t\t}),\n\t\t\t\tescapeHandler: function (completionPromise: { resolve: Function; reject: Function }): void {\n\t\t\t\t\tdialogCloseHandler();\n\t\t\t\t\t// also remove bound transition messages if we were showing them\n\t\t\t\t\tMessaging.removeMessages(messagesToShow);\n\t\t\t\t\tcompletionPromise.resolve();\n\t\t\t\t},\n\t\t\t\tcustomHeader: new Bar({\n\t\t\t\t\tcontentMiddle: [\n\t\t\t\t\t\tnew Text({\n\t\t\t\t\t\t\ttext: resourceBundle.getText(\"C_MESSAGE_HANDLING_SAPFE_ERROR_MESSAGES_PAGE_TITLE\")\n\t\t\t\t\t\t})\n\t\t\t\t\t],\n\t\t\t\t\tcontentLeft: [oBackButton]\n\t\t\t\t}),\n\t\t\t\tcontentWidth: \"37.5em\",\n\t\t\t\tcontentHeight: \"21.5em\",\n\t\t\t\tverticalScrolling: false,\n\t\t\t\tcloseOnNavigation: false,\n\t\t\t\tafterClose: function (): void {\n\t\t\t\t\tfor (const item of aResolveFunctions) {\n\t\t\t\t\t\titem();\n\t\t\t\t\t}\n\t\t\t\t\taResolveFunctions = [];\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tdialogControl.removeAllContent();\n\t\tdialogControl.addContent(messageView);\n\n\t\tif (contextNeedsEtagRefresh) {\n\t\t\tdialogControl.setBeginButton(\n\t\t\t\tnew Button({\n\t\t\t\t\tpress: function (): void {\n\t\t\t\t\t\tdialogCloseHandler();\n\t\t\t\t\t\tif (contextNeedsEtagRefresh.hasPendingChanges()) {\n\t\t\t\t\t\t\tcontextNeedsEtagRefresh.getBinding().resetChanges();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontextNeedsEtagRefresh.refresh();\n\t\t\t\t\t},\n\t\t\t\t\ttext: resourceBundle.getText(\"C_COMMON_SAPFE_REFRESH\"),\n\t\t\t\t\ttype: ButtonType.Emphasized\n\t\t\t\t})\n\t\t\t);\n\t\t} else {\n\t\t\tdialogControl.destroyBeginButton();\n\t\t}\n\t\thighestPriority = fnGetHighestMessagePriority(messageView.getItems());\n\t\thighestPriorityText = getTranslatedTextForMessageDialog(highestPriority);\n\t\tdialogControl.setState(highestPriority);\n\t\t((dialogControl.getCustomHeader() as Bar).getContentMiddle()[0] as Text).setText(highestPriorityText);\n\t\tmessageView.navigateBack();\n\t\tdialogControl.open();\n\t\tif (runToTest) {\n\t\t\tresolve(dialogControl);\n\t\t}\n\t});\n}\n\nasync function showMessageBoxControl(uiDecision: MessageUIDecisions): Promise<void> {\n\treturn new Promise(function (resolve) {\n\t\tconst { messagesToShow } = uiDecision;\n\t\tconst messageToShow = messagesToShow[0];\n\t\tconst messageTechnicalDetails = messageToShow.getTechnicalDetails() as MessageTechnicalDetails | undefined;\n\t\tconst { singleGenericMessageId, singleErrorPreText } = (messageTechnicalDetails as FEMessageTechnicalDetails)?.fe ?? {};\n\t\tconst retryAfterMessage = messageHandling.getRetryAfterMessage(messageToShow, true);\n\t\t// If it is a retry message, then it needs to have technical details to show it.\n\t\tconst showMessageBox = retryAfterMessage ? messageTechnicalDetails : true;\n\t\tif (showMessageBox) {\n\t\t\tconst startTag = \"<html><body><span style='white-space:pre-wrap'>\",\n\t\t\t\tcloseTag = \"</span></body></html>\";\n\t\t\tlet formattedTextString = startTag;\n\n\t\t\t// Adding pre-text for the messages\n\t\t\tif (retryAfterMessage) {\n\t\t\t\tformattedTextString = `${formattedTextString}<h6>${retryAfterMessage}</h6><br></br>`;\n\t\t\t} else {\n\t\t\t\tif (singleErrorPreText) {\n\t\t\t\t\tconst messageHeader = (messageToShow as MessageWithHeader)?.[\"headerName\"]\n\t\t\t\t\t\t? `${(messageToShow as MessageWithHeader)?.[\"headerName\"]}:`\n\t\t\t\t\t\t: \"\";\n\t\t\t\t\tformattedTextString = `${formattedTextString}${singleErrorPreText}<br/><br/>${messageHeader} `;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Adding the main error message.\n\t\t\tif (messageToShow.getCode() !== \"503\" && messageToShow.getAdditionalText() !== undefined) {\n\t\t\t\tformattedTextString = `${\n\t\t\t\t\tformattedTextString + messageToShow.getAdditionalText()\n\t\t\t\t}: ${messageToShow.getMessage()}${closeTag}`;\n\t\t\t} else {\n\t\t\t\tformattedTextString = `${formattedTextString + messageToShow.getMessage()}${closeTag}`;\n\t\t\t}\n\t\t\tconst formattedText = new FormattedText({\n\t\t\t\thtmlText: ManagedObject.escapeSettingsValue(formattedTextString)\n\t\t\t});\n\n\t\t\tshowMessageBoxPerType(\n\t\t\t\tformattedText as unknown as string,\n\t\t\t\t{\n\t\t\t\t\tonClose: closeMessageBox.bind(null, messageToShow, resolve, singleGenericMessageId)\n\t\t\t\t},\n\t\t\t\tmessageToShow\n\t\t\t);\n\t\t}\n\t});\n}\n\nfunction closeMessageBox(messageShown: MessageWithHeader, callBack: (value: void) => void, singleGenericMessageId?: string): void {\n\tconst messagesToRemove = [messageShown];\n\tif (singleGenericMessageId) {\n\t\tconst allMsgs = Messaging.getMessageModel().getData();\n\t\tconst genericMessage = allMsgs.find((msg: MessageWithHeader) => msg.getId() === singleGenericMessageId);\n\t\tif (genericMessage) {\n\t\t\tmessagesToRemove.push(genericMessage);\n\t\t}\n\t}\n\tMessaging.removeMessages(messagesToRemove);\n\tcallBack(undefined);\n}\n\nfunction showMessageBoxPerType(formattedText: string, close: { onClose: Function }, message: Message): void {\n\tswitch (message.getType()) {\n\t\tcase MessageType.Error:\n\t\t\tMessageBox.error(formattedText, close);\n\t\t\tbreak;\n\t\tcase MessageType.Warning:\n\t\t\tMessageBox.warning(formattedText, close);\n\t\t\tbreak;\n\t\tcase MessageType.Success:\n\t\t\tMessageBox.success(formattedText, close);\n\t\t\tbreak;\n\t\tcase MessageType.Information:\n\t\t\tMessageBox.information(formattedText, close);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tMessageBox.show(formattedText, close);\n\t}\n}\n\nfunction removeMessageShownInMessageStrip(transitionMessages: Message[], context: Context): Message[] {\n\tconst boundContextMessages: Message[] = [];\n\ttransitionMessages?.forEach((message: Message) => {\n\t\tif (message.getTargets().length === 1 && message.getTargets()[0] === context?.getPath() && message.getPersistent() === true) {\n\t\t\tboundContextMessages.push(message);\n\t\t}\n\t});\n\tif (boundContextMessages.length === 1) {\n\t\ttransitionMessages = transitionMessages?.filter(function (message: Message) {\n\t\t\treturn message !== boundContextMessages[0];\n\t\t});\n\t}\n\treturn transitionMessages;\n}\n/**\n * This function sets the group name for all messages in a dialog.\n * @param aModelDataArray Messages array\n * @param control\n * @param sActionName\n * @param viewType\n */\nfunction updateMessageObjectGroupName(\n\taModelDataArray: MessageWithHeader[],\n\tcontrol: Control | undefined,\n\tsActionName: string | undefined,\n\tviewType: string | undefined\n): void {\n\taModelDataArray.forEach((aModelData: MessageWithHeader) => {\n\t\taModelData[\"headerName\"] = \"\";\n\t\tif (!aModelData.target?.length && aModelData.getCode?.() !== \"FE_CUSTOM_MESSAGE_CHANGESET_ALL_FAILED\") {\n\t\t\t// unbound transiiton messages\n\t\t\tconst generalGroupText = Library.getResourceBundleFor(\"sap.fe.core\")!.getText(\"T_MESSAGE_BUTTON_SAPFE_MESSAGE_GROUP_GENERAL\");\n\t\t\taModelData[\"headerName\"] = generalGroupText;\n\t\t} else if (aModelData.target?.length) {\n\t\t\t// LR flow\n\t\t\tif (viewType === \"ListReport\" && control?.isA<MDCTable>(\"sap.ui.mdc.Table\")) {\n\t\t\t\tmessageHandling.setGroupNameLRTable(control, aModelData, sActionName);\n\t\t\t} else if (viewType === \"ObjectPage\") {\n\t\t\t\t// OP Display mode\n\t\t\t\tmessageHandling.setGroupNameOPDisplayMode(aModelData, sActionName, control as View);\n\t\t\t} else {\n\t\t\t\taModelData[\"headerName\"] = messageHandling.getLastActionTextAndActionName(sActionName);\n\t\t\t}\n\t\t}\n\t});\n}\n\n/**\n * This function will set the group name of Message Object for LR table.\n * @param oElem\n * @param aModelData\n * @param sActionName\n */\nfunction setGroupNameLRTable(oElem: Control | undefined, aModelData: MessageWithHeader, sActionName: string | undefined): void {\n\tconst oRowBinding = oElem && (oElem as MDCTable).getRowBinding();\n\tif (oRowBinding) {\n\t\tconst sElemeBindingPath = `${(oElem as MDCTable).getRowBinding().getPath()}`;\n\t\tif (aModelData.target?.indexOf(sElemeBindingPath) === 0) {\n\t\t\tconst allRowContexts = oRowBinding.getCurrentContexts();\n\t\t\tallRowContexts.forEach((rowContext: Context) => {\n\t\t\t\tif (aModelData.target?.includes(rowContext.getPath())) {\n\t\t\t\t\tconst contextPath = `${rowContext.getPath()}/`;\n\t\t\t\t\tconst identifierColumn = (oElem.getParent() as TableAPI).getIdentifierColumn() as string;\n\t\t\t\t\tconst rowIdentifier = identifierColumn && rowContext.getObject()[identifierColumn];\n\t\t\t\t\tconst columnPropertyName = messageHandling.getTableColProperty(oElem, aModelData, contextPath);\n\t\t\t\t\tconst { sTableTargetColName } = messageHandling.getTableColInfo(oElem as MDCTable, columnPropertyName);\n\n\t\t\t\t\t// if target has some column name and column is visible in UI\n\t\t\t\t\tif (columnPropertyName && sTableTargetColName) {\n\t\t\t\t\t\t// header will be row Identifier, if found from above code otherwise it should be table name\n\t\t\t\t\t\taModelData[\"headerName\"] = rowIdentifier ? ` ${rowIdentifier}` : (oElem as MDCTable).getHeader();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// if column data not found (may be the column is hidden), add grouping as Last Action\n\t\t\t\t\t\taModelData[\"headerName\"] = messageHandling.getLastActionTextAndActionName(sActionName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n\nfunction updateAddtionalTextForMessageInOPTable(\n\tmdcTable: MDCTable,\n\tmessage: MessageWithHeader,\n\ttargetTableInfo: TargetTableInfoType\n): void {\n\tconst identifierColumn = (mdcTable.getParent() as TableAPI).getIdentifierColumn() as string;\n\tif (identifierColumn) {\n\t\tconst allRowContexts = mdcTable.getRowBinding().getContexts();\n\t\tallRowContexts.forEach((rowContext: Context) => {\n\t\t\tif (message.target?.includes(rowContext.getPath())) {\n\t\t\t\tconst rowIdentifier = identifierColumn ? rowContext.getObject()[identifierColumn] : \"\";\n\t\t\t\tconst columnNameSuffix = targetTableInfo.sTableTargetColName ? `, ${targetTableInfo.sTableTargetColName}` : \"\";\n\t\t\t\tmessage.setAdditionalText(`${rowIdentifier}${columnNameSuffix}`);\n\t\t\t}\n\t\t});\n\t} else if (targetTableInfo.sTableTargetColName) {\n\t\tmessage.setAdditionalText(`${targetTableInfo.sTableTargetColName}`);\n\t}\n}\n\nfunction updateHeaderNameForMessageInOPTable(\n\tsubsection: ObjectPageSubSection,\n\tmdcTable: MDCTable,\n\tmessage: MessageWithHeader,\n\ttargetTableInfo: TargetTableInfoType\n): void {\n\tlet headerName = mdcTable.getHeaderVisible() && targetTableInfo.tableHeader;\n\tif (!headerName) {\n\t\theaderName = subsection.getTitle();\n\t} else {\n\t\tconst oResourceBundle = Library.getResourceBundleFor(\"sap.fe.core\")!;\n\t\theaderName = `${oResourceBundle.getText(\"T_MESSAGE_GROUP_TITLE_TABLE_DENOMINATOR\")}: ${headerName}`;\n\t}\n\tmessage[\"headerName\"] = headerName;\n}\n\n/**\n * This function will set the group name of Message Object in OP Display mode.\n * @param subsection Subsection\n * @param mdcTable  MDC table\n * @param message Message\n * @param viewContext View's binding context\n * @param groupNameIsGeneral Is present group name 'General'\n * @param actionName Action name\n * @returns If group name is 'General'\n */\nfunction setGroupNameOPTableDisplayMode(\n\tsubsection: ObjectPageSubSection,\n\tmdcTable: MDCTable,\n\tmessage: MessageWithHeader,\n\tviewContext: Context | null | undefined,\n\tgroupNameIsGeneral: boolean,\n\tactionName?: string\n): boolean {\n\tconst oRowBinding = mdcTable.getRowBinding(),\n\t\tsetSectionNameInGroup = true;\n\tlet childTableElement: UI5Element | undefined;\n\n\tmdcTable.findElements(true).forEach((oElement) => {\n\t\tif (oElement.isA<Table>(\"sap.m.Table\") || oElement.isA<UITable>(\"sap.ui.table.Table\")) {\n\t\t\tchildTableElement = oElement;\n\t\t}\n\t});\n\tif (oRowBinding) {\n\t\tconst sElemeBindingPath = `${viewContext?.getPath()}/${mdcTable.getRowBinding()?.getPath()}`;\n\t\tif (message.target?.indexOf(sElemeBindingPath) === 0) {\n\t\t\tconst obj = messageHandling.getTableColumnDataAndSetSubtile(\n\t\t\t\tmessage,\n\t\t\t\tmdcTable,\n\t\t\t\tchildTableElement,\n\t\t\t\toRowBinding,\n\t\t\t\tactionName,\n\t\t\t\tsetSectionNameInGroup,\n\t\t\t\tfnCallbackSetGroupName\n\t\t\t);\n\t\t\tconst { oTargetTableInfo } = obj;\n\n\t\t\tmessageHandling.updateAddtionalTextForMessageInOPTable(mdcTable, message, oTargetTableInfo);\n\t\t\tmessageHandling.updateHeaderNameForMessageInOPTable(subsection, mdcTable, message, oTargetTableInfo);\n\t\t\tgroupNameIsGeneral = false;\n\t\t}\n\t}\n\treturn groupNameIsGeneral;\n}\n\n/**\n * This function will set the group name of Message Object in OP Display mode.\n * @param aModelData Message Object\n * @param sActionName  Action name\n * @param control\n */\nfunction setGroupNameOPDisplayMode(aModelData: MessageWithHeader, sActionName: string | undefined, control: View): void {\n\tconst oViewContext = control?.getBindingContext();\n\tconst opLayout: Control = control?.getContent && control?.getContent()[0];\n\tlet bIsGeneralGroupName = true;\n\tif (opLayout) {\n\t\tmessageHandling.getVisibleSectionsFromObjectPageLayout(opLayout).forEach(function (oSection: ObjectPageSection) {\n\t\t\tconst subSections = oSection.getSubSections();\n\t\t\tsubSections.forEach(function (oSubSection: ObjectPageSubSection) {\n\t\t\t\toSubSection.findElements(true).forEach(function (oElem) {\n\t\t\t\t\tif (oElem.isA<MDCTable>(\"sap.ui.mdc.Table\")) {\n\t\t\t\t\t\tbIsGeneralGroupName = setGroupNameOPTableDisplayMode(\n\t\t\t\t\t\t\toSubSection,\n\t\t\t\t\t\t\toElem,\n\t\t\t\t\t\t\taModelData,\n\t\t\t\t\t\t\toViewContext,\n\t\t\t\t\t\t\tbIsGeneralGroupName,\n\t\t\t\t\t\t\tsActionName\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tif (bIsGeneralGroupName) {\n\t\tconst sElemeBindingPath = `${oViewContext?.getPath()}`;\n\t\tif (aModelData.target?.indexOf(sElemeBindingPath) === 0) {\n\t\t\t// check if OP context path is part of target, set Last Action as group name\n\t\t\taModelData[\"headerName\"] = messageHandling.getLastActionTextAndActionName(sActionName);\n\t\t} else {\n\t\t\taModelData[\"headerName\"] = Library.getResourceBundleFor(\"sap.fe.core\")!.getText(\"T_MESSAGE_BUTTON_SAPFE_MESSAGE_GROUP_GENERAL\");\n\t\t}\n\t}\n}\n\nfunction getLastActionTextAndActionName(sActionName: string | undefined): string {\n\tconst sLastActionText = Library.getResourceBundleFor(\"sap.fe.core\")!.getText(\"T_MESSAGE_BUTTON_SAPFE_MESSAGE_GROUP_LAST_ACTION\");\n\treturn sActionName ? `${sLastActionText}: ${sActionName}` : \"\";\n}\n\n/**\n * This function will give rank based on Message Group/Header name, which will be used for Sorting messages in Message dialog\n * Last Action should be shown at top, next Row Id and last General.\n * @param obj\n * @returns Rank of message\n */\nfunction getMessageRank(obj: MessageWithHeader): number {\n\tif (obj.getCode() === \"FE_CUSTOM_MESSAGE_CHANGESET_ALL_FAILED\") {\n\t\treturn 1;\n\t} else if (obj.headerName?.toString().includes(\"Last Action\")) {\n\t\treturn 2;\n\t} else if (obj.headerName?.toString().includes(\"General\")) {\n\t\treturn 4;\n\t} else {\n\t\treturn 3;\n\t}\n}\n\n/**\n * This function will set the group name which can either General or Last Action.\n * @param aMessage\n * @param sActionName\n * @param bIsGeneralGroupName\n */\nconst fnCallbackSetGroupName = (aMessage: MessageWithHeader, sActionName: string | undefined, bIsGeneralGroupName?: boolean): void => {\n\tif (bIsGeneralGroupName) {\n\t\taMessage[\"headerName\"] = Library.getResourceBundleFor(\"sap.fe.core\")!.getText(\"T_MESSAGE_BUTTON_SAPFE_MESSAGE_GROUP_GENERAL\");\n\t} else {\n\t\taMessage[\"headerName\"] = messageHandling.getLastActionTextAndActionName(sActionName);\n\t}\n};\n\n/**\n * This function will get the table row/column info and set subtitle.\n * @param aMessage\n * @param oTable\n * @param oElement\n * @param oRowBinding\n * @param sActionName\n * @param setSectionNameInGroup\n * @param fnSetGroupName\n * @returns Table info and Subtitle.\n */\nfunction getTableColumnDataAndSetSubtile(\n\taMessage: MessageWithHeader,\n\toTable: MDCTable,\n\toElement: UI5Element | undefined,\n\toRowBinding: Binding,\n\tsActionName: string | undefined,\n\tsetSectionNameInGroup: boolean,\n\tfnSetGroupName: Function\n): { oTargetTableInfo: TargetTableInfoType; subTitle: string | null | undefined } {\n\tconst oTargetTableInfo = messageHandling.getTableAndTargetInfo(oTable, aMessage, oElement, oRowBinding);\n\toTargetTableInfo.tableHeader = oTable.getHeader();\n\n\tlet sControlId, bIsCreationRow;\n\tif (!oTargetTableInfo.oTableRowContext) {\n\t\tsControlId = aMessage.getControlIds().find(function (sId: string) {\n\t\t\treturn messageHandling.isControlInTable(oTable, sId);\n\t\t});\n\t}\n\n\tif (sControlId) {\n\t\tconst oControl = UI5Element.getElementById(sControlId);\n\t\tbIsCreationRow = messageHandling.isControlPartOfCreationRow(oControl);\n\t}\n\n\tif (!oTargetTableInfo.sTableTargetColName) {\n\t\t// if the column is not present on UI or the target does not have a table field in it, use Last Action for grouping\n\t\tif (aMessage.getPersistent() && sActionName) {\n\t\t\tfnSetGroupName(aMessage, sActionName);\n\t\t\tsetSectionNameInGroup = false;\n\t\t}\n\t}\n\n\tconst subTitle = messageHandling.getMessageSubtitle(\n\t\taMessage,\n\t\toTargetTableInfo.oTableRowBindingContexts,\n\t\toTargetTableInfo.oTableRowContext,\n\t\toTargetTableInfo.sTableTargetColName,\n\t\toTable,\n\t\tbIsCreationRow\n\t);\n\n\treturn { oTargetTableInfo, subTitle };\n}\n\n/**\n * This function will create the subtitle based on Table Row/Column data.\n * @param message\n * @param tableRowBindingContexts\n * @param tableRowContext\n * @param tableTargetColName\n * @param table\n * @param isCreationRow\n * @param targetedControl\n * @returns Message subtitle.\n */\nfunction getMessageSubtitle(\n\tmessage: MessageWithHeader,\n\ttableRowBindingContexts: Context[],\n\ttableRowContext: ODataV4Context | undefined,\n\ttableTargetColName: string | undefined,\n\ttable: MDCTable,\n\tisCreationRow: boolean | undefined,\n\ttargetedControl?: Control\n): string | null | undefined {\n\tlet messageSubtitle;\n\tlet rowSubtitleValue;\n\tconst resourceModel = getResourceModel(table);\n\tconst tableColProperty = (table.getParent() as TableAPI)?.getTableColumnVisibilityInfo(tableRowContext);\n\tconst colFromTableSettings = messageHandling.fetchColumnInfo(message, table);\n\tif (isCreationRow || tableRowContext?.isInactive()) {\n\t\tmessageSubtitle = resourceModel.getText(\"T_MESSAGE_ITEM_SUBTITLE\", [\n\t\t\tresourceModel.getText(\"T_MESSAGE_ITEM_SUBTITLE_CREATION_ROW_INDICATOR\"),\n\t\t\ttableTargetColName ? tableTargetColName : (colFromTableSettings as AnnotationTableColumn).label\n\t\t]);\n\t} else {\n\t\tconst tableColBindingContextTextAnnotation = messageHandling.getTableColBindingContextForTextAnnotation(\n\t\t\ttable,\n\t\t\ttableRowContext,\n\t\t\ttableColProperty\n\t\t);\n\t\tconst tableColTextAnnotationPath = tableColBindingContextTextAnnotation\n\t\t\t? tableColBindingContextTextAnnotation.getObject(\"$Path\")\n\t\t\t: undefined;\n\t\tconst tableColTextArrangement =\n\t\t\ttableColTextAnnotationPath && tableColBindingContextTextAnnotation\n\t\t\t\t? tableColBindingContextTextAnnotation.getObject(\"@com.sap.vocabularies.UI.v1.TextArrangement/$EnumMember\")\n\t\t\t\t: undefined;\n\t\tif (tableRowBindingContexts.length > 0) {\n\t\t\t// set Row subtitle text\n\t\t\tif (targetedControl) {\n\t\t\t\t// The UI error is on the first column, we then get the control input as the row indicator:\n\t\t\t\trowSubtitleValue = (targetedControl as Field).getValue();\n\t\t\t} else if (tableRowContext && tableColProperty && tableColProperty.length === 1) {\n\t\t\t\t// Getting the column label and its value of a single row\n\t\t\t\trowSubtitleValue = (table.getParent() as TableAPI)?.getTableColValue(\n\t\t\t\t\ttableRowContext,\n\t\t\t\t\ttableColTextAnnotationPath,\n\t\t\t\t\ttableColTextArrangement,\n\t\t\t\t\ttableColProperty\n\t\t\t\t);\n\t\t\t} else if (tableRowContext && tableColProperty && tableColProperty.length > 1) {\n\t\t\t\t// If there are multiple rows, the subtitle is displayed as ‘See message details’\n\t\t\t\trowSubtitleValue = resourceModel.getText(\"T_MESSAGE_ITEM_SUBTITLE_DETAILED_ROW_INFO\");\n\t\t\t} else {\n\t\t\t\trowSubtitleValue = undefined;\n\t\t\t}\n\t\t\t// set the message subtitle\n\t\t\tconst oColumnInfo: ColumnInfoType = messageHandling.determineColumnInfo(colFromTableSettings, resourceModel);\n\t\t\tif (rowSubtitleValue && tableTargetColName) {\n\t\t\t\tmessageSubtitle = resourceModel.getText(\"T_MESSAGE_ITEM_SUBTITLE\", [rowSubtitleValue, tableTargetColName]);\n\t\t\t} else if (rowSubtitleValue && oColumnInfo.sColumnIndicator === \"Hidden\") {\n\t\t\t\tmessageSubtitle = `${resourceModel.getText(\"T_MESSAGE_GROUP_DESCRIPTION_TABLE_ROW_WITH_IDENTIFIER\", [rowSubtitleValue])}, ${\n\t\t\t\t\toColumnInfo.sColumnValue\n\t\t\t\t}`;\n\t\t\t} else if (rowSubtitleValue && oColumnInfo.sColumnIndicator === \"Unknown\") {\n\t\t\t\tmessageSubtitle = resourceModel.getText(\"T_MESSAGE_GROUP_DESCRIPTION_TABLE_ROW_WITH_IDENTIFIER\", [rowSubtitleValue]);\n\t\t\t} else if (rowSubtitleValue && oColumnInfo.sColumnIndicator === \"undefined\") {\n\t\t\t\tmessageSubtitle = resourceModel.getText(\"T_MESSAGE_GROUP_DESCRIPTION_TABLE_ROW_WITH_IDENTIFIER\", [rowSubtitleValue]);\n\t\t\t} else if (!rowSubtitleValue && tableTargetColName) {\n\t\t\t\tmessageSubtitle = resourceModel.getText(\"T_MESSAGE_GROUP_DESCRIPTION_TABLE_COLUMN\") + \": \" + tableTargetColName;\n\t\t\t} else if (!rowSubtitleValue && oColumnInfo.sColumnIndicator === \"Hidden\") {\n\t\t\t\tmessageSubtitle = oColumnInfo.sColumnValue;\n\t\t\t} else {\n\t\t\t\tmessageSubtitle = null;\n\t\t\t}\n\t\t} else {\n\t\t\tmessageSubtitle = null;\n\t\t}\n\t}\n\treturn messageSubtitle;\n}\n\n/**\n * This function gets the first column for text Annotation, this is needed to set subtitle of Message.\n * @param table\n * @param tableRowContext\n * @param tableColProperty\n * @returns Binding context.\n */\nfunction getTableColBindingContextForTextAnnotation(\n\ttable: MDCTable,\n\ttableRowContext: ODataV4Context | undefined,\n\ttableColProperty: TableColumnProperties\n): Context | null | undefined {\n\tlet bindingContext;\n\tif (tableRowContext && tableColProperty && tableColProperty.length === 1) {\n\t\tconst { key } = tableColProperty[0];\n\t\tconst oModel = table?.getModel();\n\t\tconst oMetaModel = oModel?.getMetaModel() as ODataMetaModel | undefined; // must be an ODataMetaModel to match the type of the table row context\n\t\tconst sMetaPath = oMetaModel?.getMetaPath(tableRowContext.getPath());\n\t\tif (oMetaModel?.getObject(`${sMetaPath}/${key}@com.sap.vocabularies.Common.v1.Text/$Path`)) {\n\t\t\tbindingContext = oMetaModel.createBindingContext(`${sMetaPath}/${key}@com.sap.vocabularies.Common.v1.Text`);\n\t\t}\n\t}\n\treturn bindingContext;\n}\n\n/**\n * The method that is called to retrieve the column info from the associated message of the message popover.\n * @param oMessage Message object\n * @param oTable MdcTable\n * @returns Returns the column info.\n */\n\nfunction fetchColumnInfo(oMessage: MessageWithHeader, oTable: MDCTable): TableColumn | undefined {\n\tconst sColNameFromMessageObj = oMessage?.getTargets()[0].split(\"/\").pop();\n\treturn (oTable.getParent() as TableAPI)?.getKeyColumnInfo(sColNameFromMessageObj);\n}\n\n/**\n * This function gets the Column data depending on its availability in Table, this is needed for setting subtitle of Message.\n * @param oColFromTableSettings\n * @param resourceModel\n * @returns Column data.\n */\nfunction determineColumnInfo(oColFromTableSettings: TableColumn | undefined, resourceModel: ResourceModel): ColumnInfoType {\n\tconst oColumnInfo: ColumnInfoType = { sColumnIndicator: \"\", sColumnValue: \"\" };\n\tif (oColFromTableSettings) {\n\t\t// if column is neither in table definition nor personalization, show only row subtitle text\n\t\tif (oColFromTableSettings.availability === \"Hidden\") {\n\t\t\toColumnInfo.sColumnValue = undefined;\n\t\t\toColumnInfo.sColumnIndicator = \"undefined\";\n\t\t} else {\n\t\t\t//if column is in table personalization but not in table definition, show Column (Hidden) : <colName>\n\t\t\toColumnInfo.sColumnValue = `${resourceModel.getText(\"T_MESSAGE_GROUP_DESCRIPTION_TABLE_COLUMN\")} (${resourceModel.getText(\n\t\t\t\t\"T_COLUMN_INDICATOR_IN_TABLE_DEFINITION\"\n\t\t\t)}): ${oColFromTableSettings.label}`;\n\t\t\toColumnInfo.sColumnIndicator = \"Hidden\";\n\t\t}\n\t} else {\n\t\toColumnInfo.sColumnIndicator = \"Unknown\";\n\t}\n\treturn oColumnInfo;\n}\n\n/**\n * This function check if a given control id is a part of Table.\n * @param oTable\n * @param sControlId\n * @returns True if control is part of table.\n */\nfunction isControlInTable(oTable: MDCTable, sControlId: string): UI5Element[] | boolean {\n\tconst oControl = UI5Element.getElementById(sControlId);\n\tif (oControl && !oControl.isA<UITable>(\"sap.ui.table.Table\") && !oControl.isA<Table>(\"sap.m.Table\")) {\n\t\treturn oTable.findElements(true, function (oElem: Control): boolean {\n\t\t\treturn oElem.getId() === oControl.getId();\n\t\t});\n\t}\n\treturn false;\n}\n\nfunction isControlPartOfCreationRow(oControl: UI5Element | undefined): boolean {\n\tlet oParentControl = oControl?.getParent();\n\twhile (\n\t\toParentControl &&\n\t\t!oParentControl?.isA(\"sap.ui.table.Row\") &&\n\t\t!oParentControl?.isA(\"sap.ui.table.CreationRow\") &&\n\t\t!oParentControl?.isA(\"sap.m.ColumnListItem\")\n\t) {\n\t\toParentControl = oParentControl.getParent();\n\t}\n\n\treturn !!oParentControl && oParentControl.isA(\"sap.ui.table.CreationRow\");\n}\n\nfunction getTranslatedTextForMessageDialog(sHighestPriority: string): string {\n\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.core\")!;\n\tswitch (sHighestPriority) {\n\t\tcase \"Error\":\n\t\t\treturn resourceBundle.getText(\"C_COMMON_SAPFE_ERROR_MESSAGES_PAGE_TITLE_ERROR\");\n\t\tcase \"Information\":\n\t\t\treturn resourceBundle.getText(\"C_MESSAGE_HANDLING_SAPFE_ERROR_MESSAGES_PAGE_TITLE_INFO\");\n\t\tcase \"Success\":\n\t\t\treturn resourceBundle.getText(\"C_MESSAGE_HANDLING_SAPFE_ERROR_MESSAGES_PAGE_TITLE_SUCCESS\");\n\t\tcase \"Warning\":\n\t\t\treturn resourceBundle.getText(\"C_MESSAGE_HANDLING_SAPFE_ERROR_MESSAGES_PAGE_TITLE_WARNING\");\n\t\tdefault:\n\t\t\treturn resourceBundle.getText(\"C_MESSAGE_HANDLING_SAPFE_ERROR_MESSAGES_PAGE_TITLE\");\n\t}\n}\nfunction removeUnboundTransitionMessages(): void {\n\tremoveTransitionMessages(false);\n}\nfunction removeBoundTransitionMessages(sPathToBeRemoved?: string): void {\n\tremoveTransitionMessages(true, sPathToBeRemoved);\n}\n\nfunction getMessagesFromMessageModel(oMessageModel: MessageModel, sPathToBeRemoved?: string): Message[] {\n\tif (sPathToBeRemoved === undefined) {\n\t\treturn oMessageModel.getObject(\"/\");\n\t}\n\tconst listBinding = oMessageModel.bindList(\"/\");\n\n\tlistBinding.filter(\n\t\tnew Filter({\n\t\t\tpath: \"\",\n\t\t\ttest: (message: Message) => message.getTargets().some((target) => target.startsWith(sPathToBeRemoved))\n\t\t})\n\t);\n\n\treturn listBinding.getCurrentContexts().map(function (oContext) {\n\t\treturn oContext.getObject();\n\t});\n}\n\n/**\n * Get relevant messages.\n * @param bBoundMessages To get only bound messages\n * @param bTransitionOnly To get only transition messages\n * @param sPathToBeRemoved Filter out bound messages with path\n * @returns Messages\n */\nfunction getMessages(bBoundMessages = false, bTransitionOnly = false, sPathToBeRemoved?: string): Message[] {\n\tlet i;\n\tconst oMessageModel = Messaging.getMessageModel(),\n\t\toResourceBundle = Library.getResourceBundleFor(\"sap.fe.core\")!,\n\t\taTransitionMessages = [];\n\tlet aMessages: Message[] = [];\n\tif (bBoundMessages && bTransitionOnly && sPathToBeRemoved) {\n\t\taMessages = getMessagesFromMessageModel(oMessageModel, sPathToBeRemoved);\n\t} else {\n\t\taMessages = oMessageModel.getObject(\"/\");\n\t}\n\tfor (i = 0; i < aMessages.length; i++) {\n\t\tif (\n\t\t\t(!bTransitionOnly || aMessages[i].getPersistent()) &&\n\t\t\t((bBoundMessages && aMessages[i].getTargets()[0] !== \"\") ||\n\t\t\t\t(!bBoundMessages && (!aMessages[i].getTargets()[0] || aMessages[i].getTargets()[0] === \"\")))\n\t\t) {\n\t\t\taTransitionMessages.push(aMessages[i]);\n\t\t}\n\t}\n\n\tfor (i = 0; i < aTransitionMessages.length; i++) {\n\t\tif (\n\t\t\taTransitionMessages[i].getCode() === \"503\" &&\n\t\t\taTransitionMessages[i].getMessage() !== \"\" &&\n\t\t\t!aTransitionMessages[i].getMessage().includes(oResourceBundle.getText(\"C_MESSAGE_HANDLING_SAPFE_503_BACKEND_PREFIX\"))\n\t\t) {\n\t\t\taTransitionMessages[i].setMessage(\n\t\t\t\t`\\n${oResourceBundle.getText(\"C_MESSAGE_HANDLING_SAPFE_503_BACKEND_PREFIX\")}${aTransitionMessages[i].getMessage()}`\n\t\t\t);\n\t\t}\n\t}\n\t//Filtering messages again here to avoid showing pure technical messages raised by the model\n\tconst backendMessages: Message[] = aTransitionMessages.filter(isNonTechnicalMessage);\n\n\treturn backendMessages;\n}\nexport type MessageTechnicalDetails = {\n\toriginalMessage?: {\n\t\tmessage?: string;\n\t} | null;\n\thttpStatus?: number | null;\n\tretryAfter?: Date;\n\tisConcurrentModification?: boolean;\n};\nfunction removeTransitionMessages(bBoundMessages: boolean, sPathToBeRemoved?: string): void {\n\tconst aMessagesToBeDeleted = getMessages(bBoundMessages, true, sPathToBeRemoved);\n\n\tif (aMessagesToBeDeleted.length > 0) {\n\t\tMessaging.removeMessages(aMessagesToBeDeleted);\n\t}\n}\n//TODO: This must be moved out of message handling\nfunction setMessageSubtitle(oTable: MDCTable, aContexts: Context[], message: MessageWithHeader): void {\n\tif (message.additionalText === undefined) {\n\t\tconst subtitleColumn = (oTable.getParent() as TableAPI).getIdentifierColumn() as string;\n\t\tconst errorContext = aContexts.find(function (oContext) {\n\t\t\treturn message.getTargets()[0].includes(oContext.getPath());\n\t\t});\n\t\tmessage.additionalText = errorContext ? errorContext.getObject()[subtitleColumn] : undefined;\n\t}\n}\n\n/**\n * The method retrieves the visible sections from an object page.\n * @param oObjectPageLayout The objectPageLayout object for which we want to retrieve the visible sections.\n * @returns Array of visible sections.\n */\nfunction getVisibleSectionsFromObjectPageLayout(oObjectPageLayout: Control | ObjectPageLayout): ObjectPageSection[] {\n\treturn (oObjectPageLayout as ObjectPageLayout).getSections().filter(function (oSection: ObjectPageSection) {\n\t\treturn oSection.getVisible();\n\t});\n}\n\n/**\n * This function checks if control ids from message are a part of a given subsection.\n * @param subSection\n * @param oMessageObject\n * @returns SubSection matching control ids.\n */\nfunction getControlFromMessageRelatingToSubSection(subSection: ObjectPageSubSection, oMessageObject: MessageWithHeader): UI5Element[] {\n\treturn subSection\n\t\t.findElements(true, (oElem) => {\n\t\t\treturn fnFilterUponIds(oMessageObject.getControlIds(), oElem);\n\t\t})\n\t\t.sort(function (a, b) {\n\t\t\t// controls are sorted in order to have the table on top of the array\n\t\t\t// it will help to compute the subtitle of the message based on the type of related controls\n\t\t\tif (a.isA(\"sap.ui.mdc.Table\") && !b.isA(\"sap.ui.mdc.Table\")) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\treturn 1;\n\t\t});\n}\n\nfunction getTableColProperty(oTable: Control, oMessageObject: MessageWithHeader, oContextPath?: string | RegExp): string {\n\t//this function escapes a string to use it as a regex\n\tconst fnRegExpescape = function (s: string): string {\n\t\treturn s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n\t};\n\t// based on the target path of the message we retrieve the property name.\n\t// to achieve it we remove the bindingContext path and the row binding path from the target\n\tif (!oContextPath) {\n\t\tconst contextPathToEscape = `${oTable.getBindingContext()?.getPath()}/${(oTable as MDCTable).getRowBinding().getPath()}`;\n\t\toContextPath = new RegExp(`${fnRegExpescape(contextPathToEscape)}\\\\(.*\\\\)/`);\n\t}\n\treturn oMessageObject.getTargets()[0].replace(oContextPath, \"\");\n}\n\n/**\n * This function gives the column information if it matches with the property name from target of message.\n * @param oTable\n * @param sTableTargetColProperty\n * @returns Column name and property.\n */\nfunction getTableColInfo(\n\toTable: MDCTable,\n\tsTableTargetColProperty: string | undefined\n): { sTableTargetColName: string | undefined; sTableTargetColProperty: string | undefined } {\n\tlet sTableTargetColName: string | undefined;\n\tconst oTableTargetCol: Column | undefined = oTable.getColumns().find(function (column) {\n\t\treturn column.getPropertyKey() == sTableTargetColProperty;\n\t});\n\tif (!oTableTargetCol) {\n\t\t/* If the target column is not found, we check for a custom column */\n\t\tconst oCustomColumn = (oTable.getControlDelegate() as typeof TableDelegate).getColumnsFor(oTable).find(function (\n\t\t\toColumn: TableColumn\n\t\t): boolean {\n\t\t\tif (!!(oColumn as CustomBasedTableColumn).template && oColumn.propertyInfos) {\n\t\t\t\treturn (\n\t\t\t\t\toColumn.propertyInfos[0] === sTableTargetColProperty ||\n\t\t\t\t\toColumn.propertyInfos[0].replace(\"Property::\", \"\") === sTableTargetColProperty\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}) as CustomBasedTableColumn | undefined;\n\t\tif (oCustomColumn) {\n\t\t\tsTableTargetColProperty = oCustomColumn?.name;\n\n\t\t\tsTableTargetColName = oTable\n\t\t\t\t.getColumns()\n\t\t\t\t.find(function (oColumn): boolean {\n\t\t\t\t\treturn sTableTargetColProperty === oColumn.getPropertyKey();\n\t\t\t\t})\n\t\t\t\t?.getHeader();\n\t\t} else {\n\t\t\t/* If the target column is not found, we check for a field group */\n\t\t\tconst aColumns = (oTable.getControlDelegate() as typeof TableDelegate).getColumnsFor(oTable);\n\t\t\tconst columnDefinition = aColumns.find(function (oColumn: TableColumn) {\n\t\t\t\tif (oColumn.key.includes(\"::FieldGroup::\")) {\n\t\t\t\t\treturn oColumn.propertyInfos?.find(function (propertyInfo: string) {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\tpropertyInfo === sTableTargetColProperty || propertyInfo.replace(\"Property::\", \"\") === sTableTargetColProperty\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}) as AnnotationTableColumn | undefined;\n\t\t\t/* check if the column with the field group is visible in the table: */\n\t\t\tlet bIsTableTargetColVisible = false;\n\t\t\tif (columnDefinition && columnDefinition.label) {\n\t\t\t\tbIsTableTargetColVisible = oTable.getColumns().some(function (column) {\n\t\t\t\t\treturn column.getHeader() === columnDefinition.label;\n\t\t\t\t});\n\t\t\t}\n\t\t\tsTableTargetColName = bIsTableTargetColVisible ? columnDefinition?.label : undefined;\n\t\t\tsTableTargetColProperty = bIsTableTargetColVisible ? columnDefinition?.key : undefined;\n\t\t}\n\t} else {\n\t\tsTableTargetColName = oTableTargetCol.getHeader();\n\t}\n\treturn { sTableTargetColName: sTableTargetColName, sTableTargetColProperty: sTableTargetColProperty };\n}\n\n/**\n * This function gives Table and column info if any of it matches the target from Message.\n * @param oTable\n * @param oMessageObject\n * @param oElement\n * @param oRowBinding\n * @returns Table info matching the message target.\n */\nfunction getTableAndTargetInfo(\n\toTable: MDCTable,\n\toMessageObject: MessageWithHeader,\n\toElement: UI5Element | undefined,\n\toRowBinding: Binding\n): TargetTableInfoType {\n\tconst sTableTargetColProperty = getTableColProperty(oTable, oMessageObject);\n\tconst oTableColInfo = getTableColInfo(oTable, sTableTargetColProperty);\n\tconst oTableRowBindingContexts = oElement?.isA(\"sap.ui.table.Table\")\n\t\t? (oRowBinding as ODataListBinding).getContexts()\n\t\t: (oRowBinding as ODataListBinding).getCurrentContexts();\n\tconst oTargetTableInfo: TargetTableInfoType = {\n\t\toTableRowBindingContexts,\n\t\tsTableTargetColName: oTableColInfo.sTableTargetColName,\n\t\tsTableTargetColProperty: oTableColInfo.sTableTargetColProperty,\n\t\toTableRowContext: oTableRowBindingContexts.find(function (rowContext) {\n\t\t\treturn rowContext && oMessageObject.getTargets()[0].indexOf(rowContext.getPath()) === 0;\n\t\t})\n\t};\n\treturn oTargetTableInfo;\n}\n\n/**\n *\n * @param aControlIds\n * @param oItem\n * @returns True if the item matches one of the controls\n */\nfunction fnFilterUponIds(aControlIds: string[], oItem: UI5Element): boolean {\n\treturn aControlIds.some(function (sControlId) {\n\t\tif (sControlId === oItem.getId()) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t});\n}\n\n/**\n * This function gives the group name having section and subsection data.\n * @param section\n * @param subSection\n * @param bMultipleSubSections\n * @param oTargetTableInfo\n * @param resourceModel\n * @param includeTableGroupName\n * @returns Group name.\n */\nfunction createSectionGroupName(\n\tsection: ObjectPageSection,\n\tsubSection: ObjectPageSubSection,\n\tbMultipleSubSections: boolean,\n\toTargetTableInfo: TargetTableInfoType,\n\tresourceModel: ResourceModel,\n\tincludeTableGroupName = true\n): string {\n\treturn (\n\t\tsection.getTitle() +\n\t\t(subSection.getTitle() && bMultipleSubSections ? `, ${subSection.getTitle()}` : \"\") +\n\t\t(oTargetTableInfo && oTargetTableInfo.tableHeader && includeTableGroupName\n\t\t\t? `, ${resourceModel.getText(\"T_MESSAGE_GROUP_TITLE_TABLE_DENOMINATOR\")}: ${oTargetTableInfo.tableHeader}`\n\t\t\t: \"\")\n\t);\n}\n\nfunction bIsOrphanElement(oElement: UI5Element, aElements: UI5Element[]): boolean {\n\treturn !aElements.some(function (oElem) {\n\t\tlet oParentElement = oElement.getParent();\n\t\twhile (oParentElement && oParentElement !== oElem) {\n\t\t\toParentElement = oParentElement.getParent();\n\t\t}\n\t\treturn oParentElement ? true : false;\n\t});\n}\n\n/**\n * This function filters and gives back the messages based on the context passed.\n * @param context\n * @returns Messages.\n */\nfunction getMessagesForContext(context: Context): Message[] {\n\tconst oMessageModel = Messaging.getMessageModel();\n\tconst listBinding = oMessageModel.bindList(\"/\");\n\tlistBinding.filter(\n\t\tnew Filter({\n\t\t\tpath: \"\",\n\t\t\ttest: (message: Message) => message.getTargets().length > 0 && message.getTargets()[0].startsWith(context.getPath())\n\t\t})\n\t);\n\tconst currentContexts = listBinding.getCurrentContexts();\n\treturn currentContexts.map((currentContext) => currentContext.getObject());\n}\n\n/**\n * This function returns the boolean to check if the target is present in the dialog based on the control Ids.\n * @param controlIds Array of control Ids\n * @returns Boolean value based on the target present in the dialog.\n */\nfunction isMessageOutOfParameterDialog(controlIds: string[]): boolean {\n\tlet oControl: ManagedObject | null | undefined, errorFieldControl;\n\tconst index = Infinity;\n\tif (controlIds.length === 1) {\n\t\toControl = UI5Element.getElementById(controlIds[0]);\n\t\terrorFieldControl = UI5Element.getElementById(controlIds[0]) as UI5Element;\n\t} else {\n\t\tlet errorControlId;\n\t\tcontrolIds.forEach((controlId) => {\n\t\t\tconst control = UI5Element.getElementById(controlId);\n\t\t\tif (control?.isA(\"sap.ui.mdc.Field\")) {\n\t\t\t\terrorControlId = controlId;\n\t\t\t\toControl = UI5Element.getElementById(errorControlId);\n\t\t\t}\n\t\t});\n\t}\n\twhile (oControl) {\n\t\tconst fieldRankinDialog = Infinity;\n\t\tif (oControl instanceof Dialog) {\n\t\t\tif (index > fieldRankinDialog) {\n\t\t\t\t// Set the focus to the dialog's control\n\t\t\t\terrorFieldControl?.focus();\n\t\t\t}\n\t\t\t// messages with target inside sap.m.Dialog should not bring up the message dialog\n\t\t\treturn false;\n\t\t}\n\t\toControl = oControl.getParent();\n\t}\n\treturn true;\n}\n\n/**\n * Removes Transition messages related to the specified context path when the object page is closed.\n * @param oContext The binding context for which the messages are checked.\n */\nfunction removeTransistionMessageForContext(oContext: Context): void {\n\tconst messagesInModel = Messaging.getMessageModel().getData();\n\tconst isMessageStripMessage: Message[] = [];\n\n\tmessagesInModel?.forEach((message: Message) => {\n\t\tconst isSingleTarget = message.getTargets().length === 1;\n\t\tconst isTargetMatching = message.getTargets()[0] === oContext?.getPath();\n\t\tconst isTransitionMessage = message.getPersistent() === true;\n\n\t\tif (isSingleTarget && isTargetMatching && isTransitionMessage) {\n\t\t\tisMessageStripMessage.push(message);\n\t\t}\n\t});\n\n\tif (isMessageStripMessage.length === 1) {\n\t\tMessaging.removeMessages(isMessageStripMessage);\n\t}\n}\n\n/**\n * This method is responsible for removing messages related to the context from the message model when there is error on the dialog and when the dialog is open.\n * @param messages Array of messages\n * @param contexts Contexts array\n */\nfunction removeContextMessagesfromModel(messages?: Message[], contexts?: Context[]): void {\n\tconst boundContextMessages: Message[] = [];\n\tif (contexts?.length === 1) {\n\t\tmessages?.forEach((message: Message) => {\n\t\t\tif (\n\t\t\t\tmessage.getTargets().length === 1 &&\n\t\t\t\tmessage.getTargets()[0] === contexts?.[0]?.getPath() &&\n\t\t\t\tmessage.getPersistent() === true\n\t\t\t) {\n\t\t\t\tboundContextMessages.push(message);\n\t\t\t}\n\t\t});\n\t}\n\tif (boundContextMessages.length > 0) {\n\t\tMessaging.removeMessages(boundContextMessages);\n\t}\n}\n\n/**\n * This method is responsible for removing messages related to the action parameter dialog from showing the messages.\n * @param messages Array of messages\n * @returns Array of messages after removing the messages related to the action parameter dialog.\n */\nfunction removeMessagesForActionParameterDialog(messages: Message[]): Message[] {\n\tconst messagesToBeRemoved = messages?.filter((message: Message) => message.getPersistent() === true && message.getTargets()[0] !== \"\");\n\tmessages = messages?.filter((message: Message) => !messagesToBeRemoved?.includes(message));\n\treturn messages;\n}\n\n/**\n * Static functions for Fiori Message Handling\n * @namespace\n * @experimental This module is only for experimental use! <br/><b>This is only a POC and maybe deleted</b>\n * @since 1.56.0\n */\nconst messageHandling: messageHandlingType = {\n\tgetMessages: getMessages,\n\tgetUIDecisions: getUIDecisions,\n\tremoveUnboundTransitionMessages: removeUnboundTransitionMessages,\n\tremoveBoundTransitionMessages: removeBoundTransitionMessages,\n\tmodifyETagMessagesOnly: fnModifyETagMessagesOnly,\n\tgetRetryAfterMessage: getRetryAfterMessage,\n\tprepareMessageViewForDialog: prepareMessageViewForDialog,\n\tsetMessageSubtitle: setMessageSubtitle,\n\tgetVisibleSectionsFromObjectPageLayout: getVisibleSectionsFromObjectPageLayout,\n\tgetControlFromMessageRelatingToSubSection: getControlFromMessageRelatingToSubSection,\n\tfnFilterUponIds: fnFilterUponIds,\n\tgetTableAndTargetInfo: getTableAndTargetInfo,\n\tcreateSectionGroupName: createSectionGroupName,\n\tbIsOrphanElement: bIsOrphanElement,\n\tgetLastActionTextAndActionName: getLastActionTextAndActionName,\n\tgetTableColumnDataAndSetSubtile: getTableColumnDataAndSetSubtile,\n\tgetTableColInfo: getTableColInfo,\n\tgetTableColProperty: getTableColProperty,\n\tgetMessageSubtitle: getMessageSubtitle,\n\tdetermineColumnInfo: determineColumnInfo,\n\tfetchColumnInfo: fetchColumnInfo,\n\tgetTableColBindingContextForTextAnnotation: getTableColBindingContextForTextAnnotation,\n\tgetMessageRank: getMessageRank,\n\thasTransitionErrorsOrWarnings: hasTransitionErrorsOrWarnings,\n\tfnCallbackSetGroupName: fnCallbackSetGroupName,\n\tsetGroupNameOPDisplayMode: setGroupNameOPDisplayMode,\n\tupdateMessageObjectGroupName: updateMessageObjectGroupName,\n\tsetGroupNameLRTable: setGroupNameLRTable,\n\tisControlInTable: isControlInTable,\n\tisControlPartOfCreationRow: isControlPartOfCreationRow,\n\tremoveMessageShownInMessageStrip: removeMessageShownInMessageStrip,\n\tgetFiltersForMessages: getFiltersForMessages,\n\tshowMessagesInUI: showMessagesInUI,\n\tshowMessageDialogControl: showMessageDialogControl,\n\tshowMessageToast: showMessageToast,\n\tshowMessageBoxControl: showMessageBoxControl,\n\tgetMessagesForContext: getMessagesForContext,\n\tisMessageOutOfParameterDialog: isMessageOutOfParameterDialog,\n\tremoveContextMessagesfromModel: removeContextMessagesfromModel,\n\tremoveMessagesForActionParameterDialog: removeMessagesForActionParameterDialog,\n\tsetGroupNameOPTableDisplayMode: setGroupNameOPTableDisplayMode,\n\tupdateAddtionalTextForMessageInOPTable: updateAddtionalTextForMessageInOPTable,\n\tupdateHeaderNameForMessageInOPTable: updateHeaderNameForMessageInOPTable,\n\tcloseMessageBox: closeMessageBox,\n\tremoveTransistionMessageForContext: removeTransistionMessageForContext,\n\tcheckIfAllAreSameSuccessMessages: checkIfAllAreSameSuccessMessages,\n\taddGenericSuccessMessage: addGenericSuccessMessage,\n\tisNonTechnicalMessage: isNonTechnicalMessage\n};\n\nexport default messageHandling;\n"],"mappings":"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","ignoreList":[]}
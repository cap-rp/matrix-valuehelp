{"version":3,"file":"RouterProxy.js","names":["enumState","EQUAL","COMPATIBLE","ANCESTOR","DIFFERENT","enumURLParams","LAYOUTPARAM","IAPPSTATEPARAM","createGuardFromHash","sGuardHash","_guardHash","replace","check","sHash","indexOf","this","removeAppStateInHash","RegExp","RouterProxy","_dec","defineUI5Class","_class","_BaseObject","_this","_len","arguments","length","args","Array","_key","call","bIsRebuildHistoryRunning","bIsComputingTitleHierachy","bIsGuardCrossAllowed","sIAppStateKey","_bActivateRouteMatchSynchro","_bApplyRestore","_pathMappings","restoreHistoryTriggered","_inheritsLoose","_proto","prototype","init","oAppComponent","isfclEnabled","getService","then","asyncInit","catch","oError","Log","error","_fnHashGuard","hashGuard","bind","window","addEventListener","_bDisableOnHashChange","_bIgnoreRestore","_bForceFocus","_oShellServices","getShellServices","initRaw","getRouter","routingHints","getRoutingService","getRoutingHints","waitForRouteMatchBeforeNavigation","history","replaceState","Object","assign","feLevel","state","location","fclEnabled","_fnBlockingNavFilter","_blockingNavigationFilter","registerNavigationFilter","destroy","unregisterNavigationFilter","removeEventListener","setAppStateInHash","sAppStateKey","sNewHash","includes","findAppStateInHash","aAppState","match","getDecodedWindowHash","decodeURI","hash","oRouter","_oRouter","_oManagedHistory","_oNavigationGuard","sCurrentAppHash","getHash","push","_extractStateFromHash","appName","getAppNameFromHash","getFullHash","splitHash","appSpecificRoute","getHashChanger","shellPart","isFocusForced","setFocusForced","bForced","removeIAppStateKey","removeRestoreHistoryFlagFromHash","navToHash","async","bPreserveHistory","bDisablePreservationCache","bForceFocus","bPreserveShellBackNavigationHandler","setBackNavigation","_oRouteMatchSynchronization","waitFor","undefined","_internalNavToHash","checkHashWithGuard","oResourceBundle","Library","getResourceBundleFor","confirm","getText","Promise","resolve","oNewState","aCurrentHashKeys","extractEntitySetsFromHash","keys","every","key","index","oHistoryAction","_pushNewState","storeFocusInfoForCurrentHash","_rebuildBrowserHistory","restoreHistory","sTargetHash","checkRestoreHistoryWasTriggered","resetRestoreHistoryFlag","navBack","sCurrentHash","sPreviousHash","i","back","navTo","sRouteName","oParameters","getURL","noPreservationCache","bIsStickyMode","exitFromApp","backToPreviousApp","isCurrentStateImpactedBy","substring","oLocalGuard","isNavigationFinalized","setNavigationGuard","discardNavigationGuard","hasNavigationGuard","isGuardCrossAllowedByUser","activateRouteMatchSynchronization","resolveRouteMatch","Synchronization","sHashNoParams","split","aTokens","names","forEach","sToken","oState","screenMode","aLayout","sLayout","bRebuildOnly","bDisableHistoryPreservation","lastIndex","iPopCount","pop","preserved","oLastRemovedItem","oTopState","_compareCacheStates","sPreviousIAppStateKey","oComparisonStateResult","bHasSameHash","focusControlId","secondaryFocusControlId","focusInfo","secondaryFocusInfo","type","steps","_disableEventOnHashChange","stop","_enableEventOnHashChange","bIgnoreCurrentHash","initialize","that","oTargetState","newLevel","replaceAsync","replaceHash","setTimeout","backReplaceAsync","backAsync","setHash","go","getLastHistoryEntry","setPathMapping","mappings","filter","mapping","oldPath","newPath","currentAppName","find","m","encodeURI","aHashSplit","sAppHash","oState1","oState2","equal","parentOf","splitAppSpecificRoute","routeSplit","shift","checkIfBackIsOutOfGuard","segments","previousHash","checkIfBackExitsApp","checkIfBackHasSameContext","oCurrentState","oPreviousState","restoreFocusForCurrentHash","currentHash","stateForHash","focusApplied","focusControl","Element","getElementById","getFocusDomRef","getParent","isA","getBusy","focus","getActiveElement","getId","parentTable","preventScroll","getFocusInfo","findLayoutForHash","hashNoParam","targetState","BaseObject"],"sources":["./RouterProxy.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport type ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport { defineUI5Class } from \"sap/fe/base/ClassSupport\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport Synchronization from \"sap/fe/core/helpers/Synchronization\";\nimport type { IShellServices } from \"sap/fe/core/services/ShellServicesFactory\";\nimport type MTable from \"sap/m/Table\";\nimport BaseObject from \"sap/ui/base/Object\";\nimport Element from \"sap/ui/core/Element\";\nimport Library from \"sap/ui/core/Lib\";\nimport type Router from \"sap/ui/core/routing/Router\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport type UITable from \"sap/ui/table/Table\";\n\nconst enumState = {\n\tEQUAL: 0,\n\tCOMPATIBLE: 1,\n\tANCESTOR: 2,\n\tDIFFERENT: 3\n};\nconst enumURLParams = {\n\tLAYOUTPARAM: \"layout\",\n\tIAPPSTATEPARAM: \"sap-iapp-state\"\n};\n\ntype RouterState = {\n\tkeys: string[];\n\thash: string;\n\tpreserved?: boolean;\n\tsLayout?: string;\n\tscreenMode: number;\n\tfocusControlId?: string;\n\tsecondaryFocusControlId?: string;\n\tfocusInfo?: {\n\t\tpreventScroll?: boolean;\n\t\ttargetInfo?: unknown;\n\t};\n\tsecondaryFocusInfo?: {\n\t\tpreventScroll?: boolean;\n\t};\n};\n\ntype OtherHistoryAction = { type: \"append\" | \"none\" | \"replace\" };\nexport type BackHistoryAction = { type: \"back\" | \"back-replace\"; steps: number };\ntype HystoryAction = BackHistoryAction | OtherHistoryAction;\n\ntype NavigationGuard = { _guardHash: string; check: (hash: string) => boolean };\n/**\n * Creates a HashGuard object.\n * @param sGuardHash The hash used for the guard\n * @returns The created hash guard\n */\nfunction createGuardFromHash(sGuardHash: string): NavigationGuard {\n\treturn {\n\t\t_guardHash: sGuardHash.replace(/\\?[^?]*$/, \"\"), // Remove query part\n\t\tcheck: function (sHash: string): boolean {\n\t\t\treturn sHash.indexOf(this._guardHash) === 0;\n\t\t}\n\t};\n}\n/**\n * Returns a hash without its iAppState part.\n * @param sHash The hash\n * @returns The hash without the iAppState\n */\nfunction removeAppStateInHash(sHash: string): string {\n\treturn sHash.replace(new RegExp(`[&?]*${enumURLParams.IAPPSTATEPARAM}=[^&]*`), \"\");\n}\n\n@defineUI5Class(\"sap.fe.core.RouterProxy\")\nclass RouterProxy extends BaseObject {\n\tbIsRebuildHistoryRunning = false;\n\n\tbIsComputingTitleHierachy = false;\n\n\tbIsGuardCrossAllowed = false;\n\n\tsIAppStateKey: string | null = null;\n\n\t_oShellServices!: IShellServices;\n\n\tfclEnabled!: boolean;\n\n\t_fnBlockingNavFilter!: Function;\n\n\t_fnHashGuard!: (this: Window, popStateEvent: PopStateEvent) => unknown;\n\n\t_bDisableOnHashChange!: boolean;\n\n\t_bIgnoreRestore!: boolean;\n\n\t_bForceFocus!: boolean;\n\n\t_oRouter!: Router;\n\n\t_oManagedHistory!: RouterState[];\n\n\t_oNavigationGuard!: NavigationGuard | null;\n\n\toResourceBundle?: ResourceBundle;\n\n\t_oRouteMatchSynchronization?: Synchronization;\n\n\t_bActivateRouteMatchSynchro = false;\n\n\t_bApplyRestore = false;\n\n\t_pathMappings: { oldPath: string; newPath: string }[] = [];\n\n\trestoreHistoryTriggered = false;\n\n\troutingHints?: Record<string, { parentOf: string[] }>;\n\n\tappName!: string;\n\n\tinit(oAppComponent: AppComponent, isfclEnabled: boolean): void {\n\t\t// Save the name of the app (including startup parameters) for rebuilding full hashes later\n\t\toAppComponent\n\t\t\t.getService(\"shellServices\")\n\t\t\t.then(() => this.asyncInit(oAppComponent, isfclEnabled))\n\t\t\t.catch(function (oError: unknown) {\n\t\t\t\tLog.error(\"Cannot retrieve the shell services\", oError as string);\n\t\t\t});\n\t\tthis._fnHashGuard = this.hashGuard.bind(this);\n\t\twindow.addEventListener(\"popstate\", this._fnHashGuard);\n\t\tthis._bDisableOnHashChange = false;\n\t\tthis._bIgnoreRestore = false;\n\t\tthis._bForceFocus = true; // Trigger the focus mechanism for the first view displayed by the app\n\t}\n\n\tasyncInit(oAppComponent: AppComponent, isfclEnabled: boolean): void {\n\t\tthis._oShellServices = oAppComponent.getShellServices();\n\t\tthis.initRaw(oAppComponent.getRouter());\n\t\tthis.routingHints = oAppComponent.getRoutingService().getRoutingHints();\n\t\t// We want to wait until the initial routeMatched is done before doing any navigation\n\t\tthis.waitForRouteMatchBeforeNavigation();\n\n\t\t// Set feLevel=0 for the first Application page in the history\n\t\thistory.replaceState(\n\t\t\tObject.assign(\n\t\t\t\t{\n\t\t\t\t\tfeLevel: 0\n\t\t\t\t},\n\t\t\t\thistory.state\n\t\t\t),\n\t\t\t\"\",\n\t\t\twindow.location as unknown as string\n\t\t);\n\t\tthis.fclEnabled = isfclEnabled;\n\n\t\tthis._fnBlockingNavFilter = this._blockingNavigationFilter.bind(this);\n\t\tthis._oShellServices.registerNavigationFilter(this._fnBlockingNavFilter);\n\t}\n\n\tdestroy(): void {\n\t\tif (this._oShellServices) {\n\t\t\tthis._oShellServices.unregisterNavigationFilter(this._fnBlockingNavFilter);\n\t\t}\n\t\twindow.removeEventListener(\"popstate\", this._fnHashGuard);\n\t}\n\n\t/**\n\t * Adds an iAppState inside a hash (or replaces an existing one).\n\t * @param sHash The hash\n\t * @param sAppStateKey The iAppState to add\n\t * @returns The hash with the app state\n\t */\n\tsetAppStateInHash(sHash: string, sAppStateKey: string): string {\n\t\tlet sNewHash: string;\n\n\t\tif (sHash.includes(enumURLParams.IAPPSTATEPARAM)) {\n\t\t\t// If there's already an iAppState parameter in the hash, replace it\n\t\t\tsNewHash = sHash.replace(\n\t\t\t\tnew RegExp(`${enumURLParams.IAPPSTATEPARAM}=[^&]*`),\n\t\t\t\t`${enumURLParams.IAPPSTATEPARAM}=${sAppStateKey}`\n\t\t\t);\n\t\t} else {\n\t\t\t// Add the iAppState parameter in the hash\n\t\t\tif (!sHash.includes(\"?\")) {\n\t\t\t\tsNewHash = `${sHash}?`;\n\t\t\t} else {\n\t\t\t\tsNewHash = `${sHash}&`;\n\t\t\t}\n\t\t\tsNewHash += `${enumURLParams.IAPPSTATEPARAM}=${sAppStateKey}`;\n\t\t}\n\n\t\treturn sNewHash;\n\t}\n\n\t/**\n\t * Returns the iAppState part from a hash (or null if not found).\n\t * @param sHash The hash\n\t * @returns The iAppState part of the hash\n\t */\n\tfindAppStateInHash(sHash: string): string | null {\n\t\tconst aAppState = sHash.match(new RegExp(`\\\\?.*${enumURLParams.IAPPSTATEPARAM}=([^&]*)`));\n\t\treturn aAppState && aAppState.length > 1 ? aAppState[1] : null;\n\t}\n\n\tprivate getDecodedWindowHash(): string {\n\t\treturn decodeURI(window.location.hash);\n\t}\n\n\t/**\n\t * Raw initialization (for unit tests).\n\t * @param oRouter The router used by this proxy\n\t */\n\tinitRaw(oRouter: Router): void {\n\t\tthis._oRouter = oRouter;\n\t\tthis._oManagedHistory = [];\n\t\tthis._oNavigationGuard = null;\n\n\t\tconst sCurrentAppHash = this.getHash();\n\t\tthis._oManagedHistory.push(this._extractStateFromHash(sCurrentAppHash));\n\n\t\tthis.appName = this.getAppNameFromHash(this.getDecodedWindowHash());\n\n\t\t// Set the iAppState if the initial hash contains one\n\t\tthis.sIAppStateKey = this.findAppStateInHash(sCurrentAppHash);\n\t}\n\n\t/**\n\t * Return the full app-specific hash part from window.location.hash.\n\t *\n\t * Compared to {@link getHash} this function includes sub-routes of nested components.\n\t * @returns The app-specific hash part (i.e., without the shell part), or an empty string if there is none.\n\t */\n\tgetFullHash(): string {\n\t\tconst splitHash = this._oShellServices.splitHash(this.getDecodedWindowHash());\n\n\t\tif (\"appSpecificRoute\" in splitHash) {\n\t\t\treturn splitHash.appSpecificRoute?.replace(/^&\\//, \"\") ?? \"\"; // remove the leading \"&/\"\n\t\t}\n\t\treturn \"\";\n\t}\n\n\tgetHash(): string {\n\t\treturn this._oRouter.getHashChanger().getHash() ?? \"\";\n\t}\n\n\tprotected getAppNameFromHash(hash: string): string {\n\t\tconst splitHash = this._oShellServices?.splitHash(hash) as { shellPart: string; appSpecificRoute: string } | undefined;\n\t\treturn splitHash?.shellPart ?? \"\";\n\t}\n\n\tisFocusForced(): boolean {\n\t\treturn this._bForceFocus;\n\t}\n\n\tsetFocusForced(bForced: boolean): void {\n\t\tthis._bForceFocus = bForced;\n\t}\n\n\t/**\n\t * Resets the internal variable sIAppStateKey.\n\t *\n\t */\n\tremoveIAppStateKey(): void {\n\t\tthis.sIAppStateKey = null;\n\t}\n\n\tprivate removeRestoreHistoryFlagFromHash(hash: string): string {\n\t\treturn hash.replace(\"restoreHistory=true&\", \"\").replace(/[?&]restoreHistory=true/, \"\");\n\t}\n\n\t/**\n\t * Navigates to a specific hash.\n\t * @param sHash Hash to be navigated to\n\t * @param bPreserveHistory If set to true, non-ancestor entries in history will be retained\n\t * @param bDisablePreservationCache If set to true, cache preservation mechanism is disabled for the current navigation\n\t * @param bForceFocus If set to true, the logic to set the focus once the navigation is finalized will be triggered (onPageReady)\n\t * @param bPreserveShellBackNavigationHandler If not set to false, the back navigation is set to undefined\n\t * @returns Promise (resolved when the navigation is finalized) that returns 'true' if a navigation took place, 'false' if the navigation didn't happen\n\t */\n\tasync navToHash(\n\t\tsHash: string,\n\t\tbPreserveHistory?: boolean,\n\t\tbDisablePreservationCache?: boolean,\n\t\tbForceFocus?: boolean,\n\t\tbPreserveShellBackNavigationHandler?: boolean\n\t): Promise<boolean> {\n\t\tif (bPreserveShellBackNavigationHandler !== false) {\n\t\t\tawait this._oShellServices.setBackNavigation();\n\t\t}\n\t\tsHash = this.removeRestoreHistoryFlagFromHash(sHash);\n\t\tif (this._oRouteMatchSynchronization) {\n\t\t\treturn this._oRouteMatchSynchronization.waitFor().then(async () => {\n\t\t\t\tthis._oRouteMatchSynchronization = undefined;\n\t\t\t\treturn this._internalNavToHash(sHash, bPreserveHistory, bDisablePreservationCache, bForceFocus);\n\t\t\t});\n\t\t} else {\n\t\t\tif (this._bActivateRouteMatchSynchro) {\n\t\t\t\tthis.waitForRouteMatchBeforeNavigation();\n\t\t\t}\n\t\t\treturn this._internalNavToHash(sHash, bPreserveHistory, bDisablePreservationCache, bForceFocus);\n\t\t}\n\t}\n\n\tasync _internalNavToHash(\n\t\tsHash: string,\n\t\tbPreserveHistory?: boolean,\n\t\tbDisablePreservationCache?: boolean,\n\t\tbForceFocus?: boolean\n\t): Promise<boolean> {\n\t\t// Add the app state in the hash if needed\n\t\tif (this.fclEnabled && this.sIAppStateKey && !this.findAppStateInHash(sHash)) {\n\t\t\tsHash = this.setAppStateInHash(sHash, this.sIAppStateKey);\n\t\t}\n\n\t\tif (!this.checkHashWithGuard(sHash)) {\n\t\t\tif (!this.oResourceBundle) {\n\t\t\t\tthis.oResourceBundle = Library.getResourceBundleFor(\"sap.fe.core\")!;\n\t\t\t}\n\n\t\t\t// We have to use a confirm here for UI consistency reasons, as with some scenarios\n\t\t\t// in the EditFlow we rely on a UI5 mechanism that displays a confirm dialog.\n\t\t\t// eslint-disable-next-line no-alert\n\t\t\tif (!confirm(this.oResourceBundle.getText(\"C_ROUTER_PROXY_SAPFE_EXIT_NOTSAVED_MESSAGE\"))) {\n\t\t\t\t// The user clicked on Cancel --> cancel navigation\n\t\t\t\treturn Promise.resolve(false);\n\t\t\t}\n\t\t\tthis.bIsGuardCrossAllowed = true;\n\t\t}\n\n\t\t// In case the navigation will cause a new view to be displayed, we force the focus\n\t\t// I.e. if the keys for the hash we're navigating to is a superset of the current hash keys.\n\t\tconst oNewState = this._extractStateFromHash(sHash);\n\t\tif (!this._bForceFocus) {\n\t\t\t// If the focus was already forced, keep it\n\t\t\tconst aCurrentHashKeys = RouterProxy.extractEntitySetsFromHash(this.getHash());\n\t\t\tthis._bForceFocus =\n\t\t\t\tbForceFocus ||\n\t\t\t\t(aCurrentHashKeys.length < oNewState.keys.length &&\n\t\t\t\t\taCurrentHashKeys.every(function (key: string, index: number) {\n\t\t\t\t\t\treturn key === oNewState.keys[index];\n\t\t\t\t\t}));\n\t\t}\n\n\t\tconst oHistoryAction = this._pushNewState(oNewState, false, bPreserveHistory, bDisablePreservationCache);\n\t\tthis.storeFocusInfoForCurrentHash();\n\n\t\treturn this._rebuildBrowserHistory(oHistoryAction, false);\n\t}\n\n\t/**\n\t * Clears browser history if entries have been added without using the RouterProxy.\n\t * Updates the internal history accordingly.\n\t * @returns Promise that is resolved once the history is rebuilt\n\t */\n\tasync restoreHistory(): Promise<void | boolean> {\n\t\tif (this._bApplyRestore) {\n\t\t\tthis._bApplyRestore = false;\n\t\t\tlet sTargetHash = this.getHash();\n\t\t\tsTargetHash = this.removeRestoreHistoryFlagFromHash(sTargetHash);\n\t\t\tconst oNewState = this._extractStateFromHash(sTargetHash);\n\n\t\t\tconst oHistoryAction = this._pushNewState(oNewState, true, false, true);\n\n\t\t\tthis.restoreHistoryTriggered = true;\n\t\t\treturn this._rebuildBrowserHistory(oHistoryAction, true);\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t/**\n\t * Checks if RestoreHistory has been triggered on the RouterProxy.\n\t * @returns True if it has been triggered\n\t */\n\tcheckRestoreHistoryWasTriggered(): boolean {\n\t\treturn this.restoreHistoryTriggered;\n\t}\n\n\t/**\n\t * Resets the flag that says if RestoreHistory has been triggered on the RouterProxy.\n\t */\n\tresetRestoreHistoryFlag(): void {\n\t\tthis.restoreHistoryTriggered = false;\n\t}\n\n\t/**\n\t * Navigates back in the history.\n\t * @returns Promise that is resolved when the navigation is finalized\n\t */\n\tasync navBack(): Promise<void | boolean> {\n\t\tconst sCurrentHash = this.getHash();\n\t\tlet sPreviousHash;\n\n\t\t// Look for the current hash in the managed history\n\t\tfor (let i = this._oManagedHistory.length - 1; i > 0; i--) {\n\t\t\tif (this._oManagedHistory[i].hash === sCurrentHash) {\n\t\t\t\tsPreviousHash = this._oManagedHistory[i - 1].hash;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (sPreviousHash) {\n\t\t\treturn this.navToHash(sPreviousHash);\n\t\t} else {\n\t\t\t// We couldn't find a previous hash in history\n\t\t\t// This can happen when navigating from a transient hash in a create app, and\n\t\t\t// in that case history.back would go back to the FLP\n\t\t\twindow.history.back();\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t/**\n\t * Navigates to a route with parameters.\n\t * @param sRouteName The route name to be navigated to\n\t * @param oParameters Parameters for the navigation\n\t * @param oParameters.noPreservationCache\n\t * @param oParameters.bIsStickyMode\n\t * @returns Promise that is resolved when the navigation is finalized\n\t */\n\tasync navTo(sRouteName: string, oParameters?: { noPreservationCache?: boolean; bIsStickyMode?: boolean }): Promise<boolean> {\n\t\tconst sHash = this._oRouter.getURL(sRouteName, oParameters);\n\t\treturn this.navToHash(sHash!, false, oParameters?.noPreservationCache, false, !oParameters?.bIsStickyMode);\n\t}\n\n\t/**\n\t * Exits the current app by navigating back\n\t * to the previous app (if any) or the FLP.\n\t * @returns Promise that is resolved when we exit the app\n\t */\n\texitFromApp(): void {\n\t\treturn this._oShellServices.backToPreviousApp();\n\t}\n\n\t/**\n\t * Checks whether a given hash can have an impact on the current state\n\t * i.e. if the hash is equal, compatible or an ancestor of the current state.\n\t * @param sHash `true` if there is an impact\n\t * @returns If there is an impact\n\t */\n\tisCurrentStateImpactedBy(sHash: string): boolean {\n\t\tif (sHash[0] === \"/\") {\n\t\t\tsHash = sHash.substring(1);\n\t\t}\n\t\tconst oLocalGuard = createGuardFromHash(sHash);\n\t\treturn oLocalGuard.check(this.getHash());\n\t}\n\n\t/**\n\t * Checks if a navigation is currently being processed.\n\t * @returns `false` if a navigation has been triggered in the RouterProxy and is not yet finalized\n\t */\n\tisNavigationFinalized(): boolean {\n\t\treturn !this.bIsRebuildHistoryRunning;\n\t}\n\n\t/**\n\t * Sets the last state as a guard.\n\t * Each future navigation will be checked against this guard, and a confirmation dialog will\n\t * be displayed before the navigation crosses the guard (i.e. goes to an ancestor of the guard).\n\t * @param sHash The hash for the guard\n\t */\n\tsetNavigationGuard(sHash: string): void {\n\t\tthis._oNavigationGuard = createGuardFromHash(sHash);\n\t\tthis.bIsGuardCrossAllowed = false;\n\t}\n\n\t/**\n\t * Disables the navigation guard.\n\t */\n\tdiscardNavigationGuard(): void {\n\t\tthis._oNavigationGuard = null;\n\t}\n\n\t/**\n\t * Checks for the availability of the navigation guard.\n\t * @returns `true` if navigating guard is available\n\t */\n\thasNavigationGuard(): boolean {\n\t\treturn this._oNavigationGuard !== null;\n\t}\n\n\t/**\n\t * Tests a hash against the navigation guard.\n\t * @param sHash The hash to be tested\n\t * @returns `true` if navigating to the hash doesn't cross the guard\n\t */\n\tcheckHashWithGuard(sHash: string): boolean {\n\t\treturn this._oNavigationGuard === null || this._oNavigationGuard.check(sHash);\n\t}\n\n\t/**\n\t * Checks if the user allowed the navigation guard to be crossed.\n\t * @returns `true` if crossing the guard has been allowed by the user\n\t */\n\tisGuardCrossAllowedByUser(): boolean {\n\t\treturn this.bIsGuardCrossAllowed;\n\t}\n\n\t/**\n\t * Activates the synchronization for routeMatchedEvent.\n\t * The next NavToHash call will create a Synchronization object that will be resolved\n\t * by the corresponding onRouteMatched event, preventing another NavToHash to happen in parallel.\n\t */\n\tactivateRouteMatchSynchronization(): void {\n\t\tthis._bActivateRouteMatchSynchro = true;\n\t}\n\n\t/**\n\t * Resolve the routeMatch synchronization object, unlocking potential pending NavToHash calls.\n\t */\n\tresolveRouteMatch(): void {\n\t\tif (this._oRouteMatchSynchronization) {\n\t\t\tthis._oRouteMatchSynchronization.resolve();\n\t\t}\n\t}\n\n\t/**\n\t * Makes sure no navigation can happen before a routeMatch happened.\n\t */\n\twaitForRouteMatchBeforeNavigation(): void {\n\t\tthis._oRouteMatchSynchronization = new Synchronization();\n\t\tthis._bActivateRouteMatchSynchro = false;\n\t}\n\n\tstatic extractEntitySetsFromHash(sHash: string | undefined): string[] {\n\t\tif (sHash === undefined) {\n\t\t\tsHash = \"\";\n\t\t}\n\t\tconst sHashNoParams = sHash.split(\"?\")[0]; // remove params\n\t\tconst aTokens = sHashNoParams.split(\"/\");\n\t\tconst names: string[] = [];\n\n\t\taTokens.forEach((sToken) => {\n\t\t\tif (sToken.length) {\n\t\t\t\tnames.push(sToken.split(\"(\")[0]);\n\t\t\t}\n\t\t});\n\n\t\treturn names;\n\t}\n\n\t/**\n\t * Builds a state from a hash.\n\t * @param sHash The hash to be used as entry\n\t * @returns The state\n\t */\n\t_extractStateFromHash(sHash: string): RouterState {\n\t\tif (sHash === undefined) {\n\t\t\tsHash = \"\";\n\t\t}\n\n\t\tconst oState: RouterState = {\n\t\t\tkeys: RouterProxy.extractEntitySetsFromHash(sHash),\n\t\t\thash: sHash,\n\t\t\tscreenMode: 0 // will be updated in a sec\n\t\t};\n\n\t\t// Retrieve layout (if any)\n\t\tconst aLayout = sHash.match(new RegExp(`\\\\?.*${enumURLParams.LAYOUTPARAM}=([^&]*)`));\n\t\toState.sLayout = aLayout && aLayout.length > 1 ? aLayout[1] : undefined;\n\t\tif (oState.sLayout === \"MidColumnFullScreen\") {\n\t\t\toState.screenMode = 1;\n\t\t} else if (oState.sLayout === \"EndColumnFullScreen\") {\n\t\t\toState.screenMode = 2;\n\t\t} else {\n\t\t\toState.screenMode = 0;\n\t\t}\n\t\treturn oState;\n\t}\n\n\t/**\n\t * Adds a new state into the internal history structure.\n\t * Makes sure this new state is added after an ancestor.\n\t * Also sets the iAppState key in the whole history.\n\t * @param oNewState The new state to be added\n\t * @param bRebuildOnly `true` if we're rebuilding the history after a shell menu navigation\n\t * @param bPreserveHistory If set to true, non-ancestor entries in history will be retained\n\t * @param bDisableHistoryPreservation Disable the mechanism to retained marked entries in cache\n\t * @returns The new state\n\t * @final\n\t */\n\t_pushNewState(\n\t\toNewState: RouterState,\n\t\tbRebuildOnly: boolean,\n\t\tbPreserveHistory?: boolean,\n\t\tbDisableHistoryPreservation?: boolean\n\t): HystoryAction {\n\t\tconst sCurrentHash = this.removeRestoreHistoryFlagFromHash(this.getHash());\n\t\tlet lastIndex = this._oManagedHistory.length - 1;\n\t\tlet iPopCount = bRebuildOnly ? 1 : 0;\n\n\t\t// 1. Do some cleanup in the managed history : in case the user has navigated back in the browser history, we need to remove\n\t\t// the states ahead in history and make sure the top state corresponds to the current page\n\t\t// We don't do that when restoring the history, as the current state has been added on top of the browser history\n\t\t// and is not reflected in the managed history\n\t\tif (!bRebuildOnly) {\n\t\t\twhile (lastIndex >= 0 && this._oManagedHistory[lastIndex].hash !== sCurrentHash) {\n\t\t\t\tthis._oManagedHistory.pop();\n\t\t\t\tlastIndex--;\n\t\t\t}\n\n\t\t\tif (this._oManagedHistory.length === 0) {\n\t\t\t\t// We couldn't find the current location in the history. This can happen if a browser reload\n\t\t\t\t// happened, causing a reinitialization of the managed history.\n\t\t\t\t// In that case, we use the current location as the new starting point in the managed history\n\t\t\t\tthis._oManagedHistory.push(this._extractStateFromHash(sCurrentHash));\n\t\t\t\thistory.replaceState(Object.assign({ feLevel: 0 }, history.state), \"\");\n\t\t\t}\n\t\t}\n\n\t\t// 2. Mark the top state as preserved if required\n\t\tif (bPreserveHistory && !bDisableHistoryPreservation) {\n\t\t\tthis._oManagedHistory[this._oManagedHistory.length - 1].preserved = true;\n\t\t}\n\n\t\t// 3. Then pop all states until we find an ancestor of the new state, or we find a state that need to be preserved\n\t\tlet oLastRemovedItem;\n\t\twhile (this._oManagedHistory.length > 0) {\n\t\t\tconst oTopState = this._oManagedHistory[this._oManagedHistory.length - 1];\n\t\t\tif (\n\t\t\t\t(bDisableHistoryPreservation || !oTopState.preserved) &&\n\t\t\t\tthis._compareCacheStates(oTopState, oNewState) !== enumState.ANCESTOR\n\t\t\t) {\n\t\t\t\t// The top state is not an ancestor of oNewState and is not preserved --> we can pop it\n\t\t\t\toLastRemovedItem = this._oManagedHistory.pop();\n\t\t\t\tiPopCount++;\n\t\t\t} else if (oTopState.preserved && removeAppStateInHash(oTopState.hash) === removeAppStateInHash(oNewState.hash)) {\n\t\t\t\t// We try to add a state that is already in cache (due to preserved flag) but with a different iapp-state\n\t\t\t\t// --> we should delete the previous entry (it will be later replaced by the new one) and stop popping\n\t\t\t\toLastRemovedItem = this._oManagedHistory.pop();\n\t\t\t\tiPopCount++;\n\t\t\t\toNewState.preserved = true;\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tbreak; // Ancestor or preserved state found --> we stop popping out states\n\t\t\t}\n\t\t}\n\n\t\t// 4. iAppState management\n\t\tthis.sIAppStateKey = this.findAppStateInHash(oNewState.hash);\n\t\tif (!this.fclEnabled && oLastRemovedItem) {\n\t\t\tconst sPreviousIAppStateKey = this.findAppStateInHash(oLastRemovedItem.hash);\n\t\t\tconst oComparisonStateResult = this._compareCacheStates(oLastRemovedItem, oNewState);\n\t\t\t// if current state doesn't contain a i-appstate and this state should replace a state containing a iAppState\n\t\t\t// then the previous iAppState is preserved\n\t\t\tif (\n\t\t\t\t!this.sIAppStateKey &&\n\t\t\t\tsPreviousIAppStateKey &&\n\t\t\t\t(oComparisonStateResult === enumState.EQUAL || oComparisonStateResult === enumState.COMPATIBLE)\n\t\t\t) {\n\t\t\t\toNewState.hash = this.setAppStateInHash(oNewState.hash, sPreviousIAppStateKey);\n\t\t\t}\n\t\t}\n\n\t\t// 5. Now we can push the state at the top of the internal history\n\t\tconst bHasSameHash = oLastRemovedItem && oNewState.hash === oLastRemovedItem.hash;\n\t\tif (this._oManagedHistory.length === 0 || this._oManagedHistory[this._oManagedHistory.length - 1].hash !== oNewState.hash) {\n\t\t\tthis._oManagedHistory.push(oNewState);\n\t\t\tif (oLastRemovedItem && removeAppStateInHash(oLastRemovedItem.hash) === removeAppStateInHash(oNewState.hash)) {\n\t\t\t\toNewState.focusControlId = oLastRemovedItem.focusControlId;\n\t\t\t\toNewState.secondaryFocusControlId = oLastRemovedItem.secondaryFocusControlId;\n\t\t\t\toNewState.focusInfo = oLastRemovedItem.focusInfo;\n\t\t\t\toNewState.secondaryFocusInfo = oLastRemovedItem.secondaryFocusInfo;\n\t\t\t}\n\t\t}\n\n\t\t// 6. Determine which actions to do on the history\n\t\tif (iPopCount === 0) {\n\t\t\t// No state was popped --> append\n\t\t\treturn { type: \"append\" };\n\t\t} else if (iPopCount === 1) {\n\t\t\t// Only 1 state was popped --> replace current hash unless hash is the same (then nothing to do)\n\t\t\treturn bHasSameHash ? { type: \"none\" } : { type: \"replace\" };\n\t\t} else {\n\t\t\t// More than 1 state was popped --> go bakc in history and replace hash if necessary\n\t\t\treturn bHasSameHash ? { type: \"back\", steps: iPopCount - 1 } : { type: \"back-replace\", steps: iPopCount - 1 };\n\t\t}\n\t}\n\n\t_blockingNavigationFilter(): \"Custom\" | \"Continue\" {\n\t\treturn this._bDisableOnHashChange ? \"Custom\" : \"Continue\";\n\t}\n\n\t/**\n\t * Disable the routing by calling the router stop method.\n\t * @final\n\t */\n\t_disableEventOnHashChange(): void {\n\t\tthis._bDisableOnHashChange = true;\n\t\tthis._oRouter.stop();\n\t}\n\n\t/**\n\t * Enable the routing by calling the router initialize method.\n\t * @param [bIgnoreCurrentHash] Ignore the last hash event triggered before the router has initialized\n\t * @final\n\t */\n\t_enableEventOnHashChange(bIgnoreCurrentHash: boolean | undefined): void {\n\t\tthis._bDisableOnHashChange = false;\n\t\tthis._oRouter.initialize(bIgnoreCurrentHash);\n\t}\n\n\t/**\n\t * Synchronizes the browser history with the internal history of the routerProxy, and triggers a navigation if needed.\n\t * @param oHistoryAction Specifies the navigation action to be performed\n\t * @param bRebuildOnly `true` if internal history is currently being rebuilt\n\t * @returns Promise (resolved when the navigation is finalized) that returns 'true' if a navigation took place, 'false' if the navigation didn't happen\n\t * @final\n\t */\n\tasync _rebuildBrowserHistory(oHistoryAction: HystoryAction, bRebuildOnly: boolean): Promise<boolean> {\n\t\t// eslint-disable-next-line @typescript-eslint/no-this-alias\n\t\tconst that = this;\n\t\treturn new Promise((resolve) => {\n\t\t\tthis.bIsRebuildHistoryRunning = true;\n\t\t\tconst oTargetState = this._oManagedHistory[this._oManagedHistory.length - 1],\n\t\t\t\tnewLevel = this._oManagedHistory.length - 1;\n\n\t\t\tfunction replaceAsync(): void {\n\t\t\t\tif (!bRebuildOnly) {\n\t\t\t\t\tthat._enableEventOnHashChange(true);\n\t\t\t\t}\n\n\t\t\t\t(that._oRouter.getHashChanger().replaceHash as Function)(oTargetState.hash);\n\t\t\t\thistory.replaceState(Object.assign({ feLevel: newLevel }, history.state), \"\");\n\n\t\t\t\tif (bRebuildOnly) {\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\t// Timeout to let 'hashchange' event be processed before by the HashChanger, so that\n\t\t\t\t\t\t// onRouteMatched notification isn't raised\n\t\t\t\t\t\tthat._enableEventOnHashChange(true);\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\n\t\t\t\tthat.bIsRebuildHistoryRunning = false;\n\t\t\t\tresolve(true); // a navigation occurred\n\t\t\t}\n\n\t\t\t// Async callbacks when navigating back, in order to let all notifications and events get processed\n\t\t\tfunction backReplaceAsync(): void {\n\t\t\t\twindow.removeEventListener(\"popstate\", backReplaceAsync);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t// Timeout to let 'hashchange' event be processed before by the HashChanger\n\t\t\t\t\treplaceAsync();\n\t\t\t\t}, 0);\n\t\t\t}\n\n\t\t\tfunction backAsync(): void {\n\t\t\t\twindow.removeEventListener(\"popstate\", backAsync);\n\t\t\t\tthat.bIsRebuildHistoryRunning = false;\n\t\t\t\tresolve(true); // a navigation occurred\n\t\t\t}\n\n\t\t\tthat._bIgnoreRestore = true;\n\n\t\t\tswitch (oHistoryAction.type) {\n\t\t\t\tcase \"replace\":\n\t\t\t\t\tconst focusInfo = history.state?.focusInfo;\n\t\t\t\t\t(that._oRouter.getHashChanger().replaceHash as Function)(oTargetState.hash);\n\t\t\t\t\thistory.replaceState(\n\t\t\t\t\t\tObject.assign(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfeLevel: newLevel,\n\t\t\t\t\t\t\t\tfocusInfo: focusInfo\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\thistory.state\n\t\t\t\t\t\t),\n\t\t\t\t\t\t\"\"\n\t\t\t\t\t);\n\t\t\t\t\tthat.bIsRebuildHistoryRunning = false;\n\t\t\t\t\tresolve(true); // a navigation occurred\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"append\":\n\t\t\t\t\tthat._oRouter.getHashChanger().setHash(oTargetState.hash);\n\t\t\t\t\thistory.replaceState(Object.assign({ feLevel: newLevel }, history.state), \"\");\n\t\t\t\t\tthat.bIsRebuildHistoryRunning = false;\n\t\t\t\t\tresolve(true); // a navigation occurred\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"back\":\n\t\t\t\t\twindow.addEventListener(\"popstate\", backAsync);\n\t\t\t\t\thistory.go(-oHistoryAction.steps);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"back-replace\":\n\t\t\t\t\tthis._disableEventOnHashChange();\n\t\t\t\t\twindow.addEventListener(\"popstate\", backReplaceAsync);\n\t\t\t\t\thistory.go(-oHistoryAction.steps);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\t// No navigation\n\t\t\t\t\tthis.bIsRebuildHistoryRunning = false;\n\t\t\t\t\tresolve(false); // no navigation --> resolve to false\n\t\t\t}\n\t\t});\n\t}\n\n\tgetLastHistoryEntry(): RouterState {\n\t\treturn this._oManagedHistory[this._oManagedHistory.length - 1];\n\t}\n\n\tsetPathMapping(mappings: { oldPath: string; newPath: string }[]): void {\n\t\tthis._pathMappings = mappings.filter((mapping) => {\n\t\t\treturn mapping.oldPath !== mapping.newPath;\n\t\t});\n\t}\n\n\thashGuard(): void {\n\t\tlet sHash = this.getDecodedWindowHash();\n\t\tconst currentAppName = this.getAppNameFromHash(sHash);\n\t\tif (currentAppName != this.appName) {\n\t\t\t// When doing external navigation in another window, the current window location is temporarily modified with the URL of the target app\n\t\t\t// In this case, we don't want to update the internally managed history, so we simply do nothing\n\t\t\treturn;\n\t\t}\n\n\t\tif (sHash.includes(\"restoreHistory=true\")) {\n\t\t\tthis._bApplyRestore = true;\n\t\t} else if (!this.bIsRebuildHistoryRunning) {\n\t\t\t// Check if the hash needs to be changed (this happens in FCL when switching b/w edit and read-only with 3 columns open)\n\t\t\tconst mapping = this._pathMappings.find((m) => {\n\t\t\t\treturn sHash.includes(m.oldPath);\n\t\t\t});\n\t\t\tif (mapping) {\n\t\t\t\t// Replace the current hash\n\t\t\t\tsHash = sHash.replace(mapping.oldPath, mapping.newPath);\n\t\t\t\thistory.replaceState(Object.assign({}, history.state), \"\", encodeURI(sHash));\n\t\t\t}\n\n\t\t\tconst aHashSplit = sHash.split(\"&/\");\n\t\t\tconst sAppHash = aHashSplit[1] ? aHashSplit[1] : \"\";\n\t\t\tif (this.checkHashWithGuard(sAppHash)) {\n\t\t\t\tconst oNewState = this._extractStateFromHash(sAppHash);\n\t\t\t\tthis._pushNewState(oNewState, false, false, true);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Compares 2 states.\n\t * @param {object} oState1\n\t * @param {object} oState2\n\t * @returns {number} The result of the comparison:\n\t *        - enumState.EQUAL if oState1 and oState2 are equal\n\t *        - enumState.COMPATIBLE if oState1 and oState2 are compatible\n\t *        - enumState.ANCESTOR if oState1 is an ancestor of oState2\n\t *        - enumState.DIFFERENT if the 2 states are different\n\t */\n\n\t_compareCacheStates(oState1: RouterState, oState2: RouterState): number {\n\t\t// First compare object keys\n\t\tif (oState1.keys.length > oState2.keys.length) {\n\t\t\treturn enumState.DIFFERENT;\n\t\t}\n\t\tlet equal = true;\n\t\tlet index;\n\n\t\tfor (index = 0; equal && index < oState1.keys.length; index++) {\n\t\t\tif (oState1.keys[index] !== oState2.keys[index]) {\n\t\t\t\tequal = false;\n\t\t\t}\n\t\t}\n\n\t\tif (!equal) {\n\t\t\t// Check routingHints\n\t\t\tif (oState1.keys.length === 1 && oState2.keys.length === 1 && this.routingHints?.[oState1.keys[0]]) {\n\t\t\t\tif (this.routingHints[oState1.keys[0]].parentOf && this.routingHints[oState1.keys[0]].parentOf.includes(oState2.keys[0])) {\n\t\t\t\t\treturn enumState.ANCESTOR;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Some objects keys are different\n\t\t\treturn enumState.DIFFERENT;\n\t\t}\n\n\t\t// All keys from oState1 are in oState2 --> check if ancestor\n\t\tif (oState1.keys.length < oState2.keys.length || oState1.screenMode < oState2.screenMode) {\n\t\t\treturn enumState.ANCESTOR;\n\t\t}\n\t\tif (oState1.screenMode > oState2.screenMode) {\n\t\t\treturn enumState.DIFFERENT; // Not sure this case can happen...\n\t\t}\n\n\t\t// At this stage, the 2 states have the same object keys (in the same order) and same screenmode\n\t\t// They can be either compatible or equal\n\t\treturn oState1.sLayout === oState2.sLayout ? enumState.EQUAL : enumState.COMPATIBLE;\n\t}\n\n\t/**\n\t * Split the app-specific route at the \"&/\" separator.\n\t *\n\t * The app-specific route consists of one or more segments separated by \"&/\".\n\t * @example\n\t * splitAppSpecificRoute(\"&/Entity('abc')/NextEntity('xyz')\");\n\t * // [\"Entity('abc')/NextEntity('xyz')\"]\n\t *\n\t * splitAppSpecificRoute(\"&/Entity('abc')/NextEntity('xyz')&/Prefix/NestedRoute\");\n\t * // [\"Entity('abc')/NextEntity('xyz')\", \"Prefix/NestedRoute\"]\n\t * @param appSpecificRoute\tThe app-specific route.\n\t * @returns An array of app-specific route segments.\n\t */\n\tprivate static splitAppSpecificRoute(appSpecificRoute: string | undefined): string[] {\n\t\tconst routeSplit = appSpecificRoute?.split(\"&/\") ?? [];\n\t\tif (!routeSplit[0]) {\n\t\t\trouteSplit.shift(); // remove the leading empty segment (the app-specific route starts with \"&/\")\n\t\t}\n\t\treturn routeSplit;\n\t}\n\n\t/**\n\t * Checks if back exits the present guard set.\n\t * @returns `true` if back exits the guard\n\t */\n\tcheckIfBackIsOutOfGuard(): boolean {\n\t\t// We use window.location.hash instead of HashChanger.getInstance().getHash() because the latter\n\t\t// replaces characters in the URL (e.g. %24 replaced by $) and it causes issues when comparing\n\t\t// with the URLs in the managed history\n\t\tconst splitHash = this.getFullHash();\n\n\t\tconst segments = RouterProxy.splitAppSpecificRoute(splitHash);\n\n\t\tif (segments.length > 1) {\n\t\t\t// there is a nested route involved -> assume we are still inside the guard\n\t\t\treturn false;\n\t\t}\n\n\t\tconst hash = segments[0] ?? \"\";\n\n\t\tlet previousHash;\n\t\tif (this._oNavigationGuard) {\n\t\t\tfor (let i = this._oManagedHistory.length - 1; i > 0; i--) {\n\t\t\t\tif (this._oManagedHistory[i].hash === hash) {\n\t\t\t\t\tpreviousHash = this._oManagedHistory[i - 1].hash;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn !previousHash || !this.checkHashWithGuard(previousHash);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Checks if a back navigation will exit the app.\n\t * @returns True if back exits the app\n\t */\n\tcheckIfBackExitsApp(): boolean {\n\t\tconst splitHash = this.getFullHash();\n\n\t\tconst segments = RouterProxy.splitAppSpecificRoute(splitHash);\n\n\t\tif (segments.length > 1) {\n\t\t\t// there is a nested route involved -> assume we are still inside the app\n\t\t\treturn false;\n\t\t}\n\n\t\t// If the current hash is the first one in the history, then a navback will exit the app\n\t\tconst hash = segments[0] ?? \"\";\n\t\treturn this._oManagedHistory.length > 0 && this._oManagedHistory[0].hash === hash;\n\t}\n\n\t/**\n\t * Checks if the last 2 entries in the history share the same context.\n\t * @returns `true` if they share the same context.\n\t */\n\tcheckIfBackHasSameContext(): boolean {\n\t\tif (this._oManagedHistory.length < 2) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst oCurrentState = this._oManagedHistory[this._oManagedHistory.length - 1];\n\t\tconst oPreviousState = this._oManagedHistory[this._oManagedHistory.length - 2];\n\n\t\treturn oCurrentState.hash.split(\"?\")[0] === oPreviousState.hash.split(\"?\")[0];\n\t}\n\n\t/**\n\t * Restores the focus for the current hash, if we can find it in the history.\n\t * @returns True if focus was set, false otherwise.\n\t */\n\trestoreFocusForCurrentHash(): boolean {\n\t\tconst currentHash = removeAppStateInHash(this.getHash());\n\t\tconst stateForHash = this._oManagedHistory.find((state) => {\n\t\t\treturn removeAppStateInHash(state.hash) === currentHash;\n\t\t});\n\n\t\tlet focusApplied = false;\n\t\tif (stateForHash?.focusControlId) {\n\t\t\tlet focusControl = Element.getElementById(stateForHash.focusControlId);\n\t\t\tlet focusInfo = stateForHash.focusInfo;\n\t\t\tif ((!focusControl || !focusControl.getFocusDomRef()) && stateForHash.secondaryFocusControlId) {\n\t\t\t\t// The control for focus is either not found or is not displayed on screen (no focusDomRef)\n\t\t\t\t// --> try the secondary control if there's one\n\t\t\t\tfocusControl = Element.getElementById(stateForHash.secondaryFocusControlId);\n\t\t\t\tfocusInfo = stateForHash.secondaryFocusInfo;\n\t\t\t}\n\t\t\tif (\n\t\t\t\t// if the control is a busy table, we don't want to focus it.\n\t\t\t\t// tables have their own handling to restore focus, so we don't want to interfere with that\n\t\t\t\tfocusControl?.getParent()?.isA<Table>(\"sap.ui.mdc.Table\") &&\n\t\t\t\t(focusControl as MTable | UITable).getBusy()\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfocusControl?.focus(focusInfo);\n\t\t\tfocusApplied = focusControl !== undefined;\n\t\t}\n\n\t\treturn focusApplied;\n\t}\n\n\t/**\n\t * Stores the ID of the currently focused control in the history for the current hash.\n\t *\n\t */\n\tprivate storeFocusInfoForCurrentHash(): void {\n\t\tconst currentHash = removeAppStateInHash(this.getHash());\n\t\tconst stateForHash = this._oManagedHistory.find((state) => {\n\t\t\treturn removeAppStateInHash(state.hash) === currentHash;\n\t\t});\n\t\tif (stateForHash) {\n\t\t\tconst focusControl = Element.getActiveElement();\n\t\t\tstateForHash.focusControlId = focusControl?.getId();\n\t\t\tif (focusControl) {\n\t\t\t\t// The secondary focus control is the parent table if there's one\n\t\t\t\tlet parentTable = focusControl.getParent();\n\t\t\t\twhile (parentTable && !parentTable.isA<UITable>(\"sap.ui.table.Table\") && !parentTable.isA<MTable>(\"sap.m.Table\")) {\n\t\t\t\t\tparentTable = parentTable.getParent();\n\t\t\t\t}\n\t\t\t\tstateForHash.secondaryFocusControlId = parentTable?.getId();\n\t\t\t\tstateForHash.secondaryFocusInfo = { preventScroll: true };\n\t\t\t}\n\t\t\tstateForHash.focusInfo = focusControl?.getFocusInfo();\n\t\t}\n\t}\n\n\t/**\n\t * Finds a layout value for a hash in the history.\n\t * @param hash The hash to look for in the history.\n\t * @returns A layout value if it could be found, undefined otherwise.\n\t */\n\tfindLayoutForHash(hash: string): string | undefined {\n\t\tif (!this.fclEnabled) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Remove all query parameters from the hash\n\t\tconst hashNoParam = hash.split(\"?\")[0];\n\n\t\t// Look for the state backwards, so that we find the last state in the history (e.g. if we have 2 states with the same hash but 2 different layouts)\n\t\tlet targetState: RouterState | undefined;\n\t\tfor (let index = this._oManagedHistory.length - 1; index >= 0 && targetState === undefined; index--) {\n\t\t\tif (this._oManagedHistory[index].hash.split(\"?\")[0] === hashNoParam) {\n\t\t\t\ttargetState = this._oManagedHistory[index];\n\t\t\t}\n\t\t}\n\n\t\treturn targetState?.sLayout;\n\t}\n}\n\nexport default RouterProxy;\n"],"mappings":"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","ignoreList":[]}
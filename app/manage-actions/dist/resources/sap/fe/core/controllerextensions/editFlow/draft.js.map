{"version":3,"file":"draft.js","names":["draftOperations","EDIT","ACTIVATION","DISCARD","PREPARE","getActionName","oContext","sOperation","oModel","getModel","oMetaModel","getMetaModel","sEntitySetPath","getMetaPath","getPath","getObject","createOperation","oOptions","sOperationName","bindContext","getConvertedAction","context","operation","operationName","metaModel","actionPath","boundAction","createBindingContext","convertTypes","resolvePath","target","getReturnType","hasPrepareAction","async","executeDraftEditAction","bPreserveChanges","oView","groupId","messageHandler","overwriteChange","convertedAction","Operation","CommonUtils","getAppComponent","contexts","label","getResourceModel","getText","bindingParameters","$$inheritExpandSelect","$$updateGroupId","skipMessages","oDataProperties","disableSideEffects","ignoreETag","undefined","replaceWithRVC","getBinding","isA","deferredSubmit","setDefaultParametersValues","PreserveChanges","result","execute","status","modifiedError","Error","reason","value","returnedContext","executeDraftValidation","appComponent","ModelHelper","getMessagesPath","draft","isKeepAlive","requestObject","executeDraftPreparationAction","getUpdateGroupId","requestMessages","getSideEffectsService","error","Log","executeDraftActivationAction","oAppComponent","sGroupId","oPreparePromise","bHasPrepareAction","bIgnoreEtag","getProperty","e","prepareOperation","destroy","clear","actionName","oSideEffectsService","oBindingParameters","getODataActionSideEffects","aTargetPaths","pathExpressions","length","requestSideEffects","oError","getMessagePathForPrepare","getMessagePathForContext","metaContext","getMetaContext","convertedContext","getInvolvedDataModelObjects","messages","targetEntityType","annotations","Common","Messages","isPathAnnotationExpression","path","bMessages","sMessagesPath","oOperation","$select","setParameter","getGroupId","invoke","then","catch","removeTransitionMessages","arguments","data","messageHandling","removeUnboundTransitionMessages","removeBoundTransitionMessages","executeDraftDiscardAction","bEnableStrictHandling","disableStrictHandling","computeSiblingInformation","rootCurrentContext","rightmostCurrentContext","rootContextInfo","startsWith","model","additionalPath","replace","segments","substring","split","unshift","oldPaths","newPaths","currentPath","paths","rootSiblingPathPromise","shift","canonicalPathPromises","map","segment","endsWith","siblingContext","$$groupId","getBoundContext","requestCanonicalPath","Promise","resolve","canonicalPaths","all","some","rootSiblingPath","push","siblingPath","forEach","canonicalPath","index","navigation","keys","targetContext","pathMapping","oldPath","newPath","createDraftFromActiveDocument","mParameters","mParam","bRunPreserveChangesFlow","response","draftDataContext","resourceModel","draftAdminData","sInfo","InProcessByUserDescription","InProcessByUser","sEntitySet","getViewData","entitySet","sLockedByUserMsg","MessageBox","CreatedByUserDescription","CreatedByUser","sUnsavedChangesMsg","showEditConfirmationMessageBox","message","oDraftContext","oResponse","siblingInfo","waitForContextRequested","canceled","sEditActionName","oSideEffects","triggerActions","requestSideEffectsForODataAction","activateDocument","bExecute","fnBeforeActivateDocument","oActiveDocumentContext","sBatchGroup","ignoreEtag","hasPendingChanges","submitBatch","oActivatePromise","values","fnAfterActivateDocument","localI18nRef","Library","getResourceBundleFor","reject","oDialog","Dialog","title","state","content","Text","text","beginButton","Button","type","press","close","endButton","afterClose","addStyleClass","open","deleteDraft","isTransient","delete","sDiscardAction","bIsActiveEntity","IsActiveEntity","isInactive","resetChanges","isDraftRoot","targetEntitySet","processDataLossOrDraftDiscardConfirmation","draftDataLossPopup","silentlyKeepDraftOnForwardNavigation","NavigationType"],"sources":["./draft.ts"],"sourcesContent":["import type { Action as EdmAction } from \"@sap-ux/vocabularies-types\";\nimport Log from \"sap/base/Log\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport draftDataLossPopup from \"sap/fe/core/controllerextensions/editFlow/draftDataLossPopup\";\nimport messageHandling from \"sap/fe/core/controllerextensions/messageHandler/messageHandling\";\nimport { convertTypes, getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport { getResourceModel } from \"sap/fe/core/helpers/ResourceModelHelper\";\nimport { isPathAnnotationExpression } from \"sap/fe/core/helpers/TypeGuards\";\nimport type { SideEffectsService } from \"sap/fe/core/services/SideEffectsServiceFactory\";\nimport Button from \"sap/m/Button\";\nimport Dialog from \"sap/m/Dialog\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport Text from \"sap/m/Text\";\nimport Library from \"sap/ui/core/Lib\";\nimport type View from \"sap/ui/core/mvc/View\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport type { ContextErrorType } from \"sap/ui/model/odata/v4/Context\";\nimport type ODataContextBinding from \"sap/ui/model/odata/v4/ODataContextBinding\";\nimport type { FEView } from \"../../BaseController\";\nimport ModelHelper from \"../../helpers/ModelHelper\";\nimport type MessageHandler from \"../MessageHandler\";\nimport Operation from \"./operations/Operation\";\n\nexport type SiblingInformation = {\n\ttargetContext: Context;\n\tpathMapping: { oldPath: string; newPath: string }[];\n};\n\nexport type RootContextInfo = {\n\trootSiblingPathPromise: Promise<Context | undefined>;\n};\n\nexport type BindContextParameters = {\n\t/**\n\t * The value for the \"5.1.2 System Query Option $expand\" or an object which determines that value. The object\n\t * is a map from expand path to expand options, where the options are again maps of system query options,\n\t * typically with string values. $count can also be given as a `boolean` value, $expand can recursively\n\t * be given as a map, $levels can also be given as a `number` value, and $select can also be given as an\n\t * array (but without navigation paths). An empty map can also be given as `null` or `true`. See also {@link https://ui5.sap.com/#/topic/1ab4f62de6ab467096a2a98b363a1373 Parameters}.\n\t */\n\t$expand?: string | object;\n\t/**\n\t * A comma separated list or an array of items which determine the value for the \"5.1.3 System Query Option\n\t * $select\". Since 1.75.0, when using the \"autoExpandSelect\" model parameter (see {@link sap.ui.model.odata.v4.ODataModel#constructor}),\n\t * paths with navigation properties can be included and will contribute to the \"5.1.2 System Query Option\n\t * $expand\".\n\t */\n\t$select?: string;\n\t/**\n\t * Whether a binding relative to an {@link sap.ui.model.odata.v4.Context} uses the canonical path computed\n\t * from its context's path for data service requests; only the value `true` is allowed.\n\t */\n\t$$canonicalPath?: boolean;\n\t/**\n\t * The group ID to be used for **read** requests triggered by this binding; if not specified, either the\n\t * parent binding's group ID (if the binding is relative) or the model's group ID is used, see {@link sap.ui.model.odata.v4.ODataModel#constructor}.\n\t * Valid values are `undefined`, '$auto', '$auto.*', '$direct' or application group IDs as specified in\n\t * {@link sap.ui.model.odata.v4.ODataModel}.\n\t */\n\t$$groupId?: string;\n\t/**\n\t * For operation bindings only: Whether $expand and $select from the parent binding are used in the request\n\t * sent on {@link #execute}. If set to `true`, the binding must not set the $expand itself, the operation\n\t * must be bound, and the return value and the binding parameter must belong to the same entity set.\n\t */\n\t$$inheritExpandSelect?: boolean;\n\t/**\n\t * Whether the binding always uses an own service request to read its data; only the value `true` is allowed.\n\t */\n\t$$ownRequest?: boolean;\n\t/**\n\t * Whether implicit loading of side effects via PATCH requests is switched off; only the value `true` is\n\t * allowed. This sets the preference \"return=minimal\" and requires the service to return an ETag header\n\t * for \"204 No Content\" responses. If not specified, the value of the parent binding is used.\n\t */\n\t$$patchWithoutSideEffects?: boolean;\n\t/**\n\t * The group ID to be used for **update** requests triggered by this binding; if not specified, either the\n\t * parent binding's update group ID (if the binding is relative) or the model's update group ID is used,\n\t * see {@link sap.ui.model.odata.v4.ODataModel#constructor}. For valid values, see parameter \"$$groupId\".\n\t */\n\t$$updateGroupId?: string;\n};\n\n/* Constants for draft operations */\nconst draftOperations = {\n\tEDIT: \"EditAction\",\n\tACTIVATION: \"ActivationAction\",\n\tDISCARD: \"DiscardAction\",\n\tPREPARE: \"PreparationAction\"\n};\n\n/**\n * Static functions for the draft programming model\n * @namespace\n * @experimental This module is only for experimental use! <br/><b>This is only a POC and maybe deleted</b>\n * @since 1.54.0\n */\n\n/**\n * Determines the action name for a draft operation.\n * @param oContext The context that should be bound to the operation\n * @param sOperation The operation name\n * @returns The name of the draft operation\n */\nfunction getActionName(oContext: Context, sOperation: string): string {\n\tconst oModel = oContext.getModel(),\n\t\toMetaModel = oModel.getMetaModel(),\n\t\tsEntitySetPath = oMetaModel.getMetaPath(oContext.getPath());\n\n\treturn oMetaModel.getObject(`${sEntitySetPath}@com.sap.vocabularies.Common.v1.DraftRoot/${sOperation}`);\n}\n/**\n * Creates an operation context binding for the given context and operation.\n * @param oContext The context that should be bound to the operation\n * @param sOperation The operation (action or function import)\n * @param oOptions Options to create the operation context\n * @returns The context binding of the bound operation\n */\nfunction createOperation(oContext: Context, sOperation: string, oOptions?: BindContextParameters): ODataContextBinding {\n\tconst sOperationName = getActionName(oContext, sOperation);\n\n\treturn oContext.getModel().bindContext(`${sOperationName}(...)`, oContext, oOptions);\n}\n\n/**\n * Gets the converted action for a given context and operation.\n * @param context  The context that should be bound to the operation\n * @param operation The operation name\n * @returns The converted action\n */\nfunction getConvertedAction(context: Context, operation: string): EdmAction | undefined {\n\tconst operationName = getActionName(context, operation);\n\tconst metaModel = context.getModel().getMetaModel(),\n\t\tactionPath = `${metaModel.getMetaPath(context.getPath())}/${operationName}`,\n\t\tboundAction = metaModel.createBindingContext(actionPath)!;\n\treturn convertTypes(metaModel).resolvePath<EdmAction | undefined>(boundAction.getPath()).target;\n}\n\n/**\n * Determines the return type for a draft operation.\n * @param oContext The context that should be bound to the operation\n * @param sOperation The operation name\n * @returns The return type of the draft operation\n */\nfunction getReturnType(oContext: Context, sOperation: string): unknown {\n\tconst oModel = oContext.getModel(),\n\t\toMetaModel = oModel.getMetaModel(),\n\t\tsEntitySetPath = oMetaModel.getMetaPath(oContext.getPath());\n\n\treturn oMetaModel.getObject(`${sEntitySetPath}@com.sap.vocabularies.Common.v1.DraftRoot/${sOperation}/$ReturnType`);\n}\n/**\n * Check if optional draft prepare action exists.\n * @param oContext The context that should be bound to the operation\n * @returns True if a a prepare action exists\n */\nfunction hasPrepareAction(oContext: Context): boolean {\n\treturn !!getActionName(oContext, draftOperations.PREPARE);\n}\n/**\n * Creates a new draft from an active document.\n * @param oContext Context for which the action should be performed\n * @param bPreserveChanges If true - existing changes from another user that are not locked are preserved and an error is sent from the backend, otherwise false - existing changes from another user that are not locked are overwritten</li>\n * @param oView If true - existing changes from another\n * @param groupId The batch groupId for post call of edit action\n * @param messageHandler  The message handler controller extension\n * @param overwriteChange\n * @returns Resolve function returns the context of the operation\n */\nasync function executeDraftEditAction(\n\toContext: Context,\n\tbPreserveChanges: boolean,\n\toView: View,\n\tgroupId: string,\n\tmessageHandler: MessageHandler,\n\toverwriteChange?: boolean\n): Promise<Context | undefined> {\n\t// If the context is not loaded (i.e. oContext.getObject() == undefined), we assume it corresponds to an active context\n\t// This situation happens when opening an OP directly in edit mode (InternalRouting._bindPageForEdit)\n\tconst convertedAction = getConvertedAction(oContext, draftOperations.EDIT);\n\tif (convertedAction) {\n\t\tconst operation = new Operation(CommonUtils.getAppComponent(oView), oContext.getModel(), convertedAction, {\n\t\t\tmessageHandler: messageHandler,\n\t\t\tcontexts: [oContext],\n\t\t\tlabel: getResourceModel(oView).getText(\"C_COMMON_OBJECT_PAGE_EDIT\"),\n\t\t\tbindingParameters: { $$inheritExpandSelect: true, $$updateGroupId: \"$auto\" },\n\t\t\tskipMessages: true,\n\t\t\toDataProperties: {\n\t\t\t\tdisableSideEffects: true,\n\t\t\t\tignoreETag: oContext.getObject() === undefined, // If the context has not been loaded yet, we can ignore the ETag (as no previous ETag is available)\n\t\t\t\tgroupId: groupId,\n\t\t\t\treplaceWithRVC: oContext.getBinding().isA(\"sap.ui.model.odata.v4.ODataListBinding\"),\n\t\t\t\tdeferredSubmit: overwriteChange !== true //\tIf the context is coming from a list binding we pass the flag true to replace the context by the active one\n\t\t\t}\n\t\t});\n\t\toperation.setDefaultParametersValues({ PreserveChanges: bPreserveChanges });\n\t\tconst result = await operation.execute();\n\t\tif (result[0].status === \"rejected\") {\n\t\t\tconst modifiedError = new Error(result[0].reason) as Error & { status?: number };\n\t\t\t// we need to persist the status in the error to be able to show the locked by another user dialog\n\t\t\tmodifiedError.status = result[0].reason.status;\n\t\t\tthrow modifiedError;\n\t\t} else {\n\t\t\treturn result[0].value.returnedContext;\n\t\t}\n\t} else {\n\t\tthrow new Error(\"The edit action not found\");\n\t}\n}\n\n/**\n * Executes the validation of the draft. The PrepareAction is triggered if the messages are annotated and entitySet gets a PreparationAction annotated.\n * If the operation succeeds and operation doesn't get a return type (RAP system) the messages are requested.\n * @param context Context for which the PrepareAction should be performed\n * @param appComponent The AppComponent\n * @param ignoreETag If set to true, ETags are ignored when executing the action\n * @returns Resolve function returns\n *  - the context of the operation if the action has been successfully executed\n *  - void if the action has failed\n *  - undefined if the action has not been triggered since the prerequisites are not met\n */\nasync function executeDraftValidation(\n\tcontext: Context,\n\tappComponent: AppComponent,\n\tignoreETag: boolean\n): Promise<ODataContextBinding | void | undefined> {\n\tif (ModelHelper.getMessagesPath(context.getModel().getMetaModel(), context.getPath()) && draft.hasPrepareAction(context)) {\n\t\ttry {\n\t\t\tif (!ignoreETag && !context.isKeepAlive()) {\n\t\t\t\t// We need to wait for the entity related to the context to post the action with the If-Match header\n\t\t\t\t// Some triggers (enter on table) can generate a promise in the cache so if we don't wait for the entity\n\t\t\t\t// the POST will be sent without If-Match and will generate an error on backend side.\n\t\t\t\tawait (context.getBinding() as ODataContextBinding).requestObject(\"\");\n\t\t\t}\n\t\t\tconst operation = draft.executeDraftPreparationAction(context, context.getUpdateGroupId(), true, ignoreETag);\n\t\t\tif (!getReturnType(context, draftOperations.PREPARE)) {\n\t\t\t\trequestMessages(context, appComponent.getSideEffectsService());\n\t\t\t}\n\n\t\t\treturn await operation;\n\t\t} catch (error: unknown) {\n\t\t\tLog.error(\"Error while requesting messages\", error as string);\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\n/**\n * Activates a draft document. The draft will replace the sibling entity and will be deleted by the back end.\n * @param oContext Context for which the action should be performed\n * @param oAppComponent The AppComponent\n * @param messageHandler\n * @param [sGroupId] The optional batch group in which the operation is to be executed\n * @param [oPreparePromise] The promise of the prepare action\n * @returns Resolve function returns the context of the operation\n */\nasync function executeDraftActivationAction(\n\toContext: Context,\n\toAppComponent: AppComponent,\n\tmessageHandler: MessageHandler,\n\tsGroupId?: string,\n\toPreparePromise?: Promise<void | ODataContextBinding>\n): Promise<Context> {\n\tconst bHasPrepareAction = hasPrepareAction(oContext);\n\t// According to the draft spec if the service contains a prepare action and we trigger both prepare and\n\t// activate in one $batch the activate action is called with iF-Match=*\n\tconst bIgnoreEtag = bHasPrepareAction;\n\tlet operation: Operation | undefined;\n\tif (!oContext.getProperty(\"IsActiveEntity\")) {\n\t\tconst convertedAction = getConvertedAction(oContext, draftOperations.ACTIVATION);\n\t\tif (convertedAction) {\n\t\t\ttry {\n\t\t\t\toperation = new Operation(oAppComponent, oContext.getModel(), convertedAction, {\n\t\t\t\t\tmessageHandler: messageHandler,\n\t\t\t\t\tcontexts: [oContext],\n\t\t\t\t\tlabel: getResourceModel(oAppComponent).getText(\"C_OP_OBJECT_PAGE_SAVE\"),\n\t\t\t\t\tbindingParameters: { $$inheritExpandSelect: true },\n\t\t\t\t\tskipMessages: true,\n\t\t\t\t\toDataProperties: {\n\t\t\t\t\t\tdisableSideEffects: true,\n\t\t\t\t\t\tgroupId: sGroupId,\n\t\t\t\t\t\tignoreETag: bIgnoreEtag,\n\t\t\t\t\t\treplaceWithRVC: oContext.getBinding().isA(\"sap.ui.model.odata.v4.ODataListBinding\")\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tconst result = await operation.execute();\n\t\t\t\tif (result[0].status === \"rejected\") {\n\t\t\t\t\tthrow new Error(result[0].reason);\n\t\t\t\t} else if (result[0].value.returnedContext === undefined) {\n\t\t\t\t\tthrow new Error(\"No context returned by the action\");\n\t\t\t\t}\n\t\t\t\treturn result[0].value.returnedContext;\n\t\t\t} catch (e) {\n\t\t\t\tif (bHasPrepareAction) {\n\t\t\t\t\t// destroy the operation bindings to avoid additional message requests sent by the model\n\t\t\t\t\tconst prepareOperation = await oPreparePromise;\n\t\t\t\t\tprepareOperation?.destroy();\n\t\t\t\t\toperation?.clear();\n\n\t\t\t\t\tconst actionName = getActionName(oContext, draftOperations.PREPARE),\n\t\t\t\t\t\toSideEffectsService = oAppComponent.getSideEffectsService(),\n\t\t\t\t\t\toBindingParameters = oSideEffectsService.getODataActionSideEffects(actionName, oContext),\n\t\t\t\t\t\taTargetPaths = oBindingParameters && oBindingParameters.pathExpressions;\n\t\t\t\t\tif (aTargetPaths && aTargetPaths.length > 0) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait oSideEffectsService.requestSideEffects(aTargetPaths, oContext);\n\t\t\t\t\t\t} catch (oError: unknown) {\n\t\t\t\t\t\t\tLog.error(\"Error while requesting side effects\", oError as string);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait requestMessages(oContext, oSideEffectsService, true);\n\t\t\t\t\t\t} catch (oError: unknown) {\n\t\t\t\t\t\t\tLog.error(\"Error while requesting messages\", oError as string);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error(\"The activation action not found\");\n\t\t}\n\t} else {\n\t\tthrow new Error(\"The activation action cannot be executed on an active document\");\n\t}\n}\n\n/**\n * Gets the supported message property path on the PrepareAction for a context.\n * @param context Context to be checked\n * @returns Path to the message\n */\nfunction getMessagePathForPrepare(context: Context): string | undefined {\n\t// If there is no return parameter, it is not possible to request Messages.\n\t// RAP draft prepare has no return parameter\n\treturn getReturnType(context, draftOperations.PREPARE) ? getMessagePathForContext(context) : undefined;\n}\n\n/**\n * Gets the supported message property path for a context.\n * @param context Context to be checked\n * @returns Path to the message\n */\nfunction getMessagePathForContext(context: Context): string | undefined {\n\tconst metaContext = context.getModel().getMetaModel().getMetaContext(context.getPath());\n\tconst convertedContext = getInvolvedDataModelObjects(metaContext);\n\tconst messages = convertedContext.targetEntityType.annotations.Common?.Messages;\n\treturn isPathAnnotationExpression(messages) ? messages.path : undefined;\n}\n\n/**\n * Execute a preparation action.\n * @param oContext Context for which the action should be performed\n * @param groupId The optional batch group in which we want to execute the operation\n * @param bMessages If set to true, the PREPARE action retrieves SAP_Messages\n * @param ignoreETag If set to true, ETag information is ignored when the action is executed\n * @returns Resolve function returns the context of the operation\n */\nasync function executeDraftPreparationAction(\n\toContext: Context,\n\tgroupId?: string,\n\tbMessages?: boolean,\n\tignoreETag?: boolean\n): Promise<void | ODataContextBinding> {\n\tif (!oContext.getProperty(\"IsActiveEntity\")) {\n\t\tconst sMessagesPath = bMessages ? getMessagePathForPrepare(oContext) : undefined;\n\t\tconst oOperation = createOperation(oContext, draftOperations.PREPARE, sMessagesPath ? { $select: sMessagesPath } : undefined);\n\n\t\t// TODO: side effects qualifier shall be even deprecated to be checked\n\t\toOperation.setParameter(\"SideEffectsQualifier\", \"\");\n\n\t\tconst sGroupId = groupId || oOperation.getGroupId();\n\t\treturn oOperation\n\t\t\t.invoke(sGroupId, ignoreETag)\n\t\t\t.then(function () {\n\t\t\t\treturn oOperation;\n\t\t\t})\n\t\t\t.catch(function (oError: unknown) {\n\t\t\t\tLog.error(\"Error while executing the operation\", oError as string);\n\t\t\t\treturn oOperation;\n\t\t\t});\n\t} else {\n\t\tthrow new Error(\"The preparation action cannot be executed on an active document\");\n\t}\n}\n\n/**\n * Requests the messages if annotated for a given context.\n * @param oContext Context for which the messages shall be requested\n * @param oSideEffectsService Service for the SideEffects on SAP Fiori elements\n * @param removeTransitionMessages If set to true, transition messages are removed if state messages exist\n * @returns Promise which is resolved once messages were requested\n */\nasync function requestMessages(\n\toContext: Context,\n\toSideEffectsService: SideEffectsService,\n\tremoveTransitionMessages = false\n): Promise<void> {\n\tconst sMessagesPath = ModelHelper.getMessagesPath(oContext.getModel().getMetaModel(), oContext.getPath());\n\tif (sMessagesPath) {\n\t\tawait oSideEffectsService.requestSideEffects([sMessagesPath], oContext);\n\t\tif (removeTransitionMessages) {\n\t\t\tconst data = await oContext.requestObject();\n\t\t\tif (data[sMessagesPath].length > 0) {\n\t\t\t\t//if state messages are available from the PREPARATION action, then previous transition messages are removed\n\t\t\t\tmessageHandling.removeUnboundTransitionMessages();\n\t\t\t\tmessageHandling.removeBoundTransitionMessages();\n\t\t\t}\n\t\t}\n\t}\n\treturn;\n}\n/**\n * Executes discard of a draft function using HTTP Post.\n * @param oContext Context for which the action should be performed\n * @param messageHandler The message handler controller extension\n * @param oAppComponent App Component\n * @param bEnableStrictHandling\n * @returns Resolve function returns the context of the operation\n */\nasync function executeDraftDiscardAction(\n\toContext: Context,\n\tmessageHandler: MessageHandler,\n\toAppComponent: AppComponent,\n\tbEnableStrictHandling?: boolean\n): Promise<void> {\n\tif (!oContext.getProperty(\"IsActiveEntity\")) {\n\t\tconst convertedAction = getConvertedAction(oContext, draftOperations.DISCARD);\n\t\tif (convertedAction) {\n\t\t\tconst result = await new Operation(oAppComponent, oContext.getModel(), convertedAction, {\n\t\t\t\tmessageHandler: messageHandler,\n\t\t\t\tlabel: getResourceModel(oAppComponent)?.getText(\"C_TRANSACTION_HELPER_DRAFT_DISCARD_BUTTON\") || \"\",\n\t\t\t\tcontexts: [oContext],\n\t\t\t\tskipMessages: true,\n\t\t\t\toDataProperties: {\n\t\t\t\t\tdisableSideEffects: true,\n\t\t\t\t\tdisableStrictHandling: !bEnableStrictHandling,\n\t\t\t\t\tignoreETag: oContext.getObject() === undefined, // If the context has not been loaded yet, we can ignore the ETag (as no previous ETag is available)\n\t\t\t\t\tgroupId: \"direct\",\n\t\t\t\t\treplaceWithRVC: undefined,\n\t\t\t\t\tdeferredSubmit: false\n\t\t\t\t}\n\t\t\t}).execute();\n\t\t\tif (result[0].status === \"rejected\") {\n\t\t\t\tthrow new Error(result[0].reason);\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error(\"The discard action not found\");\n\t\t}\n\t} else {\n\t\tthrow new Error(\"The discard action cannot be executed on an active document\");\n\t}\n}\n\n/**\n * This method creates a sibling context for a subobject page and calculates a sibling path for all intermediate paths\n * between the object page and the subobject page.\n * @param rootCurrentContext The context for the root of the draft\n * @param rightmostCurrentContext The context of the subobject page\n * @param rootContextInfo The context info of root of the draft\n * @param groupId\n * @returns The siblingInformation object\n */\nasync function computeSiblingInformation(\n\trootCurrentContext: Context,\n\trightmostCurrentContext: Context,\n\trootContextInfo?: RootContextInfo,\n\tgroupId?: string\n): Promise<SiblingInformation | undefined> {\n\tif (!rightmostCurrentContext.getPath().startsWith(rootCurrentContext.getPath())) {\n\t\t// Wrong usage !!\n\t\tLog.error(\"Cannot compute rightmost sibling context\");\n\t\tthrow new Error(\"Cannot compute rightmost sibling context\");\n\t}\n\n\tif (\n\t\trightmostCurrentContext.getProperty(\"IsActiveEntity\") === false &&\n\t\trightmostCurrentContext.getProperty(\"HasActiveEntity\") === false\n\t) {\n\t\t// We already know the sibling for rightmostCurrentContext doesn't exist\n\t\t// --> No need to check canonical paths etc...\n\t\treturn undefined;\n\t}\n\n\tconst model = rootCurrentContext.getModel();\n\ttry {\n\t\t// //////////////////////////////////////////////////////////////////\n\t\t// 1. Find all segments between the root object and the sub-object\n\t\t// Example: for root = /Param(aa)/Entity(bb) and rightMost = /Param(aa)/Entity(bb)/_Nav(cc)/_SubNav(dd)\n\t\t// ---> [\"Param(aa)/Entity(bb)\", \"_Nav(cc)\", \"_SubNav(dd)\"]\n\n\t\t// Find all segments in the rightmost path\n\t\tconst additionalPath = rightmostCurrentContext.getPath().replace(rootCurrentContext.getPath(), \"\");\n\t\tconst segments = additionalPath ? additionalPath.substring(1).split(\"/\") : [];\n\t\t// First segment is always the full path of the root object, which can contain '/' in case of a parametrized entity\n\t\tsegments.unshift(rootCurrentContext.getPath().substring(1));\n\n\t\t// //////////////////////////////////////////////////////////////////\n\t\t// 2. Request canonical paths of the sibling entity for each segment\n\t\t// Example: for [\"Param(aa)/Entity(bb)\", \"_Nav(cc)\", \"_SubNav(dd)\"]\n\t\t// --> request canonical paths for \"Param(aa)/Entity(bb)/SiblingEntity\", \"Param(aa)/Entity(bb)/_Nav(cc)/SiblingEntity\", \"Param(aa)/Entity(bb)/_Nav(cc)/_SubNav(dd)/SiblingEntity\"\n\t\tconst oldPaths: string[] = [];\n\t\tconst newPaths: string[] = [];\n\t\tlet currentPath = \"\";\n\n\t\t// Computing sibling entity of root of the draft context is not required if the context is already in the sub-OP\n\t\t// Example: Edit in Sub-OP where new context is already available\n\t\tconst paths = [...segments];\n\t\tif (rootContextInfo?.rootSiblingPathPromise) {\n\t\t\tpaths.shift();\n\t\t\tcurrentPath = \"/\" + rootCurrentContext?.getPath()?.substring(1);\n\t\t}\n\t\tconst canonicalPathPromises = paths.map(async (segment) => {\n\t\t\tcurrentPath += `/${segment}`;\n\t\t\toldPaths.unshift(currentPath);\n\t\t\tif (currentPath.endsWith(\")\")) {\n\t\t\t\tconst siblingContext = model\n\t\t\t\t\t.bindContext(`${currentPath}/SiblingEntity`, undefined, groupId ? { $$groupId: groupId } : undefined)\n\t\t\t\t\t.getBoundContext();\n\t\t\t\treturn siblingContext.requestCanonicalPath();\n\t\t\t} else {\n\t\t\t\treturn Promise.resolve(undefined); // 1-1 relation\n\t\t\t}\n\t\t});\n\n\t\t// //////////////////////////////////////////////////////////////////\n\t\t// 3. Reconstruct the full paths from canonical paths (for path mapping)\n\t\t// Example: for canonical paths \"/Param(aa)/Entity(bb-sibling)\", \"/Entity2(cc-sibling)\", \"/Entity3(dd-sibling)\"\n\t\t// --> [\"Param(aa)/Entity(bb-sibling)\", \"Param(aa)/Entity(bb-sibling)/_Nav(cc-sibling)\", \"Param(aa)/Entity(bb-sibling)/_Nav(cc-sibling)/_SubNav(dd-sibling)\"]\n\t\tconst canonicalPaths = (await Promise.all(canonicalPathPromises)) as string[];\n\n\t\t// Workaround (temporary ?): when the sibling doesn't exist, requestCanonicalPath returns the same path\n\t\tif (\n\t\t\tcanonicalPaths.some((path) => {\n\t\t\t\treturn path && path.endsWith(\"/SiblingEntity\");\n\t\t\t})\n\t\t) {\n\t\t\t// At least one sibling entity doesn't exist\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (rootContextInfo?.rootSiblingPathPromise) {\n\t\t\tconst rootSiblingPath = (await rootContextInfo.rootSiblingPathPromise)?.getPath() as string;\n\t\t\tcanonicalPaths.unshift(rootSiblingPath);\n\t\t\toldPaths.push(rootCurrentContext.getPath());\n\t\t}\n\t\tlet siblingPath = \"\";\n\t\tcanonicalPaths.forEach((canonicalPath, index) => {\n\t\t\tif (index !== 0) {\n\t\t\t\tif (segments[index].endsWith(\")\")) {\n\t\t\t\t\tconst navigation = segments[index].replace(/\\(.*$/, \"\"); // Keep only navigation name from the segment, i.e. aaa(xxx) --> aaa\n\t\t\t\t\tconst keys = canonicalPath.replace(/.*\\(/, \"(\"); // Keep only the keys from the canonical path, i.e. aaa(xxx) --> (xxx)\n\t\t\t\t\tsiblingPath += `/${navigation}${keys}`;\n\t\t\t\t} else {\n\t\t\t\t\tsiblingPath += `/${segments[index]}`; // 1-1 relation\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsiblingPath = canonicalPath; // To manage parametrized entities\n\t\t\t}\n\t\t\tnewPaths.unshift(siblingPath);\n\t\t});\n\n\t\treturn {\n\t\t\ttargetContext: model\n\t\t\t\t.bindContext(siblingPath, undefined, {\n\t\t\t\t\t$select: getMessagePathForContext(rightmostCurrentContext),\n\t\t\t\t\t$$groupId: \"$auto.Heroes\"\n\t\t\t\t})\n\t\t\t\t.getBoundContext(), // Create the rightmost sibling context from its path\n\t\t\tpathMapping: oldPaths.map((oldPath, index) => {\n\t\t\t\treturn {\n\t\t\t\t\toldPath,\n\t\t\t\t\tnewPath: newPaths[index]\n\t\t\t\t};\n\t\t\t})\n\t\t};\n\t} catch (error) {\n\t\t// A canonical path couldn't be resolved (because a sibling doesn't exist)\n\t\treturn undefined;\n\t}\n}\n\n/**\n * Creates a draft document from an existing document.\n *\n * The function supports several hooks as there is a certain coreography defined.\n * @param oContext Context of the active document for the new draft\n * @param oAppComponent The AppComponent\n * @param mParameters The parameters\n * @param [mParameters.oView] The view\n * @param [mParameters.bPreserveChanges] Preserve changes of an existing draft of another user\n * @param groupId The batch groupId for post call of edit action\n * @param messageHandler The message handler controller extension\n * @returns Promise resolves with the {@link sap.ui.model.odata.v4.Context context} of the new draft document\n */\nasync function createDraftFromActiveDocument(\n\toContext: Context,\n\toAppComponent: AppComponent,\n\tmParameters: {\n\t\toView: FEView;\n\t\tbPreserveChanges?: boolean | undefined;\n\t},\n\tgroupId: string,\n\tmessageHandler: MessageHandler\n): Promise<Context | undefined> {\n\tconst mParam = mParameters || {},\n\t\tbRunPreserveChangesFlow =\n\t\t\ttypeof mParam.bPreserveChanges === \"undefined\" || (typeof mParam.bPreserveChanges === \"boolean\" && mParam.bPreserveChanges); //default true\n\n\t/**\n\t * Overwrite the existing change.\n\t * @param response Context of the active document for the new draft or the error retrieved\n\t * @returns Resolves with result of {@link sap.fe.core.actions#executeDraftEditAction}\n\t */\n\tasync function overwriteChange(response: Context | ContextErrorType): Promise<Context | ContextErrorType | undefined> {\n\t\t//Overwrite existing changes\n\t\tconst oModel = oContext.getModel();\n\t\tconst draftDataContext = oModel.bindContext(`${oContext.getPath()}/DraftAdministrativeData`).getBoundContext();\n\t\tconst resourceModel = getResourceModel(mParameters.oView);\n\t\tconst draftAdminData = await draftDataContext.requestObject();\n\t\tif (draftAdminData) {\n\t\t\t// remove all unbound transition messages as we show a special dialog\n\t\t\tmessageHandling.removeUnboundTransitionMessages();\n\t\t\tlet sInfo = draftAdminData.InProcessByUserDescription || draftAdminData.InProcessByUser;\n\t\t\tconst sEntitySet = mParameters.oView.getViewData().entitySet;\n\t\t\tif (sInfo) {\n\t\t\t\tconst sLockedByUserMsg = resourceModel.getText(\"C_DRAFT_OBJECT_PAGE_DRAFT_LOCKED_BY_USER\", sInfo, sEntitySet);\n\t\t\t\tMessageBox.error(sLockedByUserMsg);\n\t\t\t\tthrow new Error(sLockedByUserMsg);\n\t\t\t} else {\n\t\t\t\tsInfo = draftAdminData.CreatedByUserDescription || draftAdminData.CreatedByUser;\n\t\t\t\tconst sUnsavedChangesMsg = resourceModel.getText(\"C_DRAFT_OBJECT_PAGE_DRAFT_UNSAVED_CHANGES\", sInfo, sEntitySet);\n\t\t\t\tawait draft.showEditConfirmationMessageBox(sUnsavedChangesMsg, oContext);\n\t\t\t\treturn draft.executeDraftEditAction(oContext, false, mParameters.oView, groupId, messageHandler, true); // true because we overwrite changes\n\t\t\t}\n\t\t} else if ((response as ContextErrorType)?.message) {\n\t\t\tMessageBox.error((response as ContextErrorType).message);\n\t\t}\n\t\tthrow new Error(`Draft creation aborted for document: ${oContext.getPath()}`);\n\t}\n\n\tif (!oContext) {\n\t\tthrow new Error(\"Binding context to active document is required\");\n\t}\n\tlet oDraftContext: Context | ContextErrorType | undefined;\n\ttry {\n\t\toDraftContext = await draft.executeDraftEditAction(oContext, bRunPreserveChangesFlow, mParameters.oView, groupId, messageHandler);\n\t} catch (oResponse) {\n\t\tif ((oResponse as ContextErrorType).status === 409 || (oResponse as ContextErrorType).status === 423) {\n\t\t\tmessageHandling.removeBoundTransitionMessages();\n\t\t\tmessageHandling.removeUnboundTransitionMessages();\n\t\t\tconst siblingInfo = await draft.computeSiblingInformation(oContext, oContext);\n\t\t\tif (siblingInfo?.targetContext) {\n\t\t\t\t//there is a context authorized to be edited by the current user\n\t\t\t\tawait CommonUtils.waitForContextRequested(siblingInfo.targetContext);\n\t\t\t\treturn siblingInfo.targetContext;\n\t\t\t} else {\n\t\t\t\t//there is no draft owned by the current user\n\t\t\t\toDraftContext = await overwriteChange(oResponse as ContextErrorType);\n\t\t\t}\n\t\t} else if (!(oResponse && (oResponse as ContextErrorType).canceled)) {\n\t\t\tthrow new Error(oResponse as string);\n\t\t}\n\t}\n\n\tif (oDraftContext) {\n\t\tconst sEditActionName = draft.getActionName(oDraftContext as Context, draftOperations.EDIT);\n\t\tconst oSideEffects = oAppComponent.getSideEffectsService().getODataActionSideEffects(sEditActionName, oDraftContext as Context);\n\t\tif (oSideEffects?.triggerActions?.length) {\n\t\t\tawait oAppComponent.getSideEffectsService().requestSideEffectsForODataAction(oSideEffects, oDraftContext as Context);\n\t\t\treturn oDraftContext as Context;\n\t\t} else {\n\t\t\treturn oDraftContext as Context;\n\t\t}\n\t} else {\n\t\treturn undefined;\n\t}\n}\n/**\n * Creates an active document from a draft document.\n *\n * The function supports several hooks as there is a certain choreography defined.\n * @param oContext Context of the active document for the new draft\n * @param oAppComponent The AppComponent\n * @param mParameters The parameters\n * @param [mParameters.fnBeforeActivateDocument] Callback that allows a veto before the 'Create' request is executed\n * @param [mParameters.fnAfterActivateDocument] Callback for postprocessing after document was activated.\n * @param messageHandler The message handler controller extension\n * @returns Promise resolves with the {@link sap.ui.model.odata.v4.Context context} of the new draft document\n */\nasync function activateDocument(\n\toContext: Context,\n\toAppComponent: AppComponent,\n\tmParameters: { fnBeforeActivateDocument?: Function; fnAfterActivateDocument?: Function },\n\tmessageHandler: MessageHandler\n): Promise<Context> {\n\tconst mParam = mParameters || {};\n\tif (!oContext) {\n\t\tthrow new Error(\"Binding context to draft document is required\");\n\t}\n\n\tconst bExecute = mParam.fnBeforeActivateDocument ? await mParam.fnBeforeActivateDocument(oContext) : true;\n\tif (!bExecute) {\n\t\tthrow new Error(`Activation of the document was aborted by extension for document: ${oContext.getPath()}`);\n\t}\n\n\tlet oActiveDocumentContext: Context;\n\tif (!hasPrepareAction(oContext)) {\n\t\toActiveDocumentContext = await executeDraftActivationAction(oContext, oAppComponent, messageHandler);\n\t} else {\n\t\t/* activation requires preparation */\n\t\tconst sBatchGroup = \"$auto\";\n\t\t//when there are pending changes there will be a patch request merged together with the draftPrepare and draftAcivate.\n\t\t//The patch changes the Etag, therfore the prepare needs to ignore Etags\n\t\tconst ignoreEtag: boolean = oContext.getModel().hasPendingChanges(\"$auto\") ? true : false;\n\t\t// we use the same batchGroup to force prepare and activate in a same batch but with different changeset\n\t\tconst oPreparePromise = draft.executeDraftPreparationAction(oContext, sBatchGroup, undefined, ignoreEtag);\n\t\toContext.getModel().submitBatch(sBatchGroup);\n\t\tconst oActivatePromise = draft.executeDraftActivationAction(oContext, oAppComponent, messageHandler, sBatchGroup, oPreparePromise);\n\n\t\tconst values = await Promise.all([oPreparePromise, oActivatePromise]);\n\t\toActiveDocumentContext = values[1];\n\t}\n\treturn mParam.fnAfterActivateDocument ? mParam.fnAfterActivateDocument(oContext, oActiveDocumentContext) : oActiveDocumentContext;\n}\n\n/**\n * Display the confirmation dialog box after pressing the edit button of an object page with unsaved changes.\n * @param sUnsavedChangesMsg Dialog box message informing the user that if he starts editing, the previous unsaved changes will be lost\n * @param oContext Context of the active document for the new draft\n * @returns Promise resolves\n */\nasync function showEditConfirmationMessageBox(sUnsavedChangesMsg: string, oContext: Context): Promise<boolean> {\n\tconst localI18nRef = Library.getResourceBundleFor(\"sap.fe.core\")!;\n\treturn new Promise(function (resolve: (value: boolean) => void, reject: (reason?: unknown) => void) {\n\t\tconst oDialog = new Dialog({\n\t\t\ttitle: localI18nRef.getText(\"C_MESSAGE_HANDLING_SAPFE_ERROR_MESSAGES_PAGE_TITLE_WARNING\"),\n\t\t\tstate: \"Warning\",\n\t\t\tcontent: new Text({\n\t\t\t\ttext: sUnsavedChangesMsg\n\t\t\t}),\n\t\t\tbeginButton: new Button({\n\t\t\t\ttext: localI18nRef.getText(\"C_COMMON_OBJECT_PAGE_EDIT\"),\n\t\t\t\ttype: \"Emphasized\",\n\t\t\t\tpress: function (): void {\n\t\t\t\t\toDialog.close();\n\t\t\t\t\tresolve(true);\n\t\t\t\t}\n\t\t\t}),\n\t\t\tendButton: new Button({\n\t\t\t\ttext: localI18nRef.getText(\"C_COMMON_OBJECT_PAGE_CANCEL\"),\n\t\t\t\tpress: function (): void {\n\t\t\t\t\toDialog.close();\n\t\t\t\t\treject(`Draft creation aborted for document: ${oContext.getPath()}`);\n\t\t\t\t}\n\t\t\t}),\n\t\t\tafterClose: function (): void {\n\t\t\t\toDialog.destroy();\n\t\t\t}\n\t\t});\n\t\toDialog.addStyleClass(\"sapUiContentPadding\");\n\t\toDialog.open();\n\t});\n}\n\n/**\n * HTTP POST call when DraftAction is present for Draft Delete; HTTP DELETE call when there is no DraftAction\n * and Active Instance always uses DELETE.\n * @param oContext Context of the document to be discarded\n * @param messageHandler The message handler controller extension\n * @param oAppComponent Context of the document to be discarded\n * @param bEnableStrictHandling\n * @returns A Promise resolved when the context is deleted\n */\nasync function deleteDraft(\n\toContext: Context,\n\tmessageHandler: MessageHandler,\n\toAppComponent: AppComponent,\n\tbEnableStrictHandling?: boolean\n): Promise<void> {\n\tif (oContext.isTransient()) {\n\t\t// Transient contexts (e.g. when trying to delete a context which couldn't be created because of an error) can be deleted immediately\n\t\treturn oContext.delete();\n\t}\n\tconst sDiscardAction = getActionName(oContext, draftOperations.DISCARD);\n\tconst bIsActiveEntity = oContext.getObject().IsActiveEntity;\n\n\tif (bIsActiveEntity || (!bIsActiveEntity && !sDiscardAction)) {\n\t\t//Use Delete in case of active entity and no discard action available for draft\n\t\tif (oContext.hasPendingChanges() && !oContext.isInactive()) {\n\t\t\tawait oContext.getBinding().resetChanges();\n\t\t\treturn oContext.delete();\n\t\t} else {\n\t\t\t// When cancelling an edit draft root node, use model.delete instead of context.delete, to only send deletion to backend,\n\t\t\t// but keep context alive (including bindings). Thus, we can ensure seamless transistion from draft to active instance\n\t\t\t// (without intermediate undefined bindings e.g. leading to flickering).\n\t\t\t// In other cases (deleting active, discarding create draft or discarding draft node), stay with context.delete.\n\t\t\t// When cancelling a create draft, page is closed, thus the problem of flickering cannot occur.\n\t\t\t// In case of discarding a draft node, theoretically the same problem could\n\t\t\t// occur, but needs quite specific modelling (button visibility on item level bound against service property in an FCL app)\n\t\t\t// and acting (looking at button on third column while discarding on 2nd column). Currently, model seems not to be prepared\n\t\t\t// for that case, thus due to the minimal impact (only intermediate visual state), accepting this for the time being.\n\t\t\treturn !oContext.getProperty(\"IsActiveEntity\") &&\n\t\t\t\tModelHelper.isDraftRoot(\n\t\t\t\t\tgetInvolvedDataModelObjects(oContext.getModel().getMetaModel().getMetaContext(oContext.getPath()))?.targetEntitySet\n\t\t\t\t) &&\n\t\t\t\toContext.getProperty(\"HasActiveEntity\")\n\t\t\t\t? oContext.getModel().delete(oContext)\n\t\t\t\t: oContext.delete();\n\t\t}\n\t} else {\n\t\t//Use Discard Post Action if it is a draft entity and discard action exists\n\t\tawait executeDraftDiscardAction(oContext, messageHandler, oAppComponent, bEnableStrictHandling);\n\t}\n}\n\nconst draft = {\n\tcreateDraftFromActiveDocument: createDraftFromActiveDocument,\n\tactivateDocument: activateDocument,\n\tdeleteDraft: deleteDraft,\n\texecuteDraftEditAction: executeDraftEditAction,\n\texecuteDraftValidation: executeDraftValidation,\n\texecuteDraftPreparationAction: executeDraftPreparationAction,\n\texecuteDraftActivationAction: executeDraftActivationAction,\n\thasPrepareAction: hasPrepareAction,\n\tcomputeSiblingInformation: computeSiblingInformation,\n\tprocessDataLossOrDraftDiscardConfirmation: draftDataLossPopup.processDataLossOrDraftDiscardConfirmation,\n\tsilentlyKeepDraftOnForwardNavigation: draftDataLossPopup.silentlyKeepDraftOnForwardNavigation,\n\tcreateOperation: createOperation,\n\texecuteDraftDiscardAction: executeDraftDiscardAction,\n\tNavigationType: draftDataLossPopup.NavigationType,\n\tgetActionName: getActionName,\n\tshowEditConfirmationMessageBox: showEditConfirmationMessageBox\n};\n\nexport default draft;\n"],"mappings":"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","ignoreList":[]}
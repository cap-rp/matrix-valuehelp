{"version":3,"names":["Recommendations","_dec","defineUI5Class","_dec2","methodOverride","_dec3","_dec4","publicExtension","_dec5","_dec6","extensible","OverrideExecution","Instead","_dec7","_dec8","finalExtension","_dec9","_dec10","_dec11","_dec12","_dec13","_dec14","_dec15","_dec16","_class","_class2","_ControllerExtension","_this","call","dataToBeAccepted","_exports","_inheritsLoose","_proto","prototype","onInit","telemetry","Telemetry","allRecommendedFields","internalModel","base","getView","getModel","previousContext","undefined","onAfterBinding","context","currentContextBasePath","getPath","split","previousContextBasePath","rootContext","isRecommendationEnabled","getProperty","_getRootContext","recommendations","isEnabled","setProperty","isFclEnabled","getAppComponent","_isFclEnabled","isFullScreen","getRootViewController","getHelper","getCurrentUIState","tryResetRecommendations","resetData","programmingModel","TransactionHelper","getProgrammingModel","CommonUtils","createRootContext","clearRecommendations","bindingContext","getBindingContext","recommendationHelper","_rootContext","fetchRecommendations","_context","Promise","resolve","fetchAndApplyRecommendations","currentContextsInfo","considerOnlyNewContext","isSuccess","sideEffects","getSideEffectsService","recommendationRegistry","getRecommendationsMapping","filteredContextsInfo","filter","contextInfo","standardRecommendationHelper","checkIfRecommendationRoleExistsForContext","contextsInfo","getContextsWithNoRecommendations","contexts","map","length","startTime","performance","now","recommendationData","endTime","updateResponseTimeInfo","updateAllRecommendedFields","updateDataFromRecommendationResponse","increaseCount","applyRecommendation","e","Log","error","storeRecommendationContexts","fetchAndApplyRecommendationsOnFieldChange","field","appComponent","isFieldRecommendationRelevant","checkIfFieldIsRecommendationRelevant","targets","fetchTargets","filteredRecommendationContexts","fetchFilteredRecommendationContexts","recommendationContext","filteredRecommendationContext","includes","clearIgnoredContexts","onBeforeAcceptRecommendations","_params","acceptRecommendations","promises","propertyPath","push","value","all","recommendationResponses","storeRecommendations","contextPaths","recommendationContexts","forEach","contextPath","index","indexOf","contextIdentifier","key","contextPathFromKey","substring","lastIndexOf","fetchFilteredRecommendationData","filteredTargets","filterRecommendationsData","Object","keys","assign","considerRecommendationContexts","version","isRecommendationAcceptable","splitPathAndCheckIfRecommendationAcceptable","ctxtPath","pathArray","newPath","newPathArray","slice","some","rightMostContext","getRightmostContext","dataToBeFiltered","fetchDataToBeFiltered","adjustAcceptAllParams","filterRecommendationData","filterRecommendationContexts","params","text","propertyPathFromKey","matchingContext","isRecommendationFieldNull","fetchAcceptAllParams","getController","addContextIdentifierText","checkIfRecommendationsExist","ignoreRecommendationForContexts","view","setCurrentRootContext","resetRecommendations","storeDataForTelemetry","recommendationOptionChoosen","RecommendationDialogDecision","Accept","updateData","Ignore","storeData","increaseTelemetryDataCount","updateTelemetryDataBasedOnUserSelection","fieldPath","selectedValue","viewBindingContextPath","newRecommendationsForCurrentContexts","response","ControllerExtension","_applyDecoratedDescriptor","getOwnPropertyDescriptor"],"sourceRoot":".","sources":["Recommendations.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport { defineUI5Class, extensible, finalExtension, methodOverride, publicExtension } from \"sap/fe/base/ClassSupport\";\nimport type PageController from \"sap/fe/core/PageController\";\nimport { recommendationHelper } from \"sap/fe/core/helpers/RecommendationHelper\";\nimport type {\n\tRecommendationContextsInfo,\n\tRecommendationInfo,\n\tStandardRecommendationResponse\n} from \"sap/fe/core/helpers/StandardRecommendationHelper\";\nimport { standardRecommendationHelper } from \"sap/fe/core/helpers/StandardRecommendationHelper\";\nimport type Control from \"sap/ui/core/Control\";\nimport ControllerExtension from \"sap/ui/core/mvc/ControllerExtension\";\nimport OverrideExecution from \"sap/ui/core/mvc/OverrideExecution\";\nimport type Context from \"sap/ui/model/Context\";\nimport type JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type { default as ODataV4Context } from \"sap/ui/model/odata/v4/Context\";\nimport type { FEView } from \"../BaseController\";\nimport CommonUtils from \"../CommonUtils\";\nimport type FclController from \"../rootView/Fcl.controller\";\nimport TransactionHelper from \"./editFlow/TransactionHelper\";\n\nimport { RecommendationDialogDecision } from \"../controls/Recommendations/ConfirmRecommendationDialog\";\nimport type { RecommendationTelemetry } from \"../services/TelemetryServiceFactory\";\nimport Telemetry from \"./recommendations/Telemetry\";\n\nexport type AcceptAllParams = {\n\trecommendationData?: RecommendationData[];\n};\n\nexport type RecommendationData = {\n\tcontext?: ODataV4Context;\n\tcontextIdentifier?: string[];\n\tcontextIdentifierText?: string[];\n\tpropertyPath?: string;\n\tvalue?: string;\n\ttext?: string;\n};\n@defineUI5Class(\"sap.fe.core.controllerextensions.Recommendations\")\nexport default class Recommendations extends ControllerExtension {\n\tbase!: PageController;\n\n\trecommendationContexts!: RecommendationContextsInfo[];\n\n\trootContext!: Context | undefined;\n\n\tinternalModel!: JSONModel;\n\n\ttelemetry!: Telemetry;\n\n\tallRecommendedFields!: string[];\n\n\t// the data shown in Accept/Ignore dialog of Recommendations\n\tdataToBeAccepted: RecommendationData[] = [];\n\n\tpreviousContext: Context | null | undefined;\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t@methodOverride()\n\tonInit(): void {\n\t\tthis.telemetry = new Telemetry();\n\t\tthis.allRecommendedFields = [];\n\t\tthis.internalModel = this.base.getView().getModel(\"internal\");\n\t\tthis.previousContext = undefined;\n\t}\n\n\t@methodOverride(\"_routing\")\n\tasync onAfterBinding(context: Context | null): Promise<void> {\n\t\tif (context) {\n\t\t\tconst currentContextBasePath = context.getPath().split(\"/\")[1];\n\t\t\tconst previousContextBasePath = this.previousContext?.getPath().split(\"/\")[1];\n\t\t\t//\tconsole.log('current::', currentContextBasePath);\n\t\t\t//\tconsole.log('previous', previousContextBasePath);\n\t\t\tthis.rootContext = undefined;\n\t\t\t// use internal model because we have to use this information across the application for different instances.\n\t\t\tlet isRecommendationEnabled = this.internalModel.getProperty(\"/isRecommendationEnabled\");\n\t\t\t// onAfter binding is called for all contexts\n\t\t\t// but we do not need to call the isEnabled hook all the time\n\t\t\t// so check if recommendation enabled is already available\n\t\t\tthis.previousContext = context;\n\t\t\tconst rootContext = await this._getRootContext(context as ODataV4Context);\n\t\t\tif (rootContext) {\n\t\t\t\tif (isRecommendationEnabled === undefined) {\n\t\t\t\t\tisRecommendationEnabled = this.base.recommendations.isEnabled(rootContext);\n\t\t\t\t\tthis.internalModel.setProperty(\"/isRecommendationEnabled\", isRecommendationEnabled);\n\t\t\t\t}\n\t\t\t\t//\tif(!this.previousContext) {\n\n\t\t\t\t//\t}\n\t\t\t\tconst isFclEnabled = this.base.getAppComponent()._isFclEnabled();\n\t\t\t\tconst isFullScreen = isFclEnabled\n\t\t\t\t\t? (this.base.getAppComponent().getRootViewController() as FclController).getHelper().getCurrentUIState().isFullScreen\n\t\t\t\t\t: true;\n\t\t\t\tif (currentContextBasePath !== previousContextBasePath) {\n\t\t\t\t\t// different contexts/ OP\n\t\t\t\t\t//\tconsole.log(\"run reset logic\")\n\t\t\t\t\tthis.tryResetRecommendations(rootContext as ODataV4Context);\n\t\t\t\t\tthis.telemetry.resetData();\n\t\t\t\t}\n\t\t\t\tif (isFclEnabled && !isFullScreen) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _getRootContext(context: ODataV4Context): Promise<Context | undefined> {\n\t\tconst programmingModel = TransactionHelper.getProgrammingModel(context);\n\t\treturn CommonUtils.createRootContext(programmingModel, this.base.getView(), this.base.getAppComponent());\n\t}\n\n\t/**\n\t * Clear all recommendations currently available on the UI.\n\t * @public\n\t */\n\t@publicExtension()\n\tpublic clearRecommendations(): void {\n\t\tconst bindingContext = this.getView().getBindingContext();\n\t\tif (bindingContext) {\n\t\t\trecommendationHelper.clearRecommendations(this.base.getView(), bindingContext);\n\t\t}\n\t}\n\n\t/**\n\t * Check if recommendations are enabled or not.\n\t * @param _rootContext The root entity context\n\t * @returns True if recommendation is enabled. False if recommendation is disabled.\n\t * @public\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.Instead)\n\tpublic isEnabled(_rootContext: Context): boolean {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Method returns a boolean value indicating recommendation is enabled or not. In case called before\n\t * the enablement check is completed, method will return false which is the default value.\n\t * @returns True if recommendation is enabled else false.\n\t */\n\t@publicExtension()\n\t@finalExtension()\n\tpublic isRecommendationEnabled(): boolean {\n\t\treturn !!this.internalModel?.getProperty(\"/isRecommendationEnabled\");\n\t}\n\n\t/**\n\t * Fetch the recommendation for a specific context.\n\t * @param _context The context that shall be considered when fetching recommendations\n\t * @param _rootContext The root entity context\n\t * @returns The recommendation entries\n\t * @public\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.Instead)\n\tpublic async fetchRecommendations(_context: ODataV4Context[], _rootContext?: Context): Promise<StandardRecommendationResponse[]> {\n\t\treturn Promise.resolve([]);\n\t}\n\n\t/**\n\t * Fetch the recommendations and apply them on the UI.\n\t * @param currentContextsInfo Contexts Info that contains the context that shall be considered when fetching recommendations along with contextIdentifier\n\t * @param considerOnlyNewContext Boolean property indicating Recommendation\n\t * should be fetched only for new contexts with no recommendation fetch call\n\t * @returns `true` if the recommendations were fetched and applied correctly\n\t */\n\t@publicExtension()\n\tpublic async fetchAndApplyRecommendations(\n\t\tcurrentContextsInfo: RecommendationContextsInfo[],\n\t\tconsiderOnlyNewContext?: boolean\n\t): Promise<boolean> {\n\t\tlet isSuccess = false;\n\t\tconst sideEffects = this.base.getAppComponent().getSideEffectsService();\n\t\tconst recommendationRegistry = sideEffects.getRecommendationsMapping();\n\t\tconst filteredContextsInfo = currentContextsInfo.filter((contextInfo: RecommendationContextsInfo) => {\n\t\t\treturn standardRecommendationHelper.checkIfRecommendationRoleExistsForContext(contextInfo, recommendationRegistry);\n\t\t});\n\t\tif (this.isRecommendationEnabled()) {\n\t\t\tconst contextsInfo: RecommendationContextsInfo[] = considerOnlyNewContext\n\t\t\t\t? standardRecommendationHelper.getContextsWithNoRecommendations(filteredContextsInfo, this.internalModel)\n\t\t\t\t: filteredContextsInfo;\n\t\t\tconst contexts: ODataV4Context[] = contextsInfo.map(\n\t\t\t\t(contextInfo: RecommendationContextsInfo) => contextInfo.context\n\t\t\t) as ODataV4Context[];\n\t\t\tif (contexts && contexts.length > 0) {\n\t\t\t\ttry {\n\t\t\t\t\tconst rootContext = await this._getRootContext(contexts[0]);\n\t\t\t\t\tconst startTime = performance.now();\n\t\t\t\t\tconst recommendationData = await this.base.recommendations.fetchRecommendations(contexts, rootContext);\n\t\t\t\t\tconst endTime = performance.now();\n\t\t\t\t\tthis.telemetry.updateResponseTimeInfo(endTime - startTime);\n\t\t\t\t\tif (recommendationData?.length) {\n\t\t\t\t\t\tthis.updateAllRecommendedFields(recommendationData);\n\t\t\t\t\t\tthis.telemetry.updateDataFromRecommendationResponse(recommendationData);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// if empty recommendations, then store it for telemetry purpose\n\t\t\t\t\t\tthis.telemetry.increaseCount(\"numberOfTimesEmptyRecommendations\");\n\t\t\t\t\t}\n\t\t\t\t\t// need to validate that the response is properly formatted\n\t\t\t\t\tisSuccess = this.applyRecommendation(recommendationData, contexts);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tLog.error(\"There was an error fetching the recommendations\", e as Error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.storeRecommendationContexts(filteredContextsInfo);\n\t\t}\n\n\t\treturn isSuccess;\n\t}\n\n\t/**\n\t * Fetch the recommendations on field change and apply them on the UI.\n\t * @param field The changed field.\n\t * @param contextInfo ContextInfo which contains the context is only considered when fetching the recommendations along with contextIdentifier\n\t * @returns `true` if the recommendation were fetched and applied correctly\n\t */\n\t@publicExtension()\n\tpublic async fetchAndApplyRecommendationsOnFieldChange(field: Control, contextInfo: RecommendationContextsInfo): Promise<boolean> {\n\t\tconst appComponent = this.base.getAppComponent();\n\t\tconst isFieldRecommendationRelevant = appComponent.getSideEffectsService().checkIfFieldIsRecommendationRelevant(field);\n\t\tif (isFieldRecommendationRelevant) {\n\t\t\t//getting the visible targets on the UI and their respective contexts\n\t\t\tconst targets = this.fetchTargets(true);\n\t\t\tconst filteredRecommendationContexts = this.fetchFilteredRecommendationContexts(targets);\n\t\t\t//filtering the child contexts from the available contexts\n\t\t\tconst recommendationContext = filteredRecommendationContexts.filter(function (filteredRecommendationContext) {\n\t\t\t\tif (\n\t\t\t\t\t(filteredRecommendationContext.context as ODataV4Context)\n\t\t\t\t\t\t.getPath()\n\t\t\t\t\t\t?.includes((contextInfo?.context as ODataV4Context).getPath())\n\t\t\t\t) {\n\t\t\t\t\treturn filteredRecommendationContext;\n\t\t\t\t}\n\t\t\t});\n\t\t\tstandardRecommendationHelper.clearIgnoredContexts(this.internalModel, (contextInfo?.context as ODataV4Context).getPath());\n\t\t\treturn this.fetchAndApplyRecommendations(recommendationContext);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the filtered recommendations from passed recommendations and then based on it we either show the filtered recommendations or not show the Accept all Dialog if there are no recommendations.\n\t * @param _params Params object containing recommendationData property which is an array of objects containing context, propertyPath, value and text for a recommendation\n\t * @returns Promise\n\t */\n\t@publicExtension()\n\t@extensible(\"AfterAsync\")\n\tpublic async onBeforeAcceptRecommendations(_params: AcceptAllParams): Promise<void> {\n\t\t//do nothing\n\t\treturn Promise.resolve(); //had to do this because of eslint error of not having await when the function is async\n\t}\n\n\t/**\n\t * This function is responsible for accepting the recommendations.\n\t * @param _params Params object containing recommendationData property which is an array of objects containing context, propertyPath, value and text for a recommendation\n\t * @returns Promise which resolved to a Boolean value based on whether recommendations are accepted or not\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.Instead)\n\tpublic async acceptRecommendations(_params: AcceptAllParams): Promise<boolean> {\n\t\t// the following code will be executed if there is no hook implementation i.e. for the new orchestration\n\t\tconst promises = [];\n\t\tif (_params.recommendationData) {\n\t\t\tfor (const recommendationData of _params.recommendationData) {\n\t\t\t\tif (recommendationData.context && recommendationData.propertyPath) {\n\t\t\t\t\tpromises.push(\n\t\t\t\t\t\trecommendationData.context.setProperty(recommendationData.propertyPath, recommendationData.value, \"$auto.abc\")\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait Promise.all(promises);\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate applyRecommendation(recommendationResponses: StandardRecommendationResponse[], _context: ODataV4Context[]): boolean {\n\t\tstandardRecommendationHelper.storeRecommendations(\n\t\t\trecommendationResponses,\n\t\t\tthis.getView().getModel(\"internal\") as JSONModel,\n\t\t\t_context\n\t\t);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Stores the recommendation contexts.\n\t * @param contextsInfo\n\t */\n\tprivate storeRecommendationContexts(contextsInfo: RecommendationContextsInfo[]): void {\n\t\tconst contextPaths: string[] = [];\n\t\tlet recommendationContexts = this.internalModel.getProperty(\"/recommendationContexts\") || [];\n\t\tcontextsInfo.forEach((contextInfo: RecommendationContextsInfo) => {\n\t\t\tcontextPaths.push((contextInfo.context as ODataV4Context).getPath());\n\t\t});\n\n\t\trecommendationContexts = recommendationContexts?.filter((recommendationContext: RecommendationContextsInfo) => {\n\t\t\tconst context = recommendationContext?.context;\n\t\t\tif (context) {\n\t\t\t\tconst contextPath = context.getPath();\n\t\t\t\tconst index = contextPaths.indexOf(contextPath);\n\t\t\t\tif (index < 0) {\n\t\t\t\t\t// Existing context path is not found in the newly fetched recommendation & therefore don't do anything\n\t\t\t\t\treturn true;\n\t\t\t\t} else if (recommendationContext.contextIdentifier) {\n\t\t\t\t\t// Existing context path is found. we try to update the contextInfo with the latest context\n\t\t\t\t\t// instead of outdated one\n\t\t\t\t\tcontextsInfo[index].contextIdentifier = recommendationContext.contextIdentifier;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\n\t\tthis.internalModel.setProperty(\"/recommendationContexts\", [...recommendationContexts, ...contextsInfo]);\n\t}\n\n\t/**\n\t * Filters the contexts and only returns those that matches the contexts.\n\t * @param targets\n\t * @returns Returns the filtered recommendation relevant contexts\n\t */\n\tprivate fetchFilteredRecommendationContexts(targets: string[]): RecommendationContextsInfo[] {\n\t\tconst contextPaths: string[] = [];\n\t\tconst filteredRecommendationContexts: RecommendationContextsInfo[] = [];\n\t\tfor (const key of targets) {\n\t\t\tconst contextPathFromKey = key.substring(0, key.lastIndexOf(\")\") + 1);\n\t\t\tconst recommendationContexts = (this.getView().getModel(\"internal\") as JSONModel).getProperty(\"/recommendationContexts\");\n\t\t\trecommendationContexts.forEach((contextInfo: RecommendationContextsInfo) => {\n\t\t\t\tconst context = contextInfo.context;\n\t\t\t\tif ((context as ODataV4Context).getPath() == contextPathFromKey && !contextPaths.includes(contextPathFromKey)) {\n\t\t\t\t\tcontextPaths.push(contextPathFromKey);\n\t\t\t\t\tfilteredRecommendationContexts.push(contextInfo);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn filteredRecommendationContexts;\n\t}\n\n\t/**\n\t * Fetches RecommendationData based on filtered targets.\n\t * @param filteredTargets\n\t * @returns RecommendationData\n\t */\n\tprivate fetchFilteredRecommendationData(filteredTargets: string[]): RecommendationInfo {\n\t\tconst filterRecommendationsData: RecommendationInfo = {};\n\t\tconst recommendationData = this.getView().getModel(\"internal\")?.getProperty(\"/recommendationsData\");\n\t\tObject.keys(recommendationData).forEach((key: string) => {\n\t\t\tif (filteredTargets.includes(key)) {\n\t\t\t\tfilterRecommendationsData[key] = Object.assign(recommendationData[key], {});\n\t\t\t}\n\t\t});\n\t\treturn filterRecommendationsData;\n\t}\n\n\t/**\n\t * Fetches the filtered targets.\n\t * @param considerRecommendationContexts Passed as true when recommendation contexts should be considered instead of data\n\t * @returns Array of Filtered targets\n\t */\n\tprivate fetchTargets(considerRecommendationContexts?: boolean): string[] {\n\t\tconst recommendationData = this.getView().getModel(\"internal\")?.getProperty(\"/recommendationsData\");\n\t\tif (recommendationData.version === null) {\n\t\t\treturn [];\n\t\t}\n\t\tconst isFclEnabled = this.base.getAppComponent()._isFclEnabled();\n\t\tconst isFullScreen = isFclEnabled\n\t\t\t? (this.base.getAppComponent().getRootViewController() as FclController).getHelper().getCurrentUIState().isFullScreen\n\t\t\t: true;\n\t\tconst isRecommendationAcceptable = (contextPath: string, key: string): boolean => {\n\t\t\tconst splitPathAndCheckIfRecommendationAcceptable = (ctxtPath: string): boolean => {\n\t\t\t\tconst pathArray = key.split(ctxtPath);\n\t\t\t\tconst newPath = pathArray[1];\n\t\t\t\tlet newPathArray = newPath.split(\"/\");\n\t\t\t\t//here we check the path by splitting to decide whether to include recommendations or not in dialog\n\t\t\t\tif (newPathArray.length <= 3) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tnewPathArray = newPathArray.slice(2);\n\t\t\t\t\treturn !newPathArray.some((value: string) => value.includes(\"(\"));\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (isFclEnabled && !isFullScreen) {\n\t\t\t\tconst rightMostContext = (this.base.getAppComponent().getRootViewController() as FclController).getRightmostContext();\n\t\t\t\tif (key.includes(rightMostContext?.getPath() as string)) {\n\t\t\t\t\treturn splitPathAndCheckIfRecommendationAcceptable(rightMostContext?.getPath() as string);\n\t\t\t\t} else {\n\t\t\t\t\treturn splitPathAndCheckIfRecommendationAcceptable(contextPath);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn splitPathAndCheckIfRecommendationAcceptable(contextPath);\n\t\t\t}\n\t\t};\n\n\t\tconst dataToBeFiltered = this.fetchDataToBeFiltered(recommendationData, considerRecommendationContexts);\n\t\treturn (\n\t\t\tdataToBeFiltered.filter((key: string) => {\n\t\t\t\treturn (\n\t\t\t\t\tkey.includes(this.getView().getBindingContext()?.getPath() as string) &&\n\t\t\t\t\tisRecommendationAcceptable(this.getView().getBindingContext()?.getPath() as string, key)\n\t\t\t\t);\n\t\t\t}) || []\n\t\t);\n\t}\n\n\t/**\n\t * Fetches the data to be filtered depending on the recommendationData.\n\t * @param recommendationData\n\t * @param considerRecommendationContexts Passed as true when recommendation contexts should be considered instead of data\n\t * @returns Array of contextPaths to be filtered\n\t */\n\tprivate fetchDataToBeFiltered(recommendationData: RecommendationInfo, considerRecommendationContexts: boolean | undefined): string[] {\n\t\tlet dataToBeFiltered: string[] = [];\n\t\t// consider recommendationContexts for fetching the paths in case of field change so that contexts for which empty recommendation data is returned are also considered\n\t\tif (considerRecommendationContexts) {\n\t\t\tconst recommendationContexts = this.getView().getModel(\"internal\")?.getProperty(\"/recommendationContexts\");\n\t\t\trecommendationContexts.forEach((recommendationContext: RecommendationContextsInfo) => {\n\t\t\t\tdataToBeFiltered.push((recommendationContext.context as ODataV4Context).getPath());\n\t\t\t});\n\t\t} else {\n\t\t\t// consider recommendationData in case of accept all dialog scenarios\n\t\t\tdataToBeFiltered = Object.keys(recommendationData).filter((key) => {\n\t\t\t\treturn key !== \"version\" && key !== \"keys\";\n\t\t\t});\n\t\t}\n\t\treturn dataToBeFiltered;\n\t}\n\n\t/**\n\t * Overwrites AcceptAll Params based of recommendation data and contexts.\n\t * @param filterRecommendationData\n\t * @param filterRecommendationContexts\n\t * @param params\n\t */\n\tprivate adjustAcceptAllParams(\n\t\tfilterRecommendationData: RecommendationInfo,\n\t\tfilterRecommendationContexts: RecommendationContextsInfo[],\n\t\tparams: AcceptAllParams\n\t): void {\n\t\tparams.recommendationData = [];\n\t\tfor (const key in filterRecommendationData) {\n\t\t\tif (filterRecommendationData[key].value || filterRecommendationData[key].text) {\n\t\t\t\t// In case there is no placeholder value or placeholder text then this recommendation is not relevant for Accept.\n\t\t\t\t// User needs to manually select the recommended value in these cases & therefore filter the same.\n\t\t\t\tconst contextPathFromKey = key.substring(0, key.lastIndexOf(\")\") + 1);\n\t\t\t\tconst propertyPathFromKey = key.substring(key.lastIndexOf(\")\") + 2);\n\t\t\t\tconst matchingContext = filterRecommendationContexts.filter(function (contextInfo) {\n\t\t\t\t\tif ((contextInfo?.context as ODataV4Context).getPath() === contextPathFromKey) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (\n\t\t\t\t\tmatchingContext?.length > 0 &&\n\t\t\t\t\tstandardRecommendationHelper.isRecommendationFieldNull(\n\t\t\t\t\t\tmatchingContext[0].context as ODataV4Context,\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tpropertyPathFromKey\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tparams.recommendationData.push({\n\t\t\t\t\t\tcontext: matchingContext[0].context,\n\t\t\t\t\t\tcontextIdentifier: matchingContext[0].contextIdentifier,\n\t\t\t\t\t\tpropertyPath: propertyPathFromKey,\n\t\t\t\t\t\tvalue: filterRecommendationData[key].value,\n\t\t\t\t\t\ttext: filterRecommendationData[key].text\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Fetches RecommendationInfo that contains targets, filterRecommendationData, filterRecommendationContexts.\n\t * @returns Promise which resolves with AcceptallParams\n\t */\n\tpublic async fetchAcceptAllParams(): Promise<AcceptAllParams> {\n\t\tconst targets: string[] = this.fetchTargets();\n\t\tconst filterRecommendationData = this.fetchFilteredRecommendationData(targets);\n\t\tconst filterRecommendationContexts = this.fetchFilteredRecommendationContexts(targets);\n\t\tconst params = {};\n\t\tthis.adjustAcceptAllParams(filterRecommendationData, filterRecommendationContexts, params);\n\t\tawait (this.getView().getController() as PageController).recommendations.onBeforeAcceptRecommendations(params);\n\t\tstandardRecommendationHelper.addContextIdentifierText(params, this.getView()?.getBindingContext()?.getPath());\n\t\tthis.dataToBeAccepted = (params as AcceptAllParams).recommendationData || [];\n\t\treturn params;\n\t}\n\n\t/**\n\t * Checks if recommendations exist or not.\n\t * @returns Boolean value based on whether recommendations are present or not\n\t */\n\tpublic checkIfRecommendationsExist(): boolean {\n\t\tconst recommendationData = this.internalModel.getProperty(\"/recommendationsData\") || {};\n\t\treturn Object.keys(recommendationData).length !== 0;\n\t}\n\n\t/**\n\t * This function will clear recommendation Data for a given context and all its children.\n\t * @param contexts Context for which recommendation has to be cleared\n\t */\n\tpublic ignoreRecommendationForContexts(contexts?: ODataV4Context[]): void {\n\t\tif (!contexts || !contexts.length) {\n\t\t\tconst view = this.getView();\n\t\t\tconst bindingContext = view.getBindingContext() as ODataV4Context;\n\t\t\tcontexts = [bindingContext];\n\t\t}\n\t\tstandardRecommendationHelper.ignoreRecommendationForContexts(contexts, this.internalModel);\n\t}\n\n\tprivate tryResetRecommendations(rootContext: ODataV4Context): void {\n\t\tstandardRecommendationHelper.setCurrentRootContext(rootContext);\n\t\t// TODO: StandardRecommendationHelper stores all the recommendations for an instance of business object\n\t\t// meaning doesn't matter the recommendations are on the OP/SubOP. But the recommendations contexts here\n\t\t// is specific to this controller, SubOP controller will have its own recommendation contexts. Ideally it\n\t\t// should be cleared but this is not done here. This complete thing needs to be refactored\n\t\tthis.internalModel.setProperty(\"/recommendationContexts\", []);\n\t\tstandardRecommendationHelper.resetRecommendations(this.internalModel);\n\t}\n\n\t/**\n\t * This function will store the number of fields Accepted/Ignored when Save button is clicked, depending on which recommedation option was choosen Accept/Ignore and Save.\n\t * @param recommendationOptionChoosen\n\t */\n\tpublic async storeDataForTelemetry(recommendationOptionChoosen: undefined | RecommendationDialogDecision): Promise<void> {\n\t\tconst rootContext = await this._getRootContext(this.getView().getBindingContext() as ODataV4Context);\n\t\tif (rootContext && this.base.recommendations.isEnabled(rootContext)) {\n\t\t\tif (recommendationOptionChoosen === RecommendationDialogDecision.Accept) {\n\t\t\t\t// increase accept count\n\t\t\t\tthis.telemetry.updateData(\"numberOfFieldsAcceptedThroughAcceptButton\", this.dataToBeAccepted.length);\n\t\t\t} else if (recommendationOptionChoosen === RecommendationDialogDecision.Ignore) {\n\t\t\t\t// increase ignore count\n\t\t\t\tthis.telemetry.updateData(\"numberOfFieldsIgnoredThroughIgnoreButton\", this.dataToBeAccepted.length);\n\t\t\t}\n\t\t\tthis.telemetry.storeData(this.getView() as FEView);\n\t\t}\n\t}\n\n\t/**\n\t * This function will update the count by 1 in telemetry data.\n\t * @param key\n\t */\n\tpublic increaseTelemetryDataCount(key: keyof RecommendationTelemetry): void {\n\t\tthis.telemetry.increaseCount(key);\n\t}\n\n\t/**\n\t * This function will update telemetry data for which option user chose when selecting a field value, as top/non-top recommendation or some other value.\n\t * @param fieldPath\n\t * @param selectedValue\n\t */\n\tpublic updateTelemetryDataBasedOnUserSelection(fieldPath: string, selectedValue: string): void {\n\t\tthis.telemetry.updateTelemetryDataBasedOnUserSelection(this.getView(), fieldPath, selectedValue);\n\t}\n\n\t/**\n\t * This function will update the total number of fields recommended. If the field is already included in telemetry count then we do not include.\n\t * This way we know the total number of unique fields recommended.\n\t * @param recommendationData\n\t */\n\tupdateAllRecommendedFields(recommendationData: StandardRecommendationResponse[]): void {\n\t\tconst viewBindingContextPath = (this.getView().getBindingContext() as Context).getPath();\n\t\tconst newRecommendationsForCurrentContexts = recommendationData.filter(\n\t\t\t(response) => response[\"AIRecommendedFieldPath\"]?.includes(viewBindingContextPath)\n\t\t);\n\t\tif (!this.allRecommendedFields) {\n\t\t\tthis.allRecommendedFields = [];\n\t\t}\n\t\tnewRecommendationsForCurrentContexts.forEach((response) => {\n\t\t\tconst fieldPath = response[\"AIRecommendedFieldPath\"];\n\t\t\tif (fieldPath) {\n\t\t\t\tif (!this.allRecommendedFields.includes(fieldPath)) {\n\t\t\t\t\tthis.allRecommendedFields.push(fieldPath);\n\t\t\t\t\tthis.telemetry.increaseCount(\"numberOfRecommendedFields\");\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n"],"mappings":"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","ignoreList":[],"file":"Recommendations-dbg.js"}
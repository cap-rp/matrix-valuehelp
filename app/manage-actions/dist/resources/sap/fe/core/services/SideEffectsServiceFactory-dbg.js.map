{"version":3,"names":["SideEffectsService","_Service","apply","arguments","_exports","_inheritsLoose","_proto","prototype","init","context","getContext","appComponent","scopeObject","sideEffectsRegistry","oData","entities","actions","boundActions","unBoundActions","control","recommendationRegistry","roles","targetCallbacks","initializeWebSocketConnection","model","getModel","url","getWebSocketBaseUrl","channel","getWebSocketChannelUrl","ChannelType","SideEffectsEvents","webSocket","createWebSocket","attachMessage","onSideEffectsEventReceived","bind","webSocketStatus","WEBSOCKET_STATUS","CONNECTED","showConnectionLostDialog","CLOSED","ERROR","includes","resourceModel","getResourceModel","lostOfConnectionText","getText","MessageBox","warning","Action","OK","emphasizedAction","attachError","attachClose","evt","getParameter","event","message","serverAction","sideEffectEventName","sideEffectSource","metaPath","getMetaModel","getMetaContext","dataModel","MetaModelConverter","getInvolvedDataModelObjects","relevantSideEffects","getSideEffectWhereEventIsSource","targetEntityType","fullyQualifiedName","length","relevantPages","pages","getRootViewController","getVisibleViews","page","pageController","getController","isA","_sideEffects","isDataPathRelevant","push","sideEffectsControllerExtension","onlyRecommendations","isOnlyRecommendations","interactionType","getSideEffectsInteractionType","confirmDataRefresh","error","notifyDataRefresh","requestSideEffectsForEvent","recommendationPath","annotations","UI","Recommendations","path","sideEffect","annotation","entity","qualifier","targetProperties","targetEntities","undefined","interactionTypeDefinition","getManifestEntry","app","sideEffectsEventsInteractionType","events","default","addControlSideEffects","entityType","sourceControlId","controlSideEffect","entityControlSideEffects","executeAction","triggerAction","groupId","action","bindContext","getBinding","getUpdateGroupId","submitBatch","execute","getConvertedMetaModel","convertTypes","capabilities","getEntityTypeFromContext","metaModel","getMetaPath","getPath","getObject","getODataEntitySideEffects","entityTypeName","isControlSideEffects","sideEffects","getGlobalODataEntitySideEffects","entitySideEffects","globalSideEffects","key","sourceEntities","sourceProperties","sourceEvents","getODataActionSideEffects","actionName","getODataSideEffectsFromContextEvent","sideEffectsInfo","map","initialize","sideEffectSources","properties","environmentCapabilitiesService","getService","requestObject","getCapabilities","convertedMetaModel","containerName","entityContainer","containerRegexPattern","RegExp","entityTypeRegexPattern","entityTypes","forEach","mapFieldAnnotations","retrieveODataEntitySideEffects","mapSideEffectSources","isBound","sourceEntityType","retrieveODataActionsSideEffects","Object","keys","sourcesToSideEffectMappings","source","addRecommendationRoles","sourceName","hasOwnProperty","input","output","entityProperties","property","commonAnno","Common","RecommendationRole","roleType","valueOf","name","getRecommendationsMapping","checkIfFieldIsRecommendationRelevant","field","getBindingContext","propertyName","data","sourcePath","split","pop","metaContext","targetDataModelObject","targetObject","targetEntityTypeName","isEntitySet","isNavigationProperty","targetType","recommendationRolesForEntity","getRecommendationOutputFields","removeControlSideEffects","controlId","sEntityType","requestSideEffects","pathExpressions","logRequest","requestSideEffectsForODataAction","promises","triggerActions","Promise","all","resolve","requestSideEffectsForNavigationProperty","navigationProperty","ignoreTriggerActions","baseEntityType","navigationPath","sideEffectsTargets","filter","annotationName","some","navigation","$NavigationPropertyPath","propertyPath","startsWith","replace","sAnnotationName","concat","sideEffectsTargetDefinition","removeDuplicateTargets","catch","Log","getControlEntitySideEffects","getSideEffectWhereEntityIsSource","eventName","computeFieldGroupIds","sourceProperty","entityFieldGroupIds","sideEffectInfo","getFieldGroupIdForSideEffect","getSideEffectWherePropertyIsSource","registerTargetCallback","target","callback","deregisterTargetCallback","getRegisteredCallback","addTextProperties","setOfProperties","Set","setOfEntities","dataModelPropertyPath","getDataModelPropertiesFromAPath","associatedTextPath","getAssociatedTextPropertyPath","addTextProperty","Array","from","dataModelTextPath","enhanceDataModelPath","relativeNavigation","targetEntitySet","getTargetNavigationPath","targetPath","getTargetObjectPath","isAssociatedTextListedInSideEffectTargets","isPropertyAssociatedTextOnDifferentEntitySet","add","isProperty","has","navigationProperties","convertSideEffects","bindingParameter","TriggerAction","newSideEffects","convertSideEffectsFormat","removeBindingParameter","formatProperties","reduce","isPropertyPathExpression","value","formatEntities","targetEntity","SourceProperties","SourceEntities","SourceEvents","TargetProperties","TargetEntities","dataModelObjectPaths","propertyRelativePath","testEntityTypeName","match","testEntityType","resolvePath","entitySet","entitySets","find","relatedEntitySet","singletons","singleton","entitySetContext","createBindingContext","dataModelEntitySet","dataModelObjectPath","isComplexType","isEntityType","entityProperty","destroy","getSideEffectsFromSource","bindingAlias","isSourceEntityType","commonAnnotation","parameters","parameter","type","getSideEffectsAnnotationFromSource","sideEffectAnno","isSideEffectsAnnotation","$Type","targetPaths","paths","debug","bindingParameterName","replaceBindingParameter","targetProperty","targetEntitiesPaths","uniqueTargetedEntitiesPath","uniqueTargetProperties","uniqueTargetedEntities","entityPath","oDataSideEffect","sideEffectsSources","sideEffectDefinition","mapSideEffectSourceEntities","mapSideEffectSourceProperties","mapSideEffectSourceEvents","sourceEntity","$target","hasUniqueSourceProperty","sourceEvent","toString","isImmediate","sideEffectWithQualifier","getInterface","Service","SideEffectsServiceFactory","_ServiceFactory","_proto2","createInstance","oServiceContext","SideEffectsServiceService","ServiceFactory"],"sourceRoot":".","sources":["SideEffectsServiceFactory.ts"],"sourcesContent":["import type {\n\tAction,\n\tConvertedMetadata,\n\tEntitySet,\n\tEntityType,\n\tNavigationProperty,\n\tNavigationPropertyPath,\n\tProperty,\n\tPropertyPath\n} from \"@sap-ux/vocabularies-types\";\nimport type * as Edm from \"@sap-ux/vocabularies-types/Edm\";\nimport type { PathAnnotationExpression } from \"@sap-ux/vocabularies-types/Edm\";\nimport type { SideEffectsType as CommonSideEffectsType } from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport { CommonAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport type { PropertyAnnotations_Common } from \"@sap-ux/vocabularies-types/vocabularies/Common_Edm\";\nimport Log from \"sap/base/Log\";\nimport type PageController from \"sap/fe/core/PageController\";\nimport type {\n\tSideEffectsEventsInteractionManifestSetting,\n\tSideEffectsEventsInteractionType\n} from \"sap/fe/core/converters/ManifestSettings\";\nimport * as MetaModelConverter from \"sap/fe/core/converters/MetaModelConverter\";\nimport { convertTypes, getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport { getResourceModel } from \"sap/fe/core/helpers/ResourceModelHelper\";\nimport {\n\tisComplexType,\n\tisEntitySet,\n\tisEntityType,\n\tisNavigationProperty,\n\tisProperty,\n\tisPropertyPathExpression\n} from \"sap/fe/core/helpers/TypeGuards\";\nimport { ChannelType, WEBSOCKET_STATUS, createWebSocket, getWebSocketBaseUrl, getWebSocketChannelUrl } from \"sap/fe/core/helpers/WebSocket\";\nimport { getAssociatedTextPropertyPath } from \"sap/fe/core/templating/PropertyHelper\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport type Event from \"sap/ui/base/Event\";\nimport type Control from \"sap/ui/core/Control\";\nimport Service from \"sap/ui/core/service/Service\";\nimport ServiceFactory from \"sap/ui/core/service/ServiceFactory\";\nimport type SapPcpWebSocket from \"sap/ui/core/ws/SapPcpWebSocket\";\nimport type { WebSocket$CloseEvent, WebSocket$MessageEvent } from \"sap/ui/core/ws/WebSocket\";\nimport type { default as Context } from \"sap/ui/model/odata/v4/Context\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport type { ServiceContext } from \"types/metamodel_types\";\nimport type AppComponent from \"../AppComponent\";\nimport type { DataModelObjectPath } from \"../templating/DataModelPathHelper\";\nimport { enhanceDataModelPath, getTargetNavigationPath, getTargetObjectPath } from \"../templating/DataModelPathHelper\";\nimport type { EnvironmentCapabilities, EnvironmentCapabilitiesService } from \"./EnvironmentServiceFactory\";\n\nexport type PropertyAnnotationsWithRecommendation = PropertyAnnotations_Common & {\n\tRecommendationRole?: string;\n};\n\ntype SideEffectsSettings = {};\n\nexport type SideEffectsEntityType = {\n\t$NavigationPropertyPath: string;\n};\nexport type SideEffectsTarget = SideEffectsEntityType | string;\n\nexport type SideEffectsTargetType = {\n\ttargetProperties: string[];\n\ttargetEntities: SideEffectsEntityType[];\n};\n\ntype BaseSideEffectsType = {\n\tsourceProperties?: string[];\n\tsourceEntities?: SideEffectsEntityType[];\n\tsourceEvents?: string[];\n\tfullyQualifiedName: string;\n} & SideEffectsTargetType;\n\nexport type ODataSideEffectsType = BaseSideEffectsType & {\n\ttriggerAction?: string;\n};\n\nexport type ActionSideEffectsType = {\n\tpathExpressions?: SideEffectsTarget[];\n\ttriggerActions?: string[];\n};\n\nexport type ControlSideEffectsType = Partial<BaseSideEffectsType> & {\n\tfullyQualifiedName: string;\n\tsourceProperties: string[];\n\tsourceControlId: string;\n};\n\nexport type SideEffectsType = ControlSideEffectsType | ODataSideEffectsType;\n\n//TODO fix this type in the ux vocabularies\n//TODO: Source Events are still experimental, remove once public\ntype CommonSideEffectTypeWithQualifier = CommonSideEffectsType & { qualifier?: string; SourceEvents?: Edm.String[] };\n\nexport type SideEffectInfoForSource = { entity: string; qualifier?: string; hasUniqueSourceProperty?: boolean };\n\ntype SideEffectsOriginRegistry = {\n\toData: {\n\t\tentities: {\n\t\t\t[entity: string]: Record<string, ODataSideEffectsType>;\n\t\t};\n\t\tactions: {\n\t\t\tboundActions: {\n\t\t\t\t[entity: string]: Record<string, ActionSideEffectsType>;\n\t\t\t};\n\t\t\tunBoundActions: {\n\t\t\t\t[action: string]: ActionSideEffectsType;\n\t\t\t};\n\t\t};\n\t};\n\tcontrol: {\n\t\t[entity: string]: Record<string, ControlSideEffectsType>;\n\t};\n};\n\ntype RecommendationsRoles = {\n\tinput: string[];\n\toutput: string[];\n\trequired?: string[];\n};\n\nexport type RecommendationsRegistry = {\n\troles: Record<string, RecommendationsRoles>;\n};\n\ntype WebSocketMessage = {\n\tserverAction: \"RaiseSideEffect\";\n\tsideEffectEventName: string;\n\tsideEffectSource: string;\n};\n\nexport class SideEffectsService extends Service<SideEffectsSettings> {\n\tappComponent!: AppComponent;\n\n\tprivate sideEffectsRegistry!: SideEffectsOriginRegistry;\n\n\tprivate recommendationRegistry!: RecommendationsRegistry;\n\n\tprivate capabilities!: EnvironmentCapabilities | undefined;\n\n\tprivate sourcesToSideEffectMappings!: {\n\t\tentities: Record<string, SideEffectInfoForSource[]>;\n\t\tproperties: Record<string, SideEffectInfoForSource[]>;\n\t\tevents: Record<string, SideEffectInfoForSource[]>;\n\t};\n\n\t// Callback methods to be called whenever a side effect target is hit\n\tprivate targetCallbacks!: Record<string, Function>;\n\n\t// WebSocket connection to retrieve SideEffects events\n\tprivate webSocket?: SapPcpWebSocket;\n\n\tprivate containerName?: string;\n\n\tprivate containerRegexPattern!: RegExp;\n\n\tprivate entityTypeRegexPattern!: RegExp;\n\n\tprivate webSocketStatus!: WEBSOCKET_STATUS;\n\t// Interaction type for SideEffects events\n\tprivate interactionTypeDefinition?: SideEffectsEventsInteractionManifestSetting;\n\n\t// !: means that we know it will be assigned before usage\n\tinit(): void {\n\t\tconst context = this.getContext();\n\t\tthis.appComponent = context?.scopeObject as AppComponent;\n\t\tthis.sideEffectsRegistry = {\n\t\t\toData: {\n\t\t\t\tentities: {},\n\t\t\t\tactions: {\n\t\t\t\t\tboundActions: {},\n\t\t\t\t\tunBoundActions: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tcontrol: {}\n\t\t};\n\n\t\tthis.recommendationRegistry = {\n\t\t\troles: {}\n\t\t};\n\t\tthis.targetCallbacks = {};\n\t}\n\n\t/**\n\t * Connects to a given WebSocket connection to retrieve SideEffects events.\n\t *\n\t */\n\tinitializeWebSocketConnection(): void {\n\t\tconst model = this.appComponent.getModel();\n\t\tconst url = getWebSocketBaseUrl(model);\n\t\tconst channel = getWebSocketChannelUrl(ChannelType.SideEffectsEvents, model);\n\n\t\tif (url && channel) {\n\t\t\tthis.webSocket = createWebSocket(ChannelType.SideEffectsEvents, model);\n\t\t\tthis.webSocket.attachMessage(this.onSideEffectsEventReceived.bind(this));\n\t\t\tthis.webSocketStatus = WEBSOCKET_STATUS.CONNECTED;\n\n\t\t\tconst showConnectionLostDialog = (): void => {\n\t\t\t\tif ([WEBSOCKET_STATUS.CLOSED, WEBSOCKET_STATUS.ERROR].includes(this.webSocketStatus)) {\n\t\t\t\t\tconst resourceModel = getResourceModel(this.appComponent);\n\t\t\t\t\tconst lostOfConnectionText = resourceModel.getText(\"C_SIDEEFFECT_CONNECTION_LOST\");\n\n\t\t\t\t\tMessageBox.warning(lostOfConnectionText, {\n\t\t\t\t\t\tactions: [MessageBox.Action.OK],\n\t\t\t\t\t\temphasizedAction: MessageBox.Action.OK\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.webSocket.attachError(() => {\n\t\t\t\tthis.webSocketStatus = WEBSOCKET_STATUS.ERROR;\n\t\t\t\tshowConnectionLostDialog();\n\t\t\t});\n\n\t\t\tthis.webSocket.attachClose((evt: WebSocket$CloseEvent) => {\n\t\t\t\tthis.webSocketStatus = WEBSOCKET_STATUS.CLOSED;\n\t\t\t\t// RFC 6455 defines the status codes when closing an established connection :  https://datatracker.ietf.org/doc/html/rfc6455#section-7.4\n\t\t\t\t// status code 1000 means normal closure\n\t\t\t\tif ((evt.getParameter(\"code\") as number | undefined) !== 1000) {\n\t\t\t\t\tshowConnectionLostDialog();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * This method is called whenever the connected WebSocket sends a message.\n\t * @param event The event with the relevant sideEffect information\n\t */\n\tasync onSideEffectsEventReceived(event: WebSocket$MessageEvent & Event<{ pcpFields?: WebSocketMessage }>): Promise<void> {\n\t\tconst message = event.getParameter(\"pcpFields\");\n\n\t\tif (message?.serverAction !== \"RaiseSideEffect\" || !message.sideEffectEventName || !message.sideEffectSource) {\n\t\t\t// message is not relevant\n\t\t\treturn;\n\t\t}\n\n\t\tconst metaPath = this.getMetaModel().getMetaContext(message.sideEffectSource);\n\t\tconst dataModel = MetaModelConverter.getInvolvedDataModelObjects(metaPath);\n\t\tconst relevantSideEffects = this.getSideEffectWhereEventIsSource(\n\t\t\tdataModel.targetEntityType.fullyQualifiedName,\n\t\t\tmessage.sideEffectEventName\n\t\t);\n\n\t\tif (relevantSideEffects.length === 0) {\n\t\t\t// no side effect for this source\n\t\t\treturn;\n\t\t}\n\n\t\tconst relevantPages: PageController[] = [];\n\t\tconst pages = this.appComponent.getRootViewController().getVisibleViews();\n\t\tfor (const page of pages) {\n\t\t\tconst pageController = page.getController();\n\t\t\tif (\n\t\t\t\tpageController.isA<PageController>(\"sap.fe.core.PageController\") &&\n\t\t\t\tpageController._sideEffects.isDataPathRelevant(message.sideEffectSource, message.sideEffectEventName)\n\t\t\t) {\n\t\t\t\trelevantPages.push(pageController);\n\t\t\t}\n\t\t}\n\n\t\tif (relevantPages.length === 0) {\n\t\t\t// no relevant page found for this source\n\t\t\treturn;\n\t\t}\n\n\t\t// we ask the user to confirm the refresh or notify the user, we use the most specific page\n\t\tconst sideEffectsControllerExtension = relevantPages[relevantPages.length - 1]._sideEffects;\n\t\tconst onlyRecommendations = this.isOnlyRecommendations(dataModel, relevantSideEffects);\n\t\tconst interactionType = this.getSideEffectsInteractionType(message.sideEffectEventName, onlyRecommendations);\n\n\t\tswitch (interactionType) {\n\t\t\tcase \"Confirmation\":\n\t\t\t\ttry {\n\t\t\t\t\tawait sideEffectsControllerExtension.confirmDataRefresh();\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"Notification\":\n\t\t\t\tsideEffectsControllerExtension.notifyDataRefresh();\n\t\t\t\tbreak;\n\t\t\tcase \"None\":\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// now refresh the pages, forward this task to the side effects controller extensions to allow overriding per page (i.e. LR)\n\t\tfor (const page of relevantPages) {\n\t\t\tawait page._sideEffects.requestSideEffectsForEvent(message.sideEffectEventName, message.sideEffectSource);\n\t\t}\n\t}\n\n\t/**\n\t * Check if only recommendations are defined for a specific event.\n\t * @param dataModel The data model object path\n\t * @param relevantSideEffects The relevant side effects for the source\n\t * @returns True if only recommendations are defined for the event\n\t */\n\tisOnlyRecommendations(dataModel: DataModelObjectPath<unknown>, relevantSideEffects: SideEffectInfoForSource[]): boolean {\n\t\tconst recommendationPath = (\n\t\t\tdataModel.targetEntityType.annotations.UI?.Recommendations as PathAnnotationExpression<string> | undefined\n\t\t)?.path;\n\t\tfor (const sideEffect of relevantSideEffects) {\n\t\t\tconst annotation =\n\t\t\t\tthis.sideEffectsRegistry.oData.entities[dataModel.targetEntityType.fullyQualifiedName]?.[\n\t\t\t\t\t`${sideEffect.entity}@com.sap.vocabularies.Common.v1.SideEffects#${sideEffect.qualifier}`\n\t\t\t\t];\n\t\t\t// check if the side effect is only a recommendation\n\t\t\tif (\n\t\t\t\tannotation?.targetProperties.length === 1 &&\n\t\t\t\tannotation?.targetEntities.length === 0 &&\n\t\t\t\tannotation?.targetProperties[0] === recommendationPath\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Retrieve the side effects interaction type from the manifest.\n\t *  @param event The side effects event name\n\t *  @param onlyRecommendations Indicator if only recommendations are shown\n\t * @returns The side effects interaction type\n\t */\n\tgetSideEffectsInteractionType(event: string, onlyRecommendations = false): SideEffectsEventsInteractionType {\n\t\tif (!this.interactionTypeDefinition) {\n\t\t\tthis.interactionTypeDefinition = this.appComponent.getManifestEntry(\"sap.fe\")?.app?.sideEffectsEventsInteractionType;\n\t\t}\n\t\tif (onlyRecommendations) {\n\t\t\t// In case of only recommendations, we do not show any notification\n\t\t\treturn \"None\";\n\t\t}\n\n\t\tif (typeof this.interactionTypeDefinition === \"string\") {\n\t\t\t// a global interaction type is defined\n\t\t\treturn this.interactionTypeDefinition;\n\t\t}\n\n\t\tif (event && this.interactionTypeDefinition?.events?.[event]) {\n\t\t\t// an interaction type is defined for the event\n\t\t\treturn this.interactionTypeDefinition.events[event];\n\t\t}\n\n\t\tif (this.interactionTypeDefinition?.default) {\n\t\t\t// a default interaction type is defined for the event\n\t\t\treturn this.interactionTypeDefinition.default;\n\t\t}\n\n\t\treturn \"Notification\";\n\t}\n\n\t/**\n\t * Adds a SideEffects control\n\t * SideEffects definition is added by a control to keep data up to date\n\t * These SideEffects get limited scope compared with SideEffects coming from an OData service:\n\t * - Only one SideEffects definition can be defined for the combination entity type - control Id\n\t * - Only SideEffects source properties are recognized and used to trigger SideEffects\n\t *\n\t * Ensure the sourceControlId matches the associated SAPUI5 control ID.\n\t * @param entityType Name of the entity type\n\t * @param sideEffect SideEffects definition\n\t */\n\tpublic addControlSideEffects(entityType: string, sideEffect: Omit<ControlSideEffectsType, \"fullyQualifiedName\">): void {\n\t\tif (sideEffect.sourceControlId) {\n\t\t\tconst controlSideEffect: ControlSideEffectsType = {\n\t\t\t\t...sideEffect,\n\t\t\t\tfullyQualifiedName: `${entityType}/SideEffectsForControl/${sideEffect.sourceControlId}`\n\t\t\t};\n\t\t\tconst entityControlSideEffects = this.sideEffectsRegistry.control[entityType] || {};\n\t\t\tentityControlSideEffects[controlSideEffect.sourceControlId] = controlSideEffect;\n\t\t\tthis.sideEffectsRegistry.control[entityType] = entityControlSideEffects;\n\t\t}\n\t}\n\n\t/**\n\t * Executes SideEffects action.\n\t * @param triggerAction Name of the action\n\t * @param context Context\n\t * @param groupId The group ID to be used for the request\n\t * @returns A promise that is resolved without data or with a return value context when the action call succeeds\n\t */\n\tpublic async executeAction(triggerAction: string, context: Context, groupId?: string): Promise<void> {\n\t\tconst action = context.getModel().bindContext(`${triggerAction}(...)`, context);\n\t\tgroupId = groupId || context.getBinding().getUpdateGroupId();\n\t\t// the triggerAction is executed in same $batch but different changeset\n\t\tcontext.getModel().submitBatch(groupId);\n\t\tawait action.execute(groupId, true);\n\t}\n\n\t/**\n\t * Gets converted OData metaModel.\n\t * @returns Converted OData metaModel\n\t */\n\tpublic getConvertedMetaModel(): ConvertedMetadata {\n\t\treturn convertTypes(this.getMetaModel(), this.capabilities);\n\t}\n\n\t/**\n\t * Gets the entity type of a context.\n\t * @param context Context\n\t * @returns Entity Type\n\t */\n\tpublic getEntityTypeFromContext(context: Context): string | undefined {\n\t\tconst metaModel = context.getModel().getMetaModel(),\n\t\t\tmetaPath = metaModel.getMetaPath(context.getPath()),\n\t\t\tentityType = metaModel.getObject(metaPath)[\"$Type\"];\n\t\treturn entityType;\n\t}\n\n\t/**\n\t * Gets the SideEffects that come from an OData service.\n\t * @param entityTypeName Name of the entity type\n\t * @returns SideEffects dictionary\n\t */\n\tpublic getODataEntitySideEffects(entityTypeName: string): Record<string, ODataSideEffectsType> {\n\t\treturn this.sideEffectsRegistry.oData.entities[entityTypeName] || {};\n\t}\n\n\t/**\n\t * Is a SideEffects generated by a control.\n\t * @param sideEffects The SideEffects\n\t * @returns True if the SideEffects is generated by a control, otherwise false\n\t */\n\tpublic isControlSideEffects(sideEffects: SideEffectsType): sideEffects is ControlSideEffectsType {\n\t\treturn !!(sideEffects as ControlSideEffectsType).sourceControlId;\n\t}\n\n\t/**\n\t * Gets the global SideEffects that come from an OData service.\n\t * @param entityTypeName Name of the entity type\n\t * @returns Global SideEffects\n\t */\n\tpublic getGlobalODataEntitySideEffects(entityTypeName: string): ODataSideEffectsType[] {\n\t\tconst entitySideEffects = this.getODataEntitySideEffects(entityTypeName);\n\t\tconst globalSideEffects: ODataSideEffectsType[] = [];\n\t\tfor (const key in entitySideEffects) {\n\t\t\tconst sideEffects = entitySideEffects[key];\n\t\t\tif (!sideEffects.sourceEntities && !sideEffects.sourceProperties && !sideEffects.sourceEvents) {\n\t\t\t\tglobalSideEffects.push(sideEffects);\n\t\t\t}\n\t\t}\n\t\treturn globalSideEffects;\n\t}\n\n\t/**\n\t * Gets the SideEffects that come from an OData service.\n\t * @param actionName Name of the action\n\t * @param context Context\n\t * @returns SideEffects definition\n\t */\n\tpublic getODataActionSideEffects(actionName: string, context?: Context): ActionSideEffectsType | undefined {\n\t\tif (context) {\n\t\t\tconst entityType = this.getEntityTypeFromContext(context);\n\t\t\tif (entityType) {\n\t\t\t\treturn this.sideEffectsRegistry.oData.actions.boundActions[entityType]?.[actionName];\n\t\t\t}\n\t\t} else {\n\t\t\treturn this.sideEffectsRegistry.oData.actions.unBoundActions?.[actionName];\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Gets the SideEffects for the context and the event.\n\t * @param context The context of the SideEffects\n\t * @param event The SideEffects of the event\n\t * @returns An array containing the SideEffects matching with the context and the event\n\t */\n\tpublic getODataSideEffectsFromContextEvent(context: Context, event: string): ODataSideEffectsType[] {\n\t\tconst metaPath = context.getModel().getMetaModel().getMetaContext(context.getPath());\n\t\tconst dataModel = getInvolvedDataModelObjects(metaPath);\n\t\tconst sideEffectsInfo = this.getSideEffectWhereEventIsSource(dataModel.targetEntityType.fullyQualifiedName, event);\n\t\treturn sideEffectsInfo.map(\n\t\t\t(sideEffect) =>\n\t\t\t\tthis.sideEffectsRegistry.oData.entities[dataModel.targetEntityType.fullyQualifiedName]?.[\n\t\t\t\t\t`${sideEffect.entity}@com.sap.vocabularies.Common.v1.SideEffects#${sideEffect.qualifier}`\n\t\t\t\t]\n\t\t);\n\t}\n\n\t/**\n\t * Generates the dictionary for the SideEffects.\n\t *  @returns Promise resolving with the SideEffects service once data has been written\n\t */\n\tasync initialize(): Promise<this> {\n\t\tconst sideEffectSources: {\n\t\t\tentities: Record<string, SideEffectInfoForSource[]>;\n\t\t\tproperties: Record<string, SideEffectInfoForSource[]>;\n\t\t\tevents: Record<string, SideEffectInfoForSource[]>;\n\t\t} = {\n\t\t\tentities: {},\n\t\t\tproperties: {},\n\t\t\tevents: {}\n\t\t};\n\t\tconst environmentCapabilitiesService = (await this.appComponent.getService(\n\t\t\t\"environmentCapabilities\"\n\t\t)) as EnvironmentCapabilitiesService;\n\t\tconst model = this.appComponent.getModel();\n\t\tif (model?.isA?.<ODataModel>(\"sap.ui.model.odata.v4.ODataModel\")) {\n\t\t\t// We need to wait for the MetaModel to be requested\n\t\t\tawait model.getMetaModel().requestObject(\"/$EntityContainer/\");\n\t\t\tthis.capabilities = environmentCapabilitiesService.getCapabilities();\n\n\t\t\tconst convertedMetaModel = this.getConvertedMetaModel();\n\t\t\tthis.containerName = convertedMetaModel.entityContainer.fullyQualifiedName;\n\t\t\tthis.containerRegexPattern = new RegExp(`^\\\\/${this.containerName}\\\\/[^/]+\\\\/(.+)?$`);\n\t\t\tthis.entityTypeRegexPattern = new RegExp(`^/${this.containerName}/([^/]+)`);\n\t\t\tconvertedMetaModel.entityTypes.forEach((entityType: EntityType) => {\n\t\t\t\tthis.mapFieldAnnotations(entityType);\n\t\t\t\tthis.sideEffectsRegistry.oData.entities[entityType.fullyQualifiedName] = this.retrieveODataEntitySideEffects(entityType);\n\t\t\t\tthis.mapSideEffectSources(entityType, sideEffectSources);\n\t\t\t});\n\t\t\tconvertedMetaModel.actions.forEach((action: Action) => {\n\t\t\t\tif (action.isBound) {\n\t\t\t\t\tthis.sideEffectsRegistry.oData.actions.boundActions[action.sourceEntityType!.fullyQualifiedName] = {\n\t\t\t\t\t\t...this.sideEffectsRegistry.oData.actions.boundActions[action.sourceEntityType!.fullyQualifiedName],\n\t\t\t\t\t\t...this.retrieveODataActionsSideEffects(action)\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tthis.sideEffectsRegistry.oData.actions.unBoundActions = {\n\t\t\t\t\t\t...this.sideEffectsRegistry.oData.actions.unBoundActions,\n\t\t\t\t\t\t...this.retrieveODataActionsSideEffects(action)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (Object.keys(sideEffectSources.events).length > 0) {\n\t\t\t\tthis.initializeWebSocketConnection();\n\t\t\t}\n\t\t}\n\t\tthis.sourcesToSideEffectMappings = sideEffectSources;\n\t\treturn this;\n\t}\n\n\tprivate mapFieldAnnotations(source: EntityType): void {\n\t\tconst addRecommendationRoles = (sourceName: string): void => {\n\t\t\tif (!this.recommendationRegistry.roles.hasOwnProperty(`${sourceName}`)) {\n\t\t\t\tthis.recommendationRegistry.roles[`${sourceName}`] = {\n\t\t\t\t\tinput: [],\n\t\t\t\t\toutput: []\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tsource.entityProperties.forEach((property) => {\n\t\t\tconst commonAnno = property.annotations.Common as PropertyAnnotationsWithRecommendation;\n\t\t\tif (commonAnno?.RecommendationRole) {\n\t\t\t\tconst roleType = commonAnno.RecommendationRole;\n\t\t\t\tif (roleType.valueOf().includes(\"Input\")) {\n\t\t\t\t\taddRecommendationRoles(`${source.name}`);\n\t\t\t\t\tthis.recommendationRegistry.roles[`${source.name}`].input.push(property.name);\n\t\t\t\t}\n\t\t\t\tif (roleType.valueOf().includes(\"Output\")) {\n\t\t\t\t\taddRecommendationRoles(`${source.name}`);\n\t\t\t\t\tthis.recommendationRegistry.roles[`${source.name}`].output.push(property.name);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic getRecommendationsMapping(): RecommendationsRegistry {\n\t\treturn this.recommendationRegistry;\n\t}\n\n\t/**\n\t * This function will return true if field is part of Recommendation's input mapping and from the same entity.\n\t * Otherwise return false.\n\t * @param field\n\t * @returns True if field is has recommendation role - Input annotation\n\t */\n\tpublic checkIfFieldIsRecommendationRelevant(field: Control): boolean {\n\t\tconst context = field.getBindingContext();\n\t\tconst propertyName = field.data().sourcePath.split(\"/\").pop();\n\t\tif (context) {\n\t\t\tconst metaModel = context?.getModel().getMetaModel();\n\t\t\tconst metaContext = (metaModel as ODataMetaModel)?.getMetaContext(context.getPath());\n\t\t\tconst targetDataModelObject = MetaModelConverter.getInvolvedDataModelObjects<EntitySet | NavigationProperty>(metaContext)\n\t\t\t\t.targetObject!;\n\t\t\tlet targetEntityTypeName;\n\t\t\tif (isEntitySet(targetDataModelObject)) {\n\t\t\t\ttargetEntityTypeName = targetDataModelObject.entityType?.name;\n\t\t\t} else if (isNavigationProperty(targetDataModelObject)) {\n\t\t\t\ttargetEntityTypeName = targetDataModelObject.targetType?.name;\n\t\t\t}\n\t\t\tconst recommendationRolesForEntity = targetEntityTypeName && this.recommendationRegistry.roles[targetEntityTypeName];\n\t\t\tif (recommendationRolesForEntity && recommendationRolesForEntity?.input?.includes(propertyName)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Method returns the properties in a specific entity type which are marked as RecommendationRole Output.\n\t * @param entityTypeName Entity type for which recommendation Output fields needs to be figured\n\t * @returns Array of property names which are marked RecommendationRole Output\n\t */\n\tpublic getRecommendationOutputFields(entityTypeName: string): string[] {\n\t\t//TODO: We have to consider 1:1 navigation properties as well.\n\t\tconst recommendationRolesForEntity = this.recommendationRegistry.roles[entityTypeName];\n\t\tif (recommendationRolesForEntity?.output?.length > 0) {\n\t\t\treturn recommendationRolesForEntity.output;\n\t\t}\n\n\t\treturn [];\n\t}\n\n\t/**\n\t * Removes all SideEffects related to a control.\n\t * @param controlId Control Id\n\t */\n\tpublic removeControlSideEffects(controlId: string): void {\n\t\tObject.keys(this.sideEffectsRegistry.control).forEach((sEntityType) => {\n\t\t\tif (this.sideEffectsRegistry.control[sEntityType][controlId]) {\n\t\t\t\tdelete this.sideEffectsRegistry.control[sEntityType][controlId];\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Requests the SideEffects on a specific context.\n\t * @param pathExpressions Targets of SideEffects to be executed\n\t * @param context Context where SideEffects need to be executed\n\t * @param groupId The group ID to be used for the request\n\t * @returns Promise on SideEffects request\n\t */\n\tpublic async requestSideEffects(pathExpressions: SideEffectsTarget[], context: Context, groupId?: string): Promise<void> {\n\t\tif (pathExpressions.length) {\n\t\t\tthis.logRequest(pathExpressions, context);\n\t\t\tawait context.requestSideEffects(pathExpressions, groupId);\n\t\t}\n\t}\n\n\t/**\n\t * Requests the SideEffects for an OData action.\n\t * @param sideEffects SideEffects definition\n\t * @param context Context where SideEffects need to be executed\n\t * @returns Promise on SideEffects requests and action execution\n\t */\n\tpublic async requestSideEffectsForODataAction(sideEffects: ActionSideEffectsType, context: Context): Promise<(void | undefined)[]> {\n\t\tlet promises: Promise<void | undefined>[];\n\n\t\tif (sideEffects.triggerActions?.length) {\n\t\t\tpromises = sideEffects.triggerActions.map(async (actionName): Promise<void> => {\n\t\t\t\treturn this.executeAction(actionName, context);\n\t\t\t});\n\t\t} else {\n\t\t\tpromises = [];\n\t\t}\n\n\t\tif (sideEffects.pathExpressions?.length) {\n\t\t\tpromises.push(this.requestSideEffects(sideEffects.pathExpressions, context));\n\t\t}\n\n\t\treturn promises.length ? Promise.all(promises) : Promise.resolve([]);\n\t}\n\n\t/**\n\t * Requests the SideEffects for a navigation property on a specific context.\n\t * @param navigationProperty Navigation property\n\t * @param context Context where SideEffects need to be executed\n\t * @param groupId Batch group for the query\n\t * @param ignoreTriggerActions If true, we do not trigger actions defined in the side effect\n\t * @returns SideEffects request on SAPUI5 context\n\t */\n\tpublic async requestSideEffectsForNavigationProperty(\n\t\tnavigationProperty: string,\n\t\tcontext: Context,\n\t\tgroupId?: string,\n\t\tignoreTriggerActions = false\n\t): Promise<void | undefined> {\n\t\tconst baseEntityType = this.getEntityTypeFromContext(context);\n\t\tif (baseEntityType) {\n\t\t\tconst navigationPath = `${navigationProperty}/`;\n\t\t\tconst entitySideEffects = this.getODataEntitySideEffects(baseEntityType);\n\t\t\tlet targetProperties: string[] = [];\n\t\t\tlet targetEntities: SideEffectsEntityType[] = [];\n\t\t\tlet sideEffectsTargets: SideEffectsTarget[] = [];\n\t\t\tObject.keys(entitySideEffects)\n\t\t\t\t.filter(\n\t\t\t\t\t// Keep relevant SideEffects\n\t\t\t\t\t// 1. SourceEntities match OR\n\t\t\t\t\t// 2. Only 1 SourceProperties and match\n\t\t\t\t\t(annotationName) => {\n\t\t\t\t\t\tconst sideEffects: ODataSideEffectsType = entitySideEffects[annotationName];\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t(sideEffects.sourceEntities || []).some(\n\t\t\t\t\t\t\t\t(navigation) => navigation.$NavigationPropertyPath === navigationProperty\n\t\t\t\t\t\t\t) ||\n\t\t\t\t\t\t\t(sideEffects.sourceProperties?.length === 1 &&\n\t\t\t\t\t\t\t\tsideEffects.sourceProperties.some(\n\t\t\t\t\t\t\t\t\t(propertyPath) =>\n\t\t\t\t\t\t\t\t\t\tpropertyPath.startsWith(navigationPath) && !propertyPath.replace(navigationPath, \"\").includes(\"/\")\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\t.forEach((sAnnotationName) => {\n\t\t\t\t\tconst sideEffects = entitySideEffects[sAnnotationName];\n\t\t\t\t\tif (sideEffects.triggerAction && !ignoreTriggerActions) {\n\t\t\t\t\t\tthis.executeAction(sideEffects.triggerAction, context, groupId);\n\t\t\t\t\t}\n\t\t\t\t\ttargetProperties = targetProperties.concat(sideEffects.targetProperties);\n\t\t\t\t\ttargetEntities = targetEntities.concat(sideEffects.targetEntities);\n\t\t\t\t});\n\t\t\t// Remove duplicate targets\n\t\t\tconst sideEffectsTargetDefinition = this.removeDuplicateTargets({\n\t\t\t\ttargetProperties: targetProperties,\n\t\t\t\ttargetEntities: targetEntities\n\t\t\t});\n\t\t\tsideEffectsTargets = [...sideEffectsTargetDefinition.targetProperties, ...sideEffectsTargetDefinition.targetEntities];\n\t\t\tif (sideEffectsTargets.length) {\n\t\t\t\treturn this.requestSideEffects(sideEffectsTargets, context, groupId).catch((error) =>\n\t\t\t\t\tLog.error(`SideEffects - Error while processing SideEffects for Navigation Property ${navigationProperty}`, error)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Gets the SideEffects that come from controls.\n\t * @param entityTypeName Entity type Name\n\t * @returns SideEffects dictionary\n\t */\n\tpublic getControlEntitySideEffects(entityTypeName: string): Record<string, ControlSideEffectsType> {\n\t\treturn this.sideEffectsRegistry.control[entityTypeName] || {};\n\t}\n\n\t/**\n\t * Gets SideEffects' qualifier and owner entity where this entity is used as source.\n\t * @param entityTypeName Entity type fully qualified name\n\t * @returns Array of sideEffects info\n\t */\n\tpublic getSideEffectWhereEntityIsSource(entityTypeName: string): SideEffectInfoForSource[] {\n\t\treturn this.sourcesToSideEffectMappings.entities[entityTypeName] || [];\n\t}\n\n\t/**\n\t * Gets SideEffects' qualifiers where this event is used as source.\n\t * @param entityTypeName Entity type fully qualified\n\t * @param eventName Side Effect event name\n\t * @returns Array of sideEffects info\n\t */\n\tpublic getSideEffectWhereEventIsSource(entityTypeName: string, eventName: string): SideEffectInfoForSource[] {\n\t\treturn this.sourcesToSideEffectMappings.events[eventName]?.filter((event) => event.entity === entityTypeName) || [];\n\t}\n\n\t/**\n\t * Requests the SideEffects for a sideEffect event on a specific context.\n\t * @param event SideEffects event which should be\n\t * @param context Context where SideEffects need to be executed\n\t * @param groupId The group ID to be used for the request\n\t * @returns Promise on SideEffects request\n\t */\n\tasync requestSideEffectsForEvent(event: string, context: Context, groupId?: string): Promise<undefined> {\n\t\tconst sideEffects = this.getODataSideEffectsFromContextEvent(context, event);\n\t\tlet targetProperties: string[] = [];\n\t\tlet targetEntities: SideEffectsEntityType[] = [];\n\n\t\tsideEffects.forEach((sideEffect) => {\n\t\t\ttargetProperties = targetProperties.concat(sideEffect.targetProperties);\n\t\t\ttargetEntities = targetEntities.concat(sideEffect.targetEntities);\n\t\t});\n\n\t\tconst sideEffectsTargetDefinition = this.removeDuplicateTargets({\n\t\t\ttargetProperties: targetProperties,\n\t\t\ttargetEntities: targetEntities\n\t\t});\n\t\tconst sideEffectsTargets = [...sideEffectsTargetDefinition.targetProperties, ...sideEffectsTargetDefinition.targetEntities];\n\t\tif (sideEffectsTargets.length) {\n\t\t\ttry {\n\t\t\t\tawait this.requestSideEffects(sideEffectsTargets, context, groupId);\n\t\t\t} catch (error) {\n\t\t\t\tLog.error(`SideEffects - Error while processing SideEffects for Event ${event}`, error as string);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Common method to get the field groupIds for a source entity and a source property.\n\t * @param sourceEntityType\n\t * @param sourceProperty\n\t * @returns A collection of fieldGroupIds\n\t */\n\tpublic computeFieldGroupIds(sourceEntityType: string, sourceProperty: string): string[] {\n\t\tconst entityFieldGroupIds = this.getSideEffectWhereEntityIsSource(sourceEntityType).map((sideEffectInfo) =>\n\t\t\tthis.getFieldGroupIdForSideEffect(sideEffectInfo, true)\n\t\t);\n\t\treturn entityFieldGroupIds.concat(\n\t\t\tthis.getSideEffectWherePropertyIsSource(sourceProperty).map((sideEffectInfo) =>\n\t\t\t\tthis.getFieldGroupIdForSideEffect(sideEffectInfo)\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * Gets SideEffects' qualifier and owner entity where this property is used as source.\n\t * @param propertyName Property fully qualified name\n\t * @returns Array of sideEffects info\n\t */\n\tpublic getSideEffectWherePropertyIsSource(propertyName: string): SideEffectInfoForSource[] {\n\t\treturn this.sourcesToSideEffectMappings.properties[propertyName] || [];\n\t}\n\n\t// check if can define whether callbacks are async. Otherwise comment\n\t// only one callback for one target\n\tpublic registerTargetCallback(target: string, callback: Function): void {\n\t\tthis.targetCallbacks[target] = callback;\n\t}\n\n\tpublic deregisterTargetCallback(target: string): void {\n\t\tdelete this.targetCallbacks[target];\n\t}\n\n\t// pass parameter\n\tpublic getRegisteredCallback(target: string): Function | undefined {\n\t\treturn this.targetCallbacks[target];\n\t}\n\n\t/**\n\t * Returns updated side effects definition with all text related properties.\n\t * @param sideEffectsTargets The targets of the side effect\n\t * @param entityType Name of the entity where the side effect is registered\n\t * @returns Updated side effects' targets with added text properties or entities\n\t */\n\tprivate addTextProperties(sideEffectsTargets: SideEffectsTargetType, entityType?: EntityType): SideEffectsTargetType {\n\t\tconst setOfProperties = new Set(sideEffectsTargets.targetProperties);\n\t\tconst setOfEntities = new Set(sideEffectsTargets.targetEntities.map((target) => target.$NavigationPropertyPath));\n\t\t// Generate all paths related to the text properties and not already covered by the SideEffects\n\t\tfor (const propertyPath of sideEffectsTargets.targetProperties) {\n\t\t\tfor (const dataModelPropertyPath of this.getDataModelPropertiesFromAPath(propertyPath, entityType)) {\n\t\t\t\tconst associatedTextPath = getAssociatedTextPropertyPath(dataModelPropertyPath.targetObject);\n\t\t\t\tif (associatedTextPath) {\n\t\t\t\t\tthis.addTextProperty(dataModelPropertyPath, propertyPath, associatedTextPath, setOfProperties, setOfEntities);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\ttargetProperties: Array.from(setOfProperties),\n\t\t\ttargetEntities: Array.from(setOfEntities).map((navigation) => {\n\t\t\t\treturn { $NavigationPropertyPath: navigation };\n\t\t\t})\n\t\t};\n\t}\n\n\t/**\n\t * Adds text related property to the side effects targets\n\t * If the property has an associated text then this text needs to be added if it's not already reflected in the side effects definition:\n\t * - as targetProperties if the property and its associated text are on the same entitySet\n\t * - as targetEntities if they are defined on different entitySets.\n\t * @param dataModelPropertyPath The model object path of the property\n\t * @param propertyPath The property path\n\t * @param associatedTextPath The associated text property path\n\t * @param setOfProperties Set of existing sideEffect's target properties\n\t * @param setOfEntities Set of existing sideEffect's target entities\n\t */\n\tprivate addTextProperty(\n\t\tdataModelPropertyPath: DataModelObjectPath<Property>,\n\t\tpropertyPath: string,\n\t\tassociatedTextPath: string,\n\t\tsetOfProperties: Set<string>,\n\t\tsetOfEntities: Set<string>\n\t): void {\n\t\tconst dataModelTextPath = enhanceDataModelPath<Property>(dataModelPropertyPath, associatedTextPath);\n\t\tconst relativeNavigation =\n\t\t\tpropertyPath.startsWith(\"/\") &&\n\t\t\tdataModelTextPath.targetEntitySet &&\n\t\t\tdataModelTextPath.targetEntitySet.name !== dataModelPropertyPath.targetEntitySet?.name\n\t\t\t\t? `/${dataModelTextPath.targetEntitySet?.fullyQualifiedName}`\n\t\t\t\t: getTargetNavigationPath(dataModelTextPath, true);\n\t\tconst targetPath = propertyPath.startsWith(\"/\")\n\t\t\t? `/${dataModelTextPath.targetEntitySet?.fullyQualifiedName}/${dataModelTextPath.targetObject!.name}`\n\t\t\t: getTargetObjectPath(dataModelTextPath, true);\n\t\tif (\n\t\t\tthis.isAssociatedTextListedInSideEffectTargets(\n\t\t\t\tdataModelTextPath,\n\t\t\t\trelativeNavigation,\n\t\t\t\ttargetPath,\n\t\t\t\tsetOfProperties,\n\t\t\t\tsetOfEntities\n\t\t\t)\n\t\t) {\n\t\t\tif (this.isPropertyAssociatedTextOnDifferentEntitySet(dataModelPropertyPath, dataModelTextPath)) {\n\t\t\t\tsetOfEntities.add(relativeNavigation);\n\t\t\t} else {\n\t\t\t\tsetOfProperties.add(targetPath);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the associated text property needs to be added if it's not already reflected in the side effects definition:\n\t * - as targetProperties if the property and its associated text are on the same entitySet\n\t * - as targetEntities if they are defined on different entitySets.\n\t * @param dataModelTextPath The model object path of the associated text\n\t * @param relativeNavigation The navigation to the text property\n\t * @param targetPath The associated text property path\n\t * @param setOfProperties Set of existing sideEffect's target properties\n\t * @param setOfEntities Set of existing sideEffect's target entities\n\t * @returns Updated side effects' targets with added text property or entity\n\t */\n\tprivate isAssociatedTextListedInSideEffectTargets(\n\t\tdataModelTextPath: DataModelObjectPath<Property>,\n\t\trelativeNavigation: string,\n\t\ttargetPath: string,\n\t\tsetOfProperties: Set<string>,\n\t\tsetOfEntities: Set<string>\n\t): boolean {\n\t\treturn (\n\t\t\tisProperty(dataModelTextPath.targetObject) &&\n\t\t\t!setOfProperties.has(targetPath) && // the property is already listed\n\t\t\t!setOfProperties.has(`${relativeNavigation}${dataModelTextPath.navigationProperties.length ? \"/\" : \"\"}*`) && // the property is already listed thanks to the \"*\"\n\t\t\t!setOfEntities.has(`${relativeNavigation}`) // the property is not part of a TargetEntities\n\t\t);\n\t}\n\n\t/**\n\t * Checks if the property and its associated text property are on different entitySet.\n\t * @param dataModelPropertyPath The model object path of the property\n\t * @param dataModelTextPath The model object path of the associated text property\n\t * @returns True if the entitySet is different\n\t */\n\tprivate isPropertyAssociatedTextOnDifferentEntitySet(\n\t\tdataModelPropertyPath: DataModelObjectPath<Property>,\n\t\tdataModelTextPath: DataModelObjectPath<Property>\n\t): boolean {\n\t\treturn (\n\t\t\tdataModelPropertyPath.targetEntitySet !== dataModelTextPath.targetEntitySet &&\n\t\t\t!!dataModelTextPath.navigationProperties &&\n\t\t\t!!dataModelTextPath.targetEntityType\n\t\t);\n\t}\n\n\t/**\n\t * Converts the SideEffects to expected format\n\t * - Set TriggerAction as string\n\t * - Converts SideEffects targets to expected format\n\t * - Removes binding parameter from SideEffects targets properties\n\t * - Adds the text properties\n\t * - Replaces TargetProperties having reference to Source Properties for a SideEffects.\n\t * @param sideEffects SideEffects definition\n\t * @param entityType Entity type\n\t * @param bindingParameter Name of the binding parameter\n\t * @returns SideEffects definition\n\t */\n\tprivate convertSideEffects(\n\t\tsideEffects: CommonSideEffectsType,\n\t\tentityType?: EntityType,\n\t\tbindingParameter?: string\n\t): ODataSideEffectsType {\n\t\tconst triggerAction = sideEffects.TriggerAction as string;\n\t\tconst newSideEffects = this.convertSideEffectsFormat(sideEffects);\n\t\tlet sideEffectsTargets = { targetProperties: newSideEffects.targetProperties, targetEntities: newSideEffects.targetEntities };\n\t\tsideEffectsTargets = this.removeBindingParameter(sideEffectsTargets, bindingParameter);\n\t\tsideEffectsTargets = this.addTextProperties(sideEffectsTargets, entityType);\n\t\tsideEffectsTargets = this.removeDuplicateTargets(sideEffectsTargets);\n\t\treturn {\n\t\t\t...newSideEffects,\n\t\t\t...{ targetEntities: sideEffectsTargets.targetEntities, targetProperties: sideEffectsTargets.targetProperties, triggerAction }\n\t\t};\n\t}\n\n\t/**\n\t * Converts the SideEffects targets (TargetEntities and TargetProperties) to expected format\n\t * - TargetProperties as array of string\n\t * - TargetEntities as array of object with property $NavigationPropertyPath.\n\t * @param sideEffects SideEffects definition\n\t * @returns Converted SideEffects\n\t */\n\tprivate convertSideEffectsFormat(sideEffects: CommonSideEffectsType): ODataSideEffectsType {\n\t\tconst formatProperties = (properties?: (string | PropertyPath)[]): string[] | undefined => {\n\t\t\treturn properties\n\t\t\t\t? properties.reduce((targetProperties: string[], target) => {\n\t\t\t\t\t\tlet path = \"\";\n\t\t\t\t\t\tif (isPropertyPathExpression(target)) {\n\t\t\t\t\t\t\tpath = target.value;\n\t\t\t\t\t\t} else if (typeof target === \"string\") {\n\t\t\t\t\t\t\tpath = target;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (path) {\n\t\t\t\t\t\t\ttargetProperties.push(path);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tLog.error(\n\t\t\t\t\t\t\t\t`SideEffects - Error while processing TargetProperties for SideEffects ${sideEffects.fullyQualifiedName}`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn targetProperties;\n\t\t\t\t  }, [])\n\t\t\t\t: properties;\n\t\t};\n\t\tconst formatEntities = (entities?: NavigationPropertyPath[]): { $NavigationPropertyPath: string }[] | undefined => {\n\t\t\treturn entities\n\t\t\t\t? entities.map((targetEntity) => {\n\t\t\t\t\t\treturn { $NavigationPropertyPath: targetEntity.value };\n\t\t\t\t  })\n\t\t\t\t: entities;\n\t\t};\n\n\t\t// TODO: SourceEvents are still experimental, remove once public\n\t\ttype CommonSideEffectTypeWithSourceEvents = CommonSideEffectsType & { SourceEvents?: Edm.String[] };\n\n\t\treturn {\n\t\t\tfullyQualifiedName: sideEffects.fullyQualifiedName,\n\t\t\tsourceProperties: formatProperties(sideEffects.SourceProperties),\n\t\t\tsourceEntities: formatEntities(sideEffects.SourceEntities),\n\t\t\tsourceEvents: (sideEffects as CommonSideEffectTypeWithSourceEvents).SourceEvents as string[],\n\t\t\ttargetProperties: formatProperties(sideEffects.TargetProperties as (string | PropertyPath)[]) ?? [],\n\t\t\ttargetEntities: formatEntities(sideEffects.TargetEntities) ?? []\n\t\t};\n\t}\n\n\t/**\n\t * Gets all dataModelObjectPath related to properties listed by a path\n\t *\n\t * The path can be:\n\t * - a path targeting a property on a complexType or an EntityType\n\t * - a path with a star targeting all properties on a complexType or an EntityType.\n\t * - absolute.\n\t * @param propertyPath The path to analyze\n\t * @param entityType Entity type\n\t * @returns Array of dataModelObjectPath representing the properties\n\t */\n\tprivate getDataModelPropertiesFromAPath(propertyPath: string, entityType?: EntityType): DataModelObjectPath<Property>[] {\n\t\tlet dataModelObjectPaths: DataModelObjectPath<Property>[] = [];\n\t\tconst convertedMetaModel = this.getConvertedMetaModel();\n\n\t\tlet propertyRelativePath: string | undefined, testEntityTypeName: string | undefined, match: RegExpMatchArray | null;\n\t\tif (propertyPath.startsWith(`/${this.containerName}/`)) {\n\t\t\tmatch = propertyPath.match(this.containerRegexPattern);\n\t\t\tpropertyRelativePath = match ? match[1] : undefined;\n\t\t}\n\t\tif (!entityType) {\n\t\t\tmatch = propertyPath.match(this.entityTypeRegexPattern);\n\t\t\ttestEntityTypeName = match ? match[1] : undefined;\n\t\t}\n\t\tconst testEntityType =\n\t\t\tentityType ??\n\t\t\t((testEntityTypeName ? convertedMetaModel.resolvePath(`/${testEntityTypeName}/`).target : undefined) as EntityType | undefined);\n\t\tconst entitySet =\n\t\t\tconvertedMetaModel.entitySets.find((relatedEntitySet) => relatedEntitySet.entityType === testEntityType) ??\n\t\t\tconvertedMetaModel.singletons.find((singleton) => singleton.entityType === testEntityType);\n\t\tif (entitySet) {\n\t\t\tconst metaModel = this.getMetaModel(),\n\t\t\t\tentitySetContext = metaModel.createBindingContext(`/${entitySet.name}`);\n\t\t\tif (entitySetContext) {\n\t\t\t\tconst dataModelEntitySet = getInvolvedDataModelObjects(entitySetContext);\n\t\t\t\tconst dataModelObjectPath = enhanceDataModelPath<Property | EntityType>(\n\t\t\t\t\t\tdataModelEntitySet,\n\t\t\t\t\t\t(propertyRelativePath || propertyPath).replace(\"*\", \"\") || \"/\"\n\t\t\t\t\t), // \"*\" is replaced by \"/\" to target the current EntityType\n\t\t\t\t\ttargetObject = dataModelObjectPath.targetObject;\n\t\t\t\tif (isProperty(targetObject)) {\n\t\t\t\t\tif (isComplexType(targetObject.targetType)) {\n\t\t\t\t\t\tdataModelObjectPaths = dataModelObjectPaths.concat(\n\t\t\t\t\t\t\ttargetObject.targetType.properties.map((property) =>\n\t\t\t\t\t\t\t\tenhanceDataModelPath<Property>(dataModelObjectPath, property.name)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdataModelObjectPaths.push(dataModelObjectPath as DataModelObjectPath<Property>);\n\t\t\t\t\t}\n\t\t\t\t} else if (isEntityType(targetObject)) {\n\t\t\t\t\tdataModelObjectPaths = dataModelObjectPaths.concat(\n\t\t\t\t\t\tdataModelObjectPath.targetEntityType.entityProperties.map((entityProperty) => {\n\t\t\t\t\t\t\treturn enhanceDataModelPath<Property>(dataModelObjectPath, entityProperty.name);\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tentitySetContext.destroy();\n\t\t\t}\n\t\t}\n\t\treturn dataModelObjectPaths.filter((dataModelObjectPath) => dataModelObjectPath.targetObject);\n\t}\n\n\t/**\n\t * Gets the Odata metamodel.\n\t * @returns The OData metamodel\n\t */\n\tprivate getMetaModel(): ODataMetaModel {\n\t\treturn this.appComponent.getModel().getMetaModel();\n\t}\n\n\t/**\n\t * Gets the SideEffects related to an entity type or action that come from an OData Service\n\t * Internal routine to get, from converted oData metaModel, SideEffects related to a specific entity type or action\n\t * and to convert these SideEffects with expected format.\n\t * @param source Entity type or action\n\t * @returns Array of SideEffects\n\t */\n\tprivate getSideEffectsFromSource(source: EntityType | Action): ODataSideEffectsType[] {\n\t\tlet bindingAlias = \"\";\n\t\tconst isSourceEntityType = isEntityType(source);\n\t\tconst entityType: EntityType | undefined = isSourceEntityType ? source : source.sourceEntityType;\n\t\tconst commonAnnotation = source.annotations?.Common as undefined | unknown as Record<string, CommonAnnotationTypes>;\n\t\tif (commonAnnotation) {\n\t\t\tif (entityType && !isSourceEntityType) {\n\t\t\t\tconst bindingParameter = source.parameters?.find((parameter) => parameter.type === entityType.fullyQualifiedName);\n\t\t\t\tbindingAlias = bindingParameter?.fullyQualifiedName.split(\"/\")[1] ?? \"\";\n\t\t\t}\n\t\t\treturn this.getSideEffectsAnnotationFromSource(source).map((sideEffectAnno) =>\n\t\t\t\tthis.convertSideEffects(sideEffectAnno, entityType, bindingAlias)\n\t\t\t);\n\t\t}\n\t\treturn [];\n\t}\n\n\t/**\n\t * Gets the SideEffects related to an entity type or action that come from an OData Service\n\t * Internal routine to get, from converted oData metaModel, SideEffects related to a specific entity type or action.\n\t * @param source Entity type or action\n\t * @returns Array of SideEffects\n\t */\n\tprivate getSideEffectsAnnotationFromSource(source: EntityType | Action): CommonSideEffectTypeWithQualifier[] {\n\t\tconst sideEffects: CommonSideEffectsType[] = [];\n\t\tconst commonAnnotation = source.annotations?.Common as undefined | unknown as Record<string, CommonSideEffectTypeWithQualifier>;\n\t\tfor (const key in commonAnnotation) {\n\t\t\tconst annotation = commonAnnotation[key];\n\t\t\tif (this.isSideEffectsAnnotation(annotation)) {\n\t\t\t\tsideEffects.push(annotation);\n\t\t\t}\n\t\t}\n\t\treturn sideEffects;\n\t}\n\n\t/**\n\t * Checks if the annotation is a SideEffects annotation.\n\t * @param annotation Annotation\n\t * @returns Boolean\n\t */\n\tprivate isSideEffectsAnnotation(annotation: unknown): annotation is CommonSideEffectsType {\n\t\treturn (annotation as CommonSideEffectsType)?.$Type === CommonAnnotationTypes.SideEffectsType;\n\t}\n\n\t/**\n\t * Logs the SideEffects request.\n\t * @param pathExpressions SideEffects targets\n\t * @param context Context\n\t */\n\tprivate logRequest(pathExpressions: SideEffectsTarget[], context: Context): void {\n\t\tconst targetPaths = pathExpressions.reduce(function (paths, target) {\n\t\t\treturn `${paths}\\n\\t\\t${(target as SideEffectsEntityType).$NavigationPropertyPath || target || \"\"}`;\n\t\t}, \"\");\n\t\tLog.debug(`SideEffects - Request:\\n\\tContext path : ${context.getPath()}\\n\\tProperty paths :${targetPaths}`);\n\t}\n\n\t/**\n\t * Removes the name of the binding parameter on the SideEffects targets.\n\t * @param sideEffectsTargets SideEffects Targets\n\t * @param bindingParameterName Name of binding parameter\n\t * @returns SideEffects definition\n\t */\n\tprivate removeBindingParameter(sideEffectsTargets: SideEffectsTargetType, bindingParameterName?: string): SideEffectsTargetType {\n\t\tif (bindingParameterName) {\n\t\t\tconst replaceBindingParameter = function (value: string): string {\n\t\t\t\treturn value.replace(new RegExp(`^${bindingParameterName}/?`), \"\");\n\t\t\t};\n\t\t\treturn {\n\t\t\t\ttargetProperties: sideEffectsTargets.targetProperties.map((targetProperty) => replaceBindingParameter(targetProperty)),\n\t\t\t\ttargetEntities: sideEffectsTargets.targetEntities.map((targetEntity) => {\n\t\t\t\t\treturn { $NavigationPropertyPath: replaceBindingParameter(targetEntity.$NavigationPropertyPath) };\n\t\t\t\t})\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\ttargetProperties: sideEffectsTargets.targetProperties,\n\t\t\ttargetEntities: sideEffectsTargets.targetEntities\n\t\t};\n\t}\n\n\t/**\n\t * Remove duplicates in SideEffects targets.\n\t * @param sideEffectsTargets SideEffects Targets\n\t * @returns SideEffects targets without duplicates\n\t */\n\tprivate removeDuplicateTargets(sideEffectsTargets: SideEffectsTargetType): SideEffectsTargetType {\n\t\tconst targetEntitiesPaths = sideEffectsTargets.targetEntities.map((targetEntity) => targetEntity.$NavigationPropertyPath);\n\t\tconst uniqueTargetedEntitiesPath = new Set<string>(targetEntitiesPaths);\n\t\tconst uniqueTargetProperties = new Set<string>(sideEffectsTargets.targetProperties);\n\n\t\tconst uniqueTargetedEntities = Array.from(uniqueTargetedEntitiesPath).map((entityPath) => {\n\t\t\treturn {\n\t\t\t\t$NavigationPropertyPath: entityPath\n\t\t\t};\n\t\t});\n\n\t\treturn { targetProperties: Array.from(uniqueTargetProperties), targetEntities: uniqueTargetedEntities };\n\t}\n\n\t/**\n\t * Gets SideEffects action type that come from an OData Service\n\t * Internal routine to get, from converted oData metaModel, SideEffects on actions\n\t * related to a specific entity type and to convert these SideEffects with\n\t * expected format.\n\t * @param action Action\n\t * @returns Entity type SideEffects dictionary\n\t */\n\tprivate retrieveODataActionsSideEffects(action: Action): Record<string, ActionSideEffectsType> {\n\t\tconst sideEffects: Record<string, ActionSideEffectsType> = {};\n\t\tconst triggerActions = new Set<string>();\n\t\tlet targetProperties: string[] = [];\n\t\tlet targetEntities: SideEffectsEntityType[] = [];\n\n\t\tthis.getSideEffectsFromSource(action).forEach((oDataSideEffect) => {\n\t\t\tconst triggerAction = oDataSideEffect.triggerAction;\n\t\t\ttargetProperties = targetProperties.concat(oDataSideEffect.targetProperties);\n\t\t\ttargetEntities = targetEntities.concat(oDataSideEffect.targetEntities);\n\t\t\tif (triggerAction) {\n\t\t\t\ttriggerActions.add(triggerAction);\n\t\t\t}\n\t\t});\n\t\tconst sideEffectsTargets = this.removeDuplicateTargets({ targetProperties, targetEntities });\n\t\tconst actionName = action.isBound ? action.fullyQualifiedName.match(/^[^(]+/)?.[0] : action.name;\n\t\tsideEffects[actionName!] = {\n\t\t\tpathExpressions: [...sideEffectsTargets.targetProperties, ...sideEffectsTargets.targetEntities],\n\t\t\ttriggerActions: Array.from(triggerActions)\n\t\t};\n\t\treturn sideEffects;\n\t}\n\n\t/**\n\t * Gets SideEffects entity type that come from an OData Service\n\t * Internal routine to get, from converted oData metaModel, SideEffects\n\t * related to a specific entity type and to convert these SideEffects with\n\t * expected format.\n\t * @param entityType Entity type\n\t * @returns Entity type SideEffects dictionary\n\t */\n\tprivate retrieveODataEntitySideEffects(entityType: EntityType): Record<string, ODataSideEffectsType> {\n\t\tconst entitySideEffects: Record<string, ODataSideEffectsType> = {};\n\t\tthis.getSideEffectsFromSource(entityType).forEach((sideEffects) => {\n\t\t\tentitySideEffects[sideEffects.fullyQualifiedName] = sideEffects;\n\t\t});\n\t\treturn entitySideEffects;\n\t}\n\n\t/**\n\t * Defines a map for the Sources of sideEffect on the entity to track where those sources are used in SideEffects annotation.\n\t * @param entityType The entityType we look for side Effects annotation\n\t * @param sideEffectsSources The mapping object in construction\n\t * @param sideEffectsSources.entities\n\t * @param sideEffectsSources.properties\n\t * @param sideEffectsSources.events\n\t */\n\tprivate mapSideEffectSources(\n\t\tentityType: EntityType,\n\t\tsideEffectsSources: {\n\t\t\tentities: Record<string, SideEffectInfoForSource[]>;\n\t\t\tproperties: Record<string, SideEffectInfoForSource[]>;\n\t\t\tevents: Record<string, SideEffectInfoForSource[]>;\n\t\t}\n\t): void {\n\t\tfor (const sideEffectDefinition of this.getSideEffectsAnnotationFromSource(entityType)) {\n\t\t\tthis.mapSideEffectSourceEntities(entityType, sideEffectsSources, sideEffectDefinition);\n\t\t\tthis.mapSideEffectSourceProperties(entityType, sideEffectsSources, sideEffectDefinition);\n\t\t\tthis.mapSideEffectSourceEvents(entityType, sideEffectsSources, sideEffectDefinition);\n\t\t}\n\t}\n\n\t/**\n\t * Fills the map for the Sources of sideEffect with source entities.\n\t * @param entityType The entityType we look for side Effects annotation\n\t * @param sideEffectsSources The mapping object in construction\n\t * @param sideEffectsSources.entities\n\t * @param sideEffectsSources.properties\n\t * @param sideEffectsSources.events\n\t * @param sideEffectDefinition The side effect definition to be evaluated\n\t */\n\tprivate mapSideEffectSourceEntities(\n\t\tentityType: EntityType,\n\t\tsideEffectsSources: {\n\t\t\tentities: Record<string, SideEffectInfoForSource[]>;\n\t\t\tproperties: Record<string, SideEffectInfoForSource[]>;\n\t\t\tevents: Record<string, SideEffectInfoForSource[]>;\n\t\t},\n\t\tsideEffectDefinition: CommonSideEffectTypeWithQualifier\n\t): void {\n\t\tfor (const sourceEntity of sideEffectDefinition.SourceEntities ?? []) {\n\t\t\tconst targetEntityType = sourceEntity.value ? sourceEntity.$target?.targetType : entityType;\n\t\t\tif (targetEntityType) {\n\t\t\t\tif (!sideEffectsSources.entities[targetEntityType.fullyQualifiedName]) {\n\t\t\t\t\tsideEffectsSources.entities[targetEntityType.fullyQualifiedName] = [];\n\t\t\t\t}\n\t\t\t\tsideEffectsSources.entities[targetEntityType.fullyQualifiedName].push({\n\t\t\t\t\tentity: entityType.fullyQualifiedName,\n\t\t\t\t\tqualifier: sideEffectDefinition.qualifier\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Fills the map for the Sources of sideEffect with source properties.\n\t * @param entityType The entityType we look for side Effects annotation\n\t * @param sideEffectsSources The mapping object in construction\n\t * @param sideEffectsSources.entities\n\t * @param sideEffectsSources.properties\n\t * @param sideEffectsSources.events\n\t * @param sideEffectDefinition The side effect definition to be evaluated\n\t */\n\tprivate mapSideEffectSourceProperties(\n\t\tentityType: EntityType,\n\t\tsideEffectsSources: {\n\t\t\tentities: Record<string, SideEffectInfoForSource[]>;\n\t\t\tproperties: Record<string, SideEffectInfoForSource[]>;\n\t\t\tevents: Record<string, SideEffectInfoForSource[]>;\n\t\t},\n\t\tsideEffectDefinition: CommonSideEffectTypeWithQualifier\n\t): void {\n\t\tconst hasUniqueSourceProperty = sideEffectDefinition.SourceProperties?.length === 1;\n\t\tfor (const sourceProperty of sideEffectDefinition.SourceProperties ?? []) {\n\t\t\tif (sourceProperty.$target) {\n\t\t\t\tif (!sideEffectsSources.properties[sourceProperty.$target.fullyQualifiedName]) {\n\t\t\t\t\tsideEffectsSources.properties[sourceProperty.$target.fullyQualifiedName] = [];\n\t\t\t\t}\n\t\t\t\tsideEffectsSources.properties[sourceProperty.$target.fullyQualifiedName].push({\n\t\t\t\t\tentity: entityType.fullyQualifiedName,\n\t\t\t\t\tqualifier: sideEffectDefinition.qualifier,\n\t\t\t\t\thasUniqueSourceProperty\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Fills the map for the Sources of sideEffect with source events.\n\t * @param entityType The entityType we look for side Effects annotation\n\t * @param sideEffectsSources The mapping object in construction\n\t * @param sideEffectsSources.entities\n\t * @param sideEffectsSources.properties\n\t * @param sideEffectsSources.events\n\t * @param sideEffectDefinition The side effect definition to be evaluated\n\t */\n\tprivate mapSideEffectSourceEvents(\n\t\tentityType: EntityType,\n\t\tsideEffectsSources: {\n\t\t\tentities: Record<string, SideEffectInfoForSource[]>;\n\t\t\tproperties: Record<string, SideEffectInfoForSource[]>;\n\t\t\tevents: Record<string, SideEffectInfoForSource[]>;\n\t\t},\n\t\tsideEffectDefinition: CommonSideEffectTypeWithQualifier\n\t): void {\n\t\tfor (const sourceEvent of sideEffectDefinition.SourceEvents ?? []) {\n\t\t\tif (!sideEffectsSources.events[sourceEvent.toString()]) {\n\t\t\t\tsideEffectsSources.events[sourceEvent.toString()] = [];\n\t\t\t}\n\t\t\tsideEffectsSources.events[sourceEvent.toString()].push({\n\t\t\t\tentity: entityType.fullyQualifiedName,\n\t\t\t\tqualifier: sideEffectDefinition.qualifier\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Get the fieldGroupId based on the stored information on th side effect.\n\t * @param sideEffectInfo\n\t * @param isImmediate\n\t * @returns A string for the fieldGroupId.\n\t */\n\tprivate getFieldGroupIdForSideEffect(sideEffectInfo: SideEffectInfoForSource, isImmediate = false): string {\n\t\tconst sideEffectWithQualifier = sideEffectInfo.qualifier\n\t\t\t? `${sideEffectInfo.entity}#${sideEffectInfo.qualifier}`\n\t\t\t: sideEffectInfo.entity;\n\t\treturn isImmediate || sideEffectInfo.hasUniqueSourceProperty === true\n\t\t\t? `${sideEffectWithQualifier}$$ImmediateRequest`\n\t\t\t: sideEffectWithQualifier;\n\t}\n\n\tgetInterface(): SideEffectsService {\n\t\treturn this;\n\t}\n}\n\nclass SideEffectsServiceFactory extends ServiceFactory<SideEffectsSettings> {\n\tasync createInstance(oServiceContext: ServiceContext<SideEffectsSettings>): Promise<SideEffectsService> {\n\t\tconst SideEffectsServiceService = new SideEffectsService(oServiceContext);\n\t\treturn SideEffectsServiceService.initialize();\n\t}\n}\n\nexport default SideEffectsServiceFactory;\n"],"mappings":"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","ignoreList":[],"file":"SideEffectsServiceFactory-dbg.js"}
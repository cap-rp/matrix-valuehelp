{"version":3,"file":"StandardActions.js","names":["StandardActionKeys","Cut","Copy","Create","Delete","CreationRow","Paste","MassEdit","Insights","MoveUp","MoveDown","_exports","generateStandardActionsContext","converterContext","creationMode","tableManifestConfiguration","collectionPath","getTargetObjectPath","getDataModelObjectPath","hiddenAnnotation","create","isActionAnnotatedHidden","delete","update","isDraftOrStickySupported","newAction","getNewAction","restrictions","getRestrictions","dataModelObjectPath","bIsDraftSupported","ModelHelper","isObjectPathDraftSupported","bIsStickySessionSupported","startingEntitySet","annotations","Session","StickySessionSupported","currentEntitySet","getEntitySet","isEntitySet","Common","DraftRoot","NewAction","undefined","newActionName","toString","availableProperty","getEntityType","actions","Core","OperationAvailable","name","available","getExpressionFromAnnotation","sAnnotationTerm","bWithNavigationPath","arguments","length","actionAnnotationValue","isSingleton","UI","constant","visitedNavigationPaths","getRelativePaths","path","singletonPathVisitor","getConvertedTypes","restrictionsDef","key","function","isPathInsertable","isPathUpdatable","isPathDeletable","result","forEach","def","defFunction","expression","apply","pathVisitor","navigationPaths","navigationExpression","ignoreTargetCollection","authorizeUnresolvable","getInsertUpdateActionsTemplating","standardActionsContext","isDraftOrSticky","CreationMode","External","getStandardActionCreate","createVisibility","getCreateVisibility","isTemplated","compileExpression","getCreateTemplating","visible","visibleExpression","enabled","getCreateEnablement","enabledForContextMenu","type","ActionType","Standard","getStandardActionCut","cutVisibility","getCutVisibility","getDefaultTemplating","getCutEnablement","getStandardActionCopy","copyVisibility","getCopyVisibility","getCopyEnablement","getStandardActionMoveUpDown","forUp","canChangeSibling","Hierarchy","hierarchyQualifier","ChangeNextSiblingAction","moveVisibility","and","getMoveUpDownEnablement","getStandardActionDelete","deleteVisibility","getDeleteVisibility","getDeleteEnablement","getCreationRow","creationRowVisibility","getCreationRowEnablement","pathUpdatableExpression","isUpdatable","templateBindingExpression","getTemplateType","TemplateType","ListReport","IsEditable","ifElse","equal","isHierarchyParentNodeUpdatable","not","isConstant","availableCopyAction","CopyAction","getStandardActionPaste","isInsertUpdateActionsTemplated","pasteVisibility","getPasteVisibility","pasteEnablement","getPasteEnablement","pasteEnablementForContextMenu","getStandardActionMassEdit","massEditVisibility","getMassEditVisibility","visibleForContextMenu","pathInModel","getMassEditEnablement","getStandardActionInsights","visualizationPath","insightsVisibility","getInsightsVisibility","insightsEnablement","getInsightsEnablement","isForCreationRow","or","actionVisibility","isForPaste","isInsertable","isCreateHidden","InlineCreationRows","inlineCreationRowsHiddenInEditMode","IsCreateMode","isPathInModelExpression","isDeleteHidden","pathDeletableExpression","isDeletable","AnalyticalListPage","updateOnNavigation","_type","notEqual","enablePaste","includes","isUpdateHidden","massEditEnabledInManifest","massEdit","ObjectPage","FreeStylePage","restrictionsInsertable","indexOf","navigationProperties","lastNav","partner","isNavigationProperty","disableAddRowButtonForEmptyData","formatResult","tableFormatters","validateCreationRowFields","forContextMenu","conditions","contextPath","push","CollectionType","resolveAbsolutePath","target","lessOrEqual","createEnablement","deletableContexts","unSavedContexts","draftsWithDeletableActive","draftsWithNonDeletableActive","greaterThan","selectedContextsPath","pasteEnablementPath","isOnlyDynamicOnCurrentEntity","numberOfSelectedContextProperty","updatableContextProperty","numberOfSelectedContexts","greaterOrEqual","numberOfUpdatableContexts","bDisplayMode","isInDisplayMode","runtimeBinding","cutableContextsPath","copyableContextsPath","moveUpDownVisibility","singleContextMovableUp","singleContextMovableDown","checkMultipleVisualization","getManifestWrapper","hasInlineEdit","templateType","hasMultipleVisualizations"],"sources":["./StandardActions.ts"],"sourcesContent":["import type { Boolean, EntitySet } from \"@sap-ux/vocabularies-types\";\nimport type { BindingToolkitExpression, CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport {\n\tand,\n\tcompileExpression,\n\tconstant,\n\tequal,\n\tformatResult,\n\tgetExpressionFromAnnotation,\n\tgreaterOrEqual,\n\tgreaterThan,\n\tifElse,\n\tisConstant,\n\tisPathInModelExpression,\n\tlength,\n\tlessOrEqual,\n\tnot,\n\tnotEqual,\n\tor,\n\tpathInModel\n} from \"sap/fe/base/BindingToolkit\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport type { BaseAction } from \"sap/fe/core/converters/controls/Common/Action\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport { isEntitySet, isNavigationProperty, isSingleton } from \"sap/fe/core/helpers/TypeGuards\";\nimport {\n\tgetRelativePaths,\n\tgetTargetObjectPath,\n\tisPathDeletable,\n\tisPathInsertable,\n\tisPathUpdatable\n} from \"sap/fe/core/templating/DataModelPathHelper\";\n// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport tableFormatters from \"sap/fe/macros/formatters/TableFormatter\";\nimport { UI, singletonPathVisitor } from \"../../../../helpers/BindingHelper\";\nimport type ConverterContext from \"../../../ConverterContext\";\nimport { ActionType, CreationMode, TemplateType } from \"../../../ManifestSettings\";\nimport { getInsightsEnablement, getInsightsVisibility } from \"../../../helpers/InsightsHelpers\";\nimport type { TableControlConfiguration } from \"../Table\";\n\nexport type StandardAction = BaseAction & {\n\ttype: ActionType.Standard;\n\tisTemplated?: CompiledBindingToolkitExpression;\n\tvisible: CompiledBindingToolkitExpression;\n\tvisibleExpression?: BindingToolkitExpression<boolean>;\n\tenabled: CompiledBindingToolkitExpression;\n\tenabledForContextMenu?: CompiledBindingToolkitExpression;\n};\n\ntype ExpressionRestrictionsType = {\n\texpression: BindingToolkitExpression<boolean>;\n\tnavigationExpression: BindingToolkitExpression<boolean>;\n};\ntype StandardActionsRestrictionsType = Record<string, ExpressionRestrictionsType>;\n\nexport type StandardActionsContext = {\n\tcollectionPath: string;\n\thiddenAnnotation: {\n\t\tcreate: BindingToolkitExpression<boolean>;\n\t\tdelete: BindingToolkitExpression<boolean>;\n\t\tupdate: BindingToolkitExpression<boolean>;\n\t};\n\tcreationMode: CreationMode;\n\tisDraftOrStickySupported: boolean;\n\tnewAction?: {\n\t\tname: string;\n\t\tavailable: BindingToolkitExpression<boolean>;\n\t};\n\ttableManifestConfiguration: TableControlConfiguration;\n\trestrictions: StandardActionsRestrictionsType;\n};\n\nexport const StandardActionKeys = {\n\tCut: \"StandardAction::Cut\",\n\tCopy: \"StandardAction::Copy\",\n\tCreate: \"StandardAction::Create\",\n\tDelete: \"StandardAction::Delete\",\n\tCreationRow: \"StandardAction::CreationRow\",\n\tPaste: \"StandardAction::Paste\",\n\tMassEdit: \"StandardAction::MassEdit\",\n\tInsights: \"StandardAction::Insights\",\n\tMoveUp: \"StandardAction::MoveUp\",\n\tMoveDown: \"StandardAction::MoveDown\"\n};\n\n/**\n * Generates context for the standard actions.\n * @param converterContext\n * @param creationMode\n * @param tableManifestConfiguration\n * @returns  The context for table actions\n */\nexport function generateStandardActionsContext(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tcreationMode: CreationMode,\n\ttableManifestConfiguration: TableControlConfiguration\n): StandardActionsContext {\n\treturn {\n\t\tcollectionPath: getTargetObjectPath(converterContext.getDataModelObjectPath()),\n\t\thiddenAnnotation: {\n\t\t\tcreate: isActionAnnotatedHidden(converterContext, \"CreateHidden\"),\n\t\t\tdelete: isActionAnnotatedHidden(converterContext, \"DeleteHidden\"),\n\t\t\tupdate: isActionAnnotatedHidden(converterContext, \"UpdateHidden\")\n\t\t},\n\t\tcreationMode: creationMode,\n\t\tisDraftOrStickySupported: isDraftOrStickySupported(converterContext),\n\t\tnewAction: getNewAction(converterContext),\n\t\ttableManifestConfiguration: tableManifestConfiguration,\n\t\trestrictions: getRestrictions(converterContext)\n\t};\n}\n\n/**\n * Checks if sticky or draft is supported.\n * @param converterContext\n * @returns `true` if it is supported\n */\nexport function isDraftOrStickySupported(converterContext: ConverterContext<PageContextPathTarget>): boolean {\n\tconst dataModelObjectPath = converterContext.getDataModelObjectPath();\n\tconst bIsDraftSupported = ModelHelper.isObjectPathDraftSupported(dataModelObjectPath);\n\tconst bIsStickySessionSupported = (dataModelObjectPath.startingEntitySet as EntitySet)?.annotations?.Session?.StickySessionSupported\n\t\t? true\n\t\t: false;\n\n\treturn bIsDraftSupported || bIsStickySessionSupported;\n}\n\n/**\n * Gets the configured newAction into annotation.\n * @param converterContext\n * @returns The new action info\n */\nexport function getNewAction(\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): { name: string; available: BindingToolkitExpression<boolean> } | undefined {\n\tconst currentEntitySet = converterContext.getEntitySet();\n\tconst newAction = isEntitySet(currentEntitySet)\n\t\t? currentEntitySet.annotations.Common?.DraftRoot?.NewAction ??\n\t\t  currentEntitySet.annotations.Session?.StickySessionSupported?.NewAction\n\t\t: undefined;\n\tconst newActionName: CompiledBindingToolkitExpression = newAction?.toString();\n\tif (newActionName) {\n\t\tconst availableProperty = converterContext?.getEntityType().actions[newActionName]?.annotations?.Core?.OperationAvailable;\n\t\treturn {\n\t\t\tname: newActionName,\n\t\t\tavailable: getExpressionFromAnnotation<Boolean>(availableProperty, [], true)\n\t\t};\n\t}\n\treturn undefined;\n}\n\n/**\n * Gets the binding expression for the action visibility configured into annotation.\n * @param converterContext\n * @param sAnnotationTerm\n * @param bWithNavigationPath\n * @returns The binding expression for the action visibility\n */\nexport function isActionAnnotatedHidden(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tsAnnotationTerm: \"CreateHidden\" | \"UpdateHidden\" | \"DeleteHidden\",\n\tbWithNavigationPath = true\n): BindingToolkitExpression<boolean> {\n\t// The annotations in question (CreateHidden, DeleteHidden, UpdateHidden) most specifically can be defined on EntitySet.\n\t// In several cases, fallback to EntityType needs to be checked:\n\t// - In case of singleton (annotations do not apply)\n\t// - EntitySet cannot be determined (containment or no navigationPropertyBinding)\n\t// - EntitySet can be determined, but the annotation is not defined there\n\n\tconst currentEntitySet = converterContext.getEntitySet();\n\tconst actionAnnotationValue =\n\t\t(!isSingleton(currentEntitySet) && currentEntitySet?.annotations.UI?.[sAnnotationTerm]) ||\n\t\tconverterContext.getEntityType().annotations.UI?.[sAnnotationTerm];\n\n\tif (!actionAnnotationValue) {\n\t\treturn constant(false);\n\t}\n\n\tconst dataModelObjectPath = converterContext.getDataModelObjectPath();\n\tconst visitedNavigationPaths = getRelativePaths(dataModelObjectPath);\n\treturn getExpressionFromAnnotation(actionAnnotationValue, visitedNavigationPaths, undefined, (path: string) =>\n\t\tsingletonPathVisitor(path, converterContext.getConvertedTypes(), visitedNavigationPaths)\n\t);\n}\n\n/**\n * Gets the annotated restrictions for the actions.\n * @param converterContext\n * @returns The restriction information\n */\nexport function getRestrictions(converterContext: ConverterContext<PageContextPathTarget>): StandardActionsRestrictionsType {\n\tconst dataModelObjectPath = converterContext.getDataModelObjectPath();\n\tconst restrictionsDef = [\n\t\t{\n\t\t\tkey: \"isInsertable\",\n\t\t\tfunction: isPathInsertable\n\t\t},\n\t\t{\n\t\t\tkey: \"isUpdatable\",\n\t\t\tfunction: isPathUpdatable\n\t\t},\n\t\t{\n\t\t\tkey: \"isDeletable\",\n\t\t\tfunction: isPathDeletable\n\t\t}\n\t];\n\tconst result: Record<string, ExpressionRestrictionsType> = {};\n\trestrictionsDef.forEach(function (def) {\n\t\tconst defFunction = def[\"function\"];\n\t\tresult[def.key] = {\n\t\t\texpression: defFunction.apply(null, [\n\t\t\t\tdataModelObjectPath,\n\t\t\t\t{\n\t\t\t\t\tpathVisitor: (path: string, navigationPaths: string[]) =>\n\t\t\t\t\t\tsingletonPathVisitor(path, converterContext.getConvertedTypes(), navigationPaths)\n\t\t\t\t}\n\t\t\t]),\n\t\t\tnavigationExpression: defFunction.apply(null, [\n\t\t\t\tdataModelObjectPath,\n\t\t\t\t{\n\t\t\t\t\tignoreTargetCollection: true,\n\t\t\t\t\tauthorizeUnresolvable: true,\n\t\t\t\t\tpathVisitor: (path: string, navigationPaths: string[]) =>\n\t\t\t\t\t\tsingletonPathVisitor(path, converterContext.getConvertedTypes(), navigationPaths)\n\t\t\t\t}\n\t\t\t])\n\t\t};\n\t});\n\treturn result;\n}\n\n/**\n * Checks if templating for insert/update actions is mandatory.\n * @param standardActionsContext\n * @param isDraftOrSticky\n * @returns True if we need to template insert or update actions, false otherwise\n */\nexport function getInsertUpdateActionsTemplating(standardActionsContext: StandardActionsContext, isDraftOrSticky: boolean): boolean {\n\treturn isDraftOrSticky || standardActionsContext.creationMode === CreationMode.External;\n}\n\n/**\n * Gets the binding expressions for the properties of the 'Create' action.\n * @param converterContext\n * @param standardActionsContext\n * @returns The standard action info\n */\nexport function getStandardActionCreate(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext\n): StandardAction {\n\tconst createVisibility = getCreateVisibility(converterContext, standardActionsContext);\n\treturn {\n\t\tisTemplated: compileExpression(getCreateTemplating(standardActionsContext, createVisibility)),\n\t\tvisible: compileExpression(createVisibility),\n\t\tvisibleExpression: createVisibility,\n\t\tenabled: compileExpression(getCreateEnablement(converterContext, standardActionsContext, createVisibility)),\n\t\tenabledForContextMenu: compileExpression(getCreateEnablement(converterContext, standardActionsContext, createVisibility, true)),\n\t\tkey: StandardActionKeys.Create,\n\t\ttype: ActionType.Standard\n\t};\n}\n/**\n * Gets the binding expressions for the properties of the 'Cut' action.\n * @param converterContext\n * @param standardActionsContext\n * @returns The standard action info\n */\nexport function getStandardActionCut(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext\n): StandardAction {\n\tconst cutVisibility = getCutVisibility(converterContext, standardActionsContext);\n\treturn {\n\t\tisTemplated: compileExpression(getDefaultTemplating(cutVisibility)),\n\t\tvisible: compileExpression(cutVisibility),\n\t\tenabled: compileExpression(getCutEnablement(cutVisibility, standardActionsContext, false)),\n\t\tenabledForContextMenu: compileExpression(getCutEnablement(cutVisibility, standardActionsContext, true)),\n\t\tkey: StandardActionKeys.Cut,\n\t\ttype: ActionType.Standard\n\t};\n}\n\n/**\n * Gets the binding expressions for the properties of the 'Copy' action.\n * @param converterContext\n * @param standardActionsContext\n * @returns The standard action info\n */\nexport function getStandardActionCopy(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext\n): StandardAction {\n\tconst copyVisibility = getCopyVisibility(converterContext, standardActionsContext);\n\treturn {\n\t\tisTemplated: compileExpression(getDefaultTemplating(copyVisibility)),\n\t\tvisible: compileExpression(copyVisibility),\n\t\tenabled: compileExpression(getCopyEnablement(copyVisibility, false)),\n\t\tenabledForContextMenu: compileExpression(getCopyEnablement(copyVisibility, true)),\n\t\tkey: StandardActionKeys.Copy,\n\t\ttype: ActionType.Standard\n\t};\n}\n\n/**\n * Gets the binding expressions for the properties of the 'Move up' and 'Move down' actions.\n * @param converterContext\n * @param standardActionsContext\n * @param forUp\n * @returns The standard action info\n */\nexport function getStandardActionMoveUpDown(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext,\n\tforUp: boolean\n): StandardAction {\n\tconst canChangeSibling =\n\t\tconverterContext.getEntityType().annotations.Hierarchy?.[\n\t\t\t`RecursiveHierarchyActions#${standardActionsContext.tableManifestConfiguration.hierarchyQualifier ?? \"\"}`\n\t\t]?.ChangeNextSiblingAction !== undefined;\n\tconst moveVisibility = and(getCutVisibility(converterContext, standardActionsContext), canChangeSibling);\n\treturn {\n\t\tisTemplated: compileExpression(getDefaultTemplating(moveVisibility)),\n\t\tvisible: compileExpression(moveVisibility),\n\t\tenabled: compileExpression(getMoveUpDownEnablement(moveVisibility, standardActionsContext, forUp)),\n\t\tenabledForContextMenu: compileExpression(getMoveUpDownEnablement(moveVisibility, standardActionsContext, forUp, true)),\n\t\tkey: forUp ? StandardActionKeys.MoveUp : StandardActionKeys.MoveDown,\n\t\ttype: ActionType.Standard\n\t};\n}\n\n/**\n * Gets the binding expressions for the properties of the 'Delete' action.\n * @param converterContext\n * @param standardActionsContext\n * @returns The binding expressions for the properties of the 'Delete' action.\n */\nexport function getStandardActionDelete(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext\n): StandardAction {\n\tconst deleteVisibility = getDeleteVisibility(converterContext, standardActionsContext);\n\n\treturn {\n\t\tisTemplated: compileExpression(getDefaultTemplating(deleteVisibility)),\n\t\tvisible: compileExpression(deleteVisibility),\n\t\tenabled: compileExpression(getDeleteEnablement(converterContext, standardActionsContext, deleteVisibility, false)),\n\t\tenabledForContextMenu: compileExpression(getDeleteEnablement(converterContext, standardActionsContext, deleteVisibility, true)),\n\t\tkey: StandardActionKeys.Delete,\n\t\ttype: ActionType.Standard\n\t};\n}\n\n/**\n * Gets the binding expressions for the properties of the 'CreationRow' action.\n *\n * Note that this is not actually an action that is templated as a button but its properties are used to configure an MDC feature.\n * @param converterContext\n * @param standardActionsContext\n * @returns StandardAction\n */\nexport function getCreationRow(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext\n): StandardAction {\n\tconst creationRowVisibility = getCreateVisibility(converterContext, standardActionsContext, true);\n\n\treturn {\n\t\tisTemplated: compileExpression(getCreateTemplating(standardActionsContext, creationRowVisibility, true)),\n\t\tvisible: compileExpression(creationRowVisibility),\n\t\tenabled: compileExpression(getCreationRowEnablement(converterContext, standardActionsContext, creationRowVisibility)),\n\t\tkey: StandardActionKeys.CreationRow,\n\t\ttype: ActionType.Standard\n\t};\n}\n\n/**\n * Gets the binding expression for the 'visible' property of the 'Cut' action.\n * @param converterContext\n * @param standardActionsContext\n * @returns The binding expression for the 'visible' property of the 'Cut' action.\n */\nexport function getCutVisibility(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext\n): BindingToolkitExpression<boolean> {\n\tconst pathUpdatableExpression = standardActionsContext.restrictions?.isUpdatable?.expression;\n\tconst templateBindingExpression =\n\t\tconverterContext.getTemplateType() !== TemplateType.ListReport\n\t\t\t? UI.IsEditable\n\t\t\t: (converterContext.getEntitySet() as EntitySet)?.annotations.Common?.DraftRoot !== undefined; // To allow cut/paste for a draft TreeTable in a ListReport\n\treturn ifElse(\n\t\tequal(standardActionsContext.tableManifestConfiguration?.type, \"TreeTable\"),\n\t\tand(\n\t\t\tstandardActionsContext.tableManifestConfiguration.isHierarchyParentNodeUpdatable!,\n\t\t\tnot(and(isConstant(pathUpdatableExpression), equal(pathUpdatableExpression, false))),\n\t\t\ttemplateBindingExpression\n\t\t),\n\t\tfalse\n\t);\n}\n\n/**\n * Gets the binding expression for the 'visible' property of the 'Copy' action.\n * @param converterContext\n * @param standardActionsContext\n * @returns The binding expression for the 'visible' property of the 'Copy' action.\n */\nexport function getCopyVisibility(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext\n): BindingToolkitExpression<boolean> {\n\tconst availableCopyAction = converterContext?.getEntityType().annotations.Hierarchy?.[\n\t\t`RecursiveHierarchyActions#${standardActionsContext.tableManifestConfiguration.hierarchyQualifier ?? \"\"}`\n\t]?.CopyAction as string | undefined;\n\n\tif (!availableCopyAction) {\n\t\treturn constant(false);\n\t}\n\n\tconst templateBindingExpression =\n\t\tconverterContext.getTemplateType() !== TemplateType.ListReport\n\t\t\t? UI.IsEditable\n\t\t\t: (converterContext.getEntitySet() as EntitySet)?.annotations.Common?.DraftRoot !== undefined; // To allow cut/paste for a draft TreeTable in a ListReport\n\treturn ifElse(equal(standardActionsContext.tableManifestConfiguration?.type, \"TreeTable\"), templateBindingExpression, false);\n}\n\n/**\n * Gets the binding expressions for the properties of the 'Paste' action.\n *\n * Note that this is not actually an action that is displayed as a button but its properties are used to configure an MDC feature.\n * @param converterContext\n * @param standardActionsContext\n * @param isInsertUpdateActionsTemplated\n * @returns The binding expressions for the properties of the 'Paste' action.\n */\nexport function getStandardActionPaste(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext,\n\tisInsertUpdateActionsTemplated: boolean\n): StandardAction {\n\tconst cutVisibility = getCutVisibility(converterContext, standardActionsContext);\n\tconst copyVisibility = getCopyVisibility(converterContext, standardActionsContext);\n\tconst createVisibility = getCreateVisibility(converterContext, standardActionsContext, false, true);\n\tconst pasteVisibility = getPasteVisibility(\n\t\tconverterContext,\n\t\tstandardActionsContext,\n\t\tcreateVisibility,\n\t\tcutVisibility,\n\t\tcopyVisibility,\n\t\tisInsertUpdateActionsTemplated\n\t);\n\tconst pasteEnablement = getPasteEnablement(pasteVisibility, standardActionsContext, false);\n\tconst pasteEnablementForContextMenu = getPasteEnablement(pasteVisibility, standardActionsContext, true);\n\treturn {\n\t\tvisible: compileExpression(pasteVisibility),\n\t\tenabled: compileExpression(pasteEnablement),\n\t\tenabledForContextMenu: compileExpression(pasteEnablementForContextMenu),\n\t\tkey: StandardActionKeys.Paste,\n\t\ttype: ActionType.Standard\n\t};\n}\n\n/**\n * Gets the binding expressions for the properties of the 'MassEdit' action.\n * @param converterContext\n * @param standardActionsContext\n * @returns The binding expressions for the properties of the 'MassEdit' action.\n */\nexport function getStandardActionMassEdit(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext\n): StandardAction {\n\tconst massEditVisibility = getMassEditVisibility(converterContext, standardActionsContext);\n\n\treturn {\n\t\tisTemplated: compileExpression(getDefaultTemplating(massEditVisibility)),\n\t\tvisible: compileExpression(massEditVisibility),\n\t\t// For the context menu, the visibility should also consider the 'inactiveContext' property:\n\t\t// only when at least one selected context is active (i.e. \"contextmenu/inactiveContext\" is false), the action should be visible in the context menu\n\t\t// This is only relevant when the table manifest setting \"creationMode\" is \"InlineCreationRows\"\n\t\tvisibleForContextMenu: compileExpression(\n\t\t\tand(massEditVisibility, equal(pathInModel(\"contextmenu/inactiveContext\", \"internal\"), false))\n\t\t),\n\t\tenabled: compileExpression(getMassEditEnablement(converterContext, standardActionsContext, massEditVisibility)),\n\t\tenabledForContextMenu: compileExpression(getMassEditEnablement(converterContext, standardActionsContext, massEditVisibility, true)),\n\t\tkey: StandardActionKeys.MassEdit,\n\t\ttype: ActionType.Standard\n\t};\n}\n\n/**\n * Gets the binding expressions for the properties of the 'AddCardsToInsights' action.\n * @param converterContext\n * @param standardActionsContext\n * @param visualizationPath\n * @returns The binding expressions for the properties of the 'AddCardsToInsights' action.\n */\nexport function getStandardActionInsights(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext,\n\tvisualizationPath: string\n): StandardAction {\n\tconst insightsVisibility = getInsightsVisibility(\"Table\", converterContext, visualizationPath, standardActionsContext);\n\tconst insightsEnablement = and(insightsVisibility, getInsightsEnablement());\n\treturn {\n\t\tisTemplated: compileExpression(getDefaultTemplating(insightsVisibility)),\n\t\tvisible: compileExpression(insightsVisibility),\n\t\tenabled: compileExpression(insightsEnablement),\n\t\tkey: StandardActionKeys.Insights,\n\t\ttype: ActionType.Standard\n\t};\n}\n\n/**\n * Gets the binding expression for the templating of the 'Create' action.\n * @param standardActionsContext\n * @param createVisibility\n * @param isForCreationRow\n * @returns The create binding expression\n */\nexport function getCreateTemplating(\n\tstandardActionsContext: StandardActionsContext,\n\tcreateVisibility: BindingToolkitExpression<boolean>,\n\tisForCreationRow = false\n): BindingToolkitExpression<boolean> {\n\t//Templating of Create Button is not done:\n\t// \t - If Button is never visible(covered the External create button, new Action)\n\t//\t - or CreationMode is on CreationRow for Create Button\n\t//\t - or CreationMode is not on CreationRow for CreationRow Button\n\n\treturn and(\n\t\t//XNOR gate\n\t\tor(\n\t\t\tand(isForCreationRow, standardActionsContext.creationMode === CreationMode.CreationRow),\n\t\t\tand(!isForCreationRow, standardActionsContext.creationMode !== CreationMode.CreationRow)\n\t\t),\n\t\tor(not(isConstant(createVisibility)), createVisibility)\n\t);\n}\n\n/**\n * Gets the binding expression for the templating of the non-Create actions.\n * @param actionVisibility\n * @returns The binding expression for the templating of the non-Create actions.\n */\nexport function getDefaultTemplating(actionVisibility: BindingToolkitExpression<boolean>): BindingToolkitExpression<boolean> {\n\treturn or(not(isConstant(actionVisibility)), actionVisibility);\n}\n\n/**\n * Gets the binding expression for the 'visible' property of the 'Create' action.\n * @param converterContext\n * @param standardActionsContext\n * @param isForCreationRow\n * @param isForPaste\n * @returns The binding expression for the 'visible' property of the 'Create' action.\n */\nexport function getCreateVisibility(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext,\n\tisForCreationRow = false,\n\tisForPaste = false\n): BindingToolkitExpression<boolean> {\n\tconst isInsertable = standardActionsContext.restrictions.isInsertable.expression;\n\tconst isCreateHidden = isForCreationRow\n\t\t? isActionAnnotatedHidden(converterContext, \"CreateHidden\", false)\n\t\t: standardActionsContext.hiddenAnnotation.create;\n\tconst newAction = standardActionsContext.newAction;\n\t//Create Button is visible:\n\t// \t - If the creation mode is external\n\t//      - If we're on the list report and create is not hidden\n\t//\t\t- Otherwise this depends on the value of the UI.IsEditable\n\t//\t - Otherwise\n\t//\t\t- If any of the following conditions is valid then create button isn't visible\n\t//\t\t\t- no newAction available\n\t//\t\t\t- It's not insertable and there is not a new action\n\t//\t\t\t- create is hidden\n\t//\t\t\t- There are multiple visualizations\n\t//\t\t\t- It's an Analytical List Page\n\t//\t\t\t- Uses InlineCreationRows mode and a Responsive table type, with the parameter inlineCreationRowsHiddenInEditMode to true while not in create mode\n\t//          \t- when calculating paste button visibility,  we force the condition to false with the isForPaste property\n\t//   - Otherwise\n\t// \t \t- If we're on the list report ->\n\t// \t \t\t- If UI.CreateHidden points to a property path -> provide a negated binding to this path\n\t// \t \t\t- Otherwise, create is visible\n\t// \t \t- Otherwise\n\t// \t  \t - This depends on the value of the UI.IsEditable\n\treturn ifElse(\n\t\tstandardActionsContext.creationMode === CreationMode.External,\n\t\tand(not(isCreateHidden), or(converterContext.getTemplateType() === TemplateType.ListReport, UI.IsEditable)),\n\t\tifElse(\n\t\t\tor(\n\t\t\t\tand(isConstant(newAction?.available), equal(newAction?.available, false)),\n\t\t\t\tand(isConstant(isInsertable), equal(isInsertable, false), !newAction),\n\t\t\t\tand(isConstant(isCreateHidden), equal(isCreateHidden, true)),\n\t\t\t\tand(\n\t\t\t\t\tstandardActionsContext.creationMode === CreationMode.InlineCreationRows,\n\t\t\t\t\tstandardActionsContext.tableManifestConfiguration?.type === \"ResponsiveTable\",\n\t\t\t\t\tifElse(\n\t\t\t\t\t\tand(\n\t\t\t\t\t\t\tstandardActionsContext?.tableManifestConfiguration?.inlineCreationRowsHiddenInEditMode === false,\n\t\t\t\t\t\t\tnot(isForPaste)\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tUI.IsCreateMode\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t),\n\t\t\tfalse,\n\t\t\tifElse(\n\t\t\t\tconverterContext.getTemplateType() === TemplateType.ListReport,\n\t\t\t\tor(not(isPathInModelExpression(isCreateHidden)), not(isCreateHidden)),\n\t\t\t\tand(not(isCreateHidden), UI.IsEditable)\n\t\t\t)\n\t\t)\n\t);\n}\n\n/**\n * Gets the binding expression for the 'visible' property of the 'Delete' action.\n * @param converterContext\n * @param standardActionsContext\n * @returns The binding expression for the 'visible' property of the 'Delete' action.\n */\nexport function getDeleteVisibility(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext\n): BindingToolkitExpression<boolean> {\n\tconst isDeleteHidden = standardActionsContext.hiddenAnnotation.delete;\n\tconst pathDeletableExpression = standardActionsContext.restrictions.isDeletable.expression;\n\n\t//Delete Button is visible:\n\t// \t Prerequisites:\n\t//\t - If we're not on ALP\n\t//   - If restrictions on deletable set to false -> not visible\n\t//   - Otherwise\n\t//\t\t\t- If UI.DeleteHidden is true -> not visible\n\t//\t\t\t- Otherwise\n\t// \t \t\t\t- If we're on OP -> depending if UI is editable and restrictions on deletable\n\t//\t\t\t\t- Otherwise\n\t//\t\t\t\t \t- If UI.DeleteHidden points to a property path -> provide a negated binding to this path\n\t//\t \t \t\t \t- Otherwise, delete is visible\n\n\treturn ifElse(\n\t\tconverterContext.getTemplateType() === TemplateType.AnalyticalListPage,\n\t\tfalse,\n\t\tifElse(\n\t\t\tand(isConstant(pathDeletableExpression), equal(pathDeletableExpression, false)),\n\t\t\tfalse,\n\t\t\tifElse(\n\t\t\t\tand(isConstant(isDeleteHidden), equal(isDeleteHidden, constant(true))),\n\t\t\t\tfalse,\n\t\t\t\tifElse(\n\t\t\t\t\tconverterContext.getTemplateType() !== TemplateType.ListReport,\n\t\t\t\t\tand(not(isDeleteHidden), UI.IsEditable),\n\t\t\t\t\tnot(and(isPathInModelExpression(isDeleteHidden), isDeleteHidden))\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t);\n}\n\n/**\n * Gets the binding expression for the 'visible' property of the 'Paste' action.\n * @param converterContext\n * @param standardActionsContext\n * @param createVisibility\n * @param cutVisibility\n * @param isInsertUpdateActionsTemplated\n * @returns The binding expression for the 'visible' property of the 'Paste' action.\n */\nexport function getPasteVisibility(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext,\n\tcreateVisibility: BindingToolkitExpression<boolean>,\n\tcutVisibility: BindingToolkitExpression<boolean>,\n\tcopyVisibility: BindingToolkitExpression<boolean>,\n\tisInsertUpdateActionsTemplated: boolean\n): BindingToolkitExpression<boolean> {\n\t//If it isn't deactivated within the manifest and we're operating in OP/blocks outside Fiori elements templates,\n\t//the treeTable's visibility relies on the cutvisibility,\n\t//while the visibility of the other table is determined by insertable restrictions and create visibility.\n\tlet updateOnNavigation = standardActionsContext.restrictions?.isUpdatable?.navigationExpression;\n\tif (updateOnNavigation?._type === \"Unresolvable\") {\n\t\tupdateOnNavigation = constant(true);\n\t}\n\treturn and(\n\t\tstandardActionsContext.tableManifestConfiguration.type === \"TreeTable\"\n\t\t\t? or(cutVisibility, copyVisibility)\n\t\t\t: and(\n\t\t\t\t\tor(\n\t\t\t\t\t\tand(createVisibility, standardActionsContext.restrictions.isInsertable.expression),\n\t\t\t\t\t\tand(UI.IsEditable, updateOnNavigation)\n\t\t\t\t\t),\n\t\t\t\t\tnotEqual(standardActionsContext.tableManifestConfiguration.enablePaste, false),\n\t\t\t\t\t![TemplateType.ListReport, TemplateType.AnalyticalListPage].includes(converterContext.getTemplateType())\n\t\t\t  ),\n\t\tisInsertUpdateActionsTemplated\n\t);\n}\n\n/**\n * Gets the binding expression for the 'visible' property of the 'MassEdit' action.\n * @param converterContext\n * @param standardActionsContext\n * @returns The binding expression for the 'visible' property of the 'MassEdit' action.\n */\nexport function getMassEditVisibility(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext\n): BindingToolkitExpression<boolean> {\n\tconst isUpdateHidden = standardActionsContext.hiddenAnnotation.update,\n\t\tpathUpdatableExpression = standardActionsContext.restrictions.isUpdatable.expression,\n\t\tmassEditEnabledInManifest: boolean = standardActionsContext.tableManifestConfiguration?.massEdit.enabled || false;\n\tconst templateBindingExpression =\n\t\tconverterContext.getTemplateType() === TemplateType.ObjectPage\n\t\t\t? UI.IsEditable\n\t\t\t: [TemplateType.ListReport, TemplateType.FreeStylePage].includes(converterContext.getTemplateType());\n\t//MassEdit is visible\n\t// If\n\t//\t\t- there is no static restrictions set to false\n\t//\t\t- and enableMassEdit is not set to false into the manifest\n\t//\t\t- and the selectionMode is relevant\n\t//\tThen MassEdit is always visible in LR or dynamically visible in OP according to ui>Editable and hiddenAnnotation\n\t//  Button is hidden for all other cases\n\treturn and(\n\t\tnot(and(isConstant(pathUpdatableExpression), equal(pathUpdatableExpression, false))),\n\t\tmassEditEnabledInManifest,\n\t\ttemplateBindingExpression,\n\t\tnot(isUpdateHidden)\n\t);\n}\n\n/**\n * Gets the binding expression for the 'enabled' property of the creationRow.\n * @param converterContext\n * @param standardActionsContext\n * @param creationRowVisibility\n * @returns The binding expression for the 'enabled' property of the creationRow.\n */\nexport function getCreationRowEnablement(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext,\n\tcreationRowVisibility: BindingToolkitExpression<boolean>\n): BindingToolkitExpression<boolean> {\n\tconst restrictionsInsertable = isPathInsertable(converterContext.getDataModelObjectPath(), {\n\t\tignoreTargetCollection: true,\n\t\tauthorizeUnresolvable: true,\n\t\tpathVisitor: (path: string, navigationPaths: string[]) => {\n\t\t\tif (path.indexOf(\"/\") === 0) {\n\t\t\t\tpath = singletonPathVisitor(path, converterContext.getConvertedTypes(), navigationPaths);\n\t\t\t\treturn path;\n\t\t\t}\n\t\t\tconst navigationProperties = converterContext.getDataModelObjectPath().navigationProperties;\n\t\t\tif (navigationProperties) {\n\t\t\t\tconst lastNav = navigationProperties[navigationProperties.length - 1];\n\t\t\t\tconst partner = isNavigationProperty(lastNav) && lastNav.partner;\n\t\t\t\tif (partner) {\n\t\t\t\t\tpath = `${partner}/${path}`;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn path;\n\t\t}\n\t});\n\tconst isInsertable =\n\t\trestrictionsInsertable._type === \"Unresolvable\"\n\t\t\t? isPathInsertable(converterContext.getDataModelObjectPath(), {\n\t\t\t\t\tpathVisitor: (path: string) => singletonPathVisitor(path, converterContext.getConvertedTypes(), [])\n\t\t\t  })\n\t\t\t: restrictionsInsertable;\n\n\treturn and(\n\t\tcreationRowVisibility,\n\t\tisInsertable,\n\t\tor(\n\t\t\t!standardActionsContext.tableManifestConfiguration.disableAddRowButtonForEmptyData,\n\t\t\tformatResult([pathInModel(\"creationRowFieldValidity\", \"internal\")], tableFormatters.validateCreationRowFields)\n\t\t)\n\t);\n}\n\n/**\n * Gets the binding expression for the 'enabled' property of the 'Create' action.\n * @param converterContext\n * @param standardActionsContext\n * @param createVisibility\n * @param forContextMenu\n * @returns The binding expression for the 'enabled' property of the 'Create' action.\n */\nexport function getCreateEnablement(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext,\n\tcreateVisibility: BindingToolkitExpression<boolean>,\n\tforContextMenu = false\n): BindingToolkitExpression<boolean> {\n\tconst conditions: BindingToolkitExpression<boolean>[] = [];\n\tconst contextPath: string = !forContextMenu ? \"\" : \"contextmenu/\";\n\n\tif (standardActionsContext.creationMode === CreationMode.InlineCreationRows) {\n\t\t// for Inline creation rows create can be hidden via manifest and this should not impact its enablement\n\t\tconditions.push(and(not(standardActionsContext.hiddenAnnotation.create), UI.IsEditable));\n\t} else {\n\t\tconditions.push(createVisibility);\n\t}\n\n\tconst isInsertable = standardActionsContext.restrictions.isInsertable.expression;\n\tconst CollectionType = converterContext.resolveAbsolutePath<EntitySet>(standardActionsContext.collectionPath).target;\n\tconditions.push(\n\t\tor(\n\t\t\tisEntitySet(CollectionType),\n\t\t\tand(isInsertable, or(converterContext.getTemplateType() !== TemplateType.ObjectPage, UI.IsEditable))\n\t\t)\n\t);\n\n\tif (standardActionsContext.tableManifestConfiguration.type === \"TreeTable\") {\n\t\t// In case of a TreeTable, the create button shall be active only if 0 or 1 items are selected (parent node)\n\t\t// We do not need this condition on the ContextMenu, as we only create on the selected node\n\t\tconditions.push(lessOrEqual(pathInModel(contextPath + \"numberOfSelectedContexts\", \"internal\"), 1));\n\n\t\tif (standardActionsContext.tableManifestConfiguration.createEnablement) {\n\t\t\t// There's a createEnablement callback function for additionnal conditions\n\t\t\t// These conditions will be reflected in the internal model\n\t\t\tconditions.push(notEqual(pathInModel(contextPath + \"createEnablement/Create\", \"internal\"), false));\n\t\t}\n\t}\n\n\treturn and(...conditions);\n}\n\n/**\n * Gets the binding expression for the 'enabled' property of the 'Delete' action.\n * @param converterContext\n * @param standardActionsContext\n * @param deleteVisibility\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @returns The binding expression for the 'enabled' property of the 'Delete' action.\n */\nexport function getDeleteEnablement(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext,\n\tdeleteVisibility: BindingToolkitExpression<boolean>,\n\tforContextMenu = false\n): BindingToolkitExpression<boolean> {\n\t// The following contexts are filled at runtime when a user selects one or more items from a list.\n\t// Checks are then made in function updateDeleteInfoForSelectedContexts in file DeleteHelper to see if there\n\t// are items that can be deleted, thus the delete button should be enabled in these cases.\n\tconst contextPath = !forContextMenu ? \"\" : \"contextmenu/\";\n\tconst deletableContexts = pathInModel(contextPath + \"deletableContexts\", \"internal\");\n\tconst unSavedContexts = pathInModel(contextPath + \"unSavedContexts\", \"internal\");\n\tconst draftsWithDeletableActive = pathInModel(contextPath + \"draftsWithDeletableActive\", \"internal\");\n\tconst draftsWithNonDeletableActive = pathInModel(contextPath + \"draftsWithNonDeletableActive\", \"internal\");\n\n\t// \"Unresolvable\" in navigationExpression is interpreted to mean that there are no navigationExpressions\n\t// defined.\n\t// standardActionsContext.restrictions.isDeletable.expression is a binding expression that comes\n\t// from the Delete restrictions defined in NavigationRestrictions for this entity. In order to\n\t// be deletable, the item must also be allowed to be deletable according to the Delete Restrictions\n\t// on the entity itself.\n\treturn and(\n\t\tdeleteVisibility,\n\t\tor(\n\t\t\tstandardActionsContext.restrictions.isDeletable.navigationExpression._type === \"Unresolvable\",\n\t\t\tstandardActionsContext.restrictions.isDeletable.expression\n\t\t),\n\t\tor(\n\t\t\tgreaterThan(length(deletableContexts, true), 0),\n\t\t\tgreaterThan(length(draftsWithDeletableActive, true), 0),\n\t\t\tgreaterThan(length(draftsWithNonDeletableActive, true), 0),\n\t\t\tgreaterThan(length(unSavedContexts, true), 0)\n\t\t)\n\t);\n}\n\n/**\n * Gets the binding expression for the 'enabled' property of the 'Paste' action.\n * @param pasteVisibility\n * @param standardActionsContext\n * @param forContextMenu\n * @returns The binding expression for the 'enabled' property of the 'Paste' action.\n */\nexport function getPasteEnablement(\n\tpasteVisibility: BindingToolkitExpression<boolean>,\n\tstandardActionsContext: StandardActionsContext,\n\tforContextMenu: boolean\n): BindingToolkitExpression<boolean> {\n\tconst selectedContextsPath = !forContextMenu ? \"selectedContexts\" : \"contextmenu/selectedContexts\";\n\tconst pasteEnablementPath = !forContextMenu ? \"nodeUpdatesInfo/pasteEnablement\" : \"contextmenu/nodeUpdatesInfo/pasteEnablement\";\n\tif (standardActionsContext.tableManifestConfiguration.type === \"TreeTable\") {\n\t\treturn and(\n\t\t\tpasteVisibility,\n\t\t\tor(\n\t\t\t\tstandardActionsContext.restrictions.isUpdatable.navigationExpression._type === \"Unresolvable\",\n\t\t\t\tstandardActionsContext.restrictions.isUpdatable.expression\n\t\t\t),\n\t\t\tifElse(\n\t\t\t\tlessOrEqual(length(pathInModel(selectedContextsPath, \"internal\")), 1),\n\t\t\t\tequal(pathInModel(pasteEnablementPath, \"internal\"), true),\n\n\t\t\t\tfalse\n\t\t\t)\n\t\t);\n\t}\n\tlet updateOnNavigation = standardActionsContext.restrictions?.isUpdatable?.navigationExpression;\n\tif (updateOnNavigation?._type === \"Unresolvable\") {\n\t\tupdateOnNavigation = constant(true);\n\t}\n\treturn and(updateOnNavigation, pasteVisibility);\n}\n\n/**\n * Gets the binding expression for the 'enabled' property of the 'MassEdit' action.\n * @param converterContext\n * @param standardActionsContext\n * @param massEditVisibility\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @returns The binding expression for the 'enabled' property of the 'MassEdit' action.\n */\nexport function getMassEditEnablement(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext,\n\tmassEditVisibility: BindingToolkitExpression<boolean>,\n\tforContextMenu = false\n): BindingToolkitExpression<boolean> {\n\tconst pathUpdatableExpression = standardActionsContext.restrictions.isUpdatable.expression;\n\tconst isOnlyDynamicOnCurrentEntity =\n\t\t!isConstant(pathUpdatableExpression) &&\n\t\tstandardActionsContext.restrictions.isUpdatable.navigationExpression._type === \"Unresolvable\";\n\tconst numberOfSelectedContextProperty = !forContextMenu ? \"numberOfSelectedContexts\" : \"contextmenu/numberOfSelectedContexts\";\n\tconst updatableContextProperty = !forContextMenu ? \"updatableContexts\" : \"contextmenu/updatableContexts\";\n\tconst numberOfSelectedContexts = greaterOrEqual(pathInModel(numberOfSelectedContextProperty, \"internal\"), 1);\n\tconst numberOfUpdatableContexts = greaterOrEqual(length(pathInModel(updatableContextProperty, \"internal\")), 1);\n\tconst bIsDraftSupported = ModelHelper.isObjectPathDraftSupported(converterContext.getDataModelObjectPath());\n\tconst bDisplayMode = isInDisplayMode(converterContext);\n\n\t// numberOfUpdatableContexts needs to be added to the binding in case\n\t// 1. Update is dependent on current entity property (isOnlyDynamicOnCurrentEntity is true).\n\t// 2. The table is read only and draft enabled(like LR), in this case only active contexts can be mass edited.\n\t//    So, update depends on 'IsActiveEntity' value which needs to be checked runtime.\n\tconst runtimeBinding = ifElse(\n\t\tor(and(bDisplayMode, bIsDraftSupported), isOnlyDynamicOnCurrentEntity),\n\t\tand(numberOfSelectedContexts, numberOfUpdatableContexts),\n\t\tand(numberOfSelectedContexts)\n\t);\n\n\treturn and(massEditVisibility, ifElse(isOnlyDynamicOnCurrentEntity, runtimeBinding, and(runtimeBinding, pathUpdatableExpression)));\n}\n\n/**\n * Gets the binding expression for the 'enabled' property of the 'Cut' action.\n * @param cutVisibility\n * @param standardActionsContext\n * @param forContextMenu\n * @returns The binding expression for the 'enabled' property of the 'MassEdit' action.\n */\nexport function getCutEnablement(\n\tcutVisibility: BindingToolkitExpression<boolean>,\n\tstandardActionsContext: StandardActionsContext,\n\tforContextMenu: boolean\n): BindingToolkitExpression<boolean> {\n\tconst cutableContextsPath = !forContextMenu ? \"nodeUpdatesInfo/cutEnablement\" : \"contextmenu/nodeUpdatesInfo/cutEnablement\";\n\tconst runtimeBinding = pathInModel(cutableContextsPath, \"internal\");\n\treturn and(\n\t\tcutVisibility,\n\t\tor(\n\t\t\tstandardActionsContext.restrictions.isUpdatable.navigationExpression._type === \"Unresolvable\",\n\t\t\tstandardActionsContext.restrictions.isUpdatable.expression\n\t\t),\n\t\truntimeBinding\n\t);\n}\n\n/**\n * Gets the binding expression for the 'enabled' property of the 'Copy' action.\n * @param copyVisibility\n * @param forContextMenu\n * @returns The binding expression for the 'enabled' property of the 'Copy' action.\n */\nexport function getCopyEnablement(\n\tcopyVisibility: BindingToolkitExpression<boolean>,\n\tforContextMenu: boolean\n): BindingToolkitExpression<boolean> {\n\tconst copyableContextsPath = !forContextMenu ? \"nodeUpdatesInfo/copyEnablement\" : \"contextmenu/nodeUpdatesInfo/copyEnablement\";\n\tconst runtimeBinding = pathInModel(copyableContextsPath, \"internal\");\n\treturn and(copyVisibility, runtimeBinding);\n}\n\n/**\n * Gets the binding expression for the 'enabled' property of the 'Move up' and 'Move down' actions.\n * @param moveUpDownVisibility\n * @param standardActionsContext\n * @param forUp\n * @param forContextMenu\n * @returns The binding expression\n */\nfunction getMoveUpDownEnablement(\n\tmoveUpDownVisibility: BindingToolkitExpression<boolean>,\n\tstandardActionsContext: StandardActionsContext,\n\tforUp: boolean,\n\tforContextMenu = false\n): BindingToolkitExpression<boolean> {\n\tconst singleContextMovableUp = !forContextMenu ? \"singleContextMovableUp\" : \"contextmenu/singleContextMovableUp\";\n\tconst singleContextMovableDown = !forContextMenu ? \"singleContextMovableDown\" : \"contextmenu/singleContextMovableDown\";\n\tconst runtimeBinding = forUp\n\t\t? equal(pathInModel(singleContextMovableUp, \"internal\"), true)\n\t\t: equal(pathInModel(singleContextMovableDown, \"internal\"), true);\n\treturn and(\n\t\tmoveUpDownVisibility,\n\t\tor(\n\t\t\tstandardActionsContext.restrictions.isUpdatable.navigationExpression._type === \"Unresolvable\",\n\t\t\tstandardActionsContext.restrictions.isUpdatable.expression\n\t\t),\n\t\truntimeBinding\n\t);\n}\n\n/**\n * Tells if the table in template is in display mode.\n * @param converterContext\n * @param checkMultipleVisualization\n * @returns `true` if the table is in display mode\n */\nexport function isInDisplayMode(converterContext: ConverterContext<PageContextPathTarget>, checkMultipleVisualization = false): boolean {\n\tif (converterContext.getManifestWrapper().hasInlineEdit()) {\n\t\t//if there is inline edit in the page we cannot force the table to display based on the template type\n\t\treturn false;\n\t}\n\tconst templateType = converterContext.getTemplateType();\n\tif (\n\t\ttemplateType === TemplateType.ListReport ||\n\t\ttemplateType === TemplateType.AnalyticalListPage ||\n\t\t(checkMultipleVisualization && converterContext.getManifestWrapper().hasMultipleVisualizations())\n\t) {\n\t\treturn true;\n\t}\n\t// updatable will be handled at the property level\n\treturn false;\n}\n"],"mappings":"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","ignoreList":[]}
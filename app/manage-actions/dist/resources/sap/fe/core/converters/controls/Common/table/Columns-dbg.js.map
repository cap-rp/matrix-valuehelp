{"version":3,"names":["ColumnType","_exports","getTableColumns","lineItemAnnotation","tableType","visualizationPath","converterContext","annotationColumns","getColumnsFromAnnotations","manifestColumns","getColumnsFromManifest","getManifestControlConfiguration","columns","getAnnotationEntityType","tableColumns","insertCustomElements","width","OverrideType","overwrite","widthIncludingColumnHeader","importance","horizontalAlign","availability","isNavigable","settings","formatOptions","exportSettings","addComputedColumns","findColumnByPath","path","find","column","annotationColumn","propertyInfos","undefined","relativePath","updateLinkedProperties","dataModelObjectPath","getConverterContextFor","getContextPath","getDataModelObjectPath","forEach","oColumn","tableColumn","propertyDataModelObjectPath","enhanceDataModelPath","property","targetObject","addCurrencyOrUoMToProperty","timezoneProperty","getAssociatedTimezoneProperty","timezone","annotations","Common","Timezone","oTimezoneColumn","name","timezoneText","toString","addTextArrangentInfoToProperty","currencyOrUoMProperty","getAssociatedCurrencyPropertyPath","getAssociatedUnitPropertyPath","currencyOrUoMPropertyDataModelObjectPath","currencyOrUoMRelativePath","getContextRelativeTargetObjectPath","unitColumn","unit","Measures","ISOCurrency","Unit","unitText","displayMode","getDisplayMode","textPropertyPath","getAssociatedTextPropertyPath","textPropertyDataModelObjectPath","textRelativePath","textColumn","textArrangement","textProperty","mode","type","getColumnsFromEntityType","columnsToBeCreated","entityType","tableCreationMode","displayModeOfDescriptionPropertiesMap","restrictionsOnProperties","propertiesNotToBeConsidered","aggregationHelper","AggregationHelper","groupableProperties","getGroupableProperties","isAnalyticsSupported","map","$target","filter","target","getAssociatedTextProperty","textProp","isPropertyGroupable","prop","entityProperties","exists","some","targetType","includes","relatedPropertiesInfo","collectRelatedProperties","relatedPropertyNames","Object","keys","properties","additionalPropertyNames","additionalProperties","addPropertyToDisplayModeOfDescriptionPropertiesMap","columnInfo","getColumnDefinitionFromProperty","getEntitySetBasedAnnotationPath","fullyQualifiedName","length","dataPointTargetValue","exportDataPointTargetValue","annotationProperty","updatePropertyLabel","additionalPropertyInfos","additionalPropertyName","push","nonSortableProperties","isPathAnnotationExpression","Text","relatedColumns","_createRelatedColumns","concat","fullPropertyPath","useDataFieldPrefix","availableForAdaptation","relativePathForMultiValue","semanticObjectAnnotationPath","getSemanticObjectPath","isHidden","isReferencePropertyStaticallyHidden","groupPath","_sliceAtSlash","isGroup","label","getLabel","dataType","getDataFieldDataType","propertyTypeConfig","getTypeConfig","isAPropertyFromTextOnlyAnnotation","sortable","filterable","nonFilterableProperties","typeConfig","className","constraints","_isExportableColumn","createColumnExportSettings","collectedNavigationPropertyLabels","_getCollectedNavigationPropertyLabels","key","replaceSpecialChars","Annotation","groupLabel","group","annotationPath","semanticObjectPath","isGroupable","isKey","caseSensitive","isFilteringCaseSensitive","getImportance","UI","DataFieldDefault","required","isRequiredColumn","additionalLabels","_addToolTip","_setExportSettingsForDataPoint","ModelHelper","isObjectPathDraftSupported","extension","technicallyAggregatable","technicallyGroupable","unitProperty","utc","isATimezone","currencyProperty","scale","isProperty","getAssociatedUnitProperty","getAssociatedCurrencyProperty","getStaticUnitOrCurrency","getStaticTimezone","isTimezone","exportType","getExportDataType","inputFormat","getDateInputFormat","delimiter","getDelimiter","template","wrap","autoScale","removeUndefinedFromExportSettings","setting","columnName","linkedAnnotationColumns","col","tooltip","source","propertyType","dataFieldDefaultProperty","$Type","Target","Value","Core","MediaType","term","isURL","_isValidColumn","dataField","Inline","_getVisibleExpression","dataFieldModelPath","propertyValue","isAnalyticalGroupHeaderExpanded","constant","isAnalyticalLeaf","and","not","equal","getExpressionFromAnnotation","Hidden","ifElse","or","_getFieldGroupHiddenExpressions","dataFieldGroup","fieldGroupHiddenExpressions","compileExpression","Data","innerDataField","arguments","isNavigationProperty","dataFieldDefault","qualifier","Label","isDataFieldTypes","valueOf","_getTooltip","QuickInfo","datapointTarget","getRowStatusVisibility","colName","isSemanticKeyInFieldGroup","formatResult","pathInModel","tableFormatters","getErrorStatusTextVisibilityFormatter","existingColumns","relatedPropertyNameMap","getAbsoluteAnnotationPath","relatedColumn","propertyObjectPath","isMultiValueField","newNameRelativeTargetPath","computeHiddenOnRelatedColumns","newName","propertyInfo","_getAnnotationColumnName","KeyHelper","generateKeyFromDataField","_getShowDataFieldsLabel","fieldGroupName","columnKeys","showDataFieldsLabel","_getRelativePath","value","isLastSlash","isLastPart","iSlashIndex","lastIndexOf","indexOf","substring","_isColumnMultiValued","_isColumnSortable","propertyPath","nonSortableColumns","propName","filterFunctions","_getFilterFunctions","ConverterContext","entitySet","getEntitySet","TypeGuards","isEntitySet","Capabilities","FilterFunctions","getEntityContainer","_getDefaultFormatOptionsForTable","textLinesEdit","_findSemanticKeyValues","semanticKeys","aSemanticKeyValues","bSemanticKeyFound","i","values","semanticKeyFound","_findProperties","semanticKeyValues","fieldGroupProperties","semanticKeyHasPropertyInFieldGroup","sPropertyPath","tmp","fieldGroupPropertyPath","_findSemanticKeyValuesInFieldGroup","aProperties","_propertiesFound","getDefaultDraftIndicatorForColumn","semanticKey","semanticKeyInFieldGroup","fieldGroupDraftIndicatorPropertyPath","showErrorObjectStatus","hasDraftIndicator","_getImpNumber","Importance","_getDataFieldImportance","split","None","targetValuefromDP","getTargetValueOnDataPoint","isDataPointFromDataFieldDefault","_getMaxImportance","fields","maxImpNumber","impNumber","DataFieldWithMaxImportance","field","targetEntityType","SemanticKey","requiredProperties","getRequiredProperties","highKeys","fieldsWithImportance","isAnnotationOfType","dataFieldTarget","fieldGroupData","fieldGroupDataField","High","item","getRestrictionsOnProperties","tableManifestSettings","defaultCreationMode","getManifestWrapper","getSapFeManifestConfiguration","macros","table","CreationMode","InlineCreationRows","tableSettings","creationMode","getAnnotationsByTerm","getEntityType","tableConverterContext","getTargetObjectPath","collectRelatedPropertiesRecursively","isFieldGroupColumn","navigationProperties","situationsNavProps","navigationProperty","isCollection","SAPObjectNodeType","Name","situationsNavProp","hasSituationsIndicator","isMultiValue","visualSettings","widthCalculation","FieldGroupHiddenExpressions","HTML5","CssDefaults","isPartOfLineItem","relatedPropertyName","displayModeOfPropertyUsedAsDescription","createPropertyAnnotatedTextOnly","_getPropertyNames","matchedProperties","Array","isArray","resolvePath","isRequiredFieldGroup","fieldGroup","isDataField","isStaticallyMandatory","isAnnotatedRequiredProperty","isRequiredDataFieldForAnnotation","dataFieldForAnnotation","DataFieldForAnnotationFieldControlNotMandatory","hasFieldControlNotMandatory","hasFieldGroupTarget","hasDataPointTarget","Visualization","isRequiredDataPoint","isRequiredProperty","isRatingVisualizationFromDataFieldDefault","dataPoint","getTemplateType","TemplateType","ListReport","AnalyticalListPage","IsEditable","isDataFieldForAnnotation","_appendCustomTemplate","exportProperties","join","internalColumns","isColumnOverride","isSlotColumn","manifestColumn","Slot","isCustomColumn","_updateLinkedPropertiesOnCustomColumns","annotationTableColumns","replace","isPartOfCustomColumn","validateKey","baseTableColumn","position","anchor","placement","Placement","After","propertiesToOverwriteAnnotationColumn","getCustomExportSettings","tooltipText","fetchTextFromMetaModel","headerText","header","customColumnExportSettings","baseManifestColumn","HorizontalAlign","Begin","id","customTableColumn","Default","message","getDiagnostics","addIssue","IssueCategory","Manifest","IssueSeverity","Low","IssueCategoryType","AnnotationColumns","InvalidKey","columnWithSituationsIndicator","situationsIndicatorColumn","propertyKey","isSituationsIndicator","Computed","clipboardSettings","indexOfFirstVisibleColumn","findIndex","splice","columnsWithDraftIndicator","isDraftNode","isDraftRoot","columnWithDraftIndicator","draftIndicatorColumn","isDraftIndicator","columnIndexToInsertAfter","getContextPropertyRestriction","capabilities","InsertRestrictions","RequiredProperties","isCurrency","exportDataType","navProperty","lineItem","isPropertyNavigated","inheredPropertyDataModelObjectPath","isInheredPropertyNavigated","oProperty","oTargetMapping","isTypeDefinition","EDM_TYPE_MAPPING","underlyingType","$Scale","precision","$Precision","maxLength","$MaxLength","nullable","$Nullable","minimum","isNaN","Validation","Minimum","maximum","Maximum","isDigitSequence","IsDigitSequence","parseAsString","emptyString","parseKeepsEmptyString","relatedAnnotationColumns","existingColumn","columnKey","columnFromAnnotations","enableWrapping","customExportSettings"],"sourceRoot":".","sources":["Columns.ts"],"sourcesContent":["import type { EntityType, NavigationProperty, Property, PropertyPath } from \"@sap-ux/vocabularies-types\";\nimport type { FilterFunctions } from \"@sap-ux/vocabularies-types/vocabularies/Capabilities\";\nimport type { EntitySetAnnotations_Capabilities } from \"@sap-ux/vocabularies-types/vocabularies/Capabilities_Edm\";\nimport type { SemanticKey } from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport { CommonAnnotationTerms } from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport type {\n\tDataField,\n\tDataFieldAbstractTypes,\n\tDataFieldForAnnotation,\n\tDataFieldTypes,\n\tDataPoint,\n\tDataPointTypeTypes,\n\tFieldGroup,\n\tLineItem\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTerms, UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport type { BindingToolkitExpression, CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport {\n\tEDM_TYPE_MAPPING,\n\tand,\n\tcompileExpression,\n\tconstant,\n\tequal,\n\tformatResult,\n\tgetExpressionFromAnnotation,\n\tifElse,\n\tnot,\n\tor,\n\tpathInModel\n} from \"sap/fe/base/BindingToolkit\";\nimport type ConverterContext from \"sap/fe/core/converters/ConverterContext\";\nimport type {\n\tAvailabilityType,\n\tCustomDefinedTableColumn,\n\tCustomDefinedTableColumnForOverride,\n\tFormatOptionsType,\n\tTableColumnSettings,\n\tTableManifestConfiguration\n} from \"sap/fe/core/converters/ManifestSettings\";\nimport { CreationMode, HorizontalAlign, Importance, TemplateType } from \"sap/fe/core/converters/ManifestSettings\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport type { ComplexPropertyInfo } from \"sap/fe/core/converters/annotations/DataField\";\nimport {\n\tcollectRelatedProperties,\n\tcollectRelatedPropertiesRecursively,\n\tgetDataFieldDataType,\n\tgetSemanticObjectPath,\n\tgetTargetValueOnDataPoint,\n\thasDataPointTarget,\n\thasFieldGroupTarget,\n\tisDataField,\n\tisDataFieldForAnnotation,\n\tisDataFieldTypes,\n\tisDataPointFromDataFieldDefault,\n\tisRatingVisualizationFromDataFieldDefault\n} from \"sap/fe/core/converters/annotations/DataField\";\nimport { type TableType } from \"sap/fe/core/converters/controls/Common/Table\";\nimport { AggregationHelper } from \"sap/fe/core/converters/helpers/Aggregation\";\nimport type { ConfigurableObject, CustomElement } from \"sap/fe/core/converters/helpers/ConfigurableObject\";\nimport { OverrideType, Placement, insertCustomElements } from \"sap/fe/core/converters/helpers/ConfigurableObject\";\nimport { isReferencePropertyStaticallyHidden } from \"sap/fe/core/converters/helpers/DataFieldHelper\";\nimport { IssueCategory, IssueCategoryType, IssueSeverity } from \"sap/fe/core/converters/helpers/IssueManager\";\nimport { KeyHelper } from \"sap/fe/core/converters/helpers/Key\";\nimport { UI } from \"sap/fe/core/helpers/BindingHelper\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport { replaceSpecialChars } from \"sap/fe/core/helpers/StableIdHelper\";\nimport * as TypeGuards from \"sap/fe/core/helpers/TypeGuards\";\nimport {\n\tisAnnotationOfType,\n\tisNavigationProperty,\n\tisPathAnnotationExpression,\n\tisProperty,\n\tisTypeDefinition\n} from \"sap/fe/core/helpers/TypeGuards\";\nimport {\n\tenhanceDataModelPath,\n\tgetContextPropertyRestriction,\n\tgetContextRelativeTargetObjectPath,\n\tgetTargetObjectPath,\n\ttype DataModelObjectPath\n} from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { getDisplayMode, type DisplayMode } from \"sap/fe/core/templating/DisplayModeFormatter\";\nimport { getRestrictionsOnProperties, type RestrictionsOnProperties } from \"sap/fe/core/templating/EntitySetHelper\";\nimport { hasFieldControlNotMandatory, isStaticallyMandatory } from \"sap/fe/core/templating/FieldControlHelper\";\nimport {\n\tgetAssociatedCurrencyProperty,\n\tgetAssociatedCurrencyPropertyPath,\n\tgetAssociatedTextProperty,\n\tgetAssociatedTextPropertyPath,\n\tgetAssociatedTimezoneProperty,\n\tgetAssociatedUnitProperty,\n\tgetAssociatedUnitPropertyPath,\n\tgetStaticTimezone,\n\tgetStaticUnitOrCurrency,\n\tisTimezone\n} from \"sap/fe/core/templating/PropertyHelper\";\nimport { isMultiValueField } from \"sap/fe/core/templating/UIFormatters\";\nimport type { DefaultTypeForEdmType } from \"sap/fe/core/type/EDM\";\n// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport tableFormatters from \"sap/fe/macros/formatters/TableFormatter\";\nimport type Control from \"sap/ui/core/Control\";\nimport type { MDCTablePropertyInfo as PropertyInfo, VisualSettings } from \"sap/ui/mdc/Table\";\n\n// Custom Column from Manifest\ntype ManifestDefinedCustomColumn = CustomDefinedTableColumn & {\n\ttype?: ColumnType.Default;\n};\n\n// Slot Column from Building Block\ntype FragmentDefinedSlotColumn = CustomDefinedTableColumn & {\n\ttype: ColumnType.Slot;\n};\n// Properties all ColumnTypes have:\ntype BaseTableColumn = ConfigurableObject & {\n\ttype: ColumnType; //Origin of the source where we are getting the templated information from\n\twidth?: string;\n\twidthIncludingColumnHeader?: boolean;\n\timportance?: Importance;\n\thorizontalAlign?: HorizontalAlign;\n\tavailability?: AvailabilityType;\n\tisNavigable?: boolean;\n\tcaseSensitive?: boolean;\n\tlabel?: string;\n\ttooltip?: string;\n};\n\n// Properties on Custom Columns and Slot Columns\nexport type CustomBasedTableColumn = BaseTableColumn & {\n\tid: string;\n\tname: string;\n\theader?: string;\n\ttemplate: string | Control;\n\tpropertyInfos?: string[];\n\texportSettings?: ColumnExportSettings | null;\n\tformatOptions: FormatOptionsType;\n\tisGroupable: boolean;\n\tisNavigable: boolean;\n\tsortable: boolean;\n\tvisualSettings: { widthCalculation: null };\n\tproperties?: string[];\n\trequired?: CompiledBindingToolkitExpression;\n};\n\nexport type ComputedTableColumn = BaseTableColumn & {\n\tname: string;\n\tlabel: string;\n\tpropertyKey: string;\n\tisDraftIndicator?: boolean;\n\tisSituationsIndicator?: boolean;\n\tformatOptions?: FormatOptionsType | null;\n\tpropertyInfos?: string[];\n\texportSettings?: ColumnExportSettings | null;\n\tclipboardSettings?: Object | null;\n\trequired?: CompiledBindingToolkitExpression;\n};\n\n// Properties derived from Manifest to override Annotation configurations\ntype AnnotationTableColumnForOverride = BaseTableColumn & {\n\tsettings?: TableColumnSettings;\n\tformatOptions?: FormatOptionsType;\n\texportSettings?: ColumnExportSettings | null;\n};\n\ntype PropertyTypeConstraints = Partial<{\n\tscale: number;\n\tprecision: number;\n\tmaxLength: number;\n\tnullable: boolean;\n\tminimum: string;\n\tmaximum: string;\n\tisDigitSequence: boolean;\n}>;\n\nexport type PropertyTypeFormatOptions = Partial<{\n\tparseAsString: boolean;\n\temptyString: string;\n\tparseKeepsEmptyString: boolean;\n\tstyle: string;\n}>;\n\nexport type PropertyTypeConfig = {\n\ttype?: string;\n\tconstraints: PropertyTypeConstraints;\n\tformatOptions: PropertyTypeFormatOptions;\n\ttypeInstance?: unknown;\n\tbaseType?: string;\n\tclassName?: keyof typeof DefaultTypeForEdmType;\n};\n\nexport type ColumnExportSettings = PropertyInfo[\"exportSettings\"] & {\n\tdataPointTargetValue?: string;\n\tisCurrency?: boolean;\n};\n\n// Properties for Annotation Columns\nexport type AnnotationTableColumn = PropertyInfo &\n\tAnnotationTableColumnForOverride & {\n\t\tname: string;\n\t\tannotationPath: string;\n\t\trelativePath: string;\n\t\ttooltip?: string;\n\t\tgroupLabel?: string;\n\t\tgroup?: string;\n\t\tFieldGroupHiddenExpressions?: CompiledBindingToolkitExpression;\n\t\tshowDataFieldsLabel?: boolean;\n\t\trequired?: CompiledBindingToolkitExpression;\n\t\tisGroupable?: boolean;\n\t\tunitText?: string;\n\t\ttimezoneText?: string;\n\t\ttimezone?: string;\n\t\tsemanticObjectPath?: string;\n\t\ttextArrangement?: {\n\t\t\ttextProperty: string;\n\t\t\tmode: DisplayMode;\n\t\t};\n\t\tadditionalPropertyInfos?: string[];\n\t\ttypeConfig?: PropertyTypeConfig;\n\t\tisPartOfLineItem?: boolean; // temporary indicator to only allow filtering on navigation properties when they're part of a line item\n\t\tisPartOfCustomColumn?: boolean;\n\t\tadditionalLabels?: string[];\n\t\texportDataPointTargetValue?: string;\n\t\textension?: ExtensionForAnalytics;\n\t\tisMultiValue?: boolean;\n\t\tdescriptionProperty?: string;\n\t\tmode?: DisplayMode;\n\t\tvalueProperty?: string;\n\t};\n\nexport type ExtensionForAnalytics = PropertyInfo[\"extension\"] & {\n\tadditionalProperties?: string[];\n};\n\nexport type TableColumn = CustomBasedTableColumn | AnnotationTableColumn | ComputedTableColumn;\n\ntype ManifestColumn = CustomElement<CustomBasedTableColumn | AnnotationTableColumnForOverride>;\n\nexport enum ColumnType {\n\tDefault = \"Default\", // Default Type (Custom Column)\n\tAnnotation = \"Annotation\",\n\tSlot = \"Slot\",\n\tComputed = \"Computed\"\n}\n/**\n * Returns an array of all columns, annotation-based as well as manifest-based.\n * They are sorted and some properties can be overwritten via the manifest (check out the keys that can be overwritten).\n * @param lineItemAnnotation Collection of data fields for representation in a table or list\n * @param tableType The type of the table\n * @param visualizationPath\n * @param converterContext\n * @returns Returns all table columns that should be available, regardless of templating or personalization or their origin\n */\nexport function getTableColumns(\n\tlineItemAnnotation: LineItem,\n\ttableType: TableType,\n\tvisualizationPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): TableColumn[] {\n\tconst annotationColumns = getColumnsFromAnnotations(lineItemAnnotation, tableType, visualizationPath, converterContext);\n\tconst manifestColumns = getColumnsFromManifest(\n\t\tconverterContext.getManifestControlConfiguration<TableManifestConfiguration>(visualizationPath).columns ?? {},\n\t\tannotationColumns,\n\t\tconverterContext,\n\t\tconverterContext.getAnnotationEntityType(lineItemAnnotation)\n\t);\n\n\tconst tableColumns: TableColumn[] = insertCustomElements(\n\t\tannotationColumns as TableColumn[],\n\t\tmanifestColumns as Record<string, CustomElement<TableColumn>>,\n\t\t{\n\t\t\twidth: OverrideType.overwrite,\n\t\t\twidthIncludingColumnHeader: OverrideType.overwrite,\n\t\t\timportance: OverrideType.overwrite,\n\t\t\thorizontalAlign: OverrideType.overwrite,\n\t\t\tavailability: OverrideType.overwrite,\n\t\t\tisNavigable: OverrideType.overwrite,\n\t\t\tsettings: OverrideType.overwrite,\n\t\t\tformatOptions: OverrideType.overwrite,\n\t\t\texportSettings: OverrideType.overwrite\n\t\t}\n\t);\n\n\treturn addComputedColumns(tableColumns, tableType, visualizationPath, converterContext);\n}\n\nexport function findColumnByPath(path: string, tableColumns: TableColumn[]): TableColumn | undefined {\n\treturn tableColumns.find((column) => {\n\t\tconst annotationColumn = column as AnnotationTableColumn;\n\t\treturn annotationColumn.propertyInfos === undefined && annotationColumn.relativePath === path;\n\t});\n}\n\n/**\n * Sets the 'unit', 'textArrangement', 'timezone' and 'exportsettings' properties in columns when necessary.\n * @param converterContext The instance of the converter context\n * @param tableColumns The columns to be updated\n */\nexport function updateLinkedProperties(converterContext: ConverterContext, tableColumns: TableColumn[]): void {\n\tconst dataModelObjectPath = converterContext.getConverterContextFor(converterContext.getContextPath()).getDataModelObjectPath();\n\ttableColumns.forEach((oColumn) => {\n\t\tconst tableColumn = oColumn as AnnotationTableColumn;\n\t\tif (tableColumn.propertyInfos === undefined && tableColumn.relativePath) {\n\t\t\tconst propertyDataModelObjectPath = enhanceDataModelPath<Property>(dataModelObjectPath, tableColumn.relativePath);\n\t\t\tconst property = propertyDataModelObjectPath.targetObject;\n\t\t\tif (property) {\n\t\t\t\taddCurrencyOrUoMToProperty(property, propertyDataModelObjectPath, tableColumns, tableColumn);\n\t\t\t\tconst timezoneProperty = getAssociatedTimezoneProperty(property);\n\t\t\t\tconst timezone = property?.annotations?.Common?.Timezone;\n\t\t\t\tif (timezoneProperty) {\n\t\t\t\t\tconst oTimezoneColumn = findColumnByPath(timezoneProperty.name, tableColumns);\n\t\t\t\t\ttableColumn.timezone = oTimezoneColumn?.name;\n\t\t\t\t} else if (timezone) {\n\t\t\t\t\ttableColumn.timezoneText = timezone.toString();\n\t\t\t\t}\n\t\t\t\taddTextArrangentInfoToProperty(property, propertyDataModelObjectPath, tableColumns, tableColumn);\n\t\t\t}\n\t\t}\n\t});\n}\n\n/**\n * Adds the \"unit\" property into the columns when neccesary for columns with unit of measure and currencies.\n * @param property The property referenced on the column\n * @param propertyDataModelObjectPath The property DataModelObjectPath.\n * @param tableColumns The list of columns displayed on the table\n * @param tableColumn The table column which adds the currency or unit\n */\nfunction addCurrencyOrUoMToProperty(\n\tproperty: Property,\n\tpropertyDataModelObjectPath: DataModelObjectPath<Property>,\n\ttableColumns: TableColumn[],\n\ttableColumn: AnnotationTableColumn\n): void {\n\tconst currencyOrUoMProperty = getAssociatedCurrencyPropertyPath(property) || getAssociatedUnitPropertyPath(property);\n\tif (currencyOrUoMProperty) {\n\t\tconst currencyOrUoMPropertyDataModelObjectPath = enhanceDataModelPath<Property>(propertyDataModelObjectPath, currencyOrUoMProperty);\n\t\tconst currencyOrUoMRelativePath = getContextRelativeTargetObjectPath(currencyOrUoMPropertyDataModelObjectPath);\n\t\tif (currencyOrUoMRelativePath) {\n\t\t\tconst unitColumn = findColumnByPath(currencyOrUoMRelativePath, tableColumns);\n\t\t\ttableColumn.unit = unitColumn?.name;\n\t\t}\n\t} else {\n\t\tconst unit = property?.annotations?.Measures?.ISOCurrency || property?.annotations?.Measures?.Unit;\n\t\tif (unit) {\n\t\t\ttableColumn.unitText = `${unit}`;\n\t\t}\n\t}\n}\n\n/**\n * Add the \"textArrangement\" object to columns when necessary for columns containing text, such as descriptions.\n * @param property The property referenced by the column\n * @param propertyDataModelObjectPath The property DataModelObjectPath.\n * @param tableColumns The list of columns displayed on the table\n * @param tableColumn The table column which adds the text\n */\nfunction addTextArrangentInfoToProperty(\n\tproperty: Property,\n\tpropertyDataModelObjectPath: DataModelObjectPath<Property>,\n\ttableColumns: TableColumn[],\n\ttableColumn: AnnotationTableColumn\n): void {\n\tconst displayMode = getDisplayMode(property),\n\t\ttextPropertyPath = getAssociatedTextPropertyPath(property);\n\tif (textPropertyPath && displayMode !== \"Value\") {\n\t\tconst textPropertyDataModelObjectPath = enhanceDataModelPath<Property>(propertyDataModelObjectPath, textPropertyPath);\n\t\tconst textRelativePath = getContextRelativeTargetObjectPath(textPropertyDataModelObjectPath);\n\t\tif (textRelativePath) {\n\t\t\tconst textColumn = findColumnByPath(textRelativePath, tableColumns);\n\t\t\tif (textColumn && textColumn.name !== tableColumn.name) {\n\t\t\t\ttableColumn.textArrangement = {\n\t\t\t\t\ttextProperty: textColumn.name,\n\t\t\t\t\tmode: displayMode\n\t\t\t\t};\n\t\t\t\t// If text properties are used but hidden, we must include them to the export as there are used in the paste\n\t\t\t\tif (!textColumn.exportSettings) {\n\t\t\t\t\ttextColumn.exportSettings = { type: \"String\" };\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Retrieve the columns from the entityType.\n * @param columnsToBeCreated The columns to be created.\n * @param entityType The target entity type.\n * @param annotationColumns The array of columns created based on LineItem annotations.\n * @param converterContext The converter context.\n * @param tableType The table type.\n * @param tableCreationMode The creation mode of the table.\n * @param displayModeOfDescriptionPropertiesMap The map of properties referenced as description on a text arrangement annotation.\n * @param restrictionsOnProperties The existing restrictions on properties\n * @returns The column from the entityType\n */\nexport const getColumnsFromEntityType = function (\n\tcolumnsToBeCreated: Record<string, Property>,\n\tentityType: EntityType,\n\tannotationColumns: AnnotationTableColumn[],\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\ttableType: TableType,\n\ttableCreationMode: CreationMode,\n\tdisplayModeOfDescriptionPropertiesMap: Record<string, DisplayMode>,\n\trestrictionsOnProperties?: RestrictionsOnProperties\n): AnnotationTableColumn[] {\n\tif (annotationColumns === undefined) {\n\t\tannotationColumns = [];\n\t}\n\n\tlet propertiesNotToBeConsidered: string[] = [];\n\tconst aggregationHelper = new AggregationHelper(entityType, converterContext);\n\tconst groupableProperties = aggregationHelper.getGroupableProperties();\n\t//For Analytical table, we exclude all properties that are not groupable and used as Text in a groupable Property.\n\tif (tableType === \"AnalyticalTable\" && aggregationHelper.isAnalyticsSupported() && groupableProperties) {\n\t\tpropertiesNotToBeConsidered = groupableProperties\n\t\t\t.map((property) => property.$target)\n\t\t\t.filter((target) => target !== undefined)\n\t\t\t.map((target) => getAssociatedTextProperty(target as Property))\n\t\t\t.filter((textProp) => textProp && !aggregationHelper.isPropertyGroupable(textProp))\n\t\t\t.map((prop) => prop?.name)\n\t\t\t.filter((name) => name !== undefined) as string[];\n\t}\n\tentityType.entityProperties.forEach((property: Property) => {\n\t\t// Catch already existing columns - which were added before by LineItem Annotations\n\t\tconst exists = annotationColumns.some((column) => {\n\t\t\treturn column.name === property.name;\n\t\t});\n\t\t// if target type exists, it is a complex property and should be ignored\n\t\tif (!property.targetType && !exists && !propertiesNotToBeConsidered.includes(property.name)) {\n\t\t\tconst relatedPropertiesInfo: ComplexPropertyInfo = collectRelatedProperties(\n\t\t\t\tproperty.name,\n\t\t\t\tproperty,\n\t\t\t\tconverterContext,\n\t\t\t\ttrue,\n\t\t\t\ttableType\n\t\t\t);\n\t\t\tconst relatedPropertyNames: string[] = Object.keys(relatedPropertiesInfo.properties);\n\t\t\tconst additionalPropertyNames: string[] = Object.keys(relatedPropertiesInfo.additionalProperties);\n\t\t\t// Include the text properties and their corresponding text arrangement\n\t\t\trelatedPropertyNames.forEach((name) => {\n\t\t\t\taddPropertyToDisplayModeOfDescriptionPropertiesMap(displayModeOfDescriptionPropertiesMap, relatedPropertiesInfo, name);\n\t\t\t});\n\n\t\t\tconst columnInfo = getColumnDefinitionFromProperty(\n\t\t\t\tproperty,\n\t\t\t\tconverterContext.getEntitySetBasedAnnotationPath(property.fullyQualifiedName),\n\t\t\t\tproperty.name,\n\t\t\t\ttrue,\n\t\t\t\ttrue,\n\t\t\t\taggregationHelper,\n\t\t\t\tconverterContext,\n\t\t\t\tdisplayModeOfDescriptionPropertiesMap,\n\t\t\t\trestrictionsOnProperties,\n\t\t\t\ttableCreationMode,\n\t\t\t\trelatedPropertiesInfo\n\t\t\t);\n\t\t\tif (relatedPropertyNames.length > 0) {\n\t\t\t\tcolumnInfo.propertyInfos = relatedPropertyNames;\n\t\t\t\tif (relatedPropertiesInfo.exportSettings.dataPointTargetValue) {\n\t\t\t\t\tcolumnInfo.exportDataPointTargetValue = relatedPropertiesInfo.exportSettings.dataPointTargetValue;\n\t\t\t\t}\n\t\t\t\t// Collect information of related columns to be created.\n\t\t\t\trelatedPropertyNames.forEach((name) => {\n\t\t\t\t\tcolumnsToBeCreated[name] = relatedPropertiesInfo.properties[name].annotationProperty;\n\t\t\t\t});\n\t\t\t}\n\t\t\t// update Property Label when it's referenced only once in a column, new label will be the label of the column\n\t\t\tupdatePropertyLabel(annotationColumns, columnsToBeCreated, columnInfo);\n\t\t\tif (additionalPropertyNames.length > 0) {\n\t\t\t\tcolumnInfo.additionalPropertyInfos = additionalPropertyNames;\n\t\t\t\t// Create columns for additional properties identified for ALP use case.\n\t\t\t\tadditionalPropertyNames.forEach((additionalPropertyName) => {\n\t\t\t\t\t// Intentional overwrite as we require only one new PropertyInfo for a related Property.\n\t\t\t\t\tcolumnsToBeCreated[additionalPropertyName] = relatedPropertiesInfo.additionalProperties[additionalPropertyName];\n\t\t\t\t});\n\t\t\t}\n\t\t\tannotationColumns.push(columnInfo);\n\t\t}\n\t\t// In case a property has defined a #TextOnly text arrangement that points to a text property (and not a 'hard coded text') don't only create the complex property with the text property as a child property,\n\t\t// but also the property itself as it can be used as within the sortConditions or on custom columns.\n\t\t// This step must be valid also from the columns added via LineItems or from a column available on the p13n.\n\t\tif (getDisplayMode(property) === \"Description\") {\n\t\t\trestrictionsOnProperties?.nonSortableProperties.push(property.name);\n\t\t\tif (isPathAnnotationExpression(property?.annotations?.Common?.Text)) {\n\t\t\t\tannotationColumns.push(\n\t\t\t\t\tgetColumnDefinitionFromProperty(\n\t\t\t\t\t\tproperty,\n\t\t\t\t\t\tconverterContext.getEntitySetBasedAnnotationPath(property.fullyQualifiedName),\n\t\t\t\t\t\tproperty.name,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\taggregationHelper,\n\t\t\t\t\t\tconverterContext,\n\t\t\t\t\t\tdisplayModeOfDescriptionPropertiesMap,\n\t\t\t\t\t\trestrictionsOnProperties,\n\t\t\t\t\t\ttableCreationMode\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t});\n\t// Create a propertyInfo for each related property.\n\tconst relatedColumns = _createRelatedColumns(\n\t\tcolumnsToBeCreated,\n\t\tannotationColumns,\n\t\tconverterContext,\n\t\tentityType,\n\t\tdisplayModeOfDescriptionPropertiesMap,\n\t\ttableCreationMode,\n\t\trestrictionsOnProperties\n\t);\n\treturn annotationColumns.concat(relatedColumns);\n};\n\n/**\n * Create a column definition from a property.\n * @param property Entity type property for which the column is created\n * @param fullPropertyPath The full path to the target property\n * @param relativePath The relative path to the target property based on the context\n * @param useDataFieldPrefix Should be prefixed with \"DataField::\", else it will be prefixed with \"Property::\"\n * @param availableForAdaptation Decides whether the column should be available for adaptation\n * @param aggregationHelper The aggregationHelper for the entity\n * @param converterContext The converter context\n * @param displayModeOfDescriptionPropertiesMap The map of properties referenced as description on a text arrangement annotation\n * @param restrictionsOnProperties The existing restrictions on properties\n * @param tableCreationMode The creation mode of the table\n * @param relatedPropertiesInfo The properties identified so far for the column\n * @param relativePathForMultiValue The MDC path used for the 1:n property to allow filtering from MDC\n * @returns The annotation column definition\n */\nconst getColumnDefinitionFromProperty = function (\n\tproperty: Property,\n\tfullPropertyPath: string,\n\trelativePath: string,\n\tuseDataFieldPrefix: boolean,\n\tavailableForAdaptation: boolean,\n\taggregationHelper: AggregationHelper,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tdisplayModeOfDescriptionPropertiesMap: Record<string, DisplayMode>,\n\trestrictionsOnProperties?: RestrictionsOnProperties,\n\ttableCreationMode?: CreationMode,\n\trelatedPropertiesInfo?: ComplexPropertyInfo,\n\trelativePathForMultiValue?: string\n): AnnotationTableColumn {\n\tconst semanticObjectAnnotationPath = getSemanticObjectPath(converterContext, property);\n\tconst isHidden = isReferencePropertyStaticallyHidden(property);\n\tconst groupPath: string | undefined = property.name ? _sliceAtSlash(property.name, true, false) : undefined;\n\tconst isGroup: boolean = groupPath != property.name;\n\tconst label = getLabel(property, isGroup);\n\tconst dataType = getDataFieldDataType(property);\n\tconst propertyTypeConfig = getTypeConfig(property, dataType);\n\tconst isAPropertyFromTextOnlyAnnotation = displayModeOfDescriptionPropertiesMap[relativePath] === \"Description\";\n\tconst sortable =\n\t\t(!isHidden || isAPropertyFromTextOnlyAnnotation) && !restrictionsOnProperties?.nonSortableProperties.includes(relativePath);\n\tconst filterable = !isAPropertyFromTextOnlyAnnotation && !restrictionsOnProperties?.nonFilterableProperties.includes(relativePath);\n\tconst typeConfig = {\n\t\tclassName: property.type || dataType,\n\t\tformatOptions: propertyTypeConfig.formatOptions,\n\t\tconstraints: propertyTypeConfig.constraints\n\t};\n\tlet exportSettings: PropertyInfo[\"exportSettings\"] = null;\n\tif (_isExportableColumn(property)) {\n\t\texportSettings = createColumnExportSettings(property, relatedPropertiesInfo);\n\t}\n\tconst availability: AvailabilityType =\n\t\t!isHidden && (availableForAdaptation || displayModeOfDescriptionPropertiesMap[relativePath]) ? \"Adaptation\" : \"Hidden\";\n\tconst collectedNavigationPropertyLabels: string[] | undefined = _getCollectedNavigationPropertyLabels(relativePath, converterContext);\n\tif (relativePathForMultiValue) {\n\t\trelativePath = relativePathForMultiValue;\n\t}\n\tconst name = useDataFieldPrefix ? relativePath : `Property::${relativePath}`;\n\tconst key = (useDataFieldPrefix ? \"DataField::\" : \"Property::\") + replaceSpecialChars(relativePath);\n\n\tconst column: AnnotationTableColumn = {\n\t\tkey: key,\n\t\ttype: ColumnType.Annotation,\n\t\tdataType: dataType ?? property.type,\n\t\tlabel: label ?? property.name,\n\t\tgroupLabel: isGroup ? getLabel(property) : undefined,\n\t\tgroup: isGroup ? groupPath : undefined,\n\t\tannotationPath: fullPropertyPath,\n\t\tsemanticObjectPath: semanticObjectAnnotationPath,\n\t\tavailability: availability,\n\t\tname: name,\n\t\trelativePath: relativePath,\n\t\tsortable: sortable,\n\t\tfilterable: filterable,\n\t\tisGroupable: aggregationHelper.isAnalyticsSupported() ? !!aggregationHelper.isPropertyGroupable(property) : sortable,\n\t\tisKey: property.isKey,\n\t\texportSettings: exportSettings,\n\t\tcaseSensitive: isFilteringCaseSensitive(converterContext),\n\t\ttypeConfig: typeConfig as PropertyTypeConfig,\n\t\timportance: getImportance(converterContext, property.annotations?.UI?.DataFieldDefault),\n\t\trequired: isRequiredColumn(converterContext, property, tableCreationMode),\n\t\tadditionalLabels: collectedNavigationPropertyLabels\n\t};\n\t_addToolTip(property, column);\n\t_setExportSettingsForDataPoint(property, column);\n\n\tif (\n\t\taggregationHelper.isAnalyticsSupported() &&\n\t\tModelHelper.isObjectPathDraftSupported(converterContext.getDataModelObjectPath()) &&\n\t\t(relativePath === \"HasActiveEntity\" || relativePath === \"HasDraftEntity\" || relativePath === \"IsActiveEntity\")\n\t) {\n\t\t// In case of analytical table on a draft-enabled entity, we always consider the HasDraftEntity, HasActiveEntity and IsActiveEntity properties as\n\t\t// technically groupable, as we need to load them for our internal logic.\n\t\tcolumn.extension = {\n\t\t\ttechnicallyAggregatable: false,\n\t\t\ttechnicallyGroupable: true\n\t\t};\n\t}\n\treturn column;\n};\n\n/**\n * Create the export settings for a given column.\n * @param column The given column from a line item as a data field or a property from the entity type\n * @param relatedPropertiesInfo The related properties linked to the column (named also complex property)\n * @returns The export settings in a the given column\n */\nconst createColumnExportSettings = function (\n\tcolumn: Property | DataFieldAbstractTypes,\n\trelatedPropertiesInfo?: ComplexPropertyInfo\n): ColumnExportSettings {\n\tlet unitProperty, timezoneProperty, unitText, timezoneText, utc, isATimezone, currencyProperty, scale;\n\tconst relatedPropertyNames = relatedPropertiesInfo ? Object.keys(relatedPropertiesInfo.properties) : [];\n\tif (relatedPropertiesInfo && relatedPropertyNames?.length === 1) {\n\t\t// Create the export settings of a column based on the related (child) property in case there is only one.\n\t\t// This is required when we have a text only annotation to compute the export settings from the text instead of the value\n\t\tcolumn = relatedPropertiesInfo.properties[relatedPropertyNames[0]].annotationProperty;\n\t}\n\tconst dataType = getDataFieldDataType(column);\n\tif (isProperty(column)) {\n\t\tunitProperty = getAssociatedUnitProperty(column);\n\t\tcurrencyProperty = getAssociatedCurrencyProperty(column);\n\t\ttimezoneProperty = getAssociatedTimezoneProperty(column);\n\t\tunitText = getStaticUnitOrCurrency(column);\n\t\ttimezoneText = getStaticTimezone(column);\n\t\tisATimezone = isTimezone(column);\n\t\tscale = column.scale;\n\t}\n\tunitProperty = relatedPropertiesInfo?.exportSettings?.unitProperty ?? unitProperty?.name ?? currencyProperty?.name;\n\ttimezoneProperty = relatedPropertiesInfo?.exportSettings?.timezoneProperty ?? timezoneProperty?.name;\n\tscale = relatedPropertiesInfo?.exportSettings?.scale ?? scale;\n\tconst exportType = getExportDataType(dataType, isATimezone, !!currencyProperty, relatedPropertiesInfo?.exportSettings);\n\tif (timezoneProperty || (exportType === \"DateTime\" && !timezoneText)) {\n\t\tutc = false;\n\t}\n\tconst exportSettings: ColumnExportSettings = {\n\t\ttype: exportType,\n\t\tinputFormat: getDateInputFormat(dataType),\n\t\tdelimiter: getDelimiter(dataType),\n\t\tscale: scale,\n\t\tunitProperty: unitProperty,\n\t\tunit: relatedPropertiesInfo?.exportSettings.unit ?? unitText,\n\t\ttimezoneProperty: timezoneProperty,\n\t\ttimezone: relatedPropertiesInfo?.exportSettings.timezone ?? timezoneText?.toString(),\n\t\ttemplate: relatedPropertiesInfo?.exportSettings.template,\n\t\t//only in case of complex properties, wrap the cell content\ton the excel exported file\n\t\twrap: relatedPropertiesInfo?.exportSettings.wrap,\n\t\tutc: utc\n\t};\n\tif (exportSettings.unitProperty || exportSettings.unit) {\n\t\texportSettings.autoScale = true;\n\t}\n\treturn removeUndefinedFromExportSettings(exportSettings);\n};\n\n/**\n * Gets the export format template for columns with dates.\n * @param dataType The data type of the column\n * @returns The inputFormat\n */\nconst getDateInputFormat = function (dataType?: string): string | undefined {\n\treturn dataType === \"Edm.Date\" ? \"YYYY-MM-DD\" : undefined;\n};\n\n/**\n * Gets the delimiter in numeric columns.\n * The delimiter is used to display thousands separator in numeric columns.\n * @param dataType The data type of the column\n * @returns True to display thousands separator in numeric columns\n */\nconst getDelimiter = function (dataType?: string): boolean | undefined {\n\treturn dataType === \"Edm.Int64\" ? true : undefined;\n};\n\n/**\n * Removes undefined values from the export settings object of a column.\n * @param exportSettings The export settings configurations for a column\n * @returns The export settings configurations without undefined values\n */\nconst removeUndefinedFromExportSettings = function (exportSettings: ColumnExportSettings): ColumnExportSettings {\n\t//Remove undefined settings from exportSetting object\n\tfor (const setting in exportSettings) {\n\t\tif (exportSettings[setting as keyof ColumnExportSettings] === undefined) {\n\t\t\tdelete exportSettings[setting as keyof ColumnExportSettings];\n\t\t}\n\t}\n\treturn exportSettings;\n};\n\n/**\n * Update property label in case it's only referenced in one column. The label of the column must be used instead of the property label.\n * This update also is applied for the tooltip as it is based on the column's label.\n * @param annotationColumns The array of columns created based on LineItem annotations.\n * @param columnsToBeCreated The columns to be created\n * @param columnInfo The column definition\n * @param columnName The name of the column\n */\nfunction updatePropertyLabel(\n\tannotationColumns: AnnotationTableColumn[],\n\tcolumnsToBeCreated: Record<string, Property>,\n\tcolumnInfo: AnnotationTableColumn,\n\tcolumnName?: string\n): void {\n\tconst linkedAnnotationColumns = annotationColumns.filter(\n\t\t(col) => col.propertyInfos?.includes(columnInfo.relativePath) || (columnName && col.propertyInfos?.includes(columnName))\n\t);\n\tif (\n\t\tlinkedAnnotationColumns?.length === 1 &&\n\t\t(columnsToBeCreated[columnInfo.relativePath] || (columnName && columnsToBeCreated[columnName])) &&\n\t\tlinkedAnnotationColumns[0].propertyInfos?.length === 1\n\t) {\n\t\tcolumnInfo.label = linkedAnnotationColumns[0].label;\n\t\tcolumnInfo.tooltip = linkedAnnotationColumns[0].tooltip;\n\t}\n}\n\n/**\n * Returns Boolean true for exportable columns, false for non exportable columns.\n * @param source The dataField or property to be evaluated\n * @returns True for exportable column, false for non exportable column\n */\nfunction _isExportableColumn(source: DataFieldAbstractTypes | Property): boolean {\n\tlet propertyType, property;\n\tconst dataFieldDefaultProperty = (source as Property).annotations.UI?.DataFieldDefault;\n\tif (isProperty(source)) {\n\t\tif (isReferencePropertyStaticallyHidden(source)) {\n\t\t\treturn false;\n\t\t}\n\t\tpropertyType = dataFieldDefaultProperty?.$Type;\n\t} else if (isReferencePropertyStaticallyHidden(source)) {\n\t\treturn false;\n\t} else {\n\t\tproperty = source;\n\t\tpropertyType = property.$Type;\n\t\tif (propertyType === UIAnnotationTypes.DataFieldForAnnotation && (property as DataFieldForAnnotation).Target?.$target?.$Type) {\n\t\t\t//For Chart\n\t\t\tpropertyType = (property as DataFieldForAnnotation).Target?.$target?.$Type;\n\t\t\treturn propertyType !== undefined && !UIAnnotationTypes.ChartDefinitionType.includes(propertyType);\n\t\t} else if (\n\t\t\t(property as DataField).Value?.$target?.annotations?.Core?.MediaType?.term === \"Org.OData.Core.V1.MediaType\" &&\n\t\t\t(property as DataField).Value?.$target?.annotations?.Core?.isURL !== true\n\t\t) {\n\t\t\t//For Stream\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn propertyType\n\t\t? ![\n\t\t\t\tUIAnnotationTypes.DataFieldForAction,\n\t\t\t\tUIAnnotationTypes.DataFieldForIntentBasedNavigation,\n\t\t\t\tUIAnnotationTypes.DataFieldForActionGroup\n\t\t  ].includes(propertyType)\n\t\t: true;\n}\n\n/**\n * Returns Boolean true for valid columns, false for invalid columns.\n * @param dataField Different DataField types defined in the annotations\n * @returns True for valid columns, false for invalid columns\n */\nconst _isValidColumn = function (dataField: DataFieldAbstractTypes): boolean {\n\tswitch (dataField.$Type) {\n\t\tcase UIAnnotationTypes.DataFieldForAction:\n\t\tcase UIAnnotationTypes.DataFieldForIntentBasedNavigation:\n\t\t\treturn !!dataField.Inline;\n\t\tcase UIAnnotationTypes.DataFieldWithAction:\n\t\tcase UIAnnotationTypes.DataFieldWithIntentBasedNavigation:\n\t\tcase UIAnnotationTypes.DataField:\n\t\tcase UIAnnotationTypes.DataFieldWithUrl:\n\t\tcase UIAnnotationTypes.DataFieldForAnnotation:\n\t\tcase UIAnnotationTypes.DataFieldWithNavigationPath:\n\t\t\treturn true;\n\t\tdefault:\n\t\t\t// Todo: Replace with proper Log statement once available\n\t\t\t//  throw new Error(\"Unhandled DataField Abstract type: \" + dataField.$Type);\n\t\t\treturn false;\n\t}\n};\n\n/**\n * Returns the binding expression to evaluate the visibility of a DataField or DataPoint annotation.\n *\n * SAP Fiori elements will evaluate either the UI.Hidden annotation defined on the annotation itself or on the target property.\n * @param dataFieldModelPath The metapath referring to the annotation that is evaluated by SAP Fiori elements.\n * @returns An expression that you can bind to the UI.\n */\nconst _getVisibleExpression = function (\n\tdataFieldModelPath: DataModelObjectPath<DataFieldAbstractTypes | DataPointTypeTypes>\n): BindingToolkitExpression<boolean> {\n\tconst targetObject = dataFieldModelPath.targetObject;\n\tlet propertyValue;\n\tif (targetObject) {\n\t\tswitch (targetObject.$Type) {\n\t\t\tcase UIAnnotationTypes.DataField:\n\t\t\tcase UIAnnotationTypes.DataFieldWithUrl:\n\t\t\tcase UIAnnotationTypes.DataFieldWithNavigationPath:\n\t\t\tcase UIAnnotationTypes.DataFieldWithIntentBasedNavigation:\n\t\t\tcase UIAnnotationTypes.DataFieldWithAction:\n\t\t\tcase UIAnnotationTypes.DataPointType:\n\t\t\t\tpropertyValue = targetObject.Value.$target;\n\t\t\t\tbreak;\n\t\t\tcase UIAnnotationTypes.DataFieldForAnnotation:\n\t\t\t\t// if it is a DataFieldForAnnotation pointing to a DataPoint we look at the dataPoint's value\n\t\t\t\tif (targetObject?.Target?.$target?.$Type === UIAnnotationTypes.DataPointType) {\n\t\t\t\t\tpropertyValue = targetObject.Target.$target?.Value.$target;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase UIAnnotationTypes.DataFieldForIntentBasedNavigation:\n\t\t\tcase UIAnnotationTypes.DataFieldForAction:\n\t\t\tdefault:\n\t\t\t\tpropertyValue = undefined;\n\t\t}\n\t}\n\tconst isAnalyticalGroupHeaderExpanded = /*formatOptions?.isAnalytics ? UI.IsExpanded :*/ constant(false);\n\tconst isAnalyticalLeaf = /*formatOptions?.isAnalytics ? equal(UI.NodeLevel, 0) :*/ constant(false);\n\t// A data field is visible if:\n\t// - the UI.Hidden expression in the original annotation does not evaluate to 'true'\n\t// - the UI.Hidden expression in the target property does not evaluate to 'true'\n\t// - in case of Analytics it's not visible for an expanded GroupHeader\n\treturn and(\n\t\t...[\n\t\t\tnot(equal(getExpressionFromAnnotation(targetObject?.annotations?.UI?.Hidden), true)),\n\t\t\tifElse(\n\t\t\t\t!!propertyValue,\n\t\t\t\tpropertyValue && not(equal(getExpressionFromAnnotation(propertyValue.annotations?.UI?.Hidden), true)),\n\t\t\t\ttrue\n\t\t\t),\n\t\t\tor(not(isAnalyticalGroupHeaderExpanded), isAnalyticalLeaf)\n\t\t]\n\t);\n};\n\n/**\n * Returns hidden binding expressions for a field group.\n * @param dataFieldGroup DataField defined in the annotations\n * @returns Compile binding of field group expressions.\n */\nconst _getFieldGroupHiddenExpressions = function (dataFieldGroup: DataFieldAbstractTypes): CompiledBindingToolkitExpression | undefined {\n\tconst fieldGroupHiddenExpressions: BindingToolkitExpression<boolean>[] = [];\n\tif (\n\t\tdataFieldGroup.$Type === UIAnnotationTypes.DataFieldForAnnotation &&\n\t\tdataFieldGroup.Target?.$target?.$Type === UIAnnotationTypes.FieldGroupType\n\t) {\n\t\tif (dataFieldGroup?.annotations?.UI?.Hidden) {\n\t\t\treturn compileExpression(not(equal(getExpressionFromAnnotation(dataFieldGroup.annotations.UI.Hidden), true)));\n\t\t} else {\n\t\t\tdataFieldGroup.Target.$target.Data?.forEach((innerDataField: DataFieldAbstractTypes | DataPointTypeTypes) => {\n\t\t\t\tfieldGroupHiddenExpressions.push(\n\t\t\t\t\t_getVisibleExpression({ targetObject: innerDataField } as DataModelObjectPath<\n\t\t\t\t\t\tDataFieldAbstractTypes | DataPointTypeTypes\n\t\t\t\t\t>)\n\t\t\t\t);\n\t\t\t});\n\t\t\treturn compileExpression(ifElse(or(...fieldGroupHiddenExpressions), constant(true), constant(false)));\n\t\t}\n\t} else {\n\t\treturn undefined;\n\t}\n};\n\n/**\n * Returns the label for the property and dataField.\n * @param [property] Property, DataField or Navigation Property defined in the annotations\n * @param isGroup\n * @returns Label of the property or DataField\n */\nconst getLabel = function (property: DataFieldAbstractTypes | Property | NavigationProperty, isGroup = false): string | undefined {\n\tif (!property) {\n\t\treturn undefined;\n\t}\n\tif (isProperty(property) || isNavigationProperty(property)) {\n\t\tconst dataFieldDefault = (property as Property).annotations?.UI?.DataFieldDefault;\n\t\tif (dataFieldDefault && !dataFieldDefault.qualifier && dataFieldDefault.Label) {\n\t\t\treturn dataFieldDefault.Label?.toString();\n\t\t}\n\t\treturn property.annotations.Common?.Label?.toString() ?? property.name;\n\t} else if (isDataFieldTypes(property)) {\n\t\tif (!!isGroup && property.$Type === UIAnnotationTypes.DataFieldWithIntentBasedNavigation) {\n\t\t\treturn property?.Label?.toString();\n\t\t}\n\t\treturn (\n\t\t\tproperty?.Label?.toString() ??\n\t\t\tcompileExpression(\n\t\t\t\tgetExpressionFromAnnotation(property.Value?.$target?.annotations?.Common?.Label, [], property.Value?.$target?.name)\n\t\t\t)\n\t\t);\n\t} else if (property.$Type === UIAnnotationTypes.DataFieldForAnnotation) {\n\t\treturn (\n\t\t\tproperty.Label?.toString() ??\n\t\t\tcompileExpression(\n\t\t\t\tgetExpressionFromAnnotation((property.Target?.$target as DataPoint)?.Value?.$target?.annotations?.Common?.Label?.valueOf())\n\t\t\t)\n\t\t);\n\t} else {\n\t\treturn property.Label?.toString();\n\t}\n};\n\nconst _getTooltip = function (source: DataFieldAbstractTypes | Property): string | undefined {\n\tif (!source) {\n\t\treturn undefined;\n\t}\n\tif (isProperty(source) || source.annotations?.Common?.QuickInfo) {\n\t\treturn source.annotations?.Common?.QuickInfo\n\t\t\t? compileExpression(getExpressionFromAnnotation(source.annotations.Common.QuickInfo))\n\t\t\t: undefined;\n\t} else if (isDataFieldTypes(source)) {\n\t\treturn source.Value?.$target?.annotations?.Common?.QuickInfo\n\t\t\t? compileExpression(getExpressionFromAnnotation(source.Value.$target.annotations.Common.QuickInfo))\n\t\t\t: undefined;\n\t} else if (source.$Type === UIAnnotationTypes.DataFieldForAnnotation) {\n\t\tconst datapointTarget = source.Target?.$target as DataPoint;\n\t\treturn datapointTarget?.Value?.$target?.annotations?.Common?.QuickInfo\n\t\t\t? compileExpression(getExpressionFromAnnotation(datapointTarget.Value.$target.annotations.Common.QuickInfo))\n\t\t\t: undefined;\n\t} else {\n\t\treturn undefined;\n\t}\n};\n\nexport function getRowStatusVisibility(colName: string, isSemanticKeyInFieldGroup?: boolean): BindingToolkitExpression<boolean> {\n\treturn formatResult(\n\t\t[\n\t\t\tpathInModel(`semanticKeyHasDraftIndicator`, \"internal\"),\n\t\t\tpathInModel(`filteredMessages`, \"internal\"),\n\t\t\tcolName,\n\t\t\tisSemanticKeyInFieldGroup\n\t\t],\n\t\ttableFormatters.getErrorStatusTextVisibilityFormatter\n\t);\n}\n\n/**\n * Creates a PropertyInfo for each identified property consumed by a LineItem.\n * @param columnsToBeCreated Identified properties.\n * @param existingColumns The list of columns created for LineItems and Properties of entityType.\n * @param converterContext The converter context.\n * @param entityType The entity type for the LineItem\n * @param displayModeOfDescriptionPropertiesMap The map of properties referenced as text on a text arrangement annotation.\n * @param tableCreationMode The creation mode of the table\n * @param restrictionsOnProperties The existing restrictions on properties\n * @returns The array of columns created.\n */\nconst _createRelatedColumns = function (\n\tcolumnsToBeCreated: Record<string, Property>,\n\texistingColumns: AnnotationTableColumn[],\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tentityType: EntityType,\n\tdisplayModeOfDescriptionPropertiesMap: Record<string, DisplayMode>,\n\ttableCreationMode?: CreationMode,\n\trestrictionsOnProperties?: RestrictionsOnProperties\n): AnnotationTableColumn[] {\n\tconst relatedColumns: AnnotationTableColumn[] = [];\n\tconst relatedPropertyNameMap: Record<string, string> = {};\n\tconst aggregationHelper = new AggregationHelper(entityType, converterContext);\n\tObject.keys(columnsToBeCreated).forEach((name) => {\n\t\tconst property = columnsToBeCreated[name],\n\t\t\tannotationPath = converterContext.getAbsoluteAnnotationPath(name),\n\t\t\t// Check whether the related column already exists.\n\t\t\trelatedColumn = existingColumns.find((column) => column.name === name);\n\t\tconst dataModelObjectPath = converterContext.getConverterContextFor(converterContext.getContextPath()).getDataModelObjectPath();\n\t\tconst propertyObjectPath = enhanceDataModelPath<PageContextPathTarget>(dataModelObjectPath, name);\n\t\tif (isMultiValueField(propertyObjectPath)) {\n\t\t\tconst newNameRelativeTargetPath = getContextRelativeTargetObjectPath(propertyObjectPath, false, true);\n\t\t\tconst column = getColumnDefinitionFromProperty(\n\t\t\t\tproperty,\n\t\t\t\tannotationPath,\n\t\t\t\tname,\n\t\t\t\ttrue,\n\t\t\t\tfalse,\n\t\t\t\taggregationHelper,\n\t\t\t\tconverterContext,\n\t\t\t\tdisplayModeOfDescriptionPropertiesMap,\n\t\t\t\trestrictionsOnProperties,\n\t\t\t\ttableCreationMode,\n\t\t\t\tundefined,\n\t\t\t\tnewNameRelativeTargetPath\n\t\t\t);\n\t\t\tcomputeHiddenOnRelatedColumns(existingColumns, name, column);\n\t\t\tupdatePropertyLabel(existingColumns, columnsToBeCreated, column, name);\n\t\t\trelatedColumns.push(column);\n\t\t\trelatedPropertyNameMap[name] = newNameRelativeTargetPath ?? name;\n\t\t} else if (relatedColumn === undefined) {\n\t\t\t// Case 1: Key contains DataField prefix to ensure all property columns have the same key format.\n\t\t\t// New created property column is set to hidden.\n\t\t\tconst column = getColumnDefinitionFromProperty(\n\t\t\t\tproperty,\n\t\t\t\tannotationPath,\n\t\t\t\tname,\n\t\t\t\ttrue,\n\t\t\t\tfalse,\n\t\t\t\taggregationHelper,\n\t\t\t\tconverterContext,\n\t\t\t\tdisplayModeOfDescriptionPropertiesMap,\n\t\t\t\trestrictionsOnProperties,\n\t\t\t\ttableCreationMode\n\t\t\t);\n\t\t\tcomputeHiddenOnRelatedColumns(existingColumns, name, column);\n\t\t\tupdatePropertyLabel(existingColumns, columnsToBeCreated, column);\n\t\t\trelatedColumns.push(column);\n\t\t} else if (relatedColumn.annotationPath !== annotationPath || relatedColumn.propertyInfos) {\n\t\t\t// Case 2: The existing column points to a LineItem (or)\n\t\t\t// Case 3: This is a self reference from an existing column\n\t\t\tconst newName = `Property::${name}`;\n\t\t\t// Checking whether the related property column has already been created in a previous iteration.\n\t\t\tif (!existingColumns.some((column) => column.name === newName)) {\n\t\t\t\t// Create a new property column with 'Property::' prefix,\n\t\t\t\t// Set it to hidden as it is only consumed by Complex property infos.\n\t\t\t\tconst column = getColumnDefinitionFromProperty(\n\t\t\t\t\tproperty,\n\t\t\t\t\tannotationPath,\n\t\t\t\t\tname,\n\t\t\t\t\tfalse,\n\t\t\t\t\tfalse,\n\t\t\t\t\taggregationHelper,\n\t\t\t\t\tconverterContext,\n\t\t\t\t\tdisplayModeOfDescriptionPropertiesMap,\n\t\t\t\t\trestrictionsOnProperties,\n\t\t\t\t\ttableCreationMode\n\t\t\t\t);\n\t\t\t\tcomputeHiddenOnRelatedColumns(existingColumns, name, column);\n\t\t\t\tupdatePropertyLabel(existingColumns, columnsToBeCreated, column);\n\t\t\t\trelatedColumns.push(column);\n\t\t\t\trelatedPropertyNameMap[name] = newName;\n\t\t\t} else if (\n\t\t\t\texistingColumns.some((column) => column.name === newName) &&\n\t\t\t\texistingColumns.some((column) => column.propertyInfos?.includes(name))\n\t\t\t) {\n\t\t\t\trelatedPropertyNameMap[name] = newName;\n\t\t\t}\n\t\t} else if (\n\t\t\tdisplayModeOfDescriptionPropertiesMap[name] === \"Description\" &&\n\t\t\t!relatedColumn.filterable &&\n\t\t\t!restrictionsOnProperties?.nonFilterableProperties.includes(name)\n\t\t) {\n\t\t\t// Case 4: The column is a referenced text only property. Set it to hidden, non sortable nor groupable.\n\t\t\t// Case 5: The column isn't already available for filtering as it could be referenced on another column (e.g. text first).\n\t\t\trestrictionsOnProperties?.nonSortableProperties.push(name);\n\t\t\tconst column = getColumnDefinitionFromProperty(\n\t\t\t\tproperty,\n\t\t\t\tannotationPath,\n\t\t\t\tname,\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t\taggregationHelper,\n\t\t\t\tconverterContext,\n\t\t\t\t{},\n\t\t\t\trestrictionsOnProperties,\n\t\t\t\ttableCreationMode\n\t\t\t);\n\t\t\tcolumn.isGroupable = false;\n\t\t\trelatedColumns.push(column);\n\t\t}\n\t});\n\t// The property 'name' has been prefixed with 'Property::' for uniqueness.\n\t// Update the same in other propertyInfos[] references which point to this property.\n\texistingColumns.forEach((column) => {\n\t\tcolumn.propertyInfos = column.propertyInfos?.map((propertyInfo) => relatedPropertyNameMap[propertyInfo] ?? propertyInfo);\n\t\tcolumn.additionalPropertyInfos = column.additionalPropertyInfos?.map(\n\t\t\t(propertyInfo) => relatedPropertyNameMap[propertyInfo] ?? propertyInfo\n\t\t);\n\t});\n\treturn relatedColumns;\n};\n\n/**\n * Getting the Column Name\n * If it points to a DataField with one property or DataPoint with one property, it will use the property name\n * here to be consistent with the existing flex changes.\n * @param dataField Different DataField types defined in the annotations\n * @returns The name of annotation columns\n */\nconst _getAnnotationColumnName = function (dataField: DataFieldAbstractTypes): string {\n\t// This is needed as we have flexibility changes already that we have to check against\n\tif (isDataFieldTypes(dataField) && dataField.Value?.path) {\n\t\treturn dataField.Value?.path;\n\t} else if (dataField.$Type === UIAnnotationTypes.DataFieldForAnnotation && (dataField.Target?.$target as DataPoint)?.Value?.path) {\n\t\t// This is for removing duplicate properties. For example, 'Progress' Property is removed if it is already defined as a DataPoint\n\t\treturn (dataField.Target?.$target as DataPoint)?.Value.path;\n\t} else {\n\t\treturn KeyHelper.generateKeyFromDataField(dataField);\n\t}\n};\n\n/**\n * Determines if the data field labels have to be displayed in the table.\n * @param fieldGroupName The `DataField` name being processed.\n * @param visualizationPath\n * @param converterContext\n * @returns `showDataFieldsLabel` value from the manifest\n */\nconst _getShowDataFieldsLabel = function (\n\tfieldGroupName: string,\n\tvisualizationPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): boolean | undefined {\n\tconst columns = converterContext.getManifestControlConfiguration<TableManifestConfiguration>(visualizationPath)?.columns;\n\tconst columnKeys = columns && Object.keys(columns);\n\treturn (\n\t\tcolumnKeys &&\n\t\t!!columnKeys.find(function (key: string) {\n\t\t\treturn key === fieldGroupName && (columns[key] as CustomDefinedTableColumnForOverride).showDataFieldsLabel;\n\t\t})\n\t);\n};\n\n/**\n * Determines the relative path of the property with respect to the root entity.\n * @param dataField The `DataField` being processed.\n * @returns The relative path\n */\nconst _getRelativePath = function (dataField: DataFieldAbstractTypes): string {\n\tlet relativePath = \"\";\n\tswitch (dataField.$Type) {\n\t\tcase UIAnnotationTypes.DataField:\n\t\tcase UIAnnotationTypes.DataFieldWithNavigationPath:\n\t\tcase UIAnnotationTypes.DataFieldWithUrl:\n\t\tcase UIAnnotationTypes.DataFieldWithIntentBasedNavigation:\n\t\tcase UIAnnotationTypes.DataFieldWithAction:\n\t\t\trelativePath = (dataField as DataField)?.Value?.path;\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.DataFieldForAnnotation:\n\t\t\trelativePath = dataField?.Target?.value;\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.DataFieldForAction:\n\t\tcase UIAnnotationTypes.DataFieldForIntentBasedNavigation:\n\t\tcase UIAnnotationTypes.DataFieldForActionGroup:\n\t\tcase UIAnnotationTypes.DataFieldWithActionGroup:\n\t\t\trelativePath = KeyHelper.generateKeyFromDataField(dataField);\n\t\t\tbreak;\n\t}\n\treturn relativePath;\n};\n\nconst _sliceAtSlash = function (path: string, isLastSlash: boolean, isLastPart: boolean): string {\n\tconst iSlashIndex = isLastSlash ? path.lastIndexOf(\"/\") : path.indexOf(\"/\");\n\tif (iSlashIndex === -1) {\n\t\treturn path;\n\t}\n\treturn isLastPart ? path.substring(iSlashIndex + 1, path.length) : path.substring(0, iSlashIndex);\n};\n\n/**\n * Determines if the column contains a multi-value field.\n * @param dataField The DataField being processed\n * @param converterContext The converter context\n * @returns True if the DataField corresponds to a multi-value field.\n */\nconst _isColumnMultiValued = function (\n\tdataField: DataFieldAbstractTypes,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): boolean {\n\tif (isDataFieldTypes(dataField) && isPathAnnotationExpression(dataField.Value)) {\n\t\tconst propertyObjectPath = enhanceDataModelPath<PageContextPathTarget>(\n\t\t\tconverterContext.getDataModelObjectPath(),\n\t\t\tdataField.Value.path\n\t\t);\n\t\treturn isMultiValueField(propertyObjectPath);\n\t} else {\n\t\treturn false;\n\t}\n};\n\n/**\n * Determine whether a column is sortable.\n * @param dataField The data field being processed\n * @param propertyPath The property path\n * @param nonSortableColumns Collection of non-sortable column names as per annotation\n * @param relatedPropertiesInfo The related properties linked to the column\n * @returns True if the column is sortable\n */\nconst _isColumnSortable = function (\n\tdataField: DataFieldAbstractTypes,\n\tpropertyPath: string,\n\tnonSortableColumns: string[],\n\trelatedPropertiesInfo: ComplexPropertyInfo\n): boolean {\n\treturn (\n\t\t!nonSortableColumns.includes(propertyPath) && // Column is not marked as non-sortable via annotation\n\t\t(((dataField.$Type === UIAnnotationTypes.DataField || dataField.$Type === UIAnnotationTypes.DataFieldForAnnotation) &&\n\t\t\tObject.keys(relatedPropertiesInfo.properties).some((propName) => {\n\t\t\t\tconst isHidden = isReferencePropertyStaticallyHidden(relatedPropertiesInfo.properties[propName].annotationProperty);\n\t\t\t\treturn !isHidden && !nonSortableColumns.includes(propName);\n\t\t\t})) ||\n\t\t\tdataField.$Type === UIAnnotationTypes.DataFieldWithUrl ||\n\t\t\tdataField.$Type === UIAnnotationTypes.DataFieldWithIntentBasedNavigation ||\n\t\t\tdataField.$Type === UIAnnotationTypes.DataFieldWithAction)\n\t);\n};\n\n/**\n * Returns whether filtering on the table is case sensitive.\n * @param converterContext The instance of the converter context\n * @returns Returns 'false' if FilterFunctions annotation supports 'tolower', else 'true'\n */\nexport const isFilteringCaseSensitive = function (converterContext: ConverterContext<PageContextPathTarget>): boolean {\n\tconst filterFunctions: FilterFunctions | undefined = _getFilterFunctions(converterContext);\n\treturn ModelHelper.isFilteringCaseSensitive(undefined, filterFunctions);\n};\n\nfunction _getFilterFunctions(ConverterContext: ConverterContext<PageContextPathTarget>): FilterFunctions | undefined {\n\tconst entitySet = ConverterContext.getEntitySet();\n\tif (TypeGuards.isEntitySet(entitySet)) {\n\t\treturn (\n\t\t\tentitySet.annotations.Capabilities?.FilterFunctions ??\n\t\t\tConverterContext.getEntityContainer().annotations.Capabilities?.FilterFunctions\n\t\t);\n\t}\n\treturn undefined;\n}\n\n/**\n * Returns default format options for text fields in a table.\n * @param formatOptions\n * @returns Collection of format options with default values\n */\nfunction _getDefaultFormatOptionsForTable(formatOptions: FormatOptionsType | undefined): FormatOptionsType | undefined {\n\treturn formatOptions === undefined\n\t\t? undefined\n\t\t: {\n\t\t\t\ttextLinesEdit: 4,\n\t\t\t\t...formatOptions\n\t\t  };\n}\n\nfunction _findSemanticKeyValues(semanticKeys: SemanticKey, name: string): { values: string[]; semanticKeyFound: boolean } {\n\tconst aSemanticKeyValues: string[] = [];\n\tlet bSemanticKeyFound = false;\n\tfor (let i = 0; i < semanticKeys.length; i++) {\n\t\taSemanticKeyValues.push(semanticKeys[i].value);\n\t\tif (semanticKeys[i].value === name) {\n\t\t\tbSemanticKeyFound = true;\n\t\t}\n\t}\n\treturn {\n\t\tvalues: aSemanticKeyValues,\n\t\tsemanticKeyFound: bSemanticKeyFound\n\t};\n}\n\nfunction _findProperties(\n\tsemanticKeyValues: string[],\n\tfieldGroupProperties: string[]\n): { semanticKeyHasPropertyInFieldGroup: boolean; fieldGroupPropertyPath?: string } {\n\tlet semanticKeyHasPropertyInFieldGroup = false;\n\tlet sPropertyPath;\n\tif (semanticKeyValues && semanticKeyValues.length >= 1 && fieldGroupProperties && fieldGroupProperties.length >= 1) {\n\t\tfor (let i = 0; i < semanticKeyValues.length; i++) {\n\t\t\tif ([semanticKeyValues[i]].some((tmp) => fieldGroupProperties.includes(tmp))) {\n\t\t\t\tsemanticKeyHasPropertyInFieldGroup = true;\n\t\t\t\tsPropertyPath = semanticKeyValues[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn {\n\t\tsemanticKeyHasPropertyInFieldGroup: semanticKeyHasPropertyInFieldGroup,\n\t\tfieldGroupPropertyPath: sPropertyPath\n\t};\n}\n\n/**\n * Find the first property in the fieldGroup that is part of the semantic keys.\n * @param dataFieldGroup\n * @param semanticKeyValues\n * @returns An object containing a flag true if a property is found and a propertyPath.\n */\nfunction _findSemanticKeyValuesInFieldGroup(\n\tdataFieldGroup: DataFieldAbstractTypes | null,\n\tsemanticKeyValues: string[]\n): { semanticKeyHasPropertyInFieldGroup: boolean; propertyPath?: string } {\n\t// this info is used in FieldHelper#isDraftIndicatorVisibleInFieldGroup to show a draft indicator at the end of a field group\n\tconst aProperties: string[] = [];\n\tlet _propertiesFound: { semanticKeyHasPropertyInFieldGroup: boolean; fieldGroupPropertyPath?: string } = {\n\t\tsemanticKeyHasPropertyInFieldGroup: false,\n\t\tfieldGroupPropertyPath: undefined\n\t};\n\tif (\n\t\tdataFieldGroup &&\n\t\tdataFieldGroup.$Type === UIAnnotationTypes.DataFieldForAnnotation &&\n\t\tdataFieldGroup.Target?.$target?.$Type === UIAnnotationTypes.FieldGroupType\n\t) {\n\t\tdataFieldGroup.Target.$target.Data?.forEach((innerDataField: DataFieldAbstractTypes) => {\n\t\t\tif (\n\t\t\t\t(innerDataField.$Type === UIAnnotationTypes.DataField || innerDataField.$Type === UIAnnotationTypes.DataFieldWithUrl) &&\n\t\t\t\tinnerDataField.Value\n\t\t\t) {\n\t\t\t\taProperties.push(innerDataField.Value.path);\n\t\t\t}\n\t\t\t_propertiesFound = _findProperties(semanticKeyValues, aProperties);\n\t\t});\n\t}\n\treturn {\n\t\tsemanticKeyHasPropertyInFieldGroup: _propertiesFound.semanticKeyHasPropertyInFieldGroup,\n\t\tpropertyPath: _propertiesFound.fieldGroupPropertyPath\n\t};\n}\n\n/**\n * Returns default format options with draftIndicator for a column.\n * @param name\n * @param semanticKeys\n * @param dataFieldGroup\n * @returns Collection of format options with default values\n */\nfunction getDefaultDraftIndicatorForColumn(\n\tname: string,\n\tsemanticKeys: SemanticKey,\n\tdataFieldGroup: DataFieldAbstractTypes | null\n): Partial<{\n\tfieldGroupDraftIndicatorPropertyPath: string;\n\tfieldGroupName: string;\n\tshowErrorObjectStatus: CompiledBindingToolkitExpression;\n\thasDraftIndicator: boolean;\n}> {\n\tif (!semanticKeys) {\n\t\treturn {};\n\t}\n\tconst semanticKey = _findSemanticKeyValues(semanticKeys, name);\n\tconst semanticKeyInFieldGroup = _findSemanticKeyValuesInFieldGroup(dataFieldGroup, semanticKey.values);\n\tif (semanticKeyInFieldGroup.semanticKeyHasPropertyInFieldGroup) {\n\t\t// Semantic Key has a property in a FieldGroup\n\t\treturn {\n\t\t\t//TODO we should rather store hasSemanticKeyInFieldGroup\n\t\t\tfieldGroupDraftIndicatorPropertyPath: semanticKeyInFieldGroup.propertyPath,\n\t\t\tfieldGroupName: name,\n\t\t\tshowErrorObjectStatus: compileExpression(getRowStatusVisibility(name, true))\n\t\t};\n\t} else if (semanticKey.semanticKeyFound) {\n\t\treturn {\n\t\t\thasDraftIndicator: true,\n\t\t\tshowErrorObjectStatus: compileExpression(getRowStatusVisibility(name, false))\n\t\t};\n\t}\n\treturn {};\n}\n\nfunction _getImpNumber(dataField: DataFieldTypes): number {\n\tconst importance = dataField?.annotations?.UI?.Importance as string;\n\tif (importance && importance.includes(\"UI.ImportanceType/High\")) {\n\t\treturn 3;\n\t}\n\tif (importance && importance.includes(\"UI.ImportanceType/Medium\")) {\n\t\treturn 2;\n\t}\n\tif (importance && importance.includes(\"UI.ImportanceType/Low\")) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nfunction _getDataFieldImportance(dataField: DataFieldTypes): Importance {\n\tconst importance = dataField?.annotations?.UI?.Importance as string;\n\treturn importance ? (importance.split(\"/\")[1] as Importance) : Importance.None;\n}\n\n/**\n * Sets the export settings of a column containing datapoints.\n * @param property The property referenced on a given column\n * @param column The column to be updated\n */\nfunction _setExportSettingsForDataPoint(property: Property, column: AnnotationTableColumn): void {\n\tconst targetValuefromDP = getTargetValueOnDataPoint(property);\n\tif (\n\t\tisDataPointFromDataFieldDefault(property) &&\n\t\ttypeof targetValuefromDP === \"string\" &&\n\t\tcolumn.exportSettings &&\n\t\tcolumn.exportSettings?.unit !== \"%\"\n\t) {\n\t\tcolumn.exportDataPointTargetValue = targetValuefromDP;\n\t\tcolumn.exportSettings.template = \"{0}/\" + targetValuefromDP;\n\t}\n}\n\nfunction _getMaxImportance(fields: DataFieldTypes[]): Importance {\n\tif (fields && fields.length > 0) {\n\t\tlet maxImpNumber = -1;\n\t\tlet impNumber = -1;\n\t\tlet DataFieldWithMaxImportance;\n\t\tfor (const field of fields) {\n\t\t\timpNumber = _getImpNumber(field);\n\t\t\tif (impNumber > maxImpNumber) {\n\t\t\t\tmaxImpNumber = impNumber;\n\t\t\t\tDataFieldWithMaxImportance = field;\n\t\t\t}\n\t\t}\n\t\treturn _getDataFieldImportance(DataFieldWithMaxImportance as DataFieldTypes);\n\t}\n\treturn Importance.None;\n}\n\n/**\n * Returns the importance value for a column.\n * @param converterContext\n * @param dataField\n * @returns The importance value\n */\nexport function getImportance(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tdataField: DataFieldAbstractTypes | undefined\n): Importance | undefined {\n\tif (!dataField) {\n\t\treturn undefined;\n\t}\n\tconst semanticKeys = converterContext.getDataModelObjectPath().targetEntityType.annotations.Common?.SemanticKey ?? [];\n\tconst requiredProperties = getRequiredProperties(converterContext);\n\tconst highKeys = [...semanticKeys, ...requiredProperties].map((propertyPath) => propertyPath.$target?.fullyQualifiedName);\n\t//Evaluate default Importance is not set explicitly\n\tlet fieldsWithImportance;\n\tif (isAnnotationOfType<DataFieldForAnnotation>(dataField, UIAnnotationTypes.DataFieldForAnnotation)) {\n\t\tconst dataFieldTarget = dataField.Target.$target;\n\t\tif (isAnnotationOfType<FieldGroup>(dataFieldTarget, UIAnnotationTypes.FieldGroupType)) {\n\t\t\tconst fieldGroupData = dataFieldTarget.Data;\n\t\t\t//If a FieldGroup contains a semanticKey or required property, importance set to High\n\t\t\tif (\n\t\t\t\tfieldGroupData.some(function (fieldGroupDataField: DataFieldAbstractTypes): boolean {\n\t\t\t\t\treturn (\n\t\t\t\t\t\tisDataFieldTypes(fieldGroupDataField) && highKeys.includes(fieldGroupDataField.Value?.$target?.fullyQualifiedName)\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t) {\n\t\t\t\treturn Importance.High;\n\t\t\t} else {\n\t\t\t\t//If the DataFieldForAnnotation has an Importance we take it\n\t\t\t\tif (dataField?.annotations?.UI?.Importance) {\n\t\t\t\t\treturn _getDataFieldImportance(dataField as unknown as DataFieldTypes);\n\t\t\t\t}\n\t\t\t\t// else the highest importance (if any) is returned\n\t\t\t\tfieldsWithImportance = fieldGroupData.filter(function (item) {\n\t\t\t\t\treturn item?.annotations?.UI?.Importance;\n\t\t\t\t});\n\t\t\t\treturn _getMaxImportance(fieldsWithImportance as DataFieldTypes[]);\n\t\t\t}\n\t\t}\n\t}\n\treturn highKeys.includes((dataField as DataFieldTypes).Value?.$target?.fullyQualifiedName)\n\t\t? Importance.High\n\t\t: _getDataFieldImportance(dataField as unknown as DataFieldTypes);\n}\n\n/**\n * Returns line items from metadata annotations.\n * @param lineItemAnnotation Collection of data fields with their annotations\n * @param tableType The table type\n * @param visualizationPath The visualization path\n * @param converterContext The converter context\n * @returns The columns from the annotations\n */\nconst getColumnsFromAnnotations = function (\n\tlineItemAnnotation: LineItem,\n\ttableType: TableType,\n\tvisualizationPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): AnnotationTableColumn[] {\n\tconst entityType: EntityType = converterContext.getAnnotationEntityType(lineItemAnnotation),\n\t\tannotationColumns: AnnotationTableColumn[] = [],\n\t\tcolumnsToBeCreated: Record<string, Property> = {},\n\t\tdisplayModeOfDescriptionPropertiesMap: Record<string, DisplayMode> = {},\n\t\trestrictionsOnProperties = getRestrictionsOnProperties(converterContext),\n\t\ttableManifestSettings: TableManifestConfiguration = converterContext.getManifestControlConfiguration(visualizationPath),\n\t\tdefaultCreationMode =\n\t\t\tconverterContext.getManifestWrapper().getSapFeManifestConfiguration()?.macros?.table?.defaultCreationMode ===\n\t\t\t\"InlineCreationRows\"\n\t\t\t\t? CreationMode.InlineCreationRows\n\t\t\t\t: undefined,\n\t\ttableCreationMode: CreationMode =\n\t\t\ttableManifestSettings?.tableSettings?.creationMode?.name ?? defaultCreationMode ?? CreationMode.Inline;\n\tconst semanticKeys: SemanticKey = converterContext.getAnnotationsByTerm(\"Common\", CommonAnnotationTerms.SemanticKey, [\n\t\tconverterContext.getEntityType()\n\t])[0] as SemanticKey;\n\tif (lineItemAnnotation) {\n\t\tconst tableConverterContext = converterContext.getConverterContextFor<PageContextPathTarget>(\n\t\t\tgetTargetObjectPath(converterContext.getDataModelObjectPath())\n\t\t);\n\t\tlineItemAnnotation.forEach((dataField) => {\n\t\t\t// TODO: variable name should be datafield and not lineItem\n\t\t\tif (!_isValidColumn(dataField)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet exportSettings: PropertyInfo[\"exportSettings\"] = null;\n\t\t\tconst semanticObjectAnnotationPath =\n\t\t\t\tisDataFieldTypes(dataField) && dataField.Value?.$target?.fullyQualifiedName\n\t\t\t\t\t? getSemanticObjectPath(converterContext, dataField)\n\t\t\t\t\t: undefined;\n\t\t\tconst relativePath = _getRelativePath(dataField);\n\t\t\t// Determine properties which are consumed by this LineItem.\n\t\t\tconst relatedPropertiesInfo: ComplexPropertyInfo = collectRelatedPropertiesRecursively(dataField, converterContext, tableType);\n\t\t\tconst relatedPropertyNames: string[] = Object.keys(relatedPropertiesInfo.properties);\n\t\t\tconst additionalPropertyNames: string[] = Object.keys(relatedPropertiesInfo.additionalProperties);\n\t\t\tconst groupPath: string | undefined = relativePath ? _sliceAtSlash(relativePath, true, false) : undefined;\n\t\t\tconst isGroup: boolean = groupPath != relativePath;\n\t\t\tconst label = getLabel(dataField, isGroup);\n\t\t\tconst name = _getAnnotationColumnName(dataField);\n\t\t\tconst isFieldGroupColumn: boolean = groupPath ? groupPath.includes(`@${UIAnnotationTerms.FieldGroup}`) : false;\n\t\t\tconst showDataFieldsLabel: boolean | undefined = isFieldGroupColumn\n\t\t\t\t? _getShowDataFieldsLabel(name, visualizationPath, converterContext)\n\t\t\t\t: false;\n\t\t\tconst dataType: string | undefined = getDataFieldDataType(dataField);\n\t\t\tconst formatOptions = _getDefaultFormatOptionsForTable(getDefaultDraftIndicatorForColumn(name, semanticKeys, dataField));\n\t\t\tconst propertyDataModelObjectPath = enhanceDataModelPath<DataFieldAbstractTypes>(\n\t\t\t\tconverterContext.getDataModelObjectPath(),\n\t\t\t\trelativePath\n\t\t\t);\n\t\t\t// Determine if we need a situations indicator\n\t\t\tconst navigationProperties: NavigationProperty[] = propertyDataModelObjectPath.targetEntityType.navigationProperties;\n\t\t\tconst situationsNavProps = navigationProperties.filter(\n\t\t\t\t(navigationProperty) =>\n\t\t\t\t\t!navigationProperty.isCollection &&\n\t\t\t\t\tnavigationProperty.targetType.annotations.Common?.SAPObjectNodeType?.Name === \"BusinessSituation\"\n\t\t\t);\n\t\t\tconst situationsNavProp: NavigationProperty | undefined = situationsNavProps.length >= 1 ? situationsNavProps[0] : undefined;\n\t\t\tif (situationsNavProp && formatOptions) {\n\t\t\t\tformatOptions.hasSituationsIndicator = true;\n\t\t\t}\n\n\t\t\tlet fieldGroupHiddenExpressions: CompiledBindingToolkitExpression;\n\t\t\tif (\n\t\t\t\tdataField.$Type === UIAnnotationTypes.DataFieldForAnnotation &&\n\t\t\t\tdataField.Target?.$target?.$Type === UIAnnotationTypes.FieldGroupType\n\t\t\t) {\n\t\t\t\tfieldGroupHiddenExpressions = _getFieldGroupHiddenExpressions(dataField);\n\t\t\t}\n\t\t\tconst isMultiValue = _isColumnMultiValued(dataField, tableConverterContext);\n\t\t\tif (!isMultiValue && _isExportableColumn(dataField)) {\n\t\t\t\t//exclude the types listed above for the Export (generates error on Export as PDF)\n\t\t\t\texportSettings = createColumnExportSettings(dataField, relatedPropertiesInfo);\n\t\t\t}\n\t\t\tlet propertyTypeConfig: PropertyTypeConfig | undefined;\n\t\t\tif (dataType) {\n\t\t\t\tpropertyTypeConfig = getTypeConfig(dataField, dataType);\n\t\t\t}\n\t\t\tconst typeConfig: PropertyTypeConfig = {\n\t\t\t\tclassName: dataType as keyof typeof DefaultTypeForEdmType,\n\t\t\t\tformatOptions: {\n\t\t\t\t\t...formatOptions,\n\t\t\t\t\t...propertyTypeConfig?.formatOptions\n\t\t\t\t},\n\t\t\t\tconstraints: { ...propertyTypeConfig?.constraints }\n\t\t\t};\n\t\t\tconst visualSettings: VisualSettings = {};\n\t\t\tif (!dataType || !typeConfig) {\n\t\t\t\t// for charts\n\t\t\t\tvisualSettings.widthCalculation = null;\n\t\t\t}\n\t\t\tconst sortable =\n\t\t\t\t!isMultiValue &&\n\t\t\t\t_isColumnSortable(dataField, relativePath, restrictionsOnProperties.nonSortableProperties, relatedPropertiesInfo);\n\t\t\tconst availability = isReferencePropertyStaticallyHidden(dataField) ? \"Hidden\" : \"Default\";\n\t\t\tconst column: AnnotationTableColumn = {\n\t\t\t\tkey: KeyHelper.generateKeyFromDataField(dataField),\n\t\t\t\ttype: ColumnType.Annotation,\n\t\t\t\tlabel: label ?? name,\n\t\t\t\tgroupLabel: isGroup ? getLabel(dataField) : undefined,\n\t\t\t\tgroup: isGroup ? groupPath : undefined,\n\t\t\t\tFieldGroupHiddenExpressions: fieldGroupHiddenExpressions,\n\t\t\t\tannotationPath: converterContext.getEntitySetBasedAnnotationPath(dataField.fullyQualifiedName),\n\t\t\t\tsemanticObjectPath: semanticObjectAnnotationPath,\n\t\t\t\tavailability: availability,\n\t\t\t\tname: name,\n\t\t\t\tshowDataFieldsLabel: showDataFieldsLabel,\n\t\t\t\trequired: isRequiredColumn(converterContext, dataField as DataFieldTypes, tableCreationMode),\n\t\t\t\trelativePath: relativePath,\n\t\t\t\tsortable: sortable,\n\t\t\t\tpropertyInfos: relatedPropertyNames.length ? relatedPropertyNames : undefined,\n\t\t\t\tadditionalPropertyInfos: additionalPropertyNames.length > 0 ? additionalPropertyNames : undefined,\n\t\t\t\texportSettings: exportSettings,\n\t\t\t\twidth: (dataField.annotations?.HTML5?.CssDefaults?.width?.valueOf() as string) || undefined,\n\t\t\t\timportance: getImportance(converterContext, dataField as DataFieldTypes),\n\t\t\t\tisNavigable: true,\n\t\t\t\tformatOptions: formatOptions,\n\t\t\t\tcaseSensitive: isFilteringCaseSensitive(converterContext),\n\t\t\t\ttypeConfig: typeConfig,\n\t\t\t\tvisualSettings: visualSettings as PropertyInfo[\"visualSettings\"],\n\t\t\t\ttimezoneText: exportSettings?.timezone,\n\t\t\t\tisPartOfLineItem: true,\n\t\t\t\tdataType: dataType ?? (\"Edm.String\" as keyof typeof DefaultTypeForEdmType),\n\t\t\t\tisMultiValue\n\t\t\t};\n\t\t\tconst tooltip = _getTooltip(dataField) ?? label;\n\t\t\tif (tooltip) {\n\t\t\t\tcolumn.tooltip = tooltip;\n\t\t\t}\n\t\t\tif (relatedPropertiesInfo.exportSettings.dataPointTargetValue) {\n\t\t\t\tcolumn.exportDataPointTargetValue = relatedPropertiesInfo.exportSettings.dataPointTargetValue;\n\t\t\t}\n\t\t\tannotationColumns.push(column);\n\t\t\t// Collect information of related columns to be created.\n\t\t\trelatedPropertyNames.forEach((relatedPropertyName) => {\n\t\t\t\tcolumnsToBeCreated[relatedPropertyName] = relatedPropertiesInfo.properties[relatedPropertyName].annotationProperty;\n\t\t\t\t// In case of a multi-value, related properties cannot be sorted as we go through a 1-n relation\n\t\t\t\tif (isMultiValue) {\n\t\t\t\t\trestrictionsOnProperties.nonSortableProperties.push(relatedPropertyName);\n\t\t\t\t}\n\t\t\t\taddPropertyToDisplayModeOfDescriptionPropertiesMap(\n\t\t\t\t\tdisplayModeOfDescriptionPropertiesMap,\n\t\t\t\t\trelatedPropertiesInfo,\n\t\t\t\t\trelatedPropertyName\n\t\t\t\t);\n\t\t\t\t// In case the lineItem points to a navigation property with a textArrangement TextOnly, we need to create the column with the value navigation property.\n\t\t\t\t// The text property is referenced on the related properties of the lineItem, so will be created on the _createRelatedColumns method.\n\t\t\t\tif (relatedPropertiesInfo.properties[relatedPropertyName].displayModeOfPropertyUsedAsDescription === \"Description\") {\n\t\t\t\t\tcreatePropertyAnnotatedTextOnly(\n\t\t\t\t\t\tconverterContext,\n\t\t\t\t\t\tpropertyDataModelObjectPath,\n\t\t\t\t\t\tdataField,\n\t\t\t\t\t\tcolumnsToBeCreated,\n\t\t\t\t\t\trelativePath,\n\t\t\t\t\t\trestrictionsOnProperties\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// Create columns for additional properties identified for ALP use case.\n\t\t\tadditionalPropertyNames.forEach((additionalPropertyName) => {\n\t\t\t\t// Intentional overwrite as we require only one new PropertyInfo for a related Property.\n\t\t\t\tcolumnsToBeCreated[additionalPropertyName] = relatedPropertiesInfo.additionalProperties[additionalPropertyName];\n\t\t\t});\n\t\t});\n\t}\n\t// Get columns from the Properties of EntityType\n\treturn getColumnsFromEntityType(\n\t\tcolumnsToBeCreated,\n\t\tentityType,\n\t\tannotationColumns,\n\t\tconverterContext,\n\t\ttableType,\n\t\ttableCreationMode,\n\t\tdisplayModeOfDescriptionPropertiesMap,\n\t\trestrictionsOnProperties\n\t);\n};\n\n/**\n * Gets the property names from the manifest and checks against existing properties already added by annotations.\n * If a not yet stored property is found it adds it for sorting and filtering only to the annotationColumns.\n * @param properties\n * @param annotationColumns\n * @param converterContext\n * @param entityType\n * @returns The columns from the annotations\n */\nconst _getPropertyNames = function (\n\tproperties: string[] | string | undefined,\n\tannotationColumns: AnnotationTableColumn[],\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tentityType: EntityType\n): string[] | undefined {\n\tlet matchedProperties: string[] | undefined;\n\tif (Array.isArray(properties)) {\n\t\tmatchedProperties = properties.map(function (propertyPath) {\n\t\t\tconst annotationColumn = annotationColumns.find(function (annotationColumn) {\n\t\t\t\treturn annotationColumn.relativePath === propertyPath && annotationColumn.propertyInfos === undefined;\n\t\t\t});\n\t\t\tif (annotationColumn) {\n\t\t\t\treturn annotationColumn.name;\n\t\t\t} else {\n\t\t\t\tconst relatedColumns = _createRelatedColumns(\n\t\t\t\t\t{ [propertyPath]: entityType.resolvePath(propertyPath) },\n\t\t\t\t\tannotationColumns,\n\t\t\t\t\tconverterContext,\n\t\t\t\t\tentityType,\n\t\t\t\t\t{}\n\t\t\t\t);\n\t\t\t\tannotationColumns.push(relatedColumns[0]);\n\t\t\t\treturn relatedColumns[0].name;\n\t\t\t}\n\t\t});\n\t}\n\treturn matchedProperties;\n};\n\n/**\n * Determines if the field group has to be flagged as required.\n * @param converterContext The converter context\n * @param fieldGroup The fieldGroup being processed\n * @param tableCreationMode The creation mode of the underlying table\n * @returns True if the fieldGroup is required.\n */\nconst isRequiredFieldGroup = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tfieldGroup: FieldGroup,\n\ttableCreationMode: CreationMode\n): boolean {\n\tconst fieldGroupData = fieldGroup.Data;\n\treturn fieldGroupData.some(function (item) {\n\t\t// we exclude boolean type, the end-user may want to keep the underlying check box empty on purpose\n\t\tif (isDataField(item) && item?.Value?.$target.type !== \"Edm.Boolean\") {\n\t\t\treturn (\n\t\t\t\tisStaticallyMandatory(item) ||\n\t\t\t\t(tableCreationMode === CreationMode.InlineCreationRows &&\n\t\t\t\t\tisAnnotatedRequiredProperty(item.Value.$target.fullyQualifiedName, converterContext))\n\t\t\t);\n\t\t}\n\t});\n};\n\n/**\n * Determines if the dataFieldForAnnotation has to be flagged as required.\n * @param converterContext The converter context\n * @param dataFieldForAnnotation The property being processed\n * @param tableCreationMode The creation mode of the underlying table\n * @returns True if the property is required.\n */\nconst isRequiredDataFieldForAnnotation = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tdataFieldForAnnotation: DataFieldForAnnotation,\n\ttableCreationMode: CreationMode\n): boolean {\n\tconst dataFieldTarget = dataFieldForAnnotation.Target.$target;\n\tconst DataFieldForAnnotationFieldControlNotMandatory = hasFieldControlNotMandatory(dataFieldForAnnotation);\n\t// Check if the DataFieldForAnnotation points to a FieldGroup\n\tif (hasFieldGroupTarget(dataFieldForAnnotation)) {\n\t\tif (isRequiredFieldGroup(converterContext, dataFieldTarget as FieldGroup, tableCreationMode)) {\n\t\t\treturn true;\n\t\t}\n\t\tconst fieldGroupData = (dataFieldTarget as FieldGroup).Data;\n\t\treturn fieldGroupData.some((innerDataField: DataFieldAbstractTypes) => {\n\t\t\treturn isRequiredColumn(converterContext, innerDataField, tableCreationMode);\n\t\t});\n\t}\n\t/*If the underlying datapoint is a rating indicator, the end-user may want to keep the rating empty (value 0) on purpose.\n\tBesides, currently, only a fieldControl set on a dataFieldForAnnotation pointing to a dataPoint has an influence in the table.\n\tAccordingly, if a datapoint comes from a dataFieldForAnnotation with a fieldControl set as not mandatory, this dataPoint must not be flagged as \"required\"*/\n\tif (hasDataPointTarget(dataFieldForAnnotation) && (dataFieldTarget as DataPoint).Visualization !== \"UI.VisualizationType/Rating\") {\n\t\tif (DataFieldForAnnotationFieldControlNotMandatory) {\n\t\t\treturn false;\n\t\t}\n\t\tif (isStaticallyMandatory(dataFieldForAnnotation)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn isRequiredDataPoint(converterContext, dataFieldTarget as DataPoint, tableCreationMode);\n\t}\n\treturn false;\n};\n\n/**\n * Determines if the property has to be flagged as required.\n * @param converterContext The converter context\n * @param property The property being processed\n * @param tableCreationMode The creation mode of the underlying table\n * @returns True if the property is required.\n */\nconst isRequiredProperty = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tproperty: Property,\n\ttableCreationMode: CreationMode\n): boolean {\n\treturn (\n\t\tproperty.type !== \"Edm.Boolean\" &&\n\t\t!isRatingVisualizationFromDataFieldDefault(property) &&\n\t\t(isStaticallyMandatory(property) ||\n\t\t\t(tableCreationMode === CreationMode.InlineCreationRows &&\n\t\t\t\tisAnnotatedRequiredProperty(property.fullyQualifiedName, converterContext)))\n\t);\n};\n\n/**\n * Determines if the dataPoint has to be flagged as required.\n * @param converterContext The converter context\n * @param dataPoint The dataPoint being processed\n * @param tableCreationMode The creation mode of the underlying table\n * @returns True if the dataPoint is required.\n */\nconst isRequiredDataPoint = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tdataPoint: DataPoint,\n\ttableCreationMode: CreationMode\n): boolean {\n\treturn (\n\t\tisStaticallyMandatory(dataPoint) ||\n\t\t(tableCreationMode === CreationMode.InlineCreationRows &&\n\t\t\tisAnnotatedRequiredProperty(dataPoint.Value.$target.fullyQualifiedName, converterContext))\n\t);\n};\n\n/**\n * Determines if the underlying column has to be flagged as required.\n * @param converterContext The converter context\n * @param target The target being processed\n * @param tableCreationMode The creation mode of the underlying table\n * @returns The binding expression for the 'required' property of the table column.\n */\nconst isRequiredColumn = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\ttarget: DataFieldAbstractTypes | Property,\n\ttableCreationMode?: CreationMode\n): CompiledBindingToolkitExpression {\n\tconst creationMode = tableCreationMode || CreationMode.Inline;\n\tif (\n\t\tconverterContext.getTemplateType() === TemplateType.ListReport ||\n\t\tconverterContext.getTemplateType() === TemplateType.AnalyticalListPage\n\t) {\n\t\treturn undefined;\n\t}\n\tif (isProperty(target)) {\n\t\treturn isRequiredProperty(converterContext, target, creationMode) ? compileExpression(UI.IsEditable) : undefined;\n\t}\n\t// Check if the dataField is of type DataFieldForAnnotation\n\tif (isDataFieldForAnnotation(target)) {\n\t\treturn isRequiredDataFieldForAnnotation(converterContext, target, creationMode) ? compileExpression(UI.IsEditable) : undefined;\n\t}\n\t//If the underlying property is a boolean, the end-user may want to keep the check box empty on purpose\n\tif (isDataField(target) && target.Value?.$target?.type !== \"Edm.Boolean\") {\n\t\treturn isStaticallyMandatory(target) ||\n\t\t\t(creationMode === CreationMode.InlineCreationRows &&\n\t\t\t\tisAnnotatedRequiredProperty(target.Value.$target.fullyQualifiedName, converterContext))\n\t\t\t? compileExpression(UI.IsEditable)\n\t\t\t: undefined;\n\t}\n\treturn undefined;\n};\n\nconst _appendCustomTemplate = function (\n\tproperties: string[] | undefined,\n\texportProperties: string[] | string | undefined\n): string | undefined {\n\tif (Array.isArray(exportProperties)) {\n\t\tproperties = exportProperties;\n\t}\n\tif (properties) {\n\t\treturn properties\n\t\t\t.map((property) => {\n\t\t\t\treturn `{${properties!.indexOf(property)}}`;\n\t\t\t})\n\t\t\t.join(`${\"\\n\"}`);\n\t}\n\treturn undefined;\n};\n\n/**\n * Returns table column definitions from manifest.\n *\n * These may be custom columns defined in the manifest, slot columns coming through\n * a building block, or annotation columns to overwrite annotation-based columns.\n * @param columns\n * @param annotationColumns\n * @param converterContext\n * @param entityType\n * @returns The columns from the manifest\n */\nconst getColumnsFromManifest = function (\n\tcolumns: Record<string, CustomDefinedTableColumn | CustomDefinedTableColumnForOverride>,\n\tannotationColumns: AnnotationTableColumn[],\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tentityType: EntityType\n): Record<string, ManifestColumn> {\n\tconst internalColumns: Record<string, ManifestColumn> = {};\n\tfunction isColumnOverride(\n\t\tcolumn: CustomDefinedTableColumn | CustomDefinedTableColumnForOverride,\n\t\tkey: string\n\t): column is CustomDefinedTableColumnForOverride {\n\t\treturn annotationColumns.some((annotationColumn) => annotationColumn.key === key);\n\t}\n\tfunction isSlotColumn(manifestColumn: CustomDefinedTableColumn): manifestColumn is FragmentDefinedSlotColumn {\n\t\treturn manifestColumn.type === ColumnType.Slot;\n\t}\n\tfunction isCustomColumn(manifestColumn: CustomDefinedTableColumn): manifestColumn is ManifestDefinedCustomColumn {\n\t\treturn manifestColumn.type === undefined && !!manifestColumn.template;\n\t}\n\tfunction _updateLinkedPropertiesOnCustomColumns(propertyInfos: string[], annotationTableColumns: AnnotationTableColumn[]): void {\n\t\tconst restrictionsOnProperties = getRestrictionsOnProperties(converterContext);\n\t\tpropertyInfos.forEach((property) => {\n\t\t\tannotationTableColumns.forEach((prop) => {\n\t\t\t\tif (prop.name === property) {\n\t\t\t\t\tprop.sortable = !restrictionsOnProperties.nonSortableProperties.includes(property.replace(\"Property::\", \"\"));\n\t\t\t\t\tprop.isGroupable = prop.sortable;\n\t\t\t\t\tprop.filterable = !restrictionsOnProperties.nonFilterableProperties.includes(property.replace(\"Property::\", \"\"));\n\t\t\t\t\tprop.isPartOfCustomColumn = true;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\tfor (const key in columns) {\n\t\tconst manifestColumn = columns[key];\n\t\tKeyHelper.validateKey(key);\n\t\t// BaseTableColumn\n\t\tconst baseTableColumn = {\n\t\t\tkey: key,\n\t\t\twidthIncludingColumnHeader: manifestColumn.widthIncludingColumnHeader,\n\t\t\twidth: manifestColumn.width || undefined,\n\t\t\tposition: {\n\t\t\t\tanchor: manifestColumn.position?.anchor,\n\t\t\t\tplacement: manifestColumn.position === undefined ? Placement.After : manifestColumn.position.placement\n\t\t\t},\n\t\t\tcaseSensitive: isFilteringCaseSensitive(converterContext)\n\t\t};\n\t\tif (isColumnOverride(manifestColumn, key)) {\n\t\t\tconst propertiesToOverwriteAnnotationColumn: CustomElement<AnnotationTableColumnForOverride> = {\n\t\t\t\t...baseTableColumn,\n\t\t\t\timportance: manifestColumn?.importance,\n\t\t\t\thorizontalAlign: manifestColumn?.horizontalAlign,\n\t\t\t\tavailability: manifestColumn?.availability,\n\t\t\t\ttype: ColumnType.Annotation,\n\t\t\t\tisNavigable: undefined,\n\t\t\t\tsettings: manifestColumn.settings,\n\t\t\t\tformatOptions: _getDefaultFormatOptionsForTable(manifestColumn.formatOptions),\n\t\t\t\texportSettings: getCustomExportSettings(\n\t\t\t\t\tmanifestColumn?.exportSettings,\n\t\t\t\t\tannotationColumns,\n\t\t\t\t\tconverterContext,\n\t\t\t\t\tentityType,\n\t\t\t\t\tundefined,\n\t\t\t\t\tkey\n\t\t\t\t)\n\t\t\t};\n\t\t\tinternalColumns[key] = propertiesToOverwriteAnnotationColumn;\n\t\t} else {\n\t\t\tconst propertyInfos: string[] | undefined = _getPropertyNames(\n\t\t\t\tmanifestColumn.properties,\n\t\t\t\tannotationColumns,\n\t\t\t\tconverterContext,\n\t\t\t\tentityType\n\t\t\t);\n\t\t\tconst tooltipText = converterContext.fetchTextFromMetaModel(manifestColumn.tooltip),\n\t\t\t\theaderText = converterContext.fetchTextFromMetaModel(manifestColumn.header);\n\n\t\t\tconst customColumnExportSettings: ColumnExportSettings | null = propertyInfos\n\t\t\t\t? getCustomExportSettings(manifestColumn?.exportSettings, annotationColumns, converterContext, entityType, propertyInfos)\n\t\t\t\t: null;\n\t\t\tconst baseManifestColumn = {\n\t\t\t\t...baseTableColumn,\n\t\t\t\theader: headerText,\n\t\t\t\timportance: manifestColumn?.importance || Importance.None,\n\t\t\t\thorizontalAlign: manifestColumn?.horizontalAlign || HorizontalAlign.Begin,\n\t\t\t\tavailability: manifestColumn?.availability || \"Default\",\n\t\t\t\ttemplate: manifestColumn.template,\n\t\t\t\tpropertyInfos: propertyInfos,\n\t\t\t\texportSettings: customColumnExportSettings,\n\t\t\t\tid: `CustomColumn::${key}`,\n\t\t\t\tname: `CustomColumn::${key}`,\n\t\t\t\t//Needed for MDC:\n\t\t\t\tformatOptions: { textLinesEdit: 4 },\n\t\t\t\tisGroupable: false,\n\t\t\t\tisNavigable: false,\n\t\t\t\tsortable: false,\n\t\t\t\tvisualSettings: { widthCalculation: null },\n\t\t\t\ttooltip: tooltipText ? tooltipText : headerText,\n\t\t\t\tproperties: manifestColumn.properties,\n\t\t\t\trequired:\n\t\t\t\t\tmanifestColumn.required &&\n\t\t\t\t\tconverterContext.getTemplateType() !== TemplateType.ListReport &&\n\t\t\t\t\tconverterContext.getTemplateType() !== TemplateType.AnalyticalListPage\n\t\t\t\t\t\t? compileExpression(UI.IsEditable)\n\t\t\t\t\t\t: undefined\n\t\t\t};\n\t\t\tif (propertyInfos) {\n\t\t\t\t_updateLinkedPropertiesOnCustomColumns(propertyInfos, annotationColumns);\n\t\t\t}\n\t\t\tif (isSlotColumn(manifestColumn)) {\n\t\t\t\tconst customTableColumn: CustomElement<CustomBasedTableColumn> = {\n\t\t\t\t\t...baseManifestColumn,\n\t\t\t\t\ttype: ColumnType.Slot\n\t\t\t\t};\n\t\t\t\tinternalColumns[key] = customTableColumn;\n\t\t\t} else if (isCustomColumn(manifestColumn)) {\n\t\t\t\tconst customTableColumn: CustomElement<CustomBasedTableColumn> = {\n\t\t\t\t\t...baseManifestColumn,\n\t\t\t\t\ttype: ColumnType.Default\n\t\t\t\t};\n\t\t\t\tinternalColumns[key] = customTableColumn;\n\t\t\t} else {\n\t\t\t\tconst message = `The annotation column '${key}' referenced in the manifest is not found`;\n\t\t\t\tconverterContext\n\t\t\t\t\t.getDiagnostics()\n\t\t\t\t\t.addIssue(\n\t\t\t\t\t\tIssueCategory.Manifest,\n\t\t\t\t\t\tIssueSeverity.Low,\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t\tIssueCategoryType,\n\t\t\t\t\t\tIssueCategoryType?.AnnotationColumns?.InvalidKey\n\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\treturn internalColumns;\n};\n\n/**\n * Adds computed columns such as the draft status and situations status.\n * @param tableColumns The table columns collected so far\n * @param tableType The table type\n * @param visualizationPath\n * @param converterContext\n * @returns The enriched set of table columns\n */\nexport function addComputedColumns(\n\ttableColumns: TableColumn[],\n\ttableType: TableType,\n\tvisualizationPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): TableColumn[] {\n\tif (![\"GridTable\", \"TreeTable\", \"AnalyticalTable\"].includes(tableType)) {\n\t\t// Computed columns are not used in Responsive tables\n\t\treturn tableColumns;\n\t}\n\n\t// In case a grid table or tree table is used, we display the situations indicator in a separate column\n\t// so we have to disable it here to ensure, that the field building block\n\t// does not render it into the ID column\n\tconst columnWithSituationsIndicator: TableColumn | undefined = tableColumns.find(\n\t\t(column) => column.formatOptions?.hasSituationsIndicator !== undefined && column.formatOptions?.hasSituationsIndicator === true\n\t);\n\tif (columnWithSituationsIndicator?.formatOptions) {\n\t\t// Switch off the situations indicator in the found column\n\t\tcolumnWithSituationsIndicator.formatOptions.hasSituationsIndicator = false;\n\n\t\t// Insert a separate situations indicator column\n\t\tconst situationsIndicatorColumn: ComputedTableColumn = {\n\t\t\tkey: \"situationsIndicator\",\n\t\t\tname: \"situationsIndicator\",\n\t\t\tpropertyKey: columnWithSituationsIndicator.name,\n\t\t\tisSituationsIndicator: true,\n\t\t\tavailability: \"Default\",\n\t\t\tlabel: \"{sap.fe.i18n>C_SITUATIONS_STATUS_COLUMN_LABEL_TOOLTIP}\",\n\t\t\ttooltip: \"{sap.fe.i18n>C_SITUATIONS_STATUS_COLUMN_LABEL_TOOLTIP}\",\n\t\t\ttype: ColumnType.Computed,\n\t\t\tformatOptions: null,\n\t\t\texportSettings: null,\n\t\t\tclipboardSettings: null,\n\t\t\tpropertyInfos: undefined,\n\t\t\tcaseSensitive: false\n\t\t};\n\n\t\t// Place the draft status column after the first visible column\n\t\tconst indexOfFirstVisibleColumn: int = tableColumns.findIndex((column) => column.availability !== \"Hidden\");\n\t\ttableColumns.splice(indexOfFirstVisibleColumn + 1, 0, situationsIndicatorColumn);\n\t}\n\n\t// In case a grid table or tree table is used, we display the draft indicator in a separate column\n\t// so we have to disable it here to ensure, that the field building block\n\t// does not render it into the ID column\n\t// The additional column is only added for tables on a LR and in case tehe entity is draft enabled!\n\tconst columnsWithDraftIndicator: TableColumn[] = tableColumns.filter((column) => column.formatOptions?.hasDraftIndicator === true);\n\tif (\n\t\tcolumnsWithDraftIndicator.length &&\n\t\tconverterContext.getTemplateType() === TemplateType.ListReport &&\n\t\t(ModelHelper.isDraftNode(converterContext.getEntitySet()) || ModelHelper.isDraftRoot(converterContext.getEntitySet()))\n\t) {\n\t\t// Switch off the draft indicator in the found column\n\t\tcolumnsWithDraftIndicator.forEach((columnWithDraftIndicator: TableColumn) => {\n\t\t\tif (columnWithDraftIndicator?.formatOptions) {\n\t\t\t\tcolumnWithDraftIndicator.formatOptions.hasDraftIndicator = false;\n\t\t\t}\n\t\t});\n\n\t\t// Insert a separate draft indicator column\n\t\tconst draftIndicatorColumn: ComputedTableColumn = {\n\t\t\tkey: \"draftStatus\",\n\t\t\tname: \"draftStatus\",\n\t\t\tpropertyKey: columnsWithDraftIndicator[0].name,\n\t\t\tisDraftIndicator: true,\n\t\t\tavailability: \"Default\",\n\t\t\tlabel: \"{sap.fe.i18n>C_DRAFT_STATUS_COLUMN_LABEL_TOOLTIP}\",\n\t\t\ttooltip: \"{sap.fe.i18n>C_DRAFT_STATUS_COLUMN_LABEL_TOOLTIP}\",\n\t\t\ttype: ColumnType.Computed,\n\t\t\tformatOptions: null,\n\t\t\texportSettings: null,\n\t\t\tcaseSensitive: false\n\t\t};\n\t\tlet columnIndexToInsertAfter: int = 0;\n\t\tif (columnWithSituationsIndicator) {\n\t\t\t// If there's a situations indicator column, place the draft status column before it\n\t\t\tcolumnIndexToInsertAfter =\n\t\t\t\ttableColumns.findIndex((column) => (column as ComputedTableColumn).isSituationsIndicator === true) - 1;\n\t\t} else {\n\t\t\t// Otherwise place the draft status column after the first visible column\n\t\t\tcolumnIndexToInsertAfter = tableColumns.findIndex((column) => column.availability !== \"Hidden\");\n\t\t}\n\t\ttableColumns.splice(columnIndexToInsertAfter + 1, 0, draftIndicatorColumn);\n\t}\n\n\treturn tableColumns;\n}\n\n/**\n * Provides the required properties set on the annotations.\n * @param converterContext  The instance of the converter context\n * @returns The paths of the restricted properties\n */\nexport function getRequiredProperties(converterContext: ConverterContext<PageContextPathTarget>): PropertyPath[] {\n\treturn getContextPropertyRestriction(\n\t\tconverterContext.getDataModelObjectPath(),\n\t\t(capabilities) => {\n\t\t\treturn (capabilities as EntitySetAnnotations_Capabilities | undefined)?.InsertRestrictions?.RequiredProperties;\n\t\t},\n\t\tfalse\n\t);\n}\n\n/**\n * Determines if the property is annotated as a required property.\n * @param name The name of the property\n * @param converterContext The instance of the converter context\n * @returns True if the property is required\n */\nfunction isAnnotatedRequiredProperty(name: string, converterContext: ConverterContext<PageContextPathTarget>): boolean {\n\treturn getRequiredProperties(converterContext)\n\t\t.map((property) => property.$target?.fullyQualifiedName)\n\t\t.includes(name);\n}\n\n/**\n * Gets the data type of a column for the export.\n * @param dataType The data type of a property, column\n * @param isATimezone Is the given property a timezone\n * @param isCurrency Is the given property a currency\n * @param exportSettings The already detected export settings from datafields\n * @returns The supported export type\n */\nfunction getExportDataType(\n\tdataType: string | undefined,\n\tisATimezone = false,\n\tisCurrency = false,\n\texportSettings?: ColumnExportSettings\n): string {\n\tlet exportDataType = \"String\";\n\tif (!dataType || exportSettings?.dataPointTargetValue) {\n\t\treturn exportDataType;\n\t}\n\tif (exportSettings?.isCurrency || isCurrency) {\n\t\treturn \"Currency\";\n\t}\n\tif (isATimezone) {\n\t\treturn \"Timezone\";\n\t}\n\tif (exportSettings?.wrap) {\n\t\treturn exportDataType;\n\t}\n\tswitch (dataType) {\n\t\tcase \"Edm.Decimal\":\n\t\tcase \"Edm.Int32\":\n\t\tcase \"Edm.Int64\":\n\t\tcase \"Edm.Double\":\n\t\tcase \"Edm.Byte\":\n\t\t\texportDataType = \"Number\";\n\t\t\tbreak;\n\t\tcase \"Edm.DateOfTime\":\n\t\tcase \"Edm.Date\":\n\t\t\texportDataType = \"Date\";\n\t\t\tbreak;\n\t\tcase \"Edm.DateTimeOffset\":\n\t\t\texportDataType = \"DateTime\";\n\t\t\tbreak;\n\t\tcase \"Edm.TimeOfDay\":\n\t\t\texportDataType = \"Time\";\n\t\t\tbreak;\n\t\tcase \"Edm.Boolean\":\n\t\t\texportDataType = \"Boolean\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\texportDataType = \"String\";\n\t}\n\treturn exportDataType;\n}\n\n/**\n * Adds the tooltip configuration for a given column.\n * @param property The property referenced on the column\n * @param column The column to be updated\n */\nfunction _addToolTip(property: Property, column: AnnotationTableColumn): void {\n\tconst tooltip = _getTooltip(property) ?? column.label;\n\tif (tooltip) {\n\t\tcolumn.tooltip = tooltip;\n\t}\n}\n\nfunction _getCollectedNavigationPropertyLabels(\n\trelativePath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): string[] | undefined {\n\tconst navigationProperties = enhanceDataModelPath(converterContext.getDataModelObjectPath(), relativePath).navigationProperties;\n\tif (navigationProperties?.length > 0) {\n\t\tconst collectedNavigationPropertyLabels: string[] = [];\n\t\tnavigationProperties.forEach((navProperty) => {\n\t\t\tcollectedNavigationPropertyLabels.push(getLabel(navProperty) || navProperty.name);\n\t\t});\n\t\treturn collectedNavigationPropertyLabels;\n\t}\n}\n\n/**\n * Creates a property using the text arrangement annotation set to text only.\n * @param converterContext The converter context.\n * @param propertyDataModelObjectPath The corresponding DataModelObjectPath.\n * @param lineItem The column to be evaluated.\n * @param columnsToBeCreated The list of columns to be created.\n * @param relativePath The relative path to the target property based on the context.\n * @param restrictionsOnProperties The existing restrictions on properties\n */\nfunction createPropertyAnnotatedTextOnly(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tpropertyDataModelObjectPath: DataModelObjectPath<DataFieldAbstractTypes>,\n\tlineItem: DataFieldAbstractTypes,\n\tcolumnsToBeCreated: Record<string, Property>,\n\trelativePath: string,\n\trestrictionsOnProperties: RestrictionsOnProperties\n): void {\n\tconst isPropertyNavigated =\n\t\tpropertyDataModelObjectPath.navigationProperties.length !== converterContext.getDataModelObjectPath().navigationProperties.length;\n\tif (isPropertyNavigated && isDataField(lineItem)) {\n\t\tcolumnsToBeCreated[relativePath] = lineItem.Value.$target;\n\t\trestrictionsOnProperties.nonSortableProperties.push(relativePath);\n\t} else if (isDataFieldForAnnotation(lineItem) && hasFieldGroupTarget(lineItem)) {\n\t\t(lineItem.Target.$target as FieldGroup).Data.forEach((field) => {\n\t\t\tif (isDataField(field) && getDisplayMode(field.Value.$target) === \"Description\") {\n\t\t\t\tconst inheredPropertyDataModelObjectPath = enhanceDataModelPath(\n\t\t\t\t\tconverterContext.getDataModelObjectPath(),\n\t\t\t\t\tfield.Value.path\n\t\t\t\t);\n\t\t\t\tconst isInheredPropertyNavigated =\n\t\t\t\t\tinheredPropertyDataModelObjectPath.navigationProperties.length !==\n\t\t\t\t\tconverterContext.getDataModelObjectPath().navigationProperties.length;\n\t\t\t\tif (isInheredPropertyNavigated) {\n\t\t\t\t\tcolumnsToBeCreated[field.Value.path] = field.Value.$target;\n\t\t\t\t\trestrictionsOnProperties.nonSortableProperties.push(field.Value.path);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport function getTypeConfig(oProperty: Property | DataFieldAbstractTypes | undefined, dataType: string | undefined): PropertyTypeConfig {\n\tlet oTargetMapping;\n\tif (isProperty(oProperty)) {\n\t\toTargetMapping = isTypeDefinition(oProperty.targetType)\n\t\t\t? EDM_TYPE_MAPPING[oProperty.targetType.underlyingType]\n\t\t\t: EDM_TYPE_MAPPING[oProperty.type];\n\t}\n\tif (oTargetMapping === undefined && dataType !== undefined) {\n\t\toTargetMapping = EDM_TYPE_MAPPING[dataType];\n\t}\n\tconst propertyTypeConfig: PropertyTypeConfig = {\n\t\ttype: oTargetMapping?.type,\n\t\tconstraints: {},\n\t\tformatOptions: {}\n\t};\n\tif (isProperty(oProperty) && oTargetMapping !== undefined) {\n\t\tpropertyTypeConfig.constraints = {\n\t\t\tscale: oTargetMapping.constraints?.$Scale ? oProperty.scale : undefined,\n\t\t\tprecision: oTargetMapping.constraints?.$Precision ? oProperty.precision : undefined,\n\t\t\tmaxLength: oTargetMapping.constraints?.$MaxLength ? oProperty.maxLength : undefined,\n\t\t\tnullable: oTargetMapping.constraints?.$Nullable ? oProperty.nullable : undefined,\n\t\t\tminimum:\n\t\t\t\toTargetMapping.constraints?.[\"@Org.OData.Validation.V1.Minimum/$Decimal\"] &&\n\t\t\t\t!isNaN(oProperty.annotations?.Validation?.Minimum)\n\t\t\t\t\t? `${oProperty.annotations?.Validation?.Minimum}`\n\t\t\t\t\t: undefined,\n\t\t\tmaximum:\n\t\t\t\toTargetMapping.constraints?.[\"@Org.OData.Validation.V1.Maximum/$Decimal\"] &&\n\t\t\t\t!isNaN(oProperty.annotations?.Validation?.Maximum)\n\t\t\t\t\t? `${oProperty.annotations?.Validation?.Maximum}`\n\t\t\t\t\t: undefined,\n\t\t\tisDigitSequence:\n\t\t\t\tpropertyTypeConfig.type === \"sap.ui.model.odata.type.String\" &&\n\t\t\t\toTargetMapping.constraints?.[`@${CommonAnnotationTerms.IsDigitSequence}`] &&\n\t\t\t\toProperty.annotations?.Common?.IsDigitSequence\n\t\t\t\t\t? true\n\t\t\t\t\t: undefined\n\t\t};\n\t}\n\tpropertyTypeConfig.formatOptions = {\n\t\tparseAsString:\n\t\t\tpropertyTypeConfig?.type?.indexOf(\"sap.ui.model.odata.type.Int\") === 0 ||\n\t\t\tpropertyTypeConfig?.type?.indexOf(\"sap.ui.model.odata.type.Double\") === 0\n\t\t\t\t? false\n\t\t\t\t: undefined,\n\t\temptyString:\n\t\t\tpropertyTypeConfig?.type?.indexOf(\"sap.ui.model.odata.type.Int\") === 0 ||\n\t\t\tpropertyTypeConfig?.type?.indexOf(\"sap.ui.model.odata.type.Double\") === 0\n\t\t\t\t? \"\"\n\t\t\t\t: undefined,\n\t\tparseKeepsEmptyString:\n\t\t\tpropertyTypeConfig.type === \"sap.ui.model.odata.type.String\" && propertyTypeConfig.constraints.nullable === false\n\t\t\t\t? true\n\t\t\t\t: undefined\n\t};\n\treturn propertyTypeConfig;\n}\n\n/**\n * Add a description property to the list of description properties used by the columns of a table.\n * @param displayModeOfDescriptionPropertiesMap The list of properties referenced as text on a text arrangement annotation\n * @param relatedPropertiesInfo The related properties linked to the column (named also complex property)\n * @param relatedPropertyName The property name to be added\n */\nfunction addPropertyToDisplayModeOfDescriptionPropertiesMap(\n\tdisplayModeOfDescriptionPropertiesMap: Record<string, DisplayMode>,\n\trelatedPropertiesInfo: ComplexPropertyInfo,\n\trelatedPropertyName: string\n): void {\n\tif (\n\t\trelatedPropertiesInfo.properties[relatedPropertyName].displayModeOfPropertyUsedAsDescription &&\n\t\t!displayModeOfDescriptionPropertiesMap[relatedPropertyName]\n\t) {\n\t\tdisplayModeOfDescriptionPropertiesMap[relatedPropertyName] =\n\t\t\trelatedPropertiesInfo.properties[relatedPropertyName].displayModeOfPropertyUsedAsDescription!;\n\t}\n}\n\n/**\n * Computes the referenced properties of a LineItem in case the LineItem is annotated as hidden.\n * @param existingColumns The list of columns created from LineItems and from properties of entityType\n * @param name The name of the property to be evaluated\n * @param column The given column from lineItem or property of entitySet\n */\nfunction computeHiddenOnRelatedColumns(existingColumns: AnnotationTableColumn[], name: string, column: AnnotationTableColumn): void {\n\tconst relatedAnnotationColumns = existingColumns.filter(\n\t\t(existingColumn) =>\n\t\t\t(existingColumn.propertyInfos?.includes(name) && existingColumn.isPartOfLineItem) ||\n\t\t\t(existingColumn.isPartOfLineItem && existingColumn.relativePath === column.relativePath)\n\t);\n\tcolumn.isPartOfLineItem = !!relatedAnnotationColumns.length;\n\tif (\n\t\trelatedAnnotationColumns.length &&\n\t\t!relatedAnnotationColumns?.some((annotationColumn) => annotationColumn.availability !== \"Hidden\")\n\t) {\n\t\tcolumn.sortable = false;\n\t\tcolumn.isGroupable = false;\n\t\tcolumn.filterable = false;\n\t}\n}\n\n/**\n * Gets the export settings properties of a manifest column.\n * @param exportSettings The customized/overwritten export settings of a manifest column\n * @param annotationColumns The list of columns created from LineItems\n * @param converterContext The converter context\n * @param entityType The target entity type\n * @param propertyInfos The properties linked to a complex column\n * @param columnKey The column key of the column to be overwritten\n * @returns The export settings of the column merging customized export settings with the default values detected on the annotation column\n */\nfunction getCustomExportSettings(\n\texportSettings: ColumnExportSettings | undefined,\n\tannotationColumns: AnnotationTableColumn[],\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tentityType: EntityType,\n\tpropertyInfos?: string[],\n\tcolumnKey?: string\n): ColumnExportSettings | null {\n\tlet columnFromAnnotations;\n\tif (columnKey) {\n\t\tcolumnFromAnnotations = annotationColumns.find((annotationColumn) => annotationColumn.key === columnKey);\n\t\tif (columnFromAnnotations?.exportSettings === null) {\n\t\t\treturn columnFromAnnotations?.exportSettings;\n\t\t}\n\t}\n\tconst enableWrapping =\n\t\texportSettings?.wrap ??\n\t\t(!!(exportSettings?.property && exportSettings.property?.length > 1) || !!(propertyInfos && propertyInfos.length > 1));\n\tconst customExportSettings: ColumnExportSettings = {\n\t\t...columnFromAnnotations?.exportSettings,\n\t\ttype: exportSettings?.type ?? columnFromAnnotations?.exportSettings?.type,\n\t\ttemplate:\n\t\t\texportSettings?.template ??\n\t\t\t_appendCustomTemplate(propertyInfos, exportSettings?.property) ??\n\t\t\tcolumnFromAnnotations?.exportSettings?.template,\n\t\tproperty: exportSettings?.property\n\t\t\t? _getPropertyNames(exportSettings?.property, annotationColumns, converterContext, entityType)\n\t\t\t: undefined,\n\t\twidth: exportSettings?.width,\n\t\twrap: enableWrapping\n\t};\n\treturn removeUndefinedFromExportSettings(customExportSettings);\n}\n"],"mappings":"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","ignoreList":[],"file":"Columns-dbg.js"}
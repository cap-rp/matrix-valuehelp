{"version":3,"names":["SemanticKeyHelper","getSemanticKeys","oMetaModel","sEntitySetName","getObject","getSemanticObjectInformation","oSemanticObject","aSemanticKeys","semanticObject","semanticKeys","getPathContent","valuePairs","typeMetadata","singleKey","length","map","valuePair","keyValue","value","encodedKeyValue","name","$Type","encodeURIComponent","join","getSemanticPath","oContext","bStrict","arguments","undefined","getModel","getMetaModel","getMetaContext","getPath","oSemanticObjectInformation","sTechnicalPath","sSemanticPath","isA","isRelative","getHeaderContext","_isPathForSemantic","oEntityType","keyValues","semanticKey","keyName","$PropertyPath","getProperty","Error","semanticKeysPart","e","Log","info","sPath","test"],"sourceRoot":".","sources":["SemanticKeyHelper.ts"],"sourcesContent":["import type { PropertyPath } from \"@sap-ux/vocabularies-types\";\nimport type { SemanticObject } from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport Log from \"sap/base/Log\";\nimport type ODataV4Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataListBinding from \"sap/ui/model/odata/v4/ODataListBinding\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type { ExpandPathType, MetaModelType } from \"types/metamodel_types\";\n\ntype SemanticObjectInformation = {\n\tsemanticObject?: MetaModelType<SemanticObject>;\n\tsemanticKeys?: ExpandPathType<PropertyPath>[];\n};\nconst SemanticKeyHelper = {\n\tgetSemanticKeys: function (oMetaModel: ODataMetaModel, sEntitySetName: string): ExpandPathType<PropertyPath>[] | undefined {\n\t\treturn oMetaModel.getObject(`/${sEntitySetName}/@com.sap.vocabularies.Common.v1.SemanticKey`);\n\t},\n\tgetSemanticObjectInformation: function (oMetaModel: ODataMetaModel, sEntitySetName: string): SemanticObjectInformation {\n\t\tconst oSemanticObject = oMetaModel.getObject(`/${sEntitySetName}/@com.sap.vocabularies.Common.v1.SemanticObject`) as\n\t\t\t| MetaModelType<SemanticObject>\n\t\t\t| undefined;\n\t\tconst aSemanticKeys = this.getSemanticKeys(oMetaModel, sEntitySetName);\n\t\treturn {\n\t\t\tsemanticObject: oSemanticObject,\n\t\t\tsemanticKeys: aSemanticKeys\n\t\t};\n\t},\n\t/**\n\t * Returns a stringified version of a list of key values, e.g. [{name:\"aa\", value:1}, {name:\"bb\", value:\"foo\"}] --> \"aa=1,bb='foo'\".\n\t * @param valuePairs\n\t * @param typeMetadata\n\t * @returns String\n\t */\n\tgetPathContent(valuePairs: { name: string; value: unknown }[], typeMetadata: Record<string, { $Type: string }>): string {\n\t\tconst singleKey = valuePairs.length === 1;\n\t\treturn valuePairs\n\t\t\t.map((valuePair) => {\n\t\t\t\tconst keyValue = valuePair.value;\n\t\t\t\tconst encodedKeyValue =\n\t\t\t\t\ttypeMetadata[valuePair.name].$Type === \"Edm.String\" ? `'${encodeURIComponent(keyValue as string)}'` : keyValue;\n\t\t\t\treturn singleKey ? encodedKeyValue : `${valuePair.name}=${encodedKeyValue}`;\n\t\t\t})\n\t\t\t.join(\",\");\n\t},\n\tgetSemanticPath: function (oContext: ODataV4Context, bStrict = false): string | undefined {\n\t\tconst oMetaModel = oContext.getModel().getMetaModel(),\n\t\t\tsEntitySetName = oMetaModel.getMetaContext(oContext.getPath()).getObject(\"@sapui.name\"),\n\t\t\toSemanticObjectInformation = this.getSemanticObjectInformation(oMetaModel, sEntitySetName);\n\t\tlet sTechnicalPath, sSemanticPath;\n\n\t\tif (oContext.isA<ODataListBinding>(\"sap.ui.model.odata.v4.ODataListBinding\") && oContext.isRelative()) {\n\t\t\tsTechnicalPath = oContext.getHeaderContext()!.getPath();\n\t\t} else {\n\t\t\tsTechnicalPath = oContext.getPath();\n\t\t}\n\n\t\tif (\n\t\t\tthis._isPathForSemantic(sTechnicalPath) &&\n\t\t\toSemanticObjectInformation.semanticKeys &&\n\t\t\toSemanticObjectInformation.semanticKeys.length !== 0\n\t\t) {\n\t\t\tconst aSemanticKeys = oSemanticObjectInformation.semanticKeys;\n\t\t\tconst oEntityType = oMetaModel.getObject(\"/\" + oMetaModel.getObject(`/${sEntitySetName}`).$Type);\n\n\t\t\ttry {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\t\tconst keyValues = aSemanticKeys.map((semanticKey) => {\n\t\t\t\t\tconst keyName = semanticKey.$PropertyPath;\n\t\t\t\t\tconst keyValue = oContext.getProperty(keyName);\n\t\t\t\t\tif (keyValue === undefined || keyValue === null) {\n\t\t\t\t\t\tthrow new Error(`Couldn't resolve semantic key value for ${keyName}`);\n\t\t\t\t\t}\n\t\t\t\t\treturn { name: keyName, value: keyValue };\n\t\t\t\t});\n\t\t\t\tconst semanticKeysPart = this.getPathContent(keyValues, oEntityType);\n\n\t\t\t\tsSemanticPath = `/${sEntitySetName}(${semanticKeysPart})`;\n\t\t\t} catch (e) {\n\t\t\t\tLog.info(e as string);\n\t\t\t}\n\t\t}\n\n\t\treturn bStrict ? sSemanticPath : sSemanticPath || sTechnicalPath;\n\t},\n\n\t// ==============================\n\t// INTERNAL METHODS\n\t// ==============================\n\n\t_isPathForSemantic: function (sPath: string): boolean {\n\t\t// Only path on root objects allow semantic keys, i.e. sPath = xxx(yyy)\n\t\treturn /^[^()]+\\([^()]+\\)$/.test(sPath);\n\t}\n};\n\nexport default SemanticKeyHelper;\n"],"mappings":"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","ignoreList":[],"file":"SemanticKeyHelper-dbg.js"}
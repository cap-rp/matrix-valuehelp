{"version":3,"names":["getNonFilterablePropertiesRestrictions","entitySet","targetEntitySet","parentNavigationPath","filterRestrictionsFromNavigationRestrictions","getFilterRestrictionsfromNavigationRestrictions","directFilterRestrictions","getDirectFilterRestrictions","Array","from","Set","_exports","getNonSortablePropertiesRestrictions","sortRestrictionsFromNavigationRestrictions","getSortRestrictionsfromNavigationRestrictions","directSortRestrictions","getDirectSortRestrictions","getRestrictionsOnProperties","converterContext","propertiesRestrictions","nonSortableProperties","nonFilterableProperties","dataModelObjectPath","getDataModelObjectPath","parentEntitySet","getTargetEntitySetInfo","isEntitySet","length","undefined","annotations","Capabilities","NavigationRestrictions","RestrictedProperties","forEach","navigationRestriction","NavigationProperty","value","SortRestrictions","Sortable","navigationProperty","entityType","navigationProperties","by_name","push","targetType","entityProperties","map","property","name","nonSortableNavigationProperties","NonSortableProperties","$target","sortRestrictionsOnEntitySet","includes","FilterRestrictions","Filterable","nonFilterableNavigationProperties","NonFilterableProperties","filterRestrictionsOnEntitySet"],"sourceRoot":".","sources":["EntitySetHelper.ts"],"sourcesContent":["import type { EntitySet } from \"@sap-ux/vocabularies-types\";\nimport type ConverterContext from \"sap/fe/core/converters/ConverterContext\";\nimport { isEntitySet } from \"sap/fe/core/helpers/TypeGuards\";\nimport { getTargetEntitySetInfo } from \"./DataModelPathHelper\";\n\nexport type RestrictionsOnProperties = {\n\tnonSortableProperties: string[];\n\tnonFilterableProperties: string[];\n};\n\n/**\n * Reads all FilterRestrictions of the main entity and the navigation restrictions.\n * We get the restrictions first on the navigation property (most precise definition), and if not available, then we get the restrictions on the entitySet.\n * In case of containment, we only get the restrictions on the navigation property of the parent entitySet.\n * @param entitySet Entity set to be analyzed\n * @param targetEntitySet The target entity set, if available.  Not used in the case of containment.\n * @param parentNavigationPath The parent navigation path, specific for containment scenario to get the correct property based on the parent navigation path.\n * @returns Array containing the property names of all non-filterable properties\n */\nexport const getNonFilterablePropertiesRestrictions = function (\n\tentitySet: EntitySet,\n\ttargetEntitySet?: EntitySet,\n\tparentNavigationPath?: string\n): string[] {\n\tconst filterRestrictionsFromNavigationRestrictions = getFilterRestrictionsfromNavigationRestrictions(\n\t\tentitySet,\n\t\ttargetEntitySet,\n\t\tparentNavigationPath\n\t);\n\tconst directFilterRestrictions = getDirectFilterRestrictions(entitySet, targetEntitySet, parentNavigationPath);\n\t// Merge two filter restrictions found on the navigation property and directly from the entity set\n\treturn Array.from(new Set([...filterRestrictionsFromNavigationRestrictions, ...directFilterRestrictions]));\n};\n\n/**\n * Reads all SortRestrictions of the main entity and the navigation restrictions.\n * We retrieve the restrictions first on the navigation property (most precise definition), and if not available, then we get the restrictions on the entitySet\n * In case of containment, we only get the restrictions on the navigation property of the parent entitySet.\n * @param entitySet Entity set to be analyzed\n * @param targetEntitySet The target entity set, if available. Not used in the case of containment.\n * @param parentNavigationPath The parent navigation path, specific for containment scenario to get the correct property based on the parent navigation path.\n * @returns Array containing the property names of all non-sortable properties\n */\nexport const getNonSortablePropertiesRestrictions = function (\n\tentitySet: EntitySet,\n\ttargetEntitySet?: EntitySet,\n\tparentNavigationPath?: string\n): string[] {\n\tconst sortRestrictionsFromNavigationRestrictions = getSortRestrictionsfromNavigationRestrictions(\n\t\tentitySet,\n\t\ttargetEntitySet,\n\t\tparentNavigationPath\n\t);\n\tconst directSortRestrictions = getDirectSortRestrictions(entitySet, targetEntitySet, parentNavigationPath);\n\t// Merge two sort restrictions found on the navigation property and directly from the entity set\n\treturn Array.from(new Set([...sortRestrictionsFromNavigationRestrictions, ...directSortRestrictions]));\n};\n\n/**\n * Gets all SortRestrictions and FilterRestrictions for a given context.\n * @param converterContext The converter context.\n * @returns Object containing all property names of restrictions separated by sortable and filterable capabilities.\n */\nexport const getRestrictionsOnProperties = function (converterContext: ConverterContext): RestrictionsOnProperties {\n\tlet propertiesRestrictions: RestrictionsOnProperties = { nonSortableProperties: [], nonFilterableProperties: [] };\n\tconst dataModelObjectPath = converterContext.getDataModelObjectPath();\n\tconst { parentEntitySet, targetEntitySet, parentNavigationPath } = getTargetEntitySetInfo(dataModelObjectPath);\n\tif (isEntitySet(targetEntitySet)) {\n\t\tif (parentEntitySet && isEntitySet(parentEntitySet)) {\n\t\t\tpropertiesRestrictions = {\n\t\t\t\tnonSortableProperties: getNonSortablePropertiesRestrictions(parentEntitySet, targetEntitySet),\n\t\t\t\tnonFilterableProperties: getNonFilterablePropertiesRestrictions(parentEntitySet, targetEntitySet)\n\t\t\t};\n\t\t\tif (propertiesRestrictions.nonSortableProperties.length || propertiesRestrictions.nonFilterableProperties.length) {\n\t\t\t\treturn propertiesRestrictions;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tnonSortableProperties: getNonSortablePropertiesRestrictions(targetEntitySet),\n\t\t\tnonFilterableProperties: getNonFilterablePropertiesRestrictions(targetEntitySet)\n\t\t};\n\t} else if (parentEntitySet && isEntitySet(parentEntitySet)) {\n\t\t// Find the restrictions on the parent entity set, this applies also for containment as there isn't an entity set on the OP\n\t\treturn {\n\t\t\tnonSortableProperties: getNonSortablePropertiesRestrictions(parentEntitySet, undefined, parentNavigationPath),\n\t\t\tnonFilterableProperties: getNonFilterablePropertiesRestrictions(parentEntitySet, undefined, parentNavigationPath)\n\t\t};\n\t}\n\treturn propertiesRestrictions;\n};\n\n/**\n * Gets the sort restrictions from the navigation restrictions.\n * @param entitySet Entity set to be analyzed.\n * @param targetEntitySet The target entity set, if available. Not used in the case of containment.\n * @param parentNavigationPath The parent navigation path, specific for containment scenario to get the correct property based on the parent navigation path.\n * @returns Array containing the property names of all non-sortable properties from navigation restrictions.\n */\nfunction getSortRestrictionsfromNavigationRestrictions(\n\tentitySet: EntitySet,\n\ttargetEntitySet?: EntitySet,\n\tparentNavigationPath?: string\n): string[] {\n\tconst sortRestrictionsFromNavigationRestrictions: string[] = [];\n\tentitySet.annotations.Capabilities?.NavigationRestrictions?.RestrictedProperties?.forEach((navigationRestriction) => {\n\t\t// if containment enabled get only the sort restrictions of the related navigation path\n\t\tif (parentNavigationPath && parentNavigationPath !== navigationRestriction?.NavigationProperty?.value) {\n\t\t\treturn;\n\t\t}\n\t\tif (navigationRestriction?.SortRestrictions?.Sortable === false) {\n\t\t\t// find correct navigation property\n\t\t\tconst navigationProperty = entitySet.entityType.navigationProperties.by_name(navigationRestriction?.NavigationProperty?.value);\n\t\t\tif (navigationProperty) {\n\t\t\t\t// add all properties of the navigation property to the nonSortableProperties\n\t\t\t\tif (parentNavigationPath) {\n\t\t\t\t\tsortRestrictionsFromNavigationRestrictions.push(\n\t\t\t\t\t\t...navigationProperty.targetType.entityProperties.map((property) => property.name)\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tsortRestrictionsFromNavigationRestrictions.push(\n\t\t\t\t\t\t...navigationProperty.targetType.entityProperties.map((property) => `${navigationProperty.name}/${property.name}`)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst nonSortableNavigationProperties = navigationRestriction?.SortRestrictions?.NonSortableProperties?.map((property) => {\n\t\t\t\t// We need the property name from the navigation restriction definition when the targetEntitySet is available\n\t\t\t\tif ((targetEntitySet || parentNavigationPath) && property.$target?.name) {\n\t\t\t\t\treturn property.$target?.name;\n\t\t\t\t} else {\n\t\t\t\t\t// leave the property path unchanged (it is relative to the annotation target!)\n\t\t\t\t\treturn property.value;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (nonSortableNavigationProperties?.length) {\n\t\t\t\tsortRestrictionsFromNavigationRestrictions.push(...nonSortableNavigationProperties);\n\t\t\t}\n\t\t}\n\t});\n\treturn sortRestrictionsFromNavigationRestrictions;\n}\n\n/**\n * Gets the sort restrictions directly from the entity set.\n * @param entitySet Entity set to be analyzed.\n * @param targetEntitySet The target entity set, if available. Not used in the case of containment.\n * @param parentNavigationPath The parent navigation path, specific for containment scenario to get the correct property based on the parent navigation path.\n * @returns Array containing the property names of all non-sortable properties.\n */\nfunction getDirectSortRestrictions(entitySet: EntitySet, targetEntitySet?: EntitySet, parentNavigationPath?: string): string[] {\n\tconst sortRestrictionsOnEntitySet: string[] = [];\n\tif (entitySet.annotations.Capabilities?.SortRestrictions?.Sortable === false) {\n\t\t// add all properties of the entity set to the nonSortableProperties\n\t\tsortRestrictionsOnEntitySet.push(...entitySet.entityType.entityProperties.map((property) => property.name));\n\t} else {\n\t\tconst nonSortableProperties: string[] = [];\n\t\tentitySet.annotations.Capabilities?.SortRestrictions?.NonSortableProperties?.forEach((property) => {\n\t\t\tif (parentNavigationPath && !property.value.includes(parentNavigationPath)) {\n\t\t\t\t// skip the non sortable property if it doesn't belong to the parent navigation path in case of containment\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((targetEntitySet || parentNavigationPath) && property.$target?.name) {\n\t\t\t\tnonSortableProperties.push(property.$target?.name);\n\t\t\t} else {\n\t\t\t\tnonSortableProperties.push(property.value);\n\t\t\t}\n\t\t});\n\t\tif (nonSortableProperties?.length) {\n\t\t\tsortRestrictionsOnEntitySet.push(...nonSortableProperties);\n\t\t}\n\t}\n\treturn sortRestrictionsOnEntitySet;\n}\n\n/**\n * Gets the filter restrictions from the navigation restrictions.\n * @param entitySet Entity set to be analyzed.\n * @param targetEntitySet The target entity set, if available. Not used in the case of containment.\n * @param parentNavigationPath The parent navigation path, specific for containment scenario to get the correct property based on the parent navigation path.\n * @returns Array containing the property names of all non-filterable properties from navigation restrictions.\n */\nfunction getFilterRestrictionsfromNavigationRestrictions(\n\tentitySet: EntitySet,\n\ttargetEntitySet?: EntitySet,\n\tparentNavigationPath?: string\n): string[] {\n\tconst filterRestrictionsFromNavigationRestrictions: string[] = [];\n\tentitySet.annotations.Capabilities?.NavigationRestrictions?.RestrictedProperties?.forEach((navigationRestriction) => {\n\t\t// if containment enabled get only the filter restrictions of the related navigation path\n\t\tif (parentNavigationPath && parentNavigationPath !== navigationRestriction?.NavigationProperty?.value) {\n\t\t\treturn;\n\t\t}\n\t\tif (navigationRestriction?.FilterRestrictions?.Filterable === false) {\n\t\t\t// find correct navigation property\n\t\t\tconst navigationProperty = entitySet.entityType.navigationProperties.by_name(navigationRestriction?.NavigationProperty?.value);\n\t\t\tif (navigationProperty) {\n\t\t\t\t// add all properties of the navigation property to the nonFilterableProperties\n\t\t\t\tif (parentNavigationPath) {\n\t\t\t\t\tfilterRestrictionsFromNavigationRestrictions.push(\n\t\t\t\t\t\t...navigationProperty.targetType.entityProperties.map((property) => property.name)\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tfilterRestrictionsFromNavigationRestrictions.push(\n\t\t\t\t\t\t...navigationProperty.targetType.entityProperties.map((property) => `${navigationProperty.name}/${property.name}`)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst nonFilterableNavigationProperties = navigationRestriction?.FilterRestrictions?.NonFilterableProperties?.map(\n\t\t\t\t(property) => {\n\t\t\t\t\t// we need the property name from the navigation restriction definition when the targetEntitySet is available and it's not a containment scenario\n\t\t\t\t\tif ((targetEntitySet || parentNavigationPath) && property.$target?.name) {\n\t\t\t\t\t\treturn property.$target?.name;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// leave the property path unchanged (it is relative to the annotation target!)\n\t\t\t\t\t\treturn property.value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t\tif (nonFilterableNavigationProperties?.length) {\n\t\t\t\tfilterRestrictionsFromNavigationRestrictions.push(...nonFilterableNavigationProperties);\n\t\t\t}\n\t\t}\n\t});\n\treturn filterRestrictionsFromNavigationRestrictions;\n}\n\n/**\n * Gets the filter restrictions directly from the entity set.\n * @param entitySet Entity set to be analyzed.\n * @param targetEntitySet The target entity set, if available. Not used in the case of containment.\n * @param parentNavigationPath The parent navigation path, specific for containment scenario to get the correct property based on the parent navigation path.\n * @returns Array containing the property names of all non-filterable properties.\n */\nfunction getDirectFilterRestrictions(entitySet: EntitySet, targetEntitySet?: EntitySet, parentNavigationPath?: string): string[] {\n\tconst filterRestrictionsOnEntitySet: string[] = [];\n\tif (entitySet.annotations.Capabilities?.FilterRestrictions?.Filterable === false) {\n\t\t// add all properties of the entity set to the nonFilterableProperties\n\t\tfilterRestrictionsOnEntitySet.push(...entitySet.entityType.entityProperties.map((property) => property.name));\n\t} else {\n\t\tconst nonFilterableProperties: string[] = [];\n\t\tentitySet.annotations.Capabilities?.FilterRestrictions?.NonFilterableProperties?.forEach((property) => {\n\t\t\tif (parentNavigationPath && !property.value.includes(parentNavigationPath)) {\n\t\t\t\t// skip the non filterable property if it doesn't belong to the parent navigation path in case of containment\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((targetEntitySet || parentNavigationPath) && property.$target?.name) {\n\t\t\t\tnonFilterableProperties.push(property.$target?.name);\n\t\t\t} else {\n\t\t\t\tnonFilterableProperties.push(property.value);\n\t\t\t}\n\t\t});\n\t\tif (nonFilterableProperties?.length) {\n\t\t\tfilterRestrictionsOnEntitySet.push(...nonFilterableProperties);\n\t\t}\n\t}\n\treturn filterRestrictionsOnEntitySet;\n}\n"],"mappings":"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","ignoreList":[],"file":"EntitySetHelper-dbg.js"}
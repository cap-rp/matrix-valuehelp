{"version":3,"file":"EntitySetHelper.js","names":["getNonFilterablePropertiesRestrictions","entitySet","targetEntitySet","parentNavigationPath","filterRestrictionsFromNavigationRestrictions","getFilterRestrictionsfromNavigationRestrictions","directFilterRestrictions","getDirectFilterRestrictions","Array","from","Set","_exports","getNonSortablePropertiesRestrictions","sortRestrictionsFromNavigationRestrictions","getSortRestrictionsfromNavigationRestrictions","directSortRestrictions","getDirectSortRestrictions","getRestrictionsOnProperties","converterContext","propertiesRestrictions","nonSortableProperties","nonFilterableProperties","dataModelObjectPath","getDataModelObjectPath","parentEntitySet","getTargetEntitySetInfo","isEntitySet","length","undefined","annotations","Capabilities","NavigationRestrictions","RestrictedProperties","forEach","navigationRestriction","NavigationProperty","value","SortRestrictions","Sortable","navigationProperty","entityType","navigationProperties","by_name","push","targetType","entityProperties","map","property","name","nonSortableNavigationProperties","NonSortableProperties","$target","sortRestrictionsOnEntitySet","includes","FilterRestrictions","Filterable","nonFilterableNavigationProperties","NonFilterableProperties","filterRestrictionsOnEntitySet"],"sources":["./EntitySetHelper.ts"],"sourcesContent":["import type { EntitySet } from \"@sap-ux/vocabularies-types\";\nimport type ConverterContext from \"sap/fe/core/converters/ConverterContext\";\nimport { isEntitySet } from \"sap/fe/core/helpers/TypeGuards\";\nimport { getTargetEntitySetInfo } from \"./DataModelPathHelper\";\n\nexport type RestrictionsOnProperties = {\n\tnonSortableProperties: string[];\n\tnonFilterableProperties: string[];\n};\n\n/**\n * Reads all FilterRestrictions of the main entity and the navigation restrictions.\n * We get the restrictions first on the navigation property (most precise definition), and if not available, then we get the restrictions on the entitySet.\n * In case of containment, we only get the restrictions on the navigation property of the parent entitySet.\n * @param entitySet Entity set to be analyzed\n * @param targetEntitySet The target entity set, if available.  Not used in the case of containment.\n * @param parentNavigationPath The parent navigation path, specific for containment scenario to get the correct property based on the parent navigation path.\n * @returns Array containing the property names of all non-filterable properties\n */\nexport const getNonFilterablePropertiesRestrictions = function (\n\tentitySet: EntitySet,\n\ttargetEntitySet?: EntitySet,\n\tparentNavigationPath?: string\n): string[] {\n\tconst filterRestrictionsFromNavigationRestrictions = getFilterRestrictionsfromNavigationRestrictions(\n\t\tentitySet,\n\t\ttargetEntitySet,\n\t\tparentNavigationPath\n\t);\n\tconst directFilterRestrictions = getDirectFilterRestrictions(entitySet, targetEntitySet, parentNavigationPath);\n\t// Merge two filter restrictions found on the navigation property and directly from the entity set\n\treturn Array.from(new Set([...filterRestrictionsFromNavigationRestrictions, ...directFilterRestrictions]));\n};\n\n/**\n * Reads all SortRestrictions of the main entity and the navigation restrictions.\n * We retrieve the restrictions first on the navigation property (most precise definition), and if not available, then we get the restrictions on the entitySet\n * In case of containment, we only get the restrictions on the navigation property of the parent entitySet.\n * @param entitySet Entity set to be analyzed\n * @param targetEntitySet The target entity set, if available. Not used in the case of containment.\n * @param parentNavigationPath The parent navigation path, specific for containment scenario to get the correct property based on the parent navigation path.\n * @returns Array containing the property names of all non-sortable properties\n */\nexport const getNonSortablePropertiesRestrictions = function (\n\tentitySet: EntitySet,\n\ttargetEntitySet?: EntitySet,\n\tparentNavigationPath?: string\n): string[] {\n\tconst sortRestrictionsFromNavigationRestrictions = getSortRestrictionsfromNavigationRestrictions(\n\t\tentitySet,\n\t\ttargetEntitySet,\n\t\tparentNavigationPath\n\t);\n\tconst directSortRestrictions = getDirectSortRestrictions(entitySet, targetEntitySet, parentNavigationPath);\n\t// Merge two sort restrictions found on the navigation property and directly from the entity set\n\treturn Array.from(new Set([...sortRestrictionsFromNavigationRestrictions, ...directSortRestrictions]));\n};\n\n/**\n * Gets all SortRestrictions and FilterRestrictions for a given context.\n * @param converterContext The converter context.\n * @returns Object containing all property names of restrictions separated by sortable and filterable capabilities.\n */\nexport const getRestrictionsOnProperties = function (converterContext: ConverterContext): RestrictionsOnProperties {\n\tlet propertiesRestrictions: RestrictionsOnProperties = { nonSortableProperties: [], nonFilterableProperties: [] };\n\tconst dataModelObjectPath = converterContext.getDataModelObjectPath();\n\tconst { parentEntitySet, targetEntitySet, parentNavigationPath } = getTargetEntitySetInfo(dataModelObjectPath);\n\tif (isEntitySet(targetEntitySet)) {\n\t\tif (parentEntitySet && isEntitySet(parentEntitySet)) {\n\t\t\tpropertiesRestrictions = {\n\t\t\t\tnonSortableProperties: getNonSortablePropertiesRestrictions(parentEntitySet, targetEntitySet),\n\t\t\t\tnonFilterableProperties: getNonFilterablePropertiesRestrictions(parentEntitySet, targetEntitySet)\n\t\t\t};\n\t\t\tif (propertiesRestrictions.nonSortableProperties.length || propertiesRestrictions.nonFilterableProperties.length) {\n\t\t\t\treturn propertiesRestrictions;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tnonSortableProperties: getNonSortablePropertiesRestrictions(targetEntitySet),\n\t\t\tnonFilterableProperties: getNonFilterablePropertiesRestrictions(targetEntitySet)\n\t\t};\n\t} else if (parentEntitySet && isEntitySet(parentEntitySet)) {\n\t\t// Find the restrictions on the parent entity set, this applies also for containment as there isn't an entity set on the OP\n\t\treturn {\n\t\t\tnonSortableProperties: getNonSortablePropertiesRestrictions(parentEntitySet, undefined, parentNavigationPath),\n\t\t\tnonFilterableProperties: getNonFilterablePropertiesRestrictions(parentEntitySet, undefined, parentNavigationPath)\n\t\t};\n\t}\n\treturn propertiesRestrictions;\n};\n\n/**\n * Gets the sort restrictions from the navigation restrictions.\n * @param entitySet Entity set to be analyzed.\n * @param targetEntitySet The target entity set, if available. Not used in the case of containment.\n * @param parentNavigationPath The parent navigation path, specific for containment scenario to get the correct property based on the parent navigation path.\n * @returns Array containing the property names of all non-sortable properties from navigation restrictions.\n */\nfunction getSortRestrictionsfromNavigationRestrictions(\n\tentitySet: EntitySet,\n\ttargetEntitySet?: EntitySet,\n\tparentNavigationPath?: string\n): string[] {\n\tconst sortRestrictionsFromNavigationRestrictions: string[] = [];\n\tentitySet.annotations.Capabilities?.NavigationRestrictions?.RestrictedProperties?.forEach((navigationRestriction) => {\n\t\t// if containment enabled get only the sort restrictions of the related navigation path\n\t\tif (parentNavigationPath && parentNavigationPath !== navigationRestriction?.NavigationProperty?.value) {\n\t\t\treturn;\n\t\t}\n\t\tif (navigationRestriction?.SortRestrictions?.Sortable === false) {\n\t\t\t// find correct navigation property\n\t\t\tconst navigationProperty = entitySet.entityType.navigationProperties.by_name(navigationRestriction?.NavigationProperty?.value);\n\t\t\tif (navigationProperty) {\n\t\t\t\t// add all properties of the navigation property to the nonSortableProperties\n\t\t\t\tif (parentNavigationPath) {\n\t\t\t\t\tsortRestrictionsFromNavigationRestrictions.push(\n\t\t\t\t\t\t...navigationProperty.targetType.entityProperties.map((property) => property.name)\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tsortRestrictionsFromNavigationRestrictions.push(\n\t\t\t\t\t\t...navigationProperty.targetType.entityProperties.map((property) => `${navigationProperty.name}/${property.name}`)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst nonSortableNavigationProperties = navigationRestriction?.SortRestrictions?.NonSortableProperties?.map((property) => {\n\t\t\t\t// We need the property name from the navigation restriction definition when the targetEntitySet is available\n\t\t\t\tif ((targetEntitySet || parentNavigationPath) && property.$target?.name) {\n\t\t\t\t\treturn property.$target?.name;\n\t\t\t\t} else {\n\t\t\t\t\t// leave the property path unchanged (it is relative to the annotation target!)\n\t\t\t\t\treturn property.value;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (nonSortableNavigationProperties?.length) {\n\t\t\t\tsortRestrictionsFromNavigationRestrictions.push(...nonSortableNavigationProperties);\n\t\t\t}\n\t\t}\n\t});\n\treturn sortRestrictionsFromNavigationRestrictions;\n}\n\n/**\n * Gets the sort restrictions directly from the entity set.\n * @param entitySet Entity set to be analyzed.\n * @param targetEntitySet The target entity set, if available. Not used in the case of containment.\n * @param parentNavigationPath The parent navigation path, specific for containment scenario to get the correct property based on the parent navigation path.\n * @returns Array containing the property names of all non-sortable properties.\n */\nfunction getDirectSortRestrictions(entitySet: EntitySet, targetEntitySet?: EntitySet, parentNavigationPath?: string): string[] {\n\tconst sortRestrictionsOnEntitySet: string[] = [];\n\tif (entitySet.annotations.Capabilities?.SortRestrictions?.Sortable === false) {\n\t\t// add all properties of the entity set to the nonSortableProperties\n\t\tsortRestrictionsOnEntitySet.push(...entitySet.entityType.entityProperties.map((property) => property.name));\n\t} else {\n\t\tconst nonSortableProperties: string[] = [];\n\t\tentitySet.annotations.Capabilities?.SortRestrictions?.NonSortableProperties?.forEach((property) => {\n\t\t\tif (parentNavigationPath && !property.value.includes(parentNavigationPath)) {\n\t\t\t\t// skip the non sortable property if it doesn't belong to the parent navigation path in case of containment\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((targetEntitySet || parentNavigationPath) && property.$target?.name) {\n\t\t\t\tnonSortableProperties.push(property.$target?.name);\n\t\t\t} else {\n\t\t\t\tnonSortableProperties.push(property.value);\n\t\t\t}\n\t\t});\n\t\tif (nonSortableProperties?.length) {\n\t\t\tsortRestrictionsOnEntitySet.push(...nonSortableProperties);\n\t\t}\n\t}\n\treturn sortRestrictionsOnEntitySet;\n}\n\n/**\n * Gets the filter restrictions from the navigation restrictions.\n * @param entitySet Entity set to be analyzed.\n * @param targetEntitySet The target entity set, if available. Not used in the case of containment.\n * @param parentNavigationPath The parent navigation path, specific for containment scenario to get the correct property based on the parent navigation path.\n * @returns Array containing the property names of all non-filterable properties from navigation restrictions.\n */\nfunction getFilterRestrictionsfromNavigationRestrictions(\n\tentitySet: EntitySet,\n\ttargetEntitySet?: EntitySet,\n\tparentNavigationPath?: string\n): string[] {\n\tconst filterRestrictionsFromNavigationRestrictions: string[] = [];\n\tentitySet.annotations.Capabilities?.NavigationRestrictions?.RestrictedProperties?.forEach((navigationRestriction) => {\n\t\t// if containment enabled get only the filter restrictions of the related navigation path\n\t\tif (parentNavigationPath && parentNavigationPath !== navigationRestriction?.NavigationProperty?.value) {\n\t\t\treturn;\n\t\t}\n\t\tif (navigationRestriction?.FilterRestrictions?.Filterable === false) {\n\t\t\t// find correct navigation property\n\t\t\tconst navigationProperty = entitySet.entityType.navigationProperties.by_name(navigationRestriction?.NavigationProperty?.value);\n\t\t\tif (navigationProperty) {\n\t\t\t\t// add all properties of the navigation property to the nonFilterableProperties\n\t\t\t\tif (parentNavigationPath) {\n\t\t\t\t\tfilterRestrictionsFromNavigationRestrictions.push(\n\t\t\t\t\t\t...navigationProperty.targetType.entityProperties.map((property) => property.name)\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tfilterRestrictionsFromNavigationRestrictions.push(\n\t\t\t\t\t\t...navigationProperty.targetType.entityProperties.map((property) => `${navigationProperty.name}/${property.name}`)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst nonFilterableNavigationProperties = navigationRestriction?.FilterRestrictions?.NonFilterableProperties?.map(\n\t\t\t\t(property) => {\n\t\t\t\t\t// we need the property name from the navigation restriction definition when the targetEntitySet is available and it's not a containment scenario\n\t\t\t\t\tif ((targetEntitySet || parentNavigationPath) && property.$target?.name) {\n\t\t\t\t\t\treturn property.$target?.name;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// leave the property path unchanged (it is relative to the annotation target!)\n\t\t\t\t\t\treturn property.value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t\tif (nonFilterableNavigationProperties?.length) {\n\t\t\t\tfilterRestrictionsFromNavigationRestrictions.push(...nonFilterableNavigationProperties);\n\t\t\t}\n\t\t}\n\t});\n\treturn filterRestrictionsFromNavigationRestrictions;\n}\n\n/**\n * Gets the filter restrictions directly from the entity set.\n * @param entitySet Entity set to be analyzed.\n * @param targetEntitySet The target entity set, if available. Not used in the case of containment.\n * @param parentNavigationPath The parent navigation path, specific for containment scenario to get the correct property based on the parent navigation path.\n * @returns Array containing the property names of all non-filterable properties.\n */\nfunction getDirectFilterRestrictions(entitySet: EntitySet, targetEntitySet?: EntitySet, parentNavigationPath?: string): string[] {\n\tconst filterRestrictionsOnEntitySet: string[] = [];\n\tif (entitySet.annotations.Capabilities?.FilterRestrictions?.Filterable === false) {\n\t\t// add all properties of the entity set to the nonFilterableProperties\n\t\tfilterRestrictionsOnEntitySet.push(...entitySet.entityType.entityProperties.map((property) => property.name));\n\t} else {\n\t\tconst nonFilterableProperties: string[] = [];\n\t\tentitySet.annotations.Capabilities?.FilterRestrictions?.NonFilterableProperties?.forEach((property) => {\n\t\t\tif (parentNavigationPath && !property.value.includes(parentNavigationPath)) {\n\t\t\t\t// skip the non filterable property if it doesn't belong to the parent navigation path in case of containment\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((targetEntitySet || parentNavigationPath) && property.$target?.name) {\n\t\t\t\tnonFilterableProperties.push(property.$target?.name);\n\t\t\t} else {\n\t\t\t\tnonFilterableProperties.push(property.value);\n\t\t\t}\n\t\t});\n\t\tif (nonFilterableProperties?.length) {\n\t\t\tfilterRestrictionsOnEntitySet.push(...nonFilterableProperties);\n\t\t}\n\t}\n\treturn filterRestrictionsOnEntitySet;\n}\n"],"mappings":"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","ignoreList":[]}
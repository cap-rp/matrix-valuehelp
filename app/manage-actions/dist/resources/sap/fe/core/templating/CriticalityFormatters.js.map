{"version":3,"file":"CriticalityFormatters.js","names":["getCriticalityExpression","target","propertyDataModelPath","relativeLocations","getRelativePaths","undefined","annotationTarget","targetObject","Criticality","criticality","criticalityFormatters","getCriticality","constant","pathInModel","fullyQualifiedName","getCriticalityExpressionForCards","criticalityExpression","isInsightsCard","negativeCriticality","criticalCriticality","positiveCriticality","informationCriticality","ifElse","or","equal","_exports","criticalityExpressionForIntegrationCards","criticalityProperty","getExpressionFromAnnotation","compileExpression","criticalityIconExpressionForIntegrationCards","condition","CriticalityRepresentation","iconPath","buildExpressionForCriticalityColor","virtualCriticalityExpression","buildExpressionForCriticalityIcon","buildExpressionForCriticalityButtonType","buildExpressionForCriticalityColorMicroChart","dataPoint","sColorExpression","buildExpressionForCriticality","criticalityMap","arguments","length","error","critical","good","neutral"],"sources":["./CriticalityFormatters.ts"],"sourcesContent":["import type { PropertyAnnotationValue } from \"@sap-ux/vocabularies-types\";\nimport type {\n\tDataField,\n\tDataFieldAbstractTypes,\n\tDataFieldForAction,\n\tDataPoint,\n\tDataPointType\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { CriticalityType } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport type { BindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { compileExpression, constant, equal, getExpressionFromAnnotation, ifElse, or, pathInModel } from \"sap/fe/base/BindingToolkit\";\nimport criticalityFormatters from \"sap/fe/core/formatters/CriticalityFormatter\";\nimport { getRelativePaths, type DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\n\nconst getCriticalityExpression = (\n\ttarget: DataField | DataPointType | DataModelObjectPath<DataPointType | DataFieldForAction> | DataFieldAbstractTypes,\n\tpropertyDataModelPath?: DataModelObjectPath<DataPointType>\n): BindingToolkitExpression<unknown> => {\n\tconst relativeLocations = propertyDataModelPath ? getRelativePaths(propertyDataModelPath) : undefined;\n\tconst annotationTarget = (target as DataModelObjectPath<DataPointType | DataFieldForAction>).targetObject ?? (target as DataPointType);\n\tif (annotationTarget.Criticality) {\n\t\tconst criticality = criticalityFormatters.getCriticality(annotationTarget.Criticality);\n\t\tif (criticality) {\n\t\t\t// it's a constant so no need to use a virtual property\n\t\t\treturn constant(criticality);\n\t\t}\n\t\treturn pathInModel(`${annotationTarget.fullyQualifiedName}@$ui5.fe.virtual.criticality`, undefined, relativeLocations);\n\t}\n\treturn constant(undefined);\n};\n\nexport const getCriticalityExpressionForCards = (\n\tcriticalityExpression: BindingToolkitExpression<string | number>,\n\tisInsightsCard: boolean\n): BindingToolkitExpression<string> => {\n\tconst negativeCriticality = isInsightsCard ? constant(\"sap-icon://error\") : constant(\"attention\");\n\tconst criticalCriticality = isInsightsCard ? constant(\"sap-icon://warning\") : constant(\"warning\");\n\tconst positiveCriticality = isInsightsCard ? constant(\"sap-icon://status-positive\") : constant(\"good\");\n\tconst informationCriticality = isInsightsCard\n\t\t? ifElse(\n\t\t\t\tor(\n\t\t\t\t\tequal(criticalityExpression, constant(\"UI.CriticalityType/Information\")),\n\t\t\t\t\tequal(criticalityExpression as BindingToolkitExpression<number>, constant(5)),\n\t\t\t\t\tequal(criticalityExpression, constant(\"5\"))\n\t\t\t\t),\n\t\t\t\tconstant(\"sap-icon://information\"),\n\t\t\t\tconstant(\"\")\n\t\t  )\n\t\t: constant(\"default\");\n\treturn ifElse(\n\t\tor(\n\t\t\tequal(criticalityExpression, constant(\"UI.CriticalityType/Negative\")),\n\t\t\tequal(criticalityExpression as BindingToolkitExpression<number>, constant(1)),\n\t\t\tequal(criticalityExpression, constant(\"1\"))\n\t\t),\n\t\tnegativeCriticality,\n\t\tifElse(\n\t\t\tor(\n\t\t\t\tequal(criticalityExpression, constant(\"UI.CriticalityType/Critical\")),\n\t\t\t\tequal(criticalityExpression as BindingToolkitExpression<number>, constant(2)),\n\t\t\t\tequal(criticalityExpression, constant(\"2\"))\n\t\t\t),\n\t\t\tcriticalCriticality,\n\t\t\tifElse(\n\t\t\t\tor(\n\t\t\t\t\tequal(criticalityExpression, constant(\"UI.CriticalityType/Positive\")),\n\t\t\t\t\tequal(criticalityExpression as BindingToolkitExpression<number>, constant(3)),\n\t\t\t\t\tequal(criticalityExpression, constant(\"3\"))\n\t\t\t\t),\n\t\t\t\tpositiveCriticality,\n\t\t\t\tinformationCriticality\n\t\t\t)\n\t\t)\n\t);\n};\n\n/**\n * Builds an expression to determine the criticality status for integration cards.\n * Used when virtual properties cannot be applied.\n * @param criticalityProperty The criticality annotation value (string or number).\n * @returns An expression resolving to the criticality status for integration cards.\n */\nexport const criticalityExpressionForIntegrationCards = (\n\tcriticalityProperty: PropertyAnnotationValue<string | number> | undefined\n): string | undefined => {\n\tif (criticalityProperty) {\n\t\tconst criticalityExpression: BindingToolkitExpression<string | number> = getExpressionFromAnnotation(criticalityProperty);\n\t\treturn compileExpression(\n\t\t\tifElse(\n\t\t\t\tor(\n\t\t\t\t\tequal(criticalityExpression, constant(CriticalityType.Negative)),\n\t\t\t\t\tequal(criticalityExpression, constant(1)),\n\t\t\t\t\tequal(criticalityExpression, constant(\"1\"))\n\t\t\t\t),\n\t\t\t\tconstant(\"Error\"),\n\t\t\t\tifElse(\n\t\t\t\t\tor(\n\t\t\t\t\t\tequal(criticalityExpression, constant(CriticalityType.Critical)),\n\t\t\t\t\t\tequal(criticalityExpression, constant(2)),\n\t\t\t\t\t\tequal(criticalityExpression, constant(\"2\"))\n\t\t\t\t\t),\n\t\t\t\t\tconstant(\"Warning\"),\n\t\t\t\t\tifElse(\n\t\t\t\t\t\tor(\n\t\t\t\t\t\t\tequal(criticalityExpression, constant(CriticalityType.Positive)),\n\t\t\t\t\t\t\tequal(criticalityExpression, constant(3)),\n\t\t\t\t\t\t\tequal(criticalityExpression, constant(\"3\"))\n\t\t\t\t\t\t),\n\t\t\t\t\t\tconstant(\"Success\"),\n\t\t\t\t\t\tifElse(\n\t\t\t\t\t\t\tor(\n\t\t\t\t\t\t\t\tequal(criticalityExpression, constant(CriticalityType.Information)),\n\t\t\t\t\t\t\t\tequal(criticalityExpression, constant(5)),\n\t\t\t\t\t\t\t\tequal(criticalityExpression, constant(\"5\"))\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tconstant(\"Information\"),\n\t\t\t\t\t\t\tconstant(\"None\")\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\t}\n};\n\n/**\n * Builds an expression to determine the criticality icon for integration cards.\n * Used when virtual properties cannot be applied.\n * @param target The target object containing the criticality property.\n * @returns An expression resolving to the criticality icon for integration cards.\n */\nexport const criticalityIconExpressionForIntegrationCards = (\n\ttarget: DataPointType | DataModelObjectPath<DataPointType>\n): string | undefined => {\n\tconst criticalityProperty = (target as DataPointType)?.Criticality;\n\tconst criticalityExpression: BindingToolkitExpression<string> = getExpressionFromAnnotation(criticalityProperty);\n\tconst condition =\n\t\t(target as DataPointType).CriticalityRepresentation &&\n\t\t(target as DataPointType).CriticalityRepresentation === \"UI.CriticalityRepresentationType/WithoutIcon\";\n\tlet iconPath;\n\tif (!condition) {\n\t\tif (criticalityProperty) {\n\t\t\ticonPath = getCriticalityExpressionForCards(criticalityExpression, true);\n\t\t} else {\n\t\t\ticonPath = constant(\"\");\n\t\t}\n\t} else {\n\t\ticonPath = constant(\"\");\n\t}\n\treturn compileExpression(iconPath);\n};\n\n/**\n * Returns an expression to set button type based on Criticality\n * Supported Criticality: Positive, Negative, Critical, and Information leading to Success, Error, Warning, and None state respectively.\n * @param target A DataField, a DataPoint, or a DataModelObjectPath.\n * @param propertyDataModelPath DataModelObjectPath.\n * @returns An expression to deduce the state of an objectStatus.\n */\nexport const buildExpressionForCriticalityColor = (\n\ttarget: DataPointType | DataModelObjectPath<DataPointType>,\n\tpropertyDataModelPath?: DataModelObjectPath<DataPointType>\n): string | undefined => {\n\tconst virtualCriticalityExpression = getCriticalityExpression(target, propertyDataModelPath);\n\treturn compileExpression(\n\t\tifElse(\n\t\t\tequal(virtualCriticalityExpression, constant(CriticalityType.Negative)),\n\t\t\tconstant(\"Error\"),\n\t\t\tifElse(\n\t\t\t\tequal(virtualCriticalityExpression, constant(CriticalityType.Critical)),\n\t\t\t\tconstant(\"Warning\"),\n\t\t\t\tifElse(\n\t\t\t\t\tequal(virtualCriticalityExpression, constant(CriticalityType.Positive)),\n\t\t\t\t\tconstant(\"Success\"),\n\t\t\t\t\tifElse(\n\t\t\t\t\t\tequal(virtualCriticalityExpression, constant(CriticalityType.Information)),\n\t\t\t\t\t\tconstant(\"Information\"),\n\t\t\t\t\t\tconstant(\"None\")\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t);\n};\n\n/**\n * Returns an expression to set icon type based on Criticality\n * Supported Criticality: Positive, Negative, Critical and Information.\n * @param target A DataField a DataPoint or a DataModelObjectPath.\n * @param [propertyDataModelPath] DataModelObjectPath.\n * @returns An expression to deduce the icon of an objectStatus.\n */\nexport const buildExpressionForCriticalityIcon = (\n\ttarget: DataPointType | DataModelObjectPath<DataPointType>,\n\tpropertyDataModelPath?: DataModelObjectPath<DataPointType>\n): string | undefined => {\n\tconst annotationTarget = (target as DataModelObjectPath<DataPointType>).targetObject ?? (target as DataPointType);\n\tconst virtualCriticalityExpression = getCriticalityExpression(annotationTarget, propertyDataModelPath);\n\tconst condition = annotationTarget.CriticalityRepresentation === \"UI.CriticalityRepresentationType/WithoutIcon\";\n\tlet iconPath;\n\tif (!condition) {\n\t\ticonPath = ifElse(\n\t\t\tequal(virtualCriticalityExpression, constant(CriticalityType.Negative)),\n\t\t\tconstant(\"sap-icon://error\"),\n\t\t\tifElse(\n\t\t\t\tequal(virtualCriticalityExpression, constant(CriticalityType.Critical)),\n\t\t\t\tconstant(\"sap-icon://warning\"),\n\t\t\t\tifElse(\n\t\t\t\t\tequal(virtualCriticalityExpression, constant(CriticalityType.Positive)),\n\t\t\t\t\tconstant(\"sap-icon://status-positive\"),\n\t\t\t\t\tifElse(\n\t\t\t\t\t\tequal(virtualCriticalityExpression, constant(CriticalityType.Information)),\n\t\t\t\t\t\tconstant(\"sap-icon://information\"),\n\t\t\t\t\t\tconstant(\"\")\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\t} else {\n\t\ticonPath = constant(\"\");\n\t}\n\treturn compileExpression(iconPath);\n};\n\n/**\n * Returns an expression to set button type based on Criticality\n * Supported Criticality: Positive and Negative leading to Accept and Reject button type respectively.\n * @param annotationTarget A DataField, DataPoint, DataModelObjectPath.\n * @returns An expression to deduce button type.\n */\nexport const buildExpressionForCriticalityButtonType = (\n\tannotationTarget: DataModelObjectPath<DataPointType | DataFieldForAction>\n): string | undefined => {\n\tconst virtualCriticalityExpression = getCriticalityExpression(annotationTarget);\n\treturn compileExpression(\n\t\tifElse(\n\t\t\tequal(virtualCriticalityExpression, constant(undefined)),\n\t\t\tconstant(\"Ghost\"),\n\t\t\tifElse(\n\t\t\t\tequal(virtualCriticalityExpression, constant(CriticalityType.Negative)),\n\t\t\t\tconstant(\"Reject\"),\n\t\t\t\tifElse(equal(virtualCriticalityExpression, constant(CriticalityType.Positive)), constant(\"Accept\"), constant(\"Default\"))\n\t\t\t)\n\t\t)\n\t);\n};\n\n/**\n * Returns an expression to set color in MicroCharts based on Criticality\n * Supported Criticality: Positive, Negative and Critical leading to Good, Error and Critical color respectively.\n * @param dataPoint A DataField, DataPoint, DataModelObjectPath\n * @returns An expression to deduce colors in Microcharts\n */\nexport const buildExpressionForCriticalityColorMicroChart = (dataPoint: DataPoint | DataModelObjectPath<DataPoint>): string | undefined => {\n\tconst annotationTarget = (dataPoint as DataModelObjectPath<DataPoint>)?.targetObject ?? (dataPoint as DataPoint);\n\tconst sColorExpression = buildExpressionForCriticality(annotationTarget);\n\treturn compileExpression(sColorExpression);\n};\n\n/**\n * Generates an expression to set color based on Criticality.\n * @param annotationTarget A DataField, DataPoint\n * @param criticalityMap Criticality Mapper\n * @returns An expression to deduce colors in datapoints\n */\nexport const buildExpressionForCriticality = (\n\tannotationTarget: DataField | DataPoint | DataFieldAbstractTypes,\n\tcriticalityMap = {\n\t\terror: \"Error\",\n\t\tcritical: \"Critical\",\n\t\tgood: \"Good\",\n\t\tneutral: \"Neutral\"\n\t}\n): BindingToolkitExpression<string> => {\n\tconst virtualCriticalityExpression = getCriticalityExpression(annotationTarget);\n\treturn ifElse(\n\t\tequal(virtualCriticalityExpression, constant(CriticalityType.Negative)),\n\t\tconstant(criticalityMap.error),\n\t\tifElse(\n\t\t\tequal(virtualCriticalityExpression, constant(CriticalityType.Critical)),\n\t\t\tconstant(criticalityMap.critical),\n\t\t\tifElse(\n\t\t\t\tequal(virtualCriticalityExpression, constant(CriticalityType.Positive)),\n\t\t\t\tconstant(criticalityMap.good),\n\t\t\t\tconstant(criticalityMap.neutral)\n\t\t\t)\n\t\t)\n\t);\n};\n"],"mappings":"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","ignoreList":[]}
{"version":3,"file":"Fcl.controller.js","names":["LayoutType","fLibrary","FclController","_dec","defineUI5Class","_dec2","usingExtension","ViewState","override","applyInitialStateOnly","adaptBindingRefreshControls","aControls","this","getView","getController","_getAllVisibleViews","forEach","oChildView","pChildView","Promise","resolve","push","adaptStateControls","aStateControls","onRestore","fclController","appContentContainer","getAppContentContainer","internalModel","getModel","pages","getProperty","componentId","setProperty","onContainerReady","onSuspend","fclControl","getFclControl","beginColumnPages","getBeginColumnPages","midColumnPages","getMidColumnPages","endColumnPages","getEndColumnPages","concat","getViewsFromPages","view","controller","viewState","_class","_class2","_BaseController","_this","_len","arguments","length","args","Array","_key","call","_initializerDefineProperty","_descriptor","_oTargetsAggregation","_oTargetsFromRoutePattern","messagePages","undefined","_inheritsLoose","_proto","prototype","onInit","_internalInit","setColumnDistributionModel","manageDataReceived","event","getParameter","path","targetedView","find","getBindingContext","getPath","isKeepAlive","_routing","onDataReceived","attachRouteMatchers","getRouter","attachBeforeRouteMatched","_updateViewForNavigatedRowsComputation","onBeforeRouteMatched","attachRouteMatched","onRouteMatched","attachStateChange","_saveLayout","_oRouterProxy","sCurrentRouteName","sCurrentArguments","oAppComponent","getAppComponent","oDataModel","attachEvent","bind","getRouterProxy","_oFCLConfig","maxColumnsCount","oRoutingConfig","getManifest","routing","config","flexibleColumnLayout","oFCLManifestConfig","defaultTwoColumnLayoutType","defaultThreeColumnLayoutType","limitFCLToTwoColumns","controlAggregation","defaultControlAggregation","_initializeTargetAggregation","_initializeRoutesInformation","onStateChanged","attachAfterEndColumnNavigate","getFclConfig","oEvent","sPreviousLayout","getParameters","layout","allVisibleViewsBeforeRouteMatched","rightMostViewBeforeRouteMatched","attachEventOnce","views","rightMostViewCurrent","getViewFromContainer","viewLevelBefore","getViewData","viewLevel","viewLevelAfter","oAdditionalViewForNavRowsComputation","getViewForNavigatedRowsComputation","onExit","detachRouteMatched","detachBeforeRouteMatched","detachStateChange","detachAfterEndColumnNavigate","BaseController","isFclEnabled","displayErrorPage","async","errorMessage","parameters","fclLevel","reject","legacyParameters","FCLLevel","messagePage","Page","showHeader","addBeginColumnPage","addMidColumnPage","addEndColumnPage","fromPage","header","FlexBox","alignItems","justifyContent","items","Button","type","icon","tooltip","press","handleShellBack","to","getId","window","history","back","addStyleClass","illustratedMessage","IllustratedMessage","title","description","illustrationType","errorType","removeAllContent","addContent","afterNavigateEventName","getCurrentBeginColumnPage","getCurrentMidColumnPage","getCurrentEndColumnPage","CommonUtils","getShellServices","setBackNavigation","fromView","_event","isA","pageReady","forcePageReady","e","Log","info","oManifest","oTargets","targets","Object","keys","sTargetName","oTarget","aggregation","pattern","contextPattern","aRoutes","routes","route","target","getCurrentArgument","getCurrentRouteName","getTargetAggregation","sRouteName","_scrollTablesToLastNavigatedItems","aViews","oAdditionalView","includes","index","oView","oPreviousView","bindingContext","previousViewController","_scrollTablesToRow","bIsNavigationArrow","_forceModelContextChangeOnBreadCrumbs","navTo","getRightmostView","computeTitleHierarchy","oFcl","getSource","oPages","oPage","oBreadCrumbs","byId","fireModelContextChange","_updateShareButtonVisibility","viewColumn","sLayout","bShowShareIcon","_updateEditButtonVisiblity","hiddenDraft","getEnvironmentCapabilities","getCapabilities","HiddenDraft","enabled","bEditButtonVisible","_updateSaveAndCancelButtonVisiblity","bSaveAndCancelButtonVisible","updateUIStateForView","oUIState","getHelper","getCurrentUIState","oFclColName","getLayout","setModel","_createHelperModel","actionButtonsInfo","midColumn","endColumn","fullScreen","exitFullScreen","closeColumn","beginColumn","oActionButtonInfos","assign","switchVisible","switchIcon","isFullScreen","closeVisible","oQueryParams","oNextUIState","getNextUIState","aTargets","_correctLayoutForTargets","setLayout","isWritingFCLState","getStoredLayout","FlexibleColumnLayoutSemanticHelper","getInstanceFor","calculateLayout","iNextFCLLevel","sHash","sProposedLayout","keepCurrentLayout","oRoute","getRouteByHash","getPattern","allAllowedLayouts","isArray","aLayouts","toString","defaultLayout","_getDefaultLayout","sTargetAggregation","getRouteTargetName","OneColumn","MidColumnFullScreen","EndColumnFullScreen","numberOfTargetsFromRoute","getInstancedViews","componentContainers","getVisibleViews","forLayout","visibleViews","addView","page","ThreeColumnsEndExpanded","ThreeColumnsMidExpanded","TwoColumnsBeginExpanded","TwoColumnsMidExpanded","ThreeColumnsMidExpandedEndHidden","ThreeColumnsBeginExpandedEndHidden","error","_getAllViews","allViews","layoutWhenExitFullScreen","startsWith","aRestorePromises","reduce","aPromises","oTargetView","KeepAliveHelper","restoreView","all","getRightmostContext","pop","isContextUsedInPages","oContext","aAllVisibleViews","_setShellMenuTitle","sTitle","sAppTitle","browerTitle","setTitle","getFCLPersonalizationData","shellServices","emptyFCLState","defaultLayouts","columnsDistribution","desktop","tablet","getApplicationPersonalizationData","setFCLPersonalizationData","fclState","setApplicationPersonalizationData","model","onColumnsDistributionChange","media","columnsSizes","nbColumnsDisplayed","getNumberOfColumnsFromLayout","exec","proposedLayout","_applyDecoratedDescriptor","configurable","enumerable","writable","initializer"],"sources":["./Fcl.controller.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport type FlexibleColumnLayout from \"sap/f/FlexibleColumnLayout\";\nimport type { FlexibleColumnLayout$AfterEndColumnNavigateEvent, FlexibleColumnLayout$StateChangeEvent } from \"sap/f/FlexibleColumnLayout\";\nimport type { ColumnsNavigationActions, NavigationActionsTargets } from \"sap/f/FlexibleColumnLayoutSemanticHelper\";\nimport FlexibleColumnLayoutSemanticHelper from \"sap/f/FlexibleColumnLayoutSemanticHelper\";\nimport fLibrary from \"sap/f/library\";\nimport { defineUI5Class, usingExtension } from \"sap/fe/base/ClassSupport\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport type { FEView } from \"sap/fe/core/BaseController\";\nimport type PageController from \"sap/fe/core/PageController\";\nimport type { NavigationToErrorPageResult } from \"sap/fe/core/controllerextensions/MessageHandler\";\nimport ViewState from \"sap/fe/core/controllerextensions/ViewState\";\nimport type RouterProxy from \"sap/fe/core/controllerextensions/routing/RouterProxy\";\nimport KeepAliveHelper from \"sap/fe/core/helpers/KeepAliveHelper\";\nimport { getRouteTargetName } from \"sap/fe/core/helpers/ManifestHelper\";\nimport Button from \"sap/m/Button\";\nimport FlexBox from \"sap/m/FlexBox\";\nimport IllustratedMessage from \"sap/m/IllustratedMessage\";\nimport Page from \"sap/m/Page\";\nimport type Event from \"sap/ui/base/Event\";\n\nimport type { ManagedObject$ModelContextChangeEventParameters } from \"sap/ui/base/ManagedObject\";\nimport type Control from \"sap/ui/core/Control\";\nimport type View from \"sap/ui/core/mvc/View\";\nimport type Route from \"sap/ui/core/routing/Route\";\nimport type { Router$BeforeRouteMatchedEvent, Router$RouteMatchedEvent } from \"sap/ui/core/routing/Router\";\nimport type JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport type { TitleAdditionalInfo } from \"sap/ushell/ui5service/ShellUIService\";\nimport CommonUtils from \"../CommonUtils\";\nimport type { HiddenDraft } from \"../converters/ManifestSettings\";\nimport BaseController from \"./RootViewBaseController\";\n\nconst LayoutType = fLibrary.LayoutType;\ntype LayoutTypeType = keyof typeof LayoutType;\n\ntype DefaultLayouts = {\n\t1?: LayoutTypeType;\n\t2?: LayoutTypeType;\n\t3?: LayoutTypeType;\n};\n\ntype FCLColumnDistributionState = {\n\ttablet: { [key in LayoutTypeType]?: string };\n\tdesktop: { [key in LayoutTypeType]?: string };\n};\n\ntype FCLConfig = {\n\tmaxColumnsCount: number;\n\tdefaultTwoColumnLayoutType?: LayoutTypeType;\n\tdefaultThreeColumnLayoutType?: LayoutTypeType;\n\tdefaultControlAggregation?: string;\n};\n\nexport type FCLState = {\n\tcolumnsDistribution: FCLColumnDistributionState;\n\tdefaultLayouts: DefaultLayouts;\n};\n\n/**\n * Base controller class for your own root view with an sap.f.FlexibleColumnLayout control.\n *\n * By using or extending this controller, you can use your own root view with the sap.fe.core.AppComponent and\n * you can make use of SAP Fiori elements pages and SAP Fiori elements building blocks.\n * @hideconstructor\n * @public\n * @since 1.110.0\n */\n@defineUI5Class(\"sap.fe.core.rootView.Fcl\")\nclass FclController extends BaseController {\n\t@usingExtension(\n\t\tViewState.override({\n\t\t\tapplyInitialStateOnly: function () {\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tadaptBindingRefreshControls: function (this: ViewState, aControls: Promise<View>[]): void {\n\t\t\t\t(this.getView().getController() as FclController)._getAllVisibleViews().forEach(function (oChildView: View) {\n\t\t\t\t\tconst pChildView = Promise.resolve(oChildView);\n\t\t\t\t\taControls.push(pChildView);\n\t\t\t\t});\n\t\t\t},\n\t\t\tadaptStateControls: function (this: ViewState, aStateControls: Promise<View>[]): void {\n\t\t\t\t(this.getView().getController() as FclController)._getAllVisibleViews().forEach(function (oChildView: View) {\n\t\t\t\t\tconst pChildView = Promise.resolve(oChildView);\n\t\t\t\t\taStateControls.push(pChildView);\n\t\t\t\t});\n\t\t\t},\n\t\t\tonRestore: function (this: ViewState) {\n\t\t\t\tconst fclController = this.getView().getController() as FclController;\n\t\t\t\tconst appContentContainer = fclController.getAppContentContainer();\n\t\t\t\tconst internalModel = appContentContainer.getModel(\"internal\") as JSONModel;\n\t\t\t\tconst pages = internalModel.getProperty(\"/pages\");\n\n\t\t\t\tfor (const componentId in pages) {\n\t\t\t\t\tinternalModel.setProperty(`/pages/${componentId}/restoreStatus`, \"pending\");\n\t\t\t\t}\n\t\t\t\tfclController.onContainerReady();\n\t\t\t},\n\t\t\tonSuspend: function (this: ViewState) {\n\t\t\t\tconst fclController = this.getView().getController() as FclController;\n\t\t\t\tconst fclControl = fclController.getFclControl();\n\t\t\t\tconst beginColumnPages = fclControl.getBeginColumnPages();\n\t\t\t\tconst midColumnPages = fclControl.getMidColumnPages();\n\t\t\t\tconst endColumnPages = fclControl.getEndColumnPages();\n\t\t\t\tconst pages = ([] as Control[]).concat(beginColumnPages, midColumnPages, endColumnPages);\n\n\t\t\t\tfclController.getViewsFromPages(pages).forEach((view) => {\n\t\t\t\t\tconst controller = view.getController() as PageController | undefined;\n\t\t\t\t\tif (controller?.viewState?.onSuspend) {\n\t\t\t\t\t\tcontroller.viewState.onSuspend();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t})\n\t)\n\tviewState!: ViewState;\n\n\tprotected _oRouterProxy!: RouterProxy;\n\n\tprivate sCurrentRouteName?: string;\n\n\tprivate sCurrentArguments?: { noPreservationCache?: boolean; bIsStickyMode?: boolean; [\"?query\"]?: { layout?: string } };\n\n\tprivate sPreviousLayout?: keyof typeof LayoutType;\n\n\tprotected _oFCLConfig!: FCLConfig;\n\n\tprivate oAdditionalViewForNavRowsComputation?: View;\n\n\tprivate _oTargetsAggregation: Record<\n\t\tstring,\n\t\t{\n\t\t\taggregation: string;\n\t\t\tpattern?: string | null;\n\t\t}\n\t> = {};\n\n\tprivate _oTargetsFromRoutePattern: Record<string, string[] | undefined> = {};\n\n\tprivate messagePages: (Page | undefined)[] = [undefined, undefined, undefined];\n\n\tprivate isWritingFCLState?: Promise<FCLState>;\n\n\tonInit(): void {\n\t\tsuper.onInit();\n\t\tthis._internalInit();\n\t\tthis.setColumnDistributionModel();\n\t}\n\n\tmanageDataReceived(event: Event<{ error: { status: number }; path: string }>): void {\n\t\tif (event.getParameter(\"error\")) {\n\t\t\tconst path = event.getParameter(\"path\");\n\t\t\tconst targetedView = this._getAllVisibleViews().find((view) => view.getBindingContext()?.getPath() === path);\n\t\t\t// We need to manage error when the request is related to a form  into an ObjectPage\n\t\t\tif (path && (targetedView?.getBindingContext() as Context)?.isKeepAlive()) {\n\t\t\t\t(targetedView!.getController() as PageController)._routing.onDataReceived(event);\n\t\t\t}\n\t\t}\n\t}\n\n\tattachRouteMatchers(): void {\n\t\tthis.getRouter().attachBeforeRouteMatched(this._updateViewForNavigatedRowsComputation, this);\n\t\tsuper.attachRouteMatchers();\n\t\tthis._internalInit();\n\n\t\tthis.getRouter().attachBeforeRouteMatched(this.onBeforeRouteMatched, this);\n\t\tthis.getRouter().attachRouteMatched(this.onRouteMatched, this);\n\t\tthis.getFclControl().attachStateChange(this._saveLayout, this);\n\t}\n\n\t_internalInit(): void {\n\t\tif (this._oRouterProxy) {\n\t\t\treturn; // Already initialized\n\t\t}\n\n\t\tthis.sCurrentRouteName = \"\";\n\t\tthis.sCurrentArguments = {};\n\n\t\tconst oAppComponent = this.getAppComponent();\n\n\t\tconst oDataModel = this.getAppComponent().getModel();\n\t\toDataModel?.attachEvent(\"dataReceived\", this.manageDataReceived.bind(this));\n\n\t\tthis._oRouterProxy = oAppComponent.getRouterProxy();\n\n\t\t// Get FCL configuration in the manifest\n\t\tthis._oFCLConfig = { maxColumnsCount: 3 };\n\t\tconst oRoutingConfig = oAppComponent.getManifest()[\"sap.ui5\"].routing;\n\n\t\tif (oRoutingConfig?.config?.flexibleColumnLayout) {\n\t\t\tconst oFCLManifestConfig = oRoutingConfig.config.flexibleColumnLayout;\n\n\t\t\t// Default layout for 2 columns\n\t\t\tif (oFCLManifestConfig.defaultTwoColumnLayoutType) {\n\t\t\t\tthis._oFCLConfig.defaultTwoColumnLayoutType = oFCLManifestConfig.defaultTwoColumnLayoutType;\n\t\t\t}\n\n\t\t\t// Default layout for 3 columns\n\t\t\tif (oFCLManifestConfig.defaultThreeColumnLayoutType) {\n\t\t\t\tthis._oFCLConfig.defaultThreeColumnLayoutType = oFCLManifestConfig.defaultThreeColumnLayoutType;\n\t\t\t}\n\n\t\t\t// Limit FCL to 2 columns ?\n\t\t\tif (oFCLManifestConfig.limitFCLToTwoColumns === true) {\n\t\t\t\tthis._oFCLConfig.maxColumnsCount = 2;\n\t\t\t}\n\t\t}\n\t\tif (oRoutingConfig?.config?.controlAggregation) {\n\t\t\tthis._oFCLConfig.defaultControlAggregation = oRoutingConfig.config.controlAggregation;\n\t\t}\n\n\t\tthis._initializeTargetAggregation(oAppComponent);\n\t\tthis._initializeRoutesInformation(oAppComponent);\n\n\t\tthis.getFclControl().attachStateChange(this.onStateChanged, this);\n\t\tthis.getFclControl().attachAfterEndColumnNavigate(this.onStateChanged, this);\n\t}\n\n\tgetFclControl(): FlexibleColumnLayout {\n\t\treturn this.getAppContentContainer() as FlexibleColumnLayout;\n\t}\n\n\tgetFclConfig(): FCLConfig {\n\t\treturn this._oFCLConfig;\n\t}\n\n\t_saveLayout(oEvent: FlexibleColumnLayout$StateChangeEvent): void {\n\t\tthis.sPreviousLayout = oEvent.getParameters().layout;\n\t}\n\n\t/**\n\t * Get the additional view (on top of the visible views), to be able to compute the latest table navigated rows of\n\t * the most right visible view after a nav back or column fullscreen.\n\t *\n\t */\n\n\t_updateViewForNavigatedRowsComputation(): void {\n\t\tconst allVisibleViewsBeforeRouteMatched = this._getAllVisibleViews(this.sPreviousLayout);\n\t\tconst rightMostViewBeforeRouteMatched = allVisibleViewsBeforeRouteMatched.length\n\t\t\t? allVisibleViewsBeforeRouteMatched[allVisibleViewsBeforeRouteMatched.length - 1]\n\t\t\t: undefined;\n\n\t\tthis.getRouter().attachEventOnce(\"routeMatched\", (event: Event<{ views: Control[] }>) => {\n\t\t\tconst views = event.getParameter(\"views\");\n\t\t\tconst rightMostViewCurrent = this.getViewFromContainer(views[views.length - 1]);\n\n\t\t\tif (rightMostViewBeforeRouteMatched && rightMostViewCurrent) {\n\t\t\t\tconst viewLevelBefore = (rightMostViewBeforeRouteMatched.getViewData() as { viewLevel?: number })?.viewLevel;\n\t\t\t\tconst viewLevelAfter = (rightMostViewCurrent.getViewData() as { viewLevel?: number })?.viewLevel;\n\n\t\t\t\t// Navigation forward from L2 to view level L3 (FullScreenLayout):\n\t\t\t\tif (viewLevelAfter === this._oFCLConfig.maxColumnsCount) {\n\t\t\t\t\tthis.oAdditionalViewForNavRowsComputation = rightMostViewCurrent;\n\t\t\t\t}\n\t\t\t\t// Navigations backward from L3 down to L2, L1, L0 (ThreeColumn layout):\n\t\t\t\tif (\n\t\t\t\t\tviewLevelBefore !== undefined &&\n\t\t\t\t\tviewLevelAfter !== undefined &&\n\t\t\t\t\tviewLevelBefore < this._oFCLConfig.maxColumnsCount &&\n\t\t\t\t\tviewLevelBefore > viewLevelAfter &&\n\t\t\t\t\trightMostViewCurrent !== rightMostViewBeforeRouteMatched\n\t\t\t\t) {\n\t\t\t\t\tthis.oAdditionalViewForNavRowsComputation = rightMostViewBeforeRouteMatched;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tgetViewForNavigatedRowsComputation(): View | undefined {\n\t\treturn this.oAdditionalViewForNavRowsComputation;\n\t}\n\n\tonExit(): void {\n\t\tthis.getRouter().detachRouteMatched(this.onRouteMatched, this);\n\t\tthis.getRouter().detachBeforeRouteMatched(this.onBeforeRouteMatched, this);\n\t\tthis.getFclControl().detachStateChange(this.onStateChanged, this);\n\t\tthis.getFclControl().detachAfterEndColumnNavigate(this.onStateChanged, this);\n\n\t\tBaseController.prototype.onExit.bind(this)();\n\t}\n\n\t/**\n\t * Check if the FCL component is enabled.\n\t * @returns `true` since we are in FCL scenario\n\t * @final\n\t */\n\tisFclEnabled(): this is FclController {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Method that creates a new Page to display the IllustratedMessage containing the current error.\n\t * @param errorMessage\n\t * @param parameters\n\t * @param fclLevel\n\t * @returns A promise that creates a Page to display the error\n\t */\n\tasync displayErrorPage(errorMessage: string, parameters: NavigationToErrorPageResult, fclLevel = 0): Promise<boolean> {\n\t\treturn new Promise<boolean>(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tconst fclControl = this.getFclControl();\n\n\t\t\t\t// Manage the old API where the FCL level was passed in the parameters\n\t\t\t\tconst legacyParameters = parameters as { FCLLevel?: number };\n\t\t\t\tif (legacyParameters.FCLLevel !== undefined && fclLevel === 0) {\n\t\t\t\t\tfclLevel = legacyParameters.FCLLevel;\n\t\t\t\t}\n\n\t\t\t\tif (this._oFCLConfig && fclLevel >= this._oFCLConfig.maxColumnsCount) {\n\t\t\t\t\tfclLevel = this._oFCLConfig.maxColumnsCount - 1;\n\t\t\t\t}\n\t\t\t\tif (fclLevel < 0 || fclLevel > 2) {\n\t\t\t\t\tfclLevel = 0;\n\t\t\t\t}\n\n\t\t\t\tlet messagePage = this.messagePages[fclLevel];\n\n\t\t\t\tif (!messagePage) {\n\t\t\t\t\tmessagePage = new Page({\n\t\t\t\t\t\tshowHeader: false\n\t\t\t\t\t});\n\n\t\t\t\t\tthis.messagePages[fclLevel] = messagePage;\n\n\t\t\t\t\tswitch (fclLevel) {\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tfclControl.addBeginColumnPage(messagePage);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tfclControl.addMidColumnPage(messagePage);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tfclControl.addEndColumnPage(messagePage);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet fromPage: Control;\n\t\t\t\tconst header = new FlexBox({\n\t\t\t\t\talignItems: \"Start\",\n\t\t\t\t\tjustifyContent: \"End\",\n\t\t\t\t\titems: [\n\t\t\t\t\t\tnew Button({\n\t\t\t\t\t\t\ttype: \"Transparent\",\n\t\t\t\t\t\t\ticon: \"sap-icon://decline\",\n\t\t\t\t\t\t\ttooltip: \"{sap.fe.i18n>C_COMMON_SAPFE_CLOSE}\",\n\t\t\t\t\t\t\tpress: (): void => {\n\t\t\t\t\t\t\t\tif (parameters.handleShellBack === true) {\n\t\t\t\t\t\t\t\t\tfclControl.to(fromPage.getId(), {}, {});\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\twindow.history.back();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}).addStyleClass(\"sapUiLargeMarginEnd\")\n\t\t\t\t\t]\n\t\t\t\t});\n\t\t\t\tconst illustratedMessage = new IllustratedMessage({\n\t\t\t\t\ttitle: errorMessage,\n\t\t\t\t\tdescription: parameters.description ?? \"\",\n\t\t\t\t\tillustrationType: parameters.errorType ? `sapIllus-${parameters.errorType}` : \"sapIllus-UnableToLoad\"\n\t\t\t\t});\n\t\t\t\tmessagePage.removeAllContent();\n\t\t\t\tmessagePage.addContent(header);\n\t\t\t\tmessagePage.addContent(illustratedMessage);\n\n\t\t\t\tlet afterNavigateEventName: string;\n\t\t\t\tswitch (fclLevel) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tfromPage = fclControl.getCurrentBeginColumnPage();\n\t\t\t\t\t\tafterNavigateEventName = \"afterBeginColumnNavigate\";\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tfromPage = fclControl.getCurrentMidColumnPage();\n\t\t\t\t\t\tafterNavigateEventName = \"afterMidColumnNavigate\";\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tfromPage = fclControl.getCurrentEndColumnPage();\n\t\t\t\t\t\tafterNavigateEventName = \"afterEndColumnNavigate\";\n\t\t\t\t}\n\n\t\t\t\tif (parameters.handleShellBack === true) {\n\t\t\t\t\tconst oAppComponent = CommonUtils.getAppComponent(fromPage);\n\t\t\t\t\tawait oAppComponent.getShellServices().setBackNavigation(async function () {\n\t\t\t\t\t\tfclControl.to(fromPage.getId(), {}, {});\n\t\t\t\t\t\tawait oAppComponent.getShellServices().setBackNavigation();\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst fromView = this.getViewFromContainer(fromPage);\n\t\t\t\tfclControl.attachEventOnce(afterNavigateEventName, (_event: Event<{ from: Control }>) => {\n\t\t\t\t\tif (fromView && fromView.isA<View>(\"sap.ui.core.mvc.View\")) {\n\t\t\t\t\t\t(fromView.getController() as PageController).pageReady?.forcePageReady();\n\t\t\t\t\t}\n\t\t\t\t\tresolve(true);\n\t\t\t\t});\n\n\t\t\t\tfclControl.to(messagePage.getId(), {}, {});\n\t\t\t} catch (e) {\n\t\t\t\treject(false);\n\t\t\t\tLog.info(`${e}`);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Initialize the object _oTargetsAggregation that defines for each route the relevant aggregation and pattern.\n\t * @param oAppComponent Reference to the AppComponent\n\t */\n\t_initializeTargetAggregation(oAppComponent: AppComponent): void {\n\t\tconst oManifest = oAppComponent.getManifest(),\n\t\t\toTargets = oManifest[\"sap.ui5\"].routing ? oManifest[\"sap.ui5\"].routing.targets : null;\n\n\t\tthis._oTargetsAggregation = {};\n\n\t\tif (oTargets) {\n\t\t\tObject.keys(oTargets).forEach((sTargetName: string) => {\n\t\t\t\tconst oTarget = oTargets[sTargetName];\n\t\t\t\tif (oTarget.controlAggregation) {\n\t\t\t\t\tthis._oTargetsAggregation[sTargetName] = {\n\t\t\t\t\t\taggregation: oTarget.controlAggregation,\n\t\t\t\t\t\tpattern: oTarget.contextPattern\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tthis._oTargetsAggregation[sTargetName] = {\n\t\t\t\t\t\taggregation: \"page\",\n\t\t\t\t\t\tpattern: null\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Initializes the mapping between a route (identifed as its pattern) and the corresponding targets\n\t * @param oAppComponent ref to the AppComponent\n\t */\n\n\t_initializeRoutesInformation(oAppComponent: AppComponent): void {\n\t\tconst oManifest = oAppComponent.getManifest(),\n\t\t\taRoutes = oManifest[\"sap.ui5\"].routing ? oManifest[\"sap.ui5\"].routing.routes : null;\n\n\t\tthis._oTargetsFromRoutePattern = {};\n\n\t\tif (aRoutes) {\n\t\t\taRoutes.forEach((route) => {\n\t\t\t\tif (route.pattern) {\n\t\t\t\t\tthis._oTargetsFromRoutePattern[route.pattern] = route.target as string[];\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tgetCurrentArgument(): unknown {\n\t\treturn this.sCurrentArguments;\n\t}\n\n\tgetCurrentRouteName(): string | undefined {\n\t\treturn this.sCurrentRouteName;\n\t}\n\n\t/**\n\t * Getter for oTargetsAggregation array.\n\t * @returns The _oTargetsAggregation array\n\t */\n\tgetTargetAggregation(): Record<\n\t\tstring,\n\t\t{\n\t\t\taggregation: string;\n\t\t\tpattern?: string | null;\n\t\t}\n\t> {\n\t\treturn this._oTargetsAggregation;\n\t}\n\n\t/**\n\t * Function triggered by the router RouteMatched event.\n\t * @param oEvent\n\t */\n\tonRouteMatched(oEvent: Router$RouteMatchedEvent): void {\n\t\tconst sRouteName = oEvent.getParameter(\"name\");\n\n\t\t// Save the current/previous routes and arguments\n\t\tthis.sCurrentRouteName = sRouteName;\n\t\tthis.sCurrentArguments = oEvent.getParameter(\"arguments\");\n\t}\n\n\t/**\n\t * This function is triggering the table scroll to the navigated row after each layout change.\n\t *\n\t */\n\n\t_scrollTablesToLastNavigatedItems(): void {\n\t\tconst aViews = this._getAllVisibleViews();\n\t\t//The scrolls are triggered only if the layout is with several columns or when switching the mostRight column in full screen\n\t\tif (\n\t\t\taViews.length > 1 ||\n\t\t\t(aViews.length && (aViews[0].getViewData() as { viewLevel: number }).viewLevel < this._oFCLConfig.maxColumnsCount)\n\t\t) {\n\t\t\tconst oAdditionalView = this.getViewForNavigatedRowsComputation();\n\t\t\tif (oAdditionalView && !aViews.includes(oAdditionalView)) {\n\t\t\t\taViews.push(oAdditionalView);\n\t\t\t}\n\t\t\tfor (let index = aViews.length - 1; index > 0; index--) {\n\t\t\t\tconst oView = aViews[index],\n\t\t\t\t\toPreviousView = aViews[index - 1];\n\t\t\t\tconst bindingContext = oView.getBindingContext();\n\t\t\t\tconst previousViewController = oPreviousView.getController() as { _scrollTablesToRow?: Function };\n\t\t\t\tif (bindingContext && previousViewController._scrollTablesToRow) {\n\t\t\t\t\tpreviousViewController._scrollTablesToRow(bindingContext.getPath());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Function triggered by the FCL StateChanged event.\n\t * @param oEvent\n\t */\n\tonStateChanged(oEvent: FlexibleColumnLayout$StateChangeEvent | FlexibleColumnLayout$AfterEndColumnNavigateEvent): void {\n\t\tconst bIsNavigationArrow = (oEvent as FlexibleColumnLayout$StateChangeEvent).getParameter(\"isNavigationArrow\");\n\t\tif (this.sCurrentArguments !== undefined) {\n\t\t\tif (!this.sCurrentArguments[\"?query\"]) {\n\t\t\t\tthis.sCurrentArguments[\"?query\"] = {};\n\t\t\t}\n\t\t\tthis.sCurrentArguments[\"?query\"].layout = (oEvent as FlexibleColumnLayout$StateChangeEvent).getParameter(\"layout\");\n\t\t}\n\t\tthis._forceModelContextChangeOnBreadCrumbs(oEvent);\n\n\t\t// Replace the URL with the new layout if a navigation arrow was used\n\t\tif (bIsNavigationArrow && this.sCurrentRouteName) {\n\t\t\tthis._oRouterProxy.navTo(this.sCurrentRouteName, this.sCurrentArguments);\n\t\t}\n\n\t\tconst oView = this.getRightmostView();\n\t\tif (oView) {\n\t\t\tthis.computeTitleHierarchy(oView);\n\t\t}\n\t}\n\n\t/**\n\t * Function to fire ModelContextChange event on all breadcrumbs ( on each ObjectPages).\n\t * @param oEvent\n\t */\n\t_forceModelContextChangeOnBreadCrumbs(oEvent: Event<ManagedObject$ModelContextChangeEventParameters, FlexibleColumnLayout>): void {\n\t\t//force modelcontextchange on ObjectPages to refresh the breadcrumbs link hrefs\n\t\tconst oFcl = oEvent.getSource();\n\t\tlet oPages: Control[] = [];\n\t\toPages = oPages.concat(oFcl.getBeginColumnPages()).concat(oFcl.getMidColumnPages()).concat(oFcl.getEndColumnPages());\n\t\toPages.forEach((oPage) => {\n\t\t\tconst oView = this.getViewFromContainer(oPage);\n\t\t\tconst oBreadCrumbs = oView?.byId && oView.byId(\"breadcrumbs\");\n\t\t\tif (oBreadCrumbs) {\n\t\t\t\toBreadCrumbs.fireModelContextChange();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Function triggered to update the Share button Visibility.\n\t * @param viewColumn Name of the current column (\"beginColumn\", \"midColumn\", \"endColumn\")\n\t * @param sLayout The current layout used by the FCL\n\t * @returns The share button visibility\n\t */\n\t_updateShareButtonVisibility(viewColumn: string, sLayout: string): boolean {\n\t\tlet bShowShareIcon;\n\t\tswitch (sLayout) {\n\t\t\tcase \"OneColumn\":\n\t\t\t\tbShowShareIcon = viewColumn === \"beginColumn\";\n\t\t\t\tbreak;\n\t\t\tcase \"MidColumnFullScreen\":\n\t\t\tcase \"ThreeColumnsBeginExpandedEndHidden\":\n\t\t\tcase \"ThreeColumnsMidExpandedEndHidden\":\n\t\t\tcase \"TwoColumnsBeginExpanded\":\n\t\t\tcase \"TwoColumnsMidExpanded\":\n\t\t\t\tbShowShareIcon = viewColumn === \"midColumn\";\n\t\t\t\tbreak;\n\t\t\tcase \"EndColumnFullScreen\":\n\t\t\tcase \"ThreeColumnsEndExpanded\":\n\t\t\tcase \"ThreeColumnsMidExpanded\":\n\t\t\t\tbShowShareIcon = viewColumn === \"endColumn\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbShowShareIcon = false;\n\t\t}\n\t\treturn bShowShareIcon;\n\t}\n\n\t_updateEditButtonVisiblity(viewColumn: string, sLayout: string): boolean {\n\t\tconst hiddenDraft = (this.getAppComponent()?.getEnvironmentCapabilities()?.getCapabilities()?.HiddenDraft as HiddenDraft)?.enabled;\n\t\tlet bEditButtonVisible = true;\n\t\tswitch (viewColumn) {\n\t\t\tcase \"midColumn\":\n\t\t\t\tswitch (sLayout) {\n\t\t\t\t\tcase \"TwoColumnsMidExpanded\":\n\t\t\t\t\tcase \"ThreeColumnsMidExpandedEndHidden\":\n\t\t\t\t\tcase \"ThreeColumnsBeginExpandedEndHidden\":\n\t\t\t\t\tcase \"TwoColumnsBeginExpanded\":\n\t\t\t\t\t\tif (!hiddenDraft) {\n\t\t\t\t\t\t\tbEditButtonVisible = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"ThreeColumnsMidExpanded\":\n\t\t\t\t\tcase \"ThreeColumnsEndExpanded\":\n\t\t\t\t\t\tbEditButtonVisible = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"endColumn\":\n\t\t\t\tswitch (sLayout) {\n\t\t\t\t\tcase \"ThreeColumnsMidExpanded\":\n\t\t\t\t\tcase \"ThreeColumnsEndExpanded\":\n\t\t\t\t\t\tif (!hiddenDraft) {\n\t\t\t\t\t\t\tbEditButtonVisible = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\treturn bEditButtonVisible;\n\t}\n\n\t_updateSaveAndCancelButtonVisiblity(viewColumn: string, sLayout: string): boolean {\n\t\tconst hiddenDraft = (this.getAppComponent()?.getEnvironmentCapabilities()?.getCapabilities()?.HiddenDraft as HiddenDraft)?.enabled;\n\t\tlet bSaveAndCancelButtonVisible = true;\n\t\tswitch (viewColumn) {\n\t\t\tcase \"midColumn\":\n\t\t\t\tswitch (sLayout) {\n\t\t\t\t\tcase \"ThreeColumnsEndExpanded\":\n\t\t\t\t\tcase \"ThreeColumnsMidExpanded\":\n\t\t\t\t\t\tif (hiddenDraft) {\n\t\t\t\t\t\t\tbSaveAndCancelButtonVisible = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\treturn bSaveAndCancelButtonVisible;\n\t}\n\n\tupdateUIStateForView(oView: FEView, FCLLevel: number): void {\n\t\tconst oUIState = this.getHelper().getCurrentUIState(),\n\t\t\toFclColName = [\"beginColumn\", \"midColumn\", \"endColumn\"],\n\t\t\tsLayout = this.getFclControl().getLayout();\n\t\tlet viewColumn;\n\n\t\tif (!oView.getModel(\"fclhelper\")) {\n\t\t\toView.setModel(this._createHelperModel(), \"fclhelper\");\n\t\t}\n\t\tif (!oUIState.actionButtonsInfo) {\n\t\t\toUIState.actionButtonsInfo = {};\n\t\t}\n\t\tif (!oUIState.actionButtonsInfo.midColumn) {\n\t\t\toUIState.actionButtonsInfo.midColumn = {};\n\t\t}\n\t\tif (!oUIState.actionButtonsInfo.endColumn) {\n\t\t\toUIState.actionButtonsInfo.endColumn = {};\n\t\t}\n\t\tif (FCLLevel >= this._oFCLConfig.maxColumnsCount) {\n\t\t\t// The view is on a level > max number of columns. It's always fullscreen without close/exit buttons\n\t\t\tviewColumn = oFclColName[this._oFCLConfig.maxColumnsCount - 1];\n\n\t\t\toUIState.actionButtonsInfo.midColumn.fullScreen = null;\n\t\t\toUIState.actionButtonsInfo.midColumn.exitFullScreen = null;\n\t\t\toUIState.actionButtonsInfo.midColumn.closeColumn = null;\n\t\t\toUIState.actionButtonsInfo.endColumn.exitFullScreen = null;\n\t\t\toUIState.actionButtonsInfo.endColumn.fullScreen = null;\n\t\t\toUIState.actionButtonsInfo.endColumn.closeColumn = null;\n\t\t} else {\n\t\t\tviewColumn = oFclColName[FCLLevel];\n\t\t}\n\n\t\tif (\n\t\t\tFCLLevel >= this._oFCLConfig.maxColumnsCount ||\n\t\t\tsLayout === \"EndColumnFullScreen\" ||\n\t\t\tsLayout === \"MidColumnFullScreen\" ||\n\t\t\tsLayout === \"OneColumn\"\n\t\t) {\n\t\t\toView.getModel(\"fclhelper\").setProperty(\"/breadCrumbIsVisible\", true);\n\t\t} else {\n\t\t\toView.getModel(\"fclhelper\").setProperty(\"/breadCrumbIsVisible\", false);\n\t\t}\n\t\t// Unfortunately, the FCLHelper doesn't provide actionButton values for the first column\n\t\t// so we have to add this info manually\n\t\t(oUIState.actionButtonsInfo as { beginColumn?: object }).beginColumn = {\n\t\t\tfullScreen: null,\n\t\t\texitFullScreen: null,\n\t\t\tcloseColumn: null\n\t\t};\n\n\t\tconst oActionButtonInfos: NavigationActionsTargets & {\n\t\t\tswitchVisible?: boolean;\n\t\t\tswitchIcon?: string;\n\t\t\tisFullScreen?: boolean;\n\t\t\tcloseVisible?: boolean;\n\t\t} = Object.assign({}, oUIState.actionButtonsInfo[viewColumn as keyof ColumnsNavigationActions]);\n\t\toActionButtonInfos.switchVisible = oActionButtonInfos.fullScreen !== null || oActionButtonInfos.exitFullScreen !== null;\n\t\toActionButtonInfos.switchIcon = oActionButtonInfos.fullScreen !== null ? \"sap-icon://full-screen\" : \"sap-icon://exit-full-screen\";\n\t\toActionButtonInfos.isFullScreen = oActionButtonInfos.fullScreen === null;\n\t\toActionButtonInfos.closeVisible = oActionButtonInfos.closeColumn !== null;\n\n\t\toView.getModel(\"fclhelper\").setProperty(\"/actionButtonsInfo\", oActionButtonInfos);\n\n\t\toView.getModel(\"fclhelper\").setProperty(\"/showEditButton\", this._updateEditButtonVisiblity(viewColumn, sLayout));\n\n\t\toView.getModel(\"fclhelper\").setProperty(\"/showSaveAndCancelButton\", this._updateSaveAndCancelButtonVisiblity(viewColumn, sLayout));\n\n\t\toView.getModel(\"fclhelper\").setProperty(\"/showShareIcon\", this._updateShareButtonVisibility(viewColumn, sLayout));\n\t}\n\n\t/**\n\t * Function triggered by the router BeforeRouteMatched event.\n\t * @param oEvent\n\t */\n\tasync onBeforeRouteMatched(oEvent: Router$BeforeRouteMatchedEvent): Promise<void> {\n\t\tif (oEvent) {\n\t\t\tconst oQueryParams = (oEvent.getParameters().arguments! as Record<string, { layout: LayoutTypeType }>)[\"?query\"];\n\t\t\tlet sLayout = oQueryParams ? oQueryParams.layout : undefined;\n\n\t\t\t// If there is no layout parameter, query for the default level 0 layout (normally OneColumn)\n\t\t\tif (!sLayout) {\n\t\t\t\tconst oNextUIState = this.getHelper().getNextUIState(0);\n\t\t\t\tsLayout = oNextUIState.layout as LayoutTypeType | undefined;\n\t\t\t}\n\n\t\t\t// Check if the layout if compatible with the number of targets\n\t\t\t// This should always be the case for normal navigation, just needed in case\n\t\t\t// the URL has been manually modified\n\t\t\tconst aTargets = (oEvent.getParameter(\"config\") as { target?: string[] })?.target;\n\t\t\tsLayout = this._correctLayoutForTargets(sLayout!, aTargets);\n\t\t\t// we store a first time the layout for the updateUIStateForView to be done with the correct number of columns : SNOW DINC0449277\n\t\t\tif (sLayout) {\n\t\t\t\tthis.getFclControl().setLayout(sLayout);\n\t\t\t}\n\t\t\tawait this.isWritingFCLState;\n\t\t\tsLayout = await this.getStoredLayout(sLayout);\n\n\t\t\t// Update the layout of the FlexibleColumnLayout.\n\t\t\tif (sLayout) {\n\t\t\t\tthis.getFclControl().setLayout(sLayout);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Helper for the FCL Component.\n\t * @returns Instance of a semantic helper\n\t */\n\tgetHelper(): FlexibleColumnLayoutSemanticHelper {\n\t\treturn FlexibleColumnLayoutSemanticHelper.getInstanceFor(this.getFclControl(), this._oFCLConfig);\n\t}\n\n\t/**\n\t * Calculates the FCL layout for a given FCL level and a target hash.\n\t * @param iNextFCLLevel FCL level to be navigated to\n\t * @param sHash The hash to be navigated to\n\t * @param sProposedLayout The proposed layout\n\t * @param keepCurrentLayout True if we want to keep the current layout if possible\n\t * @returns The calculated layout\n\t */\n\tcalculateLayout(iNextFCLLevel: number, sHash: string, sProposedLayout: LayoutTypeType | undefined, keepCurrentLayout = false): string {\n\t\t// First, ask the FCL helper to calculate the layout if nothing is proposed\n\t\tif (!sProposedLayout) {\n\t\t\tsProposedLayout = (\n\t\t\t\tkeepCurrentLayout ? this.getFclControl().getLayout() : this.getHelper().getNextUIState(iNextFCLLevel).layout\n\t\t\t) as LayoutTypeType | undefined;\n\t\t}\n\n\t\t// Then change this value if necessary, based on the number of targets\n\t\tconst oRoute = (this.getRouter() as { getRouteByHash?: (hash: string) => Route }).getRouteByHash?.(\n\t\t\t`${sHash}?layout=${sProposedLayout}`\n\t\t);\n\t\tconst aTargets = this._oTargetsFromRoutePattern[oRoute!.getPattern()];\n\n\t\treturn this._correctLayoutForTargets(sProposedLayout!, aTargets);\n\t}\n\n\t/**\n\t * Checks whether a given FCL layout is compatible with an array of targets.\n\t * @param sProposedLayout Proposed value for the FCL layout\n\t * @param aTargets Array of target names used for checking\n\t * @returns The corrected layout\n\t */\n\t_correctLayoutForTargets(sProposedLayout: LayoutTypeType, aTargets: string[] | undefined): LayoutTypeType {\n\t\tconst allAllowedLayouts = {\n\t\t\t\"2\": [\"TwoColumnsMidExpanded\", \"TwoColumnsBeginExpanded\", \"MidColumnFullScreen\"],\n\t\t\t\"3\": [\n\t\t\t\t\"ThreeColumnsMidExpanded\",\n\t\t\t\t\"ThreeColumnsEndExpanded\",\n\t\t\t\t\"ThreeColumnsMidExpandedEndHidden\",\n\t\t\t\t\"ThreeColumnsBeginExpandedEndHidden\",\n\t\t\t\t\"MidColumnFullScreen\",\n\t\t\t\t\"EndColumnFullScreen\"\n\t\t\t]\n\t\t};\n\n\t\tif (aTargets && !Array.isArray(aTargets)) {\n\t\t\t// To support single target as a string in the manifest\n\t\t\taTargets = [aTargets];\n\t\t}\n\n\t\tif (!aTargets) {\n\t\t\t// Defensive, just in case...\n\t\t\treturn sProposedLayout;\n\t\t} else if (aTargets.length > 1) {\n\t\t\t// More than 1 target: just simply check from the allowed values\n\t\t\tconst aLayouts = allAllowedLayouts[aTargets.length.toString() as \"2\" | \"3\"] as LayoutTypeType[];\n\t\t\tif (!aLayouts.includes(sProposedLayout)) {\n\t\t\t\t// The proposed layout isn't compatible with the number of columns\n\t\t\t\t// --> Ask the helper for the default layout for the number of columns\n\t\t\t\tconst defaultLayout = this._getDefaultLayout(aTargets.length);\n\t\t\t\tsProposedLayout = defaultLayout && aLayouts.includes(defaultLayout) ? defaultLayout : aLayouts[0];\n\t\t\t}\n\t\t} else {\n\t\t\t// Only one target\n\t\t\tconst sTargetAggregation =\n\t\t\t\tthis.getTargetAggregation()[getRouteTargetName(aTargets[0])].aggregation || this._oFCLConfig.defaultControlAggregation;\n\t\t\tswitch (sTargetAggregation) {\n\t\t\t\tcase \"beginColumnPages\":\n\t\t\t\t\tsProposedLayout = LayoutType.OneColumn;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"midColumnPages\":\n\t\t\t\t\tsProposedLayout = LayoutType.MidColumnFullScreen;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"endColumnPages\":\n\t\t\t\t\tsProposedLayout = LayoutType.EndColumnFullScreen;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t\t// no default\n\t\t\t}\n\t\t}\n\n\t\treturn sProposedLayout;\n\t}\n\n\t/**\n\t * Gets default Layout for number of columns.\n\t * @param numberOfTargetsFromRoute\n\t * @returns An FCL Layout based on the manifest configuration if it is defined.\n\t */\n\t_getDefaultLayout(numberOfTargetsFromRoute: number): LayoutTypeType | undefined {\n\t\tswitch (numberOfTargetsFromRoute) {\n\t\t\tcase 3:\n\t\t\t\treturn this._oFCLConfig.defaultTwoColumnLayoutType;\n\t\t\tcase 2:\n\t\t\t\treturn this._oFCLConfig.defaultTwoColumnLayoutType;\n\t\t\tdefault:\n\t\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the instanced views in the FCL component.\n\t * @returns Return the instanced views.\n\t */\n\tgetInstancedViews(): View[] {\n\t\tconst fclControl = this.getFclControl();\n\t\tconst componentContainers: Control[] = [\n\t\t\t...fclControl.getBeginColumnPages(),\n\t\t\t...fclControl.getMidColumnPages(),\n\t\t\t...fclControl.getEndColumnPages()\n\t\t];\n\t\treturn this.getViewsFromPages(componentContainers);\n\t}\n\n\t/**\n\t * Gets the current visible pages.\n\t * @returns Return the visible views.\n\t */\n\tgetVisibleViews(): View[] {\n\t\treturn this._getAllVisibleViews();\n\t}\n\n\t/**\n\t * Get all visible views in the FCL component.\n\t * @param forLayout  Optional parameter is very specific as part of the calculation of the latest navigated row\n\t * @returns Array of all visible views\n\t */\n\t_getAllVisibleViews(forLayout?: string): View[] {\n\t\tconst visibleViews: View[] = [];\n\t\tconst layout = forLayout ? forLayout : this.getFclControl().getLayout();\n\t\tconst addView = (page: Control | undefined): void => {\n\t\t\tif (page) {\n\t\t\t\tconst view = this.getViewFromContainer(page);\n\t\t\t\tif (view) {\n\t\t\t\t\tvisibleViews.push(view);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tswitch (layout) {\n\t\t\tcase LayoutType.EndColumnFullScreen:\n\t\t\t\taddView(this.getFclControl().getCurrentEndColumnPage());\n\t\t\t\tbreak;\n\n\t\t\tcase LayoutType.MidColumnFullScreen:\n\t\t\t\taddView(this.getFclControl().getCurrentMidColumnPage());\n\t\t\t\tbreak;\n\n\t\t\tcase LayoutType.OneColumn:\n\t\t\t\taddView(this.getFclControl().getCurrentBeginColumnPage());\n\t\t\t\tbreak;\n\n\t\t\tcase LayoutType.ThreeColumnsEndExpanded:\n\t\t\tcase LayoutType.ThreeColumnsMidExpanded:\n\t\t\t\taddView(this.getFclControl().getCurrentBeginColumnPage());\n\t\t\t\taddView(this.getFclControl().getCurrentMidColumnPage());\n\t\t\t\taddView(this.getFclControl().getCurrentEndColumnPage());\n\t\t\t\tbreak;\n\n\t\t\tcase LayoutType.TwoColumnsBeginExpanded:\n\t\t\tcase LayoutType.TwoColumnsMidExpanded:\n\t\t\tcase LayoutType.ThreeColumnsMidExpandedEndHidden:\n\t\t\tcase LayoutType.ThreeColumnsBeginExpandedEndHidden:\n\t\t\t\taddView(this.getFclControl().getCurrentBeginColumnPage());\n\t\t\t\taddView(this.getFclControl().getCurrentMidColumnPage());\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tLog.error(`Unhandled switch case for ${this.getFclControl().getLayout()}`);\n\t\t}\n\n\t\treturn visibleViews;\n\t}\n\n\t_getAllViews(forLayout?: string): View[] {\n\t\tconst allViews: View[] = [];\n\t\tconst layout = forLayout ? forLayout : this.getFclControl().getLayout();\n\n\t\tconst addView = (page: Control | undefined): void => {\n\t\t\tif (page) {\n\t\t\t\tconst view = this.getViewFromContainer(page);\n\t\t\t\tif (view) {\n\t\t\t\t\tallViews.push(view);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tswitch (layout) {\n\t\t\tcase LayoutType.OneColumn:\n\t\t\t\taddView(this.getFclControl().getCurrentBeginColumnPage());\n\t\t\t\tbreak;\n\t\t\tcase LayoutType.ThreeColumnsEndExpanded:\n\t\t\tcase LayoutType.ThreeColumnsMidExpanded:\n\t\t\tcase LayoutType.ThreeColumnsMidExpandedEndHidden:\n\t\t\tcase LayoutType.ThreeColumnsBeginExpandedEndHidden:\n\t\t\tcase LayoutType.EndColumnFullScreen:\n\t\t\t\taddView(this.getFclControl().getCurrentBeginColumnPage());\n\t\t\t\taddView(this.getFclControl().getCurrentMidColumnPage());\n\t\t\t\taddView(this.getFclControl().getCurrentEndColumnPage());\n\t\t\t\tbreak;\n\n\t\t\tcase LayoutType.TwoColumnsBeginExpanded:\n\t\t\tcase LayoutType.TwoColumnsMidExpanded:\n\t\t\t\taddView(this.getFclControl().getCurrentBeginColumnPage());\n\t\t\t\taddView(this.getFclControl().getCurrentMidColumnPage());\n\t\t\t\tbreak;\n\n\t\t\tcase LayoutType.MidColumnFullScreen:\n\t\t\t\t// In this case we need to determine if this mid column fullscreen comes from a 2 or a 3 column layout\n\t\t\t\t{\n\t\t\t\t\tconst layoutWhenExitFullScreen =\n\t\t\t\t\t\tthis.getHelper().getCurrentUIState().actionButtonsInfo?.midColumn?.exitFullScreen ?? \"\";\n\t\t\t\t\taddView(this.getFclControl().getCurrentBeginColumnPage());\n\t\t\t\t\taddView(this.getFclControl().getCurrentMidColumnPage());\n\t\t\t\t\tif (layoutWhenExitFullScreen.startsWith(\"ThreeColumn\")) {\n\t\t\t\t\t\t// We come from a 3 column layout\n\t\t\t\t\t\taddView(this.getFclControl().getCurrentEndColumnPage());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tLog.error(`Unhandled switch case for ${this.getFclControl().getLayout()}`);\n\t\t}\n\t\treturn allViews;\n\t}\n\n\tasync onContainerReady(): Promise<void[]> {\n\t\t// Restore views if neccessary.\n\t\tconst aViews = this._getAllVisibleViews();\n\t\tconst aRestorePromises: Promise<void>[] = aViews.reduce(function (aPromises: Promise<void>[], oTargetView: View) {\n\t\t\tif (oTargetView.isA && oTargetView.isA(\"sap.ui.core.mvc.View\")) {\n\t\t\t\taPromises.push(KeepAliveHelper.restoreView(oTargetView as FEView));\n\t\t\t}\n\n\t\t\treturn aPromises;\n\t\t}, []);\n\t\treturn Promise.all(aRestorePromises);\n\t}\n\n\tgetRightmostContext(): Context | undefined {\n\t\treturn this.getRightmostView()?.getBindingContext() ?? undefined;\n\t}\n\n\tgetRightmostView(): FEView {\n\t\treturn this._getAllViews().pop() as FEView;\n\t}\n\n\tisContextUsedInPages(oContext: Context): boolean {\n\t\tif (!this.getFclControl()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst aAllVisibleViews = this._getAllViews();\n\t\tfor (const view of aAllVisibleViews) {\n\t\t\tif (view) {\n\t\t\t\tif (view.getBindingContext() === oContext) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// A view has been destroyed --> app is currently being destroyed\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tasync _setShellMenuTitle(\n\t\toAppComponent: AppComponent,\n\t\tsTitle: string,\n\t\tsAppTitle: string,\n\t\tbrowerTitle?: TitleAdditionalInfo\n\t): Promise<void> {\n\t\tif (this.getHelper().getCurrentUIState().isFullScreen !== true) {\n\t\t\tawait oAppComponent.getShellServices().setTitle(sAppTitle, browerTitle);\n\t\t} else {\n\t\t\tawait oAppComponent.getShellServices().setTitle(sTitle, browerTitle);\n\t\t}\n\t}\n\n\t/**\n\t * This method is called to retieve the FCL state from the personalization service.\n\t * @returns The FCL state\n\t */\n\tasync getFCLPersonalizationData(): Promise<FCLState> {\n\t\tconst shellServices = this.getAppComponent()?.getShellServices();\n\t\tconst emptyFCLState = {\n\t\t\tdefaultLayouts: {},\n\t\t\tcolumnsDistribution: {\n\t\t\t\tdesktop: {},\n\t\t\t\ttablet: {}\n\t\t\t}\n\t\t};\n\t\treturn ((await shellServices.getApplicationPersonalizationData(\"FCL-Personalization\")) ?? emptyFCLState) as FCLState;\n\t}\n\n\t/**\n\t * This method is called to set the FCL state in the personalization service.\n\t * @param fclState The FCL state\n\t */\n\tsetFCLPersonalizationData(fclState: FCLState): void {\n\t\tconst shellServices = this.getAppComponent()?.getShellServices();\n\t\tshellServices.setApplicationPersonalizationData(\"FCL-Personalization\", fclState);\n\t}\n\n\t/**\n\t * This method requests the FCL state from the personalization service and sets the model accordingly.\n\t */\n\tprivate async setColumnDistributionModel(): Promise<void> {\n\t\tconst columnsDistribution = (await this.getFCLPersonalizationData()).columnsDistribution;\n\t\tif (columnsDistribution) {\n\t\t\tconst model = this.getView().getModel(\"internal\");\n\t\t\tmodel.setProperty(\"/FCLColumnsDistribution\", columnsDistribution);\n\t\t}\n\t}\n\n\t/**\n\t * This method is called when the user changes the columns distribution in the FCL settings dialog.\n\t * It updates the FCL state in the personalization service.\n\t * @param event\n\t */\n\tprivate async onColumnsDistributionChange(\n\t\tevent: Event<{ media: \"tablet\" | \"desktop\"; layout: LayoutTypeType; columnsSizes: string }>\n\t): Promise<void> {\n\t\tconst { media, layout, columnsSizes } = event.getParameters();\n\t\tconst model = this.getView().getModel(\"internal\");\n\t\tmodel.setProperty(`/FCLColumnsDistribution/${media}/${layout}`, columnsSizes);\n\t\tthis.isWritingFCLState = this.getFCLPersonalizationData();\n\t\tconst fclState = await this.isWritingFCLState;\n\t\tconst nbColumnsDisplayed = this.getNumberOfColumnsFromLayout(layout);\n\t\tif (nbColumnsDisplayed) {\n\t\t\tfclState.defaultLayouts[nbColumnsDisplayed] = layout;\n\t\t\tfclState.columnsDistribution[media][layout] = columnsSizes;\n\t\t\tthis.setFCLPersonalizationData(fclState);\n\t\t}\n\t\tthis.isWritingFCLState = undefined;\n\t\treturn;\n\t}\n\n\t/**\n\t * This method returns the number of columns displayed in the FCL based on the layout.\n\t * @param layout  The layout\n\t * @returns The number of columns displayed\n\t */\n\tprivate getNumberOfColumnsFromLayout(layout: LayoutTypeType): 1 | 2 | 3 | null {\n\t\tconst nbColumnsDisplayed = /^(One|Two|Three)Column/.exec(layout)?.[1] as \"One\" | \"Two\" | \"Three\";\n\t\tswitch (nbColumnsDisplayed) {\n\t\t\tcase \"One\":\n\t\t\t\treturn 1;\n\t\t\tcase \"Two\":\n\t\t\t\treturn 2;\n\t\t\tcase \"Three\":\n\t\t\t\treturn 3;\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * This method returns the layout stored in the personalization service based on the proposed layout.\n\t * @param proposedLayout\n\t * @returns The FCL layout stored in the personalization service\n\t */\n\tasync getStoredLayout(proposedLayout?: LayoutTypeType): Promise<LayoutTypeType | undefined> {\n\t\tconst layout = proposedLayout ?? (this.getFclControl().getLayout() as LayoutTypeType);\n\t\tconst nbColumnsDisplayed = this.getNumberOfColumnsFromLayout(layout);\n\t\tif (nbColumnsDisplayed) {\n\t\t\tconst defaultLayouts = (await this.getFCLPersonalizationData()).defaultLayouts;\n\t\t\treturn defaultLayouts?.[nbColumnsDisplayed] ?? layout;\n\t\t}\n\t\treturn layout;\n\t}\n}\n\nexport default FclController;\n"],"mappings":"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","ignoreList":[]}
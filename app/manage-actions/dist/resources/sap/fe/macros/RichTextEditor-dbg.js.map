{"version":3,"names":["RichTextEditorBlock","_dec","defineUI5Class","_dec2","property","type","required","_dec3","isBindingInfo","_dec4","_dec5","aggregation","multiple","defaultClass","ButtonGroup","_dec6","PluginDefinition","_dec7","_dec8","bindable","_dec9","_class","_class2","_BuildingBlock","properties","others","_this","_isInEditMode","compileExpression","UI","IsEditable","call","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","getPlugins","pluginsArray","excludeDefaultPlugins","map","name","plugins","length","plugin","push","getButtonGroups","buttonGroups","buttonGroup","visible","priority","row","customToolbarPriority","buttons","split","getEditContent","_editContent","destroy","_jsx","RichTextEditor","id","createId","value","customToolbar","editable","editorType","showGroupFontStyle","showGroupTextAlign","showGroupStructure","showGroupFont","showGroupClipboard","showGroupInsert","showGroupLink","showGroupUndo","sanitizeValue","wrapping","width","undefined","attachReady","addButtonGroups","_exports","_inheritsLoose","_proto","prototype","onMetadataAvailable","_ownerComponent","content","createContent","createContentDebounced","_contentTimer","clearTimeout","setTimeout","exit","_displayContent","set_isInEditMode","inEditMode","setProperty","setReadOnly","readOnly","lateButtonGroups","reverse","lateButtonGroup","addButtonGroup","detachReady","getDisplayContent","FormattedText","htmlText","BuildingBlock","_applyDecoratedDescriptor","configurable","enumerable","writable","initializer"],"sourceRoot":".","sources":["RichTextEditor.tsx"],"sourcesContent":["import { compileExpression } from \"sap/fe/base/BindingToolkit\";\nimport type { PropertiesOf } from \"sap/fe/base/ClassSupport\";\nimport { aggregation, defineUI5Class, property } from \"sap/fe/base/ClassSupport\";\nimport BuildingBlock from \"sap/fe/core/buildingBlocks/BuildingBlock\";\nimport { UI } from \"sap/fe/core/helpers/BindingHelper\";\nimport ButtonGroup from \"sap/fe/macros/richtexteditor/ButtonGroup\";\nimport PluginDefinition from \"sap/fe/macros/richtexteditor/Plugin\";\nimport FormattedText from \"sap/m/FormattedText\";\nimport type { PropertyBindingInfo } from \"sap/ui/base/ManagedObject\";\nimport type Control from \"sap/ui/core/Control\";\nimport type { $ControlSettings } from \"sap/ui/core/Control\";\n// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport type TemplateComponent from \"sap/fe/core/TemplateComponent\";\nimport RichTextEditor from \"sap/ui/richtexteditor/RichTextEditor\";\n\ntype PluginDefinitionData = {\n\tname: string;\n};\ntype ButtonGroupData = {\n\tname: string;\n\tvisible: boolean;\n\tpriority?: number;\n\trow?: number;\n\tcustomToolbarPriority?: number;\n\tbuttons: string[];\n};\n\n/**\n * Building block that exposes the RichTextEditor UI5 control.\n *\n * It's used to enter formatted text, and uses the third-party component called TinyMCE.\n * @public\n * @since 1.117.0\n */\n@defineUI5Class(\"sap.fe.macros.RichTextEditor\")\nexport default class RichTextEditorBlock extends BuildingBlock<Control> {\n\t/**\n\t * ID of the editor\n\t */\n\t@property({ type: \"string\", required: true })\n\tid!: string;\n\n\t/**\n\t * The value contained in the editor. You can use this attribute to set a default value.\n\t * @public\n\t */\n\t@property({ type: \"any\", isBindingInfo: true })\n\tvalue?: PropertyBindingInfo;\n\n\t/**\n\t * Use the readOnly attribute to override the edit flow of the page.\n\t * By setting 'readOnly' to true, a FormattedText will be displayed instead of the editor.\n\t * @public\n\t */\n\t@property({ type: \"boolean\" })\n\treadOnly: PropertyBindingInfo = false;\n\n\t/**\n\t * With the 'buttonGroups' attribute you can customize the buttons that are displayed on the toolbar of the editor.\n\t * @public\n\t */\n\t@aggregation({ type: \"sap.fe.macros.richtexteditor.ButtonGroup\", multiple: true, defaultClass: ButtonGroup })\n\tbuttonGroups: ButtonGroup[] = [];\n\n\t/**\n\t * With the 'plugins' attribute you can customize the plugins that will be loaded by the editor.\n\t * @public\n\t */\n\t@aggregation({ type: \"sap.fe.macros.richtexteditor.Plugin\", multiple: true, defaultClass: PluginDefinition })\n\tplugins?: PluginDefinition[];\n\n\t/**\n\t * With the 'excludeDefaultPlugins' you can ask to remove the plugins that will be added by default\n\t * The default plugins are \"emoticons\" \"directionality\" \"image\" \"table\" \"link\" \"powerpaste\".\n\t * @public\n\t */\n\t@property({ type: \"boolean\" })\n\texcludeDefaultPlugins = false;\n\n\t/**\n\t * Use the 'required' attribute to make sure that the editor is filled with some text.\n\t * @public\n\t */\n\t@property({ type: \"any\", bindable: false })\n\trequired: PropertyBindingInfo = false;\n\n\t@property({ type: \"boolean\" })\n\t_isInEditMode: PropertyBindingInfo = false;\n\n\tprivate _displayContent?: FormattedText;\n\n\tprivate _editContent?: RichTextEditor;\n\n\tprivate _contentTimer?: number;\n\n\tconstructor(properties: $ControlSettings & PropertiesOf<RichTextEditorBlock>, others?: $ControlSettings) {\n\t\tproperties._isInEditMode = compileExpression(UI.IsEditable);\n\t\tsuper(properties, others);\n\t}\n\n\tonMetadataAvailable(_ownerComponent: TemplateComponent): void {\n\t\tsuper.onMetadataAvailable(_ownerComponent);\n\t\tthis.content = this.createContent();\n\t}\n\n\tcreateContentDebounced(): void {\n\t\tif (this._contentTimer) {\n\t\t\tclearTimeout(this._contentTimer);\n\t\t}\n\t\tthis._contentTimer = setTimeout(() => {\n\t\t\tthis.content = this.createContent();\n\t\t}, 200) as unknown as number;\n\t}\n\n\texit(): void {\n\t\tthis._displayContent?.destroy();\n\t\tthis._editContent?.destroy();\n\t}\n\n\t/**\n\t * Method that returns the button customizations for the editor toolbar.\n\t * Because all values come as strings from XML, some parsing needs to be done to get attributes with the correct type.\n\t * @returns The button groups.\n\t */\n\tgetPlugins = (): { plugins?: PluginDefinitionData[] } => {\n\t\tlet pluginsArray: PluginDefinitionData[] | undefined;\n\t\tif (this.excludeDefaultPlugins) {\n\t\t\tpluginsArray = [];\n\t\t} else {\n\t\t\tpluginsArray = [\"emoticons\", \"directionality\", \"image\", \"table\", \"link\", \"powerpaste\"].map((name: string) => {\n\t\t\t\treturn { name: name };\n\t\t\t});\n\t\t}\n\t\tif (this.plugins?.length) {\n\t\t\tfor (const plugin of this.plugins) {\n\t\t\t\tpluginsArray.push(plugin);\n\t\t\t}\n\t\t}\n\t\treturn { plugins: pluginsArray };\n\t};\n\n\t/**\n\t * Method that returns the button customizations for the editor toolbar.\n\t * Because all values come as strings from XML, some parsing needs to be done to get attributes with the correct type.\n\t * @returns The button groups.\n\t */\n\tgetButtonGroups = (): ButtonGroupData[] => {\n\t\tif (this.buttonGroups && this.buttonGroups.length > 0) {\n\t\t\treturn this.buttonGroups.map((buttonGroup: ButtonGroup) => ({\n\t\t\t\tname: buttonGroup.name ?? \"\",\n\t\t\t\tvisible: buttonGroup.visible === \"true\",\n\t\t\t\tpriority: buttonGroup.priority,\n\t\t\t\trow: buttonGroup.row,\n\t\t\t\tcustomToolbarPriority: buttonGroup.customToolbarPriority,\n\t\t\t\tbuttons: buttonGroup.buttons?.split(\",\") || []\n\t\t\t}));\n\t\t}\n\t\treturn [];\n\t};\n\n\tset_isInEditMode(inEditMode: boolean): void {\n\t\tsuper.setProperty(\"_isInEditMode\", inEditMode);\n\t\tthis.createContentDebounced();\n\t}\n\n\tsetReadOnly(readOnly: boolean): void {\n\t\tsuper.setProperty(\"readOnly\", readOnly);\n\t\tthis.createContentDebounced();\n\t}\n\n\tgetEditContent = (): RichTextEditor => {\n\t\tif (this._editContent) {\n\t\t\t// It's better to destroy the rich text editor as in some case with slow machine switching between edit and display may break it\n\t\t\tthis._editContent.destroy();\n\t\t}\n\n\t\tthis._editContent = (\n\t\t\t<RichTextEditor\n\t\t\t\tid={this.createId(\"_rte\")}\n\t\t\t\tvalue={this.value}\n\t\t\t\tvisible={true}\n\t\t\t\tcustomToolbar={true}\n\t\t\t\teditable={true}\n\t\t\t\teditorType=\"TinyMCE6\"\n\t\t\t\tshowGroupFontStyle={true}\n\t\t\t\tshowGroupTextAlign={true}\n\t\t\t\tshowGroupStructure={true}\n\t\t\t\tshowGroupFont={false}\n\t\t\t\tshowGroupClipboard={true}\n\t\t\t\tshowGroupInsert={false}\n\t\t\t\tshowGroupLink={false}\n\t\t\t\tshowGroupUndo={false}\n\t\t\t\tsanitizeValue={true}\n\t\t\t\twrapping={true}\n\t\t\t\twidth={\"100%\"}\n\t\t\t\trequired={this.required}\n\t\t\t\t{...this.getPlugins()}\n\t\t\t\tbuttonGroups={this.buttonGroups.length > 0 ? [] : undefined}\n\t\t\t/>\n\t\t) as RichTextEditor;\n\n\t\tthis._editContent.attachReady(this.addButtonGroups, this);\n\t\treturn this._editContent;\n\t};\n\n\t/**\n\t * Buttons groups need to be added when the RTE is ready, otherwise some of them are not available.\n\t */\n\taddButtonGroups(): void {\n\t\tconst lateButtonGroups = this.getButtonGroups().reverse();\n\t\t// They also somehow need to be added in reverse because they also get added in the first place :D\n\t\tfor (const lateButtonGroup of lateButtonGroups) {\n\t\t\tthis._editContent?.addButtonGroup(lateButtonGroup);\n\t\t}\n\t\tthis._editContent?.detachReady(this.addButtonGroups, this);\n\t}\n\n\tgetDisplayContent(): FormattedText {\n\t\tif (this._displayContent) {\n\t\t\tthis._displayContent.destroy();\n\t\t}\n\t\tthis._displayContent = (<FormattedText htmlText={this.value} />) as FormattedText;\n\t\treturn this._displayContent;\n\t}\n\n\tcreateContent(): RichTextEditor | FormattedText {\n\t\tif (this._isInEditMode && !this.readOnly) {\n\t\t\treturn this.getEditContent();\n\t\t} else {\n\t\t\treturn this.getDisplayContent();\n\t\t}\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;EAWA;EAgBA;AACA;AACA;AACA;AACA;AACA;AACA;EANA,IAQqBA,mBAAmB,IAAAC,IAAA,GADvCC,cAAc,CAAC,8BAA8B,CAAC,EAAAC,KAAA,GAK7CC,QAAQ,CAAC;IAAEC,IAAI,EAAE,QAAQ;IAAEC,QAAQ,EAAE;EAAK,CAAC,CAAC,EAAAC,KAAA,GAO5CH,QAAQ,CAAC;IAAEC,IAAI,EAAE,KAAK;IAAEG,aAAa,EAAE;EAAK,CAAC,CAAC,EAAAC,KAAA,GAQ9CL,QAAQ,CAAC;IAAEC,IAAI,EAAE;EAAU,CAAC,CAAC,EAAAK,KAAA,GAO7BC,WAAW,CAAC;IAAEN,IAAI,EAAE,0CAA0C;IAAEO,QAAQ,EAAE,IAAI;IAAEC,YAAY,EAAEC;EAAY,CAAC,CAAC,EAAAC,KAAA,GAO5GJ,WAAW,CAAC;IAAEN,IAAI,EAAE,qCAAqC;IAAEO,QAAQ,EAAE,IAAI;IAAEC,YAAY,EAAEG;EAAiB,CAAC,CAAC,EAAAC,KAAA,GAQ5Gb,QAAQ,CAAC;IAAEC,IAAI,EAAE;EAAU,CAAC,CAAC,EAAAa,KAAA,GAO7Bd,QAAQ,CAAC;IAAEC,IAAI,EAAE,KAAK;IAAEc,QAAQ,EAAE;EAAM,CAAC,CAAC,EAAAC,KAAA,GAG1ChB,QAAQ,CAAC;IAAEC,IAAI,EAAE;EAAU,CAAC,CAAC,EAAAJ,IAAA,CAAAoB,MAAA,IAAAC,OAAA,0BAAAC,cAAA;IAS9B,SAAAvB,oBAAYwB,UAAgE,EAAEC,MAAyB,EAAE;MAAA,IAAAC,KAAA;MACxGF,UAAU,CAACG,aAAa,GAAGC,iBAAiB,CAACC,EAAE,CAACC,UAAU,CAAC;MAC3DJ,KAAA,GAAAH,cAAA,CAAAQ,IAAA,OAAMP,UAAU,EAAEC,MAAM,CAAC;MA7D1B;AACD;AACA;MAFCO,0BAAA,CAAAN,KAAA,QAAAO,WAAA,EAAAP,KAAA;MAMA;AACD;AACA;AACA;MAHCM,0BAAA,CAAAN,KAAA,WAAAQ,YAAA,EAAAR,KAAA;MAOA;AACD;AACA;AACA;AACA;MAJCM,0BAAA,CAAAN,KAAA,cAAAS,YAAA,EAAAT,KAAA;MAQA;AACD;AACA;AACA;MAHCM,0BAAA,CAAAN,KAAA,kBAAAU,YAAA,EAAAV,KAAA;MAOA;AACD;AACA;AACA;MAHCM,0BAAA,CAAAN,KAAA,aAAAW,YAAA,EAAAX,KAAA;MAOA;AACD;AACA;AACA;AACA;MAJCM,0BAAA,CAAAN,KAAA,2BAAAY,YAAA,EAAAZ,KAAA;MAQA;AACD;AACA;AACA;MAHCM,0BAAA,CAAAN,KAAA,cAAAa,YAAA,EAAAb,KAAA;MAAAM,0BAAA,CAAAN,KAAA,mBAAAc,YAAA,EAAAd,KAAA;MAwCA;AACD;AACA;AACA;AACA;MAJCA,KAAA,CAKAe,UAAU,GAAG,MAA4C;QACxD,IAAIC,YAAgD;QACpD,IAAIhB,KAAA,CAAKiB,qBAAqB,EAAE;UAC/BD,YAAY,GAAG,EAAE;QAClB,CAAC,MAAM;UACNA,YAAY,GAAG,CAAC,WAAW,EAAE,gBAAgB,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,YAAY,CAAC,CAACE,GAAG,CAAEC,IAAY,IAAK;YAC5G,OAAO;cAAEA,IAAI,EAAEA;YAAK,CAAC;UACtB,CAAC,CAAC;QACH;QACA,IAAInB,KAAA,CAAKoB,OAAO,EAAEC,MAAM,EAAE;UACzB,KAAK,MAAMC,MAAM,IAAItB,KAAA,CAAKoB,OAAO,EAAE;YAClCJ,YAAY,CAACO,IAAI,CAACD,MAAM,CAAC;UAC1B;QACD;QACA,OAAO;UAAEF,OAAO,EAAEJ;QAAa,CAAC;MACjC,CAAC;MAED;AACD;AACA;AACA;AACA;MAJChB,KAAA,CAKAwB,eAAe,GAAG,MAAyB;QAC1C,IAAIxB,KAAA,CAAKyB,YAAY,IAAIzB,KAAA,CAAKyB,YAAY,CAACJ,MAAM,GAAG,CAAC,EAAE;UACtD,OAAOrB,KAAA,CAAKyB,YAAY,CAACP,GAAG,CAAEQ,WAAwB,KAAM;YAC3DP,IAAI,EAAEO,WAAW,CAACP,IAAI,IAAI,EAAE;YAC5BQ,OAAO,EAAED,WAAW,CAACC,OAAO,KAAK,MAAM;YACvCC,QAAQ,EAAEF,WAAW,CAACE,QAAQ;YAC9BC,GAAG,EAAEH,WAAW,CAACG,GAAG;YACpBC,qBAAqB,EAAEJ,WAAW,CAACI,qBAAqB;YACxDC,OAAO,EAAEL,WAAW,CAACK,OAAO,EAAEC,KAAK,CAAC,GAAG,CAAC,IAAI;UAC7C,CAAC,CAAC,CAAC;QACJ;QACA,OAAO,EAAE;MACV,CAAC;MAAAhC,KAAA,CAYDiC,cAAc,GAAG,MAAsB;QACtC,IAAIjC,KAAA,CAAKkC,YAAY,EAAE;UACtB;UACAlC,KAAA,CAAKkC,YAAY,CAACC,OAAO,CAAC,CAAC;QAC5B;QAEAnC,KAAA,CAAKkC,YAAY,GAChBE,IAAA,CAACC,cAAc;UACdC,EAAE,EAAEtC,KAAA,CAAKuC,QAAQ,CAAC,MAAM,CAAE;UAC1BC,KAAK,EAAExC,KAAA,CAAKwC,KAAM;UAClBb,OAAO,EAAE,IAAK;UACdc,aAAa,EAAE,IAAK;UACpBC,QAAQ,EAAE,IAAK;UACfC,UAAU,EAAC,UAAU;UACrBC,kBAAkB,EAAE,IAAK;UACzBC,kBAAkB,EAAE,IAAK;UACzBC,kBAAkB,EAAE,IAAK;UACzBC,aAAa,EAAE,KAAM;UACrBC,kBAAkB,EAAE,IAAK;UACzBC,eAAe,EAAE,KAAM;UACvBC,aAAa,EAAE,KAAM;UACrBC,aAAa,EAAE,KAAM;UACrBC,aAAa,EAAE,IAAK;UACpBC,QAAQ,EAAE,IAAK;UACfC,KAAK,EAAE,MAAO;UACd1E,QAAQ,EAAEoB,KAAA,CAAKpB,QAAS;UAAA,GACpBoB,KAAA,CAAKe,UAAU,CAAC,CAAC;UACrBU,YAAY,EAAEzB,KAAA,CAAKyB,YAAY,CAACJ,MAAM,GAAG,CAAC,GAAG,EAAE,GAAGkC;QAAU,CAC5D,CACiB;QAEnBvD,KAAA,CAAKkC,YAAY,CAACsB,WAAW,CAACxD,KAAA,CAAKyD,eAAe,EAAAzD,KAAM,CAAC;QACzD,OAAOA,KAAA,CAAKkC,YAAY;MACzB,CAAC;MAAA,OAAAlC,KAAA;IAzGD;IAAC0D,QAAA,GAAApF,mBAAA;IAAAqF,cAAA,CAAArF,mBAAA,EAAAuB,cAAA;IAAA,IAAA+D,MAAA,GAAAtF,mBAAA,CAAAuF,SAAA;IAAAD,MAAA,CAEDE,mBAAmB,GAAnB,SAAAA,mBAAmBA,CAACC,eAAkC,EAAQ;MAC7DlE,cAAA,CAAAgE,SAAA,CAAMC,mBAAmB,CAAAzD,IAAA,OAAC0D,eAAe;MACzC,IAAI,CAACC,OAAO,GAAG,IAAI,CAACC,aAAa,CAAC,CAAC;IACpC,CAAC;IAAAL,MAAA,CAEDM,sBAAsB,GAAtB,SAAAA,sBAAsBA,CAAA,EAAS;MAC9B,IAAI,IAAI,CAACC,aAAa,EAAE;QACvBC,YAAY,CAAC,IAAI,CAACD,aAAa,CAAC;MACjC;MACA,IAAI,CAACA,aAAa,GAAGE,UAAU,CAAC,MAAM;QACrC,IAAI,CAACL,OAAO,GAAG,IAAI,CAACC,aAAa,CAAC,CAAC;MACpC,CAAC,EAAE,GAAG,CAAsB;IAC7B,CAAC;IAAAL,MAAA,CAEDU,IAAI,GAAJ,SAAAA,IAAIA,CAAA,EAAS;MACZ,IAAI,CAACC,eAAe,EAAEpC,OAAO,CAAC,CAAC;MAC/B,IAAI,CAACD,YAAY,EAAEC,OAAO,CAAC,CAAC;IAC7B,CAAC;IAAAyB,MAAA,CA2CDY,gBAAgB,GAAhB,SAAAA,gBAAgBA,CAACC,UAAmB,EAAQ;MAC3C5E,cAAA,CAAAgE,SAAA,CAAMa,WAAW,CAAArE,IAAA,OAAC,eAAe,EAAEoE,UAAU;MAC7C,IAAI,CAACP,sBAAsB,CAAC,CAAC;IAC9B,CAAC;IAAAN,MAAA,CAEDe,WAAW,GAAX,SAAAA,WAAWA,CAACC,QAAiB,EAAQ;MACpC/E,cAAA,CAAAgE,SAAA,CAAMa,WAAW,CAAArE,IAAA,OAAC,UAAU,EAAEuE,QAAQ;MACtC,IAAI,CAACV,sBAAsB,CAAC,CAAC;IAC9B,CAAC;IAqCD;AACD;AACA;IAFCN,MAAA,CAGAH,eAAe,GAAf,SAAAA,eAAeA,CAAA,EAAS;MACvB,MAAMoB,gBAAgB,GAAG,IAAI,CAACrD,eAAe,CAAC,CAAC,CAACsD,OAAO,CAAC,CAAC;MACzD;MACA,KAAK,MAAMC,eAAe,IAAIF,gBAAgB,EAAE;QAC/C,IAAI,CAAC3C,YAAY,EAAE8C,cAAc,CAACD,eAAe,CAAC;MACnD;MACA,IAAI,CAAC7C,YAAY,EAAE+C,WAAW,CAAC,IAAI,CAACxB,eAAe,EAAE,IAAI,CAAC;IAC3D,CAAC;IAAAG,MAAA,CAEDsB,iBAAiB,GAAjB,SAAAA,iBAAiBA,CAAA,EAAkB;MAClC,IAAI,IAAI,CAACX,eAAe,EAAE;QACzB,IAAI,CAACA,eAAe,CAACpC,OAAO,CAAC,CAAC;MAC/B;MACA,IAAI,CAACoC,eAAe,GAAInC,IAAA,CAAC+C,aAAa;QAACC,QAAQ,EAAE,IAAI,CAAC5C;MAAM,CAAE,CAAmB;MACjF,OAAO,IAAI,CAAC+B,eAAe;IAC5B,CAAC;IAAAX,MAAA,CAEDK,aAAa,GAAb,SAAAA,aAAaA,CAAA,EAAmC;MAC/C,IAAI,IAAI,CAAChE,aAAa,IAAI,CAAC,IAAI,CAAC2E,QAAQ,EAAE;QACzC,OAAO,IAAI,CAAC3C,cAAc,CAAC,CAAC;MAC7B,CAAC,MAAM;QACN,OAAO,IAAI,CAACiD,iBAAiB,CAAC,CAAC;MAChC;IACD,CAAC;IAAA,OAAA5G,mBAAA;EAAA,EApM+C+G,aAAa,GAAA9E,WAAA,GAAA+E,yBAAA,CAAA1F,OAAA,CAAAiE,SAAA,SAAApF,KAAA;IAAA8G,YAAA;IAAAC,UAAA;IAAAC,QAAA;IAAAC,WAAA;EAAA,IAAAlF,YAAA,GAAA8E,yBAAA,CAAA1F,OAAA,CAAAiE,SAAA,YAAAhF,KAAA;IAAA0G,YAAA;IAAAC,UAAA;IAAAC,QAAA;IAAAC,WAAA;EAAA,IAAAjF,YAAA,GAAA6E,yBAAA,CAAA1F,OAAA,CAAAiE,SAAA,eAAA9E,KAAA;IAAAwG,YAAA;IAAAC,UAAA;IAAAC,QAAA;IAAAC,WAAA,WAAAA,CAAA;MAAA,OAoB7B,KAAK;IAAA;EAAA,IAAAhF,YAAA,GAAA4E,yBAAA,CAAA1F,OAAA,CAAAiE,SAAA,mBAAA7E,KAAA;IAAAuG,YAAA;IAAAC,UAAA;IAAAC,QAAA;IAAAC,WAAA,WAAAA,CAAA;MAAA,OAOP,EAAE;IAAA;EAAA,IAAA/E,YAAA,GAAA2E,yBAAA,CAAA1F,OAAA,CAAAiE,SAAA,cAAAxE,KAAA;IAAAkG,YAAA;IAAAC,UAAA;IAAAC,QAAA;IAAAC,WAAA;EAAA,IAAA9E,YAAA,GAAA0E,yBAAA,CAAA1F,OAAA,CAAAiE,SAAA,4BAAAtE,KAAA;IAAAgG,YAAA;IAAAC,UAAA;IAAAC,QAAA;IAAAC,WAAA,WAAAA,CAAA;MAAA,OAeR,KAAK;IAAA;EAAA,IAAA7E,YAAA,GAAAyE,yBAAA,CAAA1F,OAAA,CAAAiE,SAAA,eAAArE,KAAA;IAAA+F,YAAA;IAAAC,UAAA;IAAAC,QAAA;IAAAC,WAAA,WAAAA,CAAA;MAAA,OAOG,KAAK;IAAA;EAAA,IAAA5E,YAAA,GAAAwE,yBAAA,CAAA1F,OAAA,CAAAiE,SAAA,oBAAAnE,KAAA;IAAA6F,YAAA;IAAAC,UAAA;IAAAC,QAAA;IAAAC,WAAA,WAAAA,CAAA;MAAA,OAGA,KAAK;IAAA;EAAA,IAAA9F,OAAA,MAAAD,MAAA;EAAA+D,QAAA,GAAApF,mBAAA;EAAA,OAAAoF,QAAA;AAAA","ignoreList":[],"file":"RichTextEditor-dbg.js"}
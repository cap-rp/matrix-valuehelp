{"version":3,"file":"FilterUtils.js","names":["PropertyInfoKeys","oFilterUtils","getFilter","vIFilter","aFilters","getFilterInfo","filters","length","Filter","undefined","getFilterField","propertyPath","converterContext","entityType","FilterBarConverter","buildProperyInfo","propertyInfoField","oPropertyInfo","aTypeConfig","propertyConvertyContext","getConverterContextFor","annotationPath","propertyTargetObject","getDataModelObjectPath","targetObject","oTypeConfig","fetchTypeConfig","fetchPropertyInfo","key","assignDataTypeToPropertyInfo","createConverterContext","oFilterControl","sEntityTypePath","metaModel","appComponent","sFilterEntityTypePath","DelegateUtil","getCustomData","contextPath","oView","isA","CommonUtils","getTargetView","oMetaModel","getModel","getMetaModel","oAppComponent","getAppComponent","oVisualizationObjectPath","MetaModelConverter","getInvolvedDataModelObjects","createBindingContext","manifestSettings","getViewData","ConverterContext","createConverterContextForMacro","startingEntitySet","name","getDiagnostics","merge","contextLocation","ManifestWrapper","getConvertedFilterFields","includeHidden","oModifier","lineItemTerm","this","_getFilterMetaModel","lrTables","_getFieldsForTable","oConverterContext","_getSelectionFields","getBindingPathForParameters","oIFilter","mConditions","aFilterPropertiesMetadata","aParameters","aParams","setTypeConfigToProperties","sFieldPath","oConditionInternal","oProperty","FilterUtil","getPropertyByKey","typeConfig","TypeMap","getTypeConfig","dataType","formatOptions","constraints","mInternalParameterCondition","ConditionConverter","toType","getTypeMap","sEdmType","ODATA_TYPE_MAPPING","className","push","encodeURIComponent","ODataUtils","formatLiteral","values","data","sEntitySetPath","substring","sParameterEntitySet","slice","lastIndexOf","sTargetNavigation","toString","getEditStateIsHideDraft","bIsHideDraft","$editState","oCondition","find","condition","operator","includes","mProperties","mFilterConditions","aIgnoreProperties","ignoredProperties","oTargetControl","targetControl","sTargetEntityPath","mParameters","sSearch","sBindingPath","aPropertiesMetadata","propertiesMetadata","Element","getElementById","_getSearchField","_getFilterConditions","getFilterPropertyInfo","getPropertyInfoSet","_getFilterPropertiesMetadata","Object","keys","forEach","sKey","JSON","parse","param","requiredParam","mParametersValue","aTargetPropertiesMetadata","getControlDelegate","fetchPropertiesForEntity","_aIgnoreProperties","_getIgnoredProperties","concat","getEditStateAndFilter","parameters","search","bindingPath","_ref","oFilter","currState","getCurrentState","hasEditStateFieldVisible","items","some","cs","hasEditStateMetadata","Array","isArray","editStateFilter","hasOwnProperty","editStateValue","EDITSTATE","getFilterForEditState","hasEditStateFilter","hasEditStateFilterRecursively","exchangeEditStateFilterRecursively","filter","getPath","getFilters","map","and","isAnd","aProperties","oIFilterProperty","typeInstance","getConstraints","Function","path","getNotApplicableFilters","oFilterBar","oControl","sTargetEntityTypePath","oFilterBarEntityPath","oFilterBarEntitySetAnnotations","getObject","aNotApplicable","getConditions","bIsFilterBarEntityType","bIsChart","bIsAnalyticalTable","getParent","getTableDefinition","enableAnalytics","bIsTreeTable","control","type","bEnableSearch","CommonHelper","parseCustomData","enableSearch","enableBasicSearch","aTargetProperties","mTargetProperties","reduce","mProp","oProp","mAggregatedProperties","chartEntityTypeAnnotations","oEntitySetAnnotations","mChartCustomAggregates","getAllCustomAggregates","sAggregateName","oAggregate","sProperty","aConditionProperty","typeCheck","isCustomFilter","replace","getSearch","_getValueListInfo","filterBar","propertyName","valueListInfos","requestValueListInfo","catch","_propertyInfo","_getConditionValidated","async","valueListInfo","conditionPath","value","ConditionValidated","NotValidated","valueListProperties","Parameters","parameter","valueOf","$Type","LocalDataProperty","$PropertyPath","ValueListProperty","valueListPropertyPath","FilterOperator","EQ","value1","listBinding","$model","bindList","CollectionPath","$select","valueExists","requestContexts","Validated","error","Log","_clearFilterValue","oState","StateUtil","retrieveExternalState","filtered","applyExternalState","setFilterValues","sConditionPath","_len","arguments","args","_key","_setFilterValues","addFilterValues","_len2","_key2","append","_len3","_key3","sOperator","vValues","warning","SemanticDateOperators","getSemanticDateOperations","supportedValueTypes","Error","BT","Condition","createCondition","Promise","all","conditionValidatedStatus","conditionToModelPath","_getEntitySetPath","ModelHelper","getEntitySetPath","tableControls","getController","_getControls","oTable","filterFields","getSelectionFields","selectionFields","propertyInfos","sPropertyInfo","getControlType","oPageContext","aFilterBarSelectionFieldsAnnotation","getEntityTypeAnnotation","annotation","mapSelectionFields","oSelectionField","oFilterBarSelectionFieldAnnotation","sPath","oFilterField","fieldNames","oField","_getSelectionFieldsFromPropertyInfos","propertyInfo","selField","indexOf","group","groupLabel","settings","visualFilter","label","getPropertyInfo","filterPropertiesMetadata","entityProperties","ignoreProperties","filterProperty","filterPropertyName","entityPropertiesCurrent","entity","isInitialized","formatPropertyInfo","propInfo","propInfos","_formatPropertyInfo","propertyInfoForFilterBar","stringify","property","hiddenFilter","required","tooltip","visible","maxConditions","caseSensitive"],"sources":["./FilterUtils.ts"],"sourcesContent":["import type { EntityType, Property } from \"@sap-ux/vocabularies-types\";\nimport type { PropertyPath } from \"@sap-ux/vocabularies-types/Edm\";\nimport { CommonAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport type { SelectionFields } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport merge from \"sap/base/util/merge\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport type { BaseTreeModifier } from \"sap/fe/core/CommonUtils\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport ConverterContext from \"sap/fe/core/converters/ConverterContext\";\nimport type { BaseManifestSettings } from \"sap/fe/core/converters/ManifestSettings\";\nimport ManifestWrapper from \"sap/fe/core/converters/ManifestWrapper\";\nimport * as MetaModelConverter from \"sap/fe/core/converters/MetaModelConverter\";\nimport type { IDiagnostics } from \"sap/fe/core/converters/TemplateConverter\";\nimport type { TableVisualization } from \"sap/fe/core/converters/controls/Common/Table\";\nimport type { PropertyTypeConfig } from \"sap/fe/core/converters/controls/Common/table/Columns\";\nimport type { FilterField, PropertyInfo, PropertyInfoExternal } from \"sap/fe/core/converters/controls/ListReport/FilterBar\";\nimport * as FilterBarConverter from \"sap/fe/core/converters/controls/ListReport/FilterBar\";\nimport { getAllCustomAggregates } from \"sap/fe/core/helpers/MetaModelFunction\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport { ODATA_TYPE_MAPPING } from \"sap/fe/core/templating/DisplayModeFormatter\";\nimport CommonHelper from \"sap/fe/macros/CommonHelper\";\nimport DelegateUtil from \"sap/fe/macros/DelegateUtil\";\nimport SemanticDateOperators from \"sap/fe/macros/filterBar/SemanticDateOperators\";\nimport type { AnnotationValueListType } from \"sap/fe/macros/internal/valuehelp/ValueListHelper\";\nimport type TableAPI from \"sap/fe/macros/table/TableAPI\";\nimport type { InternalBindingInfo } from \"sap/fe/macros/table/Utils\";\nimport type ListReportController from \"sap/fe/templates/ListReport/ListReportController.controller\";\nimport type Control from \"sap/ui/core/Control\";\nimport Element from \"sap/ui/core/Element\";\nimport type Chart from \"sap/ui/mdc/Chart\";\nimport type FilterBar from \"sap/ui/mdc/FilterBar\";\nimport type { ConditionObject } from \"sap/ui/mdc/condition/Condition\";\nimport Condition from \"sap/ui/mdc/condition/Condition\";\nimport ConditionConverter from \"sap/ui/mdc/condition/ConditionConverter\";\nimport ConditionValidated from \"sap/ui/mdc/enums/ConditionValidated\";\nimport type { IFilter } from \"sap/ui/mdc/library\";\nimport TypeMap from \"sap/ui/mdc/odata/v4/TypeMap\";\nimport StateUtil from \"sap/ui/mdc/p13n/StateUtil\";\nimport FilterUtil from \"sap/ui/mdc/util/FilterUtil\";\nimport Filter from \"sap/ui/model/Filter\";\nimport FilterOperator from \"sap/ui/model/FilterOperator\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport ODataUtils from \"sap/ui/model/odata/v4/ODataUtils\";\nimport EDITSTATE from \"../filterBar/DraftEditState\";\n\nexport type IFilterControl = Control & {\n\tgetSearch?: () => string;\n\tgetPropertyInfoSet?: () => PropertyInfo[];\n\tgetPropertyInfo?: () => PropertyInfo[];\n\tgetTypeMap: () => TypeMap;\n\tgetControlDelegate?: () => {\n\t\tfetchPropertiesForEntity: (sEntitySetPath: string, oMetaModel: ODataMetaModel, oControl: Control) => PropertyInfo[];\n\t};\n\tisInitialized?: () => boolean;\n\tgetCurrentState?: () => { items?: { key: string }[] };\n} & IFilter;\nenum PropertyInfoKeys {\n\thiddenFilter = \"hiddenFilter\",\n\trequired = \"required\",\n\tpath = \"path\",\n\ttooltip = \"tooltip\",\n\tvisible = \"visible\",\n\tmaxConditions = \"maxConditions\",\n\tformatOptions = \"formatOptions\",\n\tconstraints = \"constraints\",\n\tgroup = \"group\",\n\tgroupLabel = \"groupLabel\",\n\tcaseSensitive = \"caseSensitive\"\n}\n\nconst oFilterUtils = {\n\tgetFilter: function (vIFilter: string | IFilterControl | null): Filter | undefined {\n\t\tconst aFilters = oFilterUtils.getFilterInfo(vIFilter).filters;\n\t\treturn aFilters?.length ? new Filter(aFilters, false) : undefined;\n\t},\n\tgetFilterField: function (propertyPath: string, converterContext: ConverterContext, entityType: EntityType): FilterField | undefined {\n\t\treturn FilterBarConverter.getFilterField(propertyPath, converterContext, entityType);\n\t},\n\tbuildProperyInfo: function (propertyInfoField: FilterField, converterContext: ConverterContext): PropertyInfo {\n\t\tlet oPropertyInfo;\n\t\tconst aTypeConfig: Record<string, PropertyTypeConfig> = {};\n\t\tconst propertyConvertyContext = converterContext.getConverterContextFor<Property>(propertyInfoField.annotationPath);\n\t\tconst propertyTargetObject = propertyConvertyContext.getDataModelObjectPath().targetObject;\n\t\tconst oTypeConfig = FilterBarConverter.fetchTypeConfig(propertyTargetObject);\n\t\toPropertyInfo = FilterBarConverter.fetchPropertyInfo(converterContext, propertyInfoField, oTypeConfig);\n\t\taTypeConfig[propertyInfoField.key] = oTypeConfig;\n\t\toPropertyInfo = FilterBarConverter.assignDataTypeToPropertyInfo(oPropertyInfo, converterContext, [], aTypeConfig);\n\t\treturn oPropertyInfo;\n\t},\n\tcreateConverterContext: function (\n\t\toFilterControl: IFilterControl,\n\t\tsEntityTypePath: string | undefined,\n\t\tmetaModel?: ODataMetaModel,\n\t\tappComponent?: AppComponent\n\t): ConverterContext {\n\t\tconst sFilterEntityTypePath = DelegateUtil.getCustomData<string>(oFilterControl, \"entityType\"),\n\t\t\tcontextPath = sEntityTypePath || sFilterEntityTypePath;\n\n\t\tconst oView = (oFilterControl as Partial<IFilterControl>).isA ? CommonUtils.getTargetView(oFilterControl) : null;\n\t\tconst oMetaModel = (metaModel || oFilterControl.getModel()!.getMetaModel()) as ODataMetaModel;\n\t\tconst oAppComponent = appComponent || (oView && CommonUtils.getAppComponent(oView));\n\t\tconst oVisualizationObjectPath = MetaModelConverter.getInvolvedDataModelObjects(oMetaModel.createBindingContext(contextPath!)!);\n\t\tlet manifestSettings: BaseManifestSettings | undefined;\n\t\tif (oFilterControl.isA && !oFilterControl.isA(\"sap.ui.mdc.valuehelp.FilterBar\")) {\n\t\t\tmanifestSettings = ((oView && oView.getViewData()) || {}) as BaseManifestSettings;\n\t\t}\n\t\treturn ConverterContext.createConverterContextForMacro(\n\t\t\toVisualizationObjectPath.startingEntitySet.name,\n\t\t\toMetaModel,\n\t\t\toAppComponent?.getDiagnostics() as unknown as IDiagnostics,\n\t\t\tmerge,\n\t\t\toVisualizationObjectPath.contextLocation,\n\t\t\tnew ManifestWrapper((manifestSettings ?? {}) as BaseManifestSettings)\n\t\t);\n\t},\n\tgetConvertedFilterFields: function (\n\t\toFilterControl: IFilterControl,\n\t\tsEntityTypePath: string | undefined,\n\t\tincludeHidden?: boolean,\n\t\tmetaModel?: ODataMetaModel,\n\t\tappComponent?: AppComponent,\n\t\toModifier?: BaseTreeModifier,\n\t\tlineItemTerm?: string\n\t): FilterField[] {\n\t\tconst oMetaModel = this._getFilterMetaModel(oFilterControl, metaModel);\n\t\tconst sFilterEntityTypePath = DelegateUtil.getCustomData<string>(oFilterControl, \"entityType\");\n\t\tconst annotationPath = DelegateUtil.getCustomData<string>(oFilterControl, \"annotationPath\"),\n\t\t\tcontextPath = sEntityTypePath || sFilterEntityTypePath;\n\n\t\tconst lrTables: TableVisualization[] = this._getFieldsForTable(oFilterControl, sEntityTypePath);\n\n\t\tconst oConverterContext = this.createConverterContext(oFilterControl, sEntityTypePath, metaModel, appComponent);\n\n\t\t//aSelectionFields = FilterBarConverter.getSelectionFields(oConverterContext);\n\t\treturn this._getSelectionFields(\n\t\t\toFilterControl,\n\t\t\tsEntityTypePath,\n\t\t\tsFilterEntityTypePath!,\n\t\t\tcontextPath!,\n\t\t\tlrTables,\n\t\t\toMetaModel,\n\t\t\toConverterContext,\n\t\t\tincludeHidden,\n\t\t\toModifier,\n\t\t\tlineItemTerm,\n\t\t\tannotationPath\n\t\t);\n\t},\n\n\tgetBindingPathForParameters: function (\n\t\toIFilter: IFilterControl,\n\t\tmConditions: Record<string, ConditionObject[]>,\n\t\taFilterPropertiesMetadata: PropertyInfo[] | null,\n\t\taParameters: string[]\n\t): string {\n\t\tconst aParams: string[] = [];\n\t\taFilterPropertiesMetadata = oFilterUtils.setTypeConfigToProperties(aFilterPropertiesMetadata)!;\n\t\t// Collecting all parameter values from conditions\n\t\tfor (const sFieldPath of aParameters) {\n\t\t\tif (mConditions[sFieldPath] && mConditions[sFieldPath].length > 0) {\n\t\t\t\t// We would be using only the first condition for parameter value.\n\t\t\t\tconst oConditionInternal = merge({}, mConditions[sFieldPath][0]) as ConditionObject;\n\t\t\t\tconst oProperty = FilterUtil.getPropertyByKey(aFilterPropertiesMetadata, sFieldPath) as PropertyInfo;\n\t\t\t\tconst oTypeConfig =\n\t\t\t\t\toProperty.typeConfig || TypeMap.getTypeConfig(oProperty.dataType, oProperty.formatOptions, oProperty.constraints);\n\t\t\t\tconst mInternalParameterCondition = ConditionConverter.toType(oConditionInternal, oTypeConfig, oIFilter.getTypeMap());\n\t\t\t\tconst sEdmType = ODATA_TYPE_MAPPING[oTypeConfig.className];\n\t\t\t\taParams.push(\n\t\t\t\t\t`${sFieldPath}=${encodeURIComponent(ODataUtils.formatLiteral(mInternalParameterCondition.values[0], sEdmType))}`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Binding path from EntityType\n\t\tconst sEntityTypePath = oIFilter.data(\"entityType\");\n\t\tconst sEntitySetPath = sEntityTypePath.substring(0, sEntityTypePath.length - 1);\n\t\tconst sParameterEntitySet = sEntitySetPath.slice(0, sEntitySetPath.lastIndexOf(\"/\"));\n\t\tconst sTargetNavigation = sEntitySetPath.substring(sEntitySetPath.lastIndexOf(\"/\") + 1);\n\t\t// create parameter context\n\t\treturn `${sParameterEntitySet}(${aParams.toString()})/${sTargetNavigation}`;\n\t},\n\n\tgetEditStateIsHideDraft: function (mConditions?: Record<string, ConditionObject[]>): boolean {\n\t\tlet bIsHideDraft = false;\n\t\tif (mConditions && mConditions.$editState) {\n\t\t\tconst oCondition = mConditions.$editState.find(function (condition: ConditionObject) {\n\t\t\t\treturn condition.operator === \"DRAFT_EDIT_STATE\";\n\t\t\t});\n\t\t\tif (oCondition && (oCondition.values.includes(\"ALL_HIDING_DRAFTS\") || oCondition.values.includes(\"SAVED_ONLY\"))) {\n\t\t\t\tbIsHideDraft = true;\n\t\t\t}\n\t\t}\n\t\treturn bIsHideDraft;\n\t},\n\t/**\n\t * Gets all filters that originate from the MDC FilterBar.\n\t * @param vIFilter String or object instance related to MDC_FilterBar/Table/Chart\n\t * @param mProperties Properties on filters that are to be retrieved. Available parameters:\n\t * @param mProperties.ignoredProperties Array of property names which should be not considered for filtering\n\t * @param mProperties.propertiesMetadata Array with all the property metadata. If not provided, properties will be retrieved from vIFilter.\n\t * @param mProperties.targetControl MDC_table or chart. If provided, property names which are not relevant for the target control entitySet are not considered.\n\t * @param mFilterConditions Map with externalized filter conditions.\n\t * @returns FilterBar filters and basic search\n\t * @private\n\t */\n\tgetFilterInfo: function (\n\t\tvIFilter: string | IFilterControl | null,\n\t\tmProperties?: { ignoredProperties?: string[]; propertiesMetadata?: PropertyInfo[]; targetControl?: Control },\n\t\tmFilterConditions?: Record<string, ConditionObject[]>\n\t): InternalBindingInfo {\n\t\tlet aIgnoreProperties = (mProperties && mProperties.ignoredProperties) || [];\n\t\tconst oTargetControl = mProperties && mProperties.targetControl,\n\t\t\tsTargetEntityPath = oTargetControl ? oTargetControl.data(\"entityType\") : undefined;\n\t\tconst mParameters: Record<string, string> = {};\n\t\tlet oIFilter: IFilterControl = vIFilter as IFilterControl,\n\t\t\tsSearch,\n\t\t\taFilters: Filter[] = [],\n\t\t\tsBindingPath,\n\t\t\taPropertiesMetadata = mProperties && mProperties.propertiesMetadata;\n\t\tif (typeof vIFilter === \"string\") {\n\t\t\toIFilter = Element.getElementById(vIFilter) as unknown as IFilterControl;\n\t\t}\n\t\tif (oIFilter) {\n\t\t\tsSearch = this._getSearchField(oIFilter, aIgnoreProperties);\n\t\t\tconst mConditions = this._getFilterConditions(mProperties, mFilterConditions!, oIFilter);\n\t\t\tlet aFilterPropertiesMetadata: PropertyInfo[] | null;\n\t\t\tif (oIFilter.isA<FilterBar>(\"sap.ui.mdc.FilterBar\")) {\n\t\t\t\taFilterPropertiesMetadata = this.getFilterPropertyInfo(oIFilter);\n\t\t\t} else {\n\t\t\t\taFilterPropertiesMetadata = oIFilter.getPropertyInfoSet ? oIFilter.getPropertyInfoSet() : null;\n\t\t\t}\n\t\t\taFilterPropertiesMetadata = this._getFilterPropertiesMetadata(aFilterPropertiesMetadata, oIFilter);\n\t\t\tif (mProperties && mProperties.targetControl && mProperties.targetControl.isA(\"sap.ui.mdc.Chart\")) {\n\t\t\t\tObject.keys(mConditions).forEach(function (sKey: string) {\n\t\t\t\t\tif (sKey === \"$editState\") {\n\t\t\t\t\t\tdelete mConditions[\"$editState\"];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tlet aParameters = oIFilter.data(\"parameters\") || [];\n\t\t\taParameters = typeof aParameters === \"string\" ? JSON.parse(aParameters) : aParameters;\n\t\t\tif (aParameters && aParameters.length > 0) {\n\t\t\t\t// Binding path changes in case of parameters.\n\t\t\t\tsBindingPath = oFilterUtils.getBindingPathForParameters(oIFilter, mConditions, aFilterPropertiesMetadata, aParameters);\n\t\t\t\tif (Object.keys(mConditions).length) {\n\t\t\t\t\tObject.keys(mConditions).forEach((param) => {\n\t\t\t\t\t\taParameters.forEach((requiredParam: string) => {\n\t\t\t\t\t\t\tif (param === requiredParam) {\n\t\t\t\t\t\t\t\tconst mParametersValue = mConditions[param][0].values;\n\t\t\t\t\t\t\t\tmParameters[requiredParam] = mParametersValue[0];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mConditions) {\n\t\t\t\t//Exclude Interface Filter properties that are not relevant for the Target control entitySet\n\t\t\t\tif (sTargetEntityPath && oIFilter.data(\"entityType\") && oIFilter.data(\"entityType\") !== sTargetEntityPath) {\n\t\t\t\t\tconst oMetaModel = oIFilter.getModel()!.getMetaModel() as ODataMetaModel;\n\t\t\t\t\tconst aTargetPropertiesMetadata = oIFilter\n\t\t\t\t\t\t.getControlDelegate?.()\n\t\t\t\t\t\t.fetchPropertiesForEntity(sTargetEntityPath, oMetaModel, oIFilter) as PropertyInfo[];\n\t\t\t\t\taPropertiesMetadata = aTargetPropertiesMetadata;\n\n\t\t\t\t\tconst _aIgnoreProperties = this._getIgnoredProperties(\n\t\t\t\t\t\taFilterPropertiesMetadata as PropertyInfo[],\n\t\t\t\t\t\taTargetPropertiesMetadata\n\t\t\t\t\t);\n\t\t\t\t\tif (_aIgnoreProperties.length > 0) {\n\t\t\t\t\t\taIgnoreProperties = aIgnoreProperties.concat(_aIgnoreProperties);\n\t\t\t\t\t}\n\t\t\t\t} else if (!aPropertiesMetadata && aFilterPropertiesMetadata) {\n\t\t\t\t\taPropertiesMetadata = aFilterPropertiesMetadata;\n\t\t\t\t}\n\t\t\t\t// var aParamKeys = [];\n\t\t\t\t// aParameters.forEach(function (oParam) {\n\t\t\t\t// \taParamKeys.push(oParam.key);\n\t\t\t\t// });\n\t\t\t\taFilters = this.getEditStateAndFilter({\n\t\t\t\t\toIFilter,\n\t\t\t\t\tmConditions,\n\t\t\t\t\taPropertiesMetadata,\n\t\t\t\t\taIgnoreProperties,\n\t\t\t\t\taParameters\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn { parameters: mParameters, filters: aFilters, search: sSearch || undefined, bindingPath: sBindingPath };\n\t},\n\t/**\n\t * Gets the Filter params taking in consideration the Editing Status field,\n\t * merges/overrides the data that's coming from FilterUtil.getFilterInfo, and,\n\t * returns a mapped data to be sent to the backend.\n\t * @param param Object\n\t * @param param.oIFilter Object FilterBar instance\n\t * @param param.mConditions Object Conditions that comes from the Filter Fields\n\t * @param param.aPropertiesMetadata Array Filter metadata\n\t * @param param.aIgnoreProperties Array of strings with the field keys which need to be ignored\n\t * @param param.aParameters Array URL params that also need to be ignore and are merged into the aIgnoreProperties\n\t * @returns FilterBar filters array\n\t */\n\tgetEditStateAndFilter: function ({\n\t\toIFilter,\n\t\tmConditions,\n\t\taPropertiesMetadata,\n\t\taIgnoreProperties,\n\t\taParameters\n\t}: {\n\t\toIFilter: IFilterControl;\n\t\tmConditions: Record<string, ConditionObject[]>;\n\t\taPropertiesMetadata: PropertyInfo[] | undefined;\n\t\taIgnoreProperties: string[];\n\t\taParameters: ConcatArray<string>;\n\t}): Filter[] {\n\t\tconst oFilter = (\n\t\t\tFilterUtil.getFilterInfo(\n\t\t\t\toIFilter,\n\t\t\t\tmConditions,\n\t\t\t\toFilterUtils.setTypeConfigToProperties(aPropertiesMetadata)!,\n\t\t\t\taIgnoreProperties.concat(aParameters)\n\t\t\t) as { filters: Filter }\n\t\t).filters;\n\t\tconst currState = oIFilter?.getCurrentState?.();\n\t\tconst hasEditStateFieldVisible = currState?.items?.some((cs: { [key: string]: string }) => cs?.key === \"$editState\");\n\t\tconst hasEditStateMetadata = Array.isArray(aPropertiesMetadata) && aPropertiesMetadata?.some((cs) => cs?.key === \"$editState\");\n\t\tlet editStateFilter: Filter | undefined;\n\t\tif (!aIgnoreProperties.includes(\"$editState\") && hasEditStateFieldVisible === true && hasEditStateMetadata) {\n\t\t\tif (mConditions.hasOwnProperty(\"$editState\")) {\n\t\t\t\tconst editStateValue = mConditions[\"$editState\"];\n\t\t\t\teditStateFilter = EDITSTATE.getFilterForEditState(editStateValue?.[0]?.values?.[0]);\n\t\t\t} else {\n\t\t\t\teditStateFilter = EDITSTATE.getFilterForEditState(\"\");\n\t\t\t}\n\t\t}\n\t\tlet aFilters = oFilter ? [oFilter] : [];\n\t\tif (editStateFilter) {\n\t\t\tconst hasEditStateFilter = this.hasEditStateFilterRecursively(aFilters);\n\t\t\tif (hasEditStateFilter) {\n\t\t\t\taFilters = this.exchangeEditStateFilterRecursively(editStateFilter, aFilters);\n\t\t\t} else {\n\t\t\t\taFilters.push(editStateFilter);\n\t\t\t}\n\t\t}\n\t\treturn aFilters;\n\t},\n\thasEditStateFilterRecursively: function (filters: Filter[]): boolean {\n\t\treturn filters.some((filter): boolean => {\n\t\t\tif (filter.getPath() === \"$editState\") {\n\t\t\t\treturn true;\n\t\t\t} else if (filter.getFilters() !== undefined) {\n\t\t\t\treturn this.hasEditStateFilterRecursively(filter.getFilters()!);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t},\n\texchangeEditStateFilterRecursively: function (editStateFilter: Filter, filters: Filter[]): Filter[] {\n\t\treturn filters.map((filter): Filter => {\n\t\t\tif (filter.getPath() === \"$editState\") {\n\t\t\t\treturn editStateFilter;\n\t\t\t} else if (filter.getFilters() !== undefined) {\n\t\t\t\tfilter = new Filter({\n\t\t\t\t\tfilters: this.exchangeEditStateFilterRecursively(editStateFilter, filter.getFilters()!),\n\t\t\t\t\tand: filter.isAnd()\n\t\t\t\t});\n\t\t\t\treturn filter;\n\t\t\t}\n\t\t\treturn filter;\n\t\t});\n\t},\n\tsetTypeConfigToProperties: function (aProperties: PropertyInfo[] | null | undefined): PropertyInfo[] | null | undefined {\n\t\tif (aProperties && aProperties.length) {\n\t\t\taProperties.forEach(function (oIFilterProperty: PropertyInfo) {\n\t\t\t\tif (\n\t\t\t\t\toIFilterProperty.typeConfig &&\n\t\t\t\t\toIFilterProperty.typeConfig.typeInstance &&\n\t\t\t\t\t(oIFilterProperty.typeConfig.typeInstance as { getConstraints?: Function }).getConstraints instanceof Function\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (oIFilterProperty.path === \"$editState\") {\n\t\t\t\t\toIFilterProperty.typeConfig = TypeMap.getTypeConfig(\"sap.ui.model.odata.type.String\", {}, {});\n\t\t\t\t} else if (oIFilterProperty.path === \"$search\") {\n\t\t\t\t\toIFilterProperty.typeConfig = TypeMap.getTypeConfig(\"sap.ui.model.odata.type.String\", {}, {});\n\t\t\t\t} else if (oIFilterProperty.dataType || (oIFilterProperty.typeConfig && oIFilterProperty.typeConfig.className)) {\n\t\t\t\t\toIFilterProperty.typeConfig = TypeMap.getTypeConfig(\n\t\t\t\t\t\toIFilterProperty.dataType || oIFilterProperty.typeConfig?.className,\n\t\t\t\t\t\toIFilterProperty.formatOptions,\n\t\t\t\t\t\toIFilterProperty.constraints\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn aProperties;\n\t},\n\tgetNotApplicableFilters: function (oFilterBar: FilterBar, oControl: Control): string[] {\n\t\tconst sTargetEntityTypePath = oControl.data(\"entityType\"),\n\t\t\toFilterBarEntityPath = oFilterBar.data(\"entityType\"),\n\t\t\toMetaModel = oFilterBar.getModel()!.getMetaModel()!,\n\t\t\toFilterBarEntitySetAnnotations = oMetaModel.getObject(oFilterBarEntityPath),\n\t\t\taNotApplicable = [],\n\t\t\tmConditions = oFilterBar.getConditions(),\n\t\t\tbIsFilterBarEntityType = sTargetEntityTypePath === oFilterBarEntityPath,\n\t\t\tbIsChart = oControl.isA<Chart>(\"sap.ui.mdc.Chart\"),\n\t\t\tbIsAnalyticalTable = !bIsChart && (oControl.getParent() as TableAPI).getTableDefinition().enableAnalytics,\n\t\t\tbIsTreeTable = !bIsChart && (oControl.getParent() as TableAPI).getTableDefinition().control.type === \"TreeTable\",\n\t\t\tbEnableSearch = bIsChart\n\t\t\t\t? (CommonHelper.parseCustomData(DelegateUtil.getCustomData(oControl, \"applySupported\")) as { enableSearch?: boolean })\n\t\t\t\t\t\t.enableSearch\n\t\t\t\t: !(bIsAnalyticalTable || bIsTreeTable) || (oControl.getParent() as TableAPI).getTableDefinition().enableBasicSearch;\n\n\t\tif (mConditions && (!bIsFilterBarEntityType || bIsAnalyticalTable || bIsChart || bIsTreeTable)) {\n\t\t\t// We don't need to calculate the difference on property Level if entity sets are identical\n\t\t\tconst aTargetProperties = bIsFilterBarEntityType\n\t\t\t\t\t? []\n\t\t\t\t\t: (oFilterBar\n\t\t\t\t\t\t\t.getControlDelegate()\n\t\t\t\t\t\t\t.fetchPropertiesForEntity(sTargetEntityTypePath, oMetaModel, oFilterBar) as PropertyInfo[]),\n\t\t\t\tmTargetProperties = aTargetProperties.reduce(function (mProp: { [key: string]: PropertyInfo }, oProp: PropertyInfo) {\n\t\t\t\t\tmProp[oProp.name] = oProp;\n\t\t\t\t\treturn mProp;\n\t\t\t\t}, {}),\n\t\t\t\tmAggregatedProperties: Record<string, unknown> = {};\n\t\t\tconst chartEntityTypeAnnotations = oControl\n\t\t\t\t.getModel()!\n\t\t\t\t.getMetaModel()!\n\t\t\t\t.getObject(oControl.data(\"targetCollectionPath\") + \"/\");\n\t\t\tif (oControl.isA(\"sap.ui.mdc.Chart\")) {\n\t\t\t\tconst oEntitySetAnnotations = oControl\n\t\t\t\t\t\t.getModel()!\n\t\t\t\t\t\t.getMetaModel()!\n\t\t\t\t\t\t.getObject(`${oControl.data(\"targetCollectionPath\")}@`),\n\t\t\t\t\tmChartCustomAggregates = getAllCustomAggregates(oEntitySetAnnotations);\n\t\t\t\tObject.keys(mChartCustomAggregates).forEach(function (sAggregateName: string) {\n\t\t\t\t\tif (!mAggregatedProperties[sAggregateName]) {\n\t\t\t\t\t\tconst oAggregate = mChartCustomAggregates[sAggregateName];\n\t\t\t\t\t\tmAggregatedProperties[sAggregateName] = oAggregate;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfor (const sProperty in mConditions) {\n\t\t\t\t// Need to check the length of mConditions[sProperty] since previous filtered properties are kept into mConditions with empty array as definition\n\t\t\t\tconst aConditionProperty = mConditions[sProperty];\n\t\t\t\tlet typeCheck = true;\n\t\t\t\tif (chartEntityTypeAnnotations[sProperty] && oFilterBarEntitySetAnnotations[sProperty]) {\n\t\t\t\t\ttypeCheck = chartEntityTypeAnnotations[sProperty][\"$Type\"] === oFilterBarEntitySetAnnotations[sProperty][\"$Type\"];\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tArray.isArray(aConditionProperty) &&\n\t\t\t\t\taConditionProperty.length > 0 && //has a filter value\n\t\t\t\t\t(((!mTargetProperties[sProperty] || // no target property found by property name\n\t\t\t\t\t\t(mTargetProperties[sProperty].isCustomFilter && mTargetProperties[sProperty].annotationPath == undefined) || // custom filter that is not part of the current entitySet\n\t\t\t\t\t\t(mTargetProperties[sProperty] && !typeCheck)) &&\n\t\t\t\t\t\t(!bIsFilterBarEntityType || (sProperty === \"$editState\" && (bIsChart || bIsTreeTable || bIsAnalyticalTable)))) || //type does not match OR $editState on secondary entity set\n\t\t\t\t\t\tmAggregatedProperties[sProperty])\n\t\t\t\t) {\n\t\t\t\t\taNotApplicable.push(sProperty.replace(/[+|*]/g, \"\"));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!bEnableSearch && oFilterBar.getSearch()) {\n\t\t\taNotApplicable.push(\"$search\");\n\t\t}\n\t\treturn aNotApplicable;\n\t},\n\n\t/**\n\t * Gets the value list information of a property as defined for a given filter bar.\n\t * @param filterBar The filter bar to get the value list information for\n\t * @param propertyName The property to get the value list information for\n\t * @returns The value list information\n\t */\n\tasync _getValueListInfo(filterBar: FilterBar, propertyName: string): Promise<AnnotationValueListType | undefined> {\n\t\tconst metaModel = filterBar.getModel()?.getMetaModel() as ODataMetaModel;\n\n\t\tif (!metaModel) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst entityType = filterBar.data(\"entityType\") ?? \"\";\n\t\tconst valueListInfos = await metaModel.requestValueListInfo(entityType + propertyName, true).catch(() => null);\n\t\treturn valueListInfos?.[\"\"];\n\t},\n\n\t/**\n\t * Gets the value list of all the filter properties.\n\t * @param filterBar Instance of FilterBar\n\t * @returns Array of filter properties for FilterBar\n\t */\n\tgetFilterPropertyInfo(filterBar: IFilterControl): PropertyInfo[] {\n\t\tlet _propertyInfo = filterBar.data(\"feFilterInfo\");\n\t\tif (typeof _propertyInfo === \"string\") {\n\t\t\t_propertyInfo = JSON.parse(_propertyInfo);\n\t\t}\n\t\treturn _propertyInfo || [];\n\t},\n\n\t/**\n\t * Gets the {@link ConditionValidated} state for a single value. This decides whether the value is treated as a selected value\n\t * in a value help, meaning that its description is loaded and displayed if existing, or whether it is displayed as a\n\t * condition (e.g. \"=1\").\n\t *\n\t * Values for properties without value list info are always treated as {@link ConditionValidated.NotValidated}.\n\t * @param valueListInfo The value list info from the {@link MetaModel}\n\t * @param conditionPath Path to the property to set the value as condition for\n\t * @param value The single value to get the state for\n\t * @returns The {@link ConditionValidated} state for the value\n\t */\n\t_getConditionValidated: async function (\n\t\tvalueListInfo: AnnotationValueListType | undefined,\n\t\tconditionPath: string,\n\t\tvalue: string | number | boolean | null | undefined\n\t): Promise<ConditionValidated> {\n\t\tif (!valueListInfo) {\n\t\t\treturn ConditionValidated.NotValidated;\n\t\t}\n\n\t\ttry {\n\t\t\tconst valueListProperties = valueListInfo.Parameters.filter((parameter) =>\n\t\t\t\t[CommonAnnotationTypes.ValueListParameterInOut.valueOf(), CommonAnnotationTypes.ValueListParameterOut.valueOf()].includes(\n\t\t\t\t\tparameter.$Type\n\t\t\t\t)\n\t\t\t)\n\t\t\t\t.filter((parameter) => parameter.LocalDataProperty?.$PropertyPath === conditionPath)\n\t\t\t\t.map((parameter) => parameter.ValueListProperty);\n\n\t\t\tconst valueListPropertyPath = valueListProperties[0] ?? conditionPath;\n\n\t\t\tconst filter = new Filter({\n\t\t\t\tpath: valueListPropertyPath,\n\t\t\t\toperator: FilterOperator.EQ,\n\t\t\t\tvalue1: value\n\t\t\t});\n\t\t\tconst listBinding = valueListInfo.$model.bindList(`/${valueListInfo.CollectionPath}`, undefined, undefined, filter, {\n\t\t\t\t$select: valueListPropertyPath\n\t\t\t});\n\n\t\t\tconst valueExists = (await listBinding.requestContexts()).length > 0;\n\t\t\tif (valueExists) {\n\t\t\t\treturn ConditionValidated.Validated;\n\t\t\t} else {\n\t\t\t\treturn ConditionValidated.NotValidated;\n\t\t\t}\n\t\t} catch (error: unknown) {\n\t\t\tLog.error(\"FilterUtils: Error while retrieving ConditionValidated\", error as Error | string);\n\t\t\treturn ConditionValidated.NotValidated;\n\t\t}\n\t},\n\t/**\n\t * Clear the filter value for a specific property in the filter bar.\n\t * This is a prerequisite before new values can be set cleanly.\n\t * @param filterBar The filter bar that contains the filter field\n\t * @param conditionPath The path to the property as a condition path\n\t */\n\tasync _clearFilterValue(filterBar: FilterBar, conditionPath: string): Promise<void> {\n\t\tconst oState = await StateUtil.retrieveExternalState(filterBar);\n\t\tif (oState.filter[conditionPath]) {\n\t\t\toState.filter[conditionPath].forEach((oCondition: ConditionObject) => {\n\t\t\t\toCondition.filtered = false;\n\t\t\t});\n\t\t\tawait StateUtil.applyExternalState(filterBar, { filter: { [conditionPath]: oState.filter[conditionPath] } });\n\t\t}\n\t},\n\n\t/**\n\t * Set the filter values for the given property in the filter bar.\n\t * The filter values can be either a single value or an array of values.\n\t * Each filter value must be represented as a primitive value.\n\t * @param oFilterBar The filter bar that contains the filter field\n\t * @param sConditionPath The path to the property as a condition path\n\t * @param args List of optional parameters\n\t *  [sOperator] The operator to be used - if not set, the default operator (EQ) will be used\n\t *  [vValues] The values to be applied - if sOperator is missing, vValues is used as 3rd parameter\n\t */\n\tsetFilterValues: async function (oFilterBar: FilterBar | undefined, sConditionPath: string, ...args: unknown[]): Promise<void> {\n\t\tawait this._setFilterValues(oFilterBar, false, sConditionPath, ...args);\n\t},\n\n\t/**\n\t * Add the filter values for the given property in the filter bar.\n\t *\n\t * The filter values can be either a single value or an array of values.\n\t * Each filter value must be represented as a primitive value.\n\t * @param filterBar The filter bar that contains the filter field\n\t * @param conditionPath The path to the property as a condition path\n\t * @param args List of optional parameters\n\t */\n\taddFilterValues: async function (filterBar: FilterBar | undefined, conditionPath: string, ...args: unknown[]): Promise<void> {\n\t\tawait this._setFilterValues(filterBar, true, conditionPath, ...args);\n\t},\n\n\t_setFilterValues: async function (\n\t\toFilterBar: FilterBar | undefined,\n\t\tappend: boolean,\n\t\tsConditionPath: string,\n\t\t...args: unknown[]\n\t): Promise<void> {\n\t\tlet sOperator = args?.[0] as string | undefined;\n\t\tlet vValues = args?.[1] as undefined | string | number | boolean | string[] | number[] | boolean[];\n\n\t\t// Do nothing when the filter bar is hidden\n\t\tif (!oFilterBar) {\n\t\t\treturn;\n\t\t}\n\n\t\t// common filter Operators need a value. Do nothing if this value is undefined\n\t\t// BCP: 2270135274\n\t\tif (\n\t\t\targs.length === 2 &&\n\t\t\t(vValues === undefined || vValues === null || vValues === \"\") &&\n\t\t\tsOperator &&\n\t\t\tObject.keys(FilterOperator).includes(sOperator)\n\t\t) {\n\t\t\tLog.warning(`An empty filter value cannot be applied with the ${sOperator} operator`);\n\t\t\treturn;\n\t\t}\n\n\t\t// The 4th parameter is optional; if sOperator is missing, vValues is used as 3rd parameter\n\t\t// This does not apply for semantic dates, as these do not require vValues (exception: \"LASTDAYS\", 3)\n\t\tif (vValues === undefined && !SemanticDateOperators.getSemanticDateOperations().includes(sOperator || \"\")) {\n\t\t\tvValues = sOperator ?? [];\n\t\t\tsOperator = undefined;\n\t\t}\n\n\t\t// If sOperator is not set, use EQ as default\n\t\tif (!sOperator) {\n\t\t\tsOperator = FilterOperator.EQ;\n\t\t}\n\n\t\t// Supported array types:\n\t\t//  - Single Values:\t\"2\" | [\"2\"]\n\t\t//  - Multiple Values:\t[\"2\", \"3\"]\n\t\t//  - Ranges:\t\t\t[\"2\",\"3\"]\n\t\t// Unsupported array types:\n\t\t//  - Multiple Ranges:\t[[\"2\",\"3\"]] | [[\"2\",\"3\"],[\"4\",\"5\"]]\n\t\tconst supportedValueTypes = [\"string\", \"number\", \"boolean\"];\n\t\tif (\n\t\t\tvValues !== undefined &&\n\t\t\t((!Array.isArray(vValues) && !supportedValueTypes.includes(typeof vValues)) ||\n\t\t\t\t(Array.isArray(vValues) && vValues.length > 0 && !supportedValueTypes.includes(typeof vValues[0])))\n\t\t) {\n\t\t\tthrow new Error(\n\t\t\t\t\"FilterUtils.js#_setFilterValues: Filter value not supported; only primitive values or an array thereof can be used.\"\n\t\t\t);\n\t\t}\n\t\tlet values: (string | number | boolean | null)[] | undefined;\n\t\tif (vValues !== undefined) {\n\t\t\tvalues = Array.isArray(vValues) ? vValues : [vValues];\n\t\t}\n\n\t\t// Get the value list info of the property to later check whether the values exist\n\t\tconst valueListInfo = await this._getValueListInfo(oFilterBar, sConditionPath);\n\n\t\tconst filter: { [key: string]: ConditionObject[] } = {};\n\t\tif (sConditionPath) {\n\t\t\tif (values && values.length) {\n\t\t\t\tif (sOperator === FilterOperator.BT) {\n\t\t\t\t\t// The operator BT requires one condition with both thresholds\n\t\t\t\t\tfilter[sConditionPath] = [Condition.createCondition(sOperator, values, null, null, ConditionValidated.NotValidated)];\n\t\t\t\t} else {\n\t\t\t\t\t// Regular single and multi value conditions, if there are no values, we do not want any conditions\n\t\t\t\t\tfilter[sConditionPath] = await Promise.all(\n\t\t\t\t\t\tvalues.map(async (value) => {\n\t\t\t\t\t\t\t// For the EQ case, tell MDC to validate the value (e.g. display the description), if it exists in the associated entity, otherwise never validate\n\t\t\t\t\t\t\tconst conditionValidatedStatus =\n\t\t\t\t\t\t\t\tsOperator === FilterOperator.EQ\n\t\t\t\t\t\t\t\t\t? await this._getConditionValidated(valueListInfo, sConditionPath, value)\n\t\t\t\t\t\t\t\t\t: ConditionValidated.NotValidated;\n\n\t\t\t\t\t\t\treturn Condition.createCondition(sOperator!, [value], null, null, conditionValidatedStatus);\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else if (SemanticDateOperators.getSemanticDateOperations().includes(sOperator || \"\")) {\n\t\t\t\t// vValues is undefined, so the operator is a semantic date that does not need values (see above)\n\t\t\t\tfilter[sConditionPath] = [Condition.createCondition(sOperator, [], null, null, ConditionValidated.NotValidated)];\n\t\t\t}\n\t\t}\n\n\t\tif (!append) {\n\t\t\t// Clear the current value as we do not want to add filter values but replace them\n\t\t\tawait this._clearFilterValue(oFilterBar, sConditionPath);\n\t\t}\n\n\t\tif (filter[sConditionPath]) {\n\t\t\t// This is not called in the reset case, i.e. setFilterValue(\"Property\")\n\t\t\tawait StateUtil.applyExternalState(oFilterBar, { filter });\n\t\t}\n\t},\n\tconditionToModelPath: function (sConditionPath: string): string {\n\t\t// make the path usable as model property, therefore slashes become backslashes\n\t\treturn sConditionPath.replace(/\\//g, \"\\\\\");\n\t},\n\t_getFilterMetaModel: function (oFilterControl: IFilterControl, metaModel?: ODataMetaModel): ODataMetaModel {\n\t\treturn metaModel || (oFilterControl.getModel()!.getMetaModel() as ODataMetaModel);\n\t},\n\t_getEntitySetPath: function (sEntityTypePath: string): string {\n\t\treturn sEntityTypePath && ModelHelper.getEntitySetPath(sEntityTypePath);\n\t},\n\n\t_getFieldsForTable: function (oFilterControl: IFilterControl, sEntityTypePath?: string): TableVisualization[] {\n\t\tconst lrTables: TableVisualization[] = [];\n\t\t/**\n\t\t * Gets fields from\n\t\t * \t- direct entity properties,\n\t\t * \t- navigateProperties key in the manifest if these properties are known by the entity\n\t\t *  - annotation \"SelectionFields\"\n\t\t */\n\t\tif (sEntityTypePath) {\n\t\t\tconst oView = CommonUtils.getTargetView(oFilterControl);\n\t\t\tconst tableControls =\n\t\t\t\toView &&\n\t\t\t\toView.getController() &&\n\t\t\t\t(oView.getController() as ListReportController)._getControls &&\n\t\t\t\t(oView.getController() as ListReportController)._getControls(\"table\");\n\t\t\tif (tableControls) {\n\t\t\t\ttableControls.forEach(function (oTable: Control) {\n\t\t\t\t\tlrTables.push((oTable.getParent() as TableAPI).getTableDefinition());\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn lrTables;\n\t\t}\n\t\treturn [];\n\t},\n\t_getSelectionFields: function (\n\t\toFilterControl: IFilterControl,\n\t\tsEntityTypePath: string | undefined,\n\t\tsFilterEntityTypePath: string,\n\t\tcontextPath: string,\n\t\tlrTables: TableVisualization[],\n\t\toMetaModel: ODataMetaModel,\n\t\toConverterContext: ConverterContext,\n\t\tincludeHidden?: boolean,\n\t\toModifier?: BaseTreeModifier,\n\t\tlineItemTerm?: string,\n\t\tannotationPath?: string\n\t): FilterField[] {\n\t\tconst filterFields = FilterBarConverter.getSelectionFields(\n\t\t\toConverterContext,\n\t\t\tlrTables,\n\t\t\tannotationPath,\n\t\t\tincludeHidden,\n\t\t\tlineItemTerm\n\t\t);\n\t\tlet selectionFields: FilterField[] = filterFields.selectionFields;\n\t\tconst propertyInfos = (oFilterControl as Partial<IFilterControl>).data\n\t\t\t? this.getFilterPropertyInfo(oFilterControl)\n\t\t\t: JSON.parse(filterFields.sPropertyInfo.replace(/\\\\\\{/g, \"{\").replace(/\\\\\\}/g, \"}\")); // propertyInfo string is returned from the getSelectionFields\n\t\tif (\n\t\t\t(oModifier\n\t\t\t\t? oModifier.getControlType(oFilterControl) === \"sap.ui.mdc.FilterBar\"\n\t\t\t\t: oFilterControl.isA(\"sap.ui.mdc.FilterBar\")) &&\n\t\t\tsEntityTypePath !== sFilterEntityTypePath\n\t\t) {\n\t\t\t/**\n\t\t\t * We are in a multi-entity set scenario so we add annotation \"SelectionFields\"\n\t\t\t * from FilterBar entity if these properties are known by the entity\n\t\t\t */\n\t\t\tconst oVisualizationObjectPath = MetaModelConverter.getInvolvedDataModelObjects(oMetaModel.createBindingContext(contextPath)!);\n\t\t\tconst oPageContext = oConverterContext.getConverterContextFor(sFilterEntityTypePath);\n\t\t\tconst aFilterBarSelectionFieldsAnnotation: SelectionFields =\n\t\t\t\toPageContext.getEntityTypeAnnotation<SelectionFields>(\"@com.sap.vocabularies.UI.v1.SelectionFields\").annotation ||\n\t\t\t\t([] as unknown as SelectionFields);\n\t\t\tconst mapSelectionFields: Record<string, boolean> = {};\n\t\t\tselectionFields.forEach(function (oSelectionField: FilterField) {\n\t\t\t\tmapSelectionFields[oSelectionField.conditionPath] = true;\n\t\t\t});\n\n\t\t\taFilterBarSelectionFieldsAnnotation.forEach(function (oFilterBarSelectionFieldAnnotation: PropertyPath) {\n\t\t\t\tconst sPath = oFilterBarSelectionFieldAnnotation.value;\n\t\t\t\tif (!mapSelectionFields[sPath]) {\n\t\t\t\t\tconst oFilterField = FilterBarConverter.getFilterField(\n\t\t\t\t\t\tsPath,\n\t\t\t\t\t\toConverterContext,\n\t\t\t\t\t\toVisualizationObjectPath.startingEntitySet.entityType\n\t\t\t\t\t);\n\t\t\t\t\tif (oFilterField) {\n\t\t\t\t\t\tselectionFields.push(oFilterField);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (selectionFields) {\n\t\t\tconst fieldNames: string[] = [];\n\t\t\tselectionFields.forEach(function (oField: FilterField) {\n\t\t\t\tfieldNames.push(oField.key);\n\t\t\t});\n\t\t\tselectionFields = this._getSelectionFieldsFromPropertyInfos(fieldNames, selectionFields, propertyInfos);\n\t\t}\n\t\treturn selectionFields;\n\t},\n\n\t/**\n\t * Adds the properties from propertyInfos for the filter field.\n\t * @param fieldNames The names of fields present in the selectionField array.\n\t * @param selectionFields Selection field array of all the possible fields that can be in the selection field.\n\t * @param propertyInfo PropertyInfos filters that are available or present in selection field annotation.\n\t * @returns FilterField array of all the possible filter fields after adding properties from propertyInfos\n\t */\n\t_getSelectionFieldsFromPropertyInfos: function (\n\t\tfieldNames: string[],\n\t\tselectionFields: FilterField[],\n\t\tpropertyInfo: PropertyInfo[]\n\t): FilterField[] {\n\t\tpropertyInfo.forEach(function (oProp: PropertyInfo) {\n\t\t\tif (oProp.name === \"$search\" || oProp.name === \"$editState\" || oProp.key === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selField = selectionFields[fieldNames.indexOf(oProp.key)];\n\t\t\tif (fieldNames.includes(oProp.key) && selField.annotationPath) {\n\t\t\t\toProp.group = selField.group;\n\t\t\t\toProp.groupLabel = selField.groupLabel;\n\t\t\t\toProp.settings = selField.settings;\n\t\t\t\toProp.visualFilter = selField.visualFilter;\n\t\t\t\toProp.label = oProp.label ? oProp.label : selField.label; // if a label is coming for the manifest we need to take that as priority.\n\t\t\t\toProp.annotationPath = oProp.annotationPath ?? selField.annotationPath;\n\t\t\t\tselectionFields[fieldNames.indexOf(oProp.key)] = oProp as FilterField;\n\t\t\t}\n\n\t\t\tif (!fieldNames.includes(oProp.key) && !oProp.annotationPath) {\n\t\t\t\tselectionFields.push(oProp as FilterField);\n\t\t\t}\n\t\t});\n\t\treturn selectionFields;\n\t},\n\t_getSearchField: function (oIFilter: Partial<IFilterControl>, aIgnoreProperties: string[]): string | null {\n\t\treturn oIFilter.getSearch && !aIgnoreProperties.includes(\"search\") ? oIFilter.getSearch() : null;\n\t},\n\t_getFilterConditions: function (\n\t\tmProperties: { ignoredProperties?: string[]; propertiesMetadata?: PropertyInfo[]; targetControl?: Control } | undefined,\n\t\tmFilterConditions: Record<string, ConditionObject[]>,\n\t\toIFilter: IFilterControl\n\t): Record<string, ConditionObject[]> {\n\t\tconst mConditions = mFilterConditions || oIFilter.getConditions();\n\t\tif (mProperties && mProperties.targetControl && mProperties.targetControl.isA(\"sap.ui.mdc.Chart\")) {\n\t\t\tObject.keys(mConditions).forEach(function (sKey: string) {\n\t\t\t\tif (sKey === \"$editState\") {\n\t\t\t\t\tdelete mConditions[\"$editState\"];\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn mConditions;\n\t},\n\t_getFilterPropertiesMetadata: function (\n\t\taFilterPropertiesMetadata: PropertyInfo[] | null,\n\t\toIFilter: IFilterControl\n\t): PropertyInfo[] | null {\n\t\tif (!(aFilterPropertiesMetadata && aFilterPropertiesMetadata.length)) {\n\t\t\tif (oIFilter.getPropertyInfo) {\n\t\t\t\taFilterPropertiesMetadata = oIFilter.getPropertyInfo();\n\t\t\t} else {\n\t\t\t\taFilterPropertiesMetadata = null;\n\t\t\t}\n\t\t}\n\t\treturn aFilterPropertiesMetadata;\n\t},\n\t_getIgnoredProperties: function (filterPropertiesMetadata: PropertyInfo[], entityProperties: PropertyInfo[]): string[] {\n\t\tconst ignoreProperties: string[] = [];\n\t\tfilterPropertiesMetadata.forEach(function (filterProperty) {\n\t\t\tconst filterPropertyName = filterProperty.name;\n\t\t\tconst entityPropertiesCurrent = entityProperties.find((entity) => entity.name === filterPropertyName);\n\t\t\tif (\n\t\t\t\tentityPropertiesCurrent &&\n\t\t\t\t((!filterProperty.isCustomFilter && filterProperty.dataType !== entityPropertiesCurrent.dataType) ||\n\t\t\t\t\t// custom filters will have an annotation path applied in the converter when there is a matching property found\n\t\t\t\t\t(filterProperty.isCustomFilter && entityPropertiesCurrent.annotationPath === undefined))\n\t\t\t) {\n\t\t\t\tignoreProperties.push(filterPropertyName);\n\t\t\t}\n\t\t});\n\t\treturn ignoreProperties;\n\t},\n\tgetFilters: function (filterBar?: IFilterControl): InternalBindingInfo | undefined {\n\t\tif (!filterBar || typeof filterBar.isInitialized !== \"function\" || !filterBar.isInitialized()) {\n\t\t\treturn;\n\t\t}\n\t\tconst { parameters, filters, search } = this.getFilterInfo(filterBar);\n\t\treturn { parameters, filters, search };\n\t},\n\t/**\n\t * Prepares propertyInfo for sharing it outside FE, removes unwanted property.\n\t * @param propertyInfos Array of propertyInfo\n\t * @returns Array or String (for FilterBar templating) of PropertyInfos after removing the unwanted properties\n\t */\n\tformatPropertyInfo: function (propertyInfos: PropertyInfo[] | string): PropertyInfoExternal[] | string {\n\t\tif (typeof propertyInfos === \"string\") {\n\t\t\tlet propInfo = propertyInfos.replace(/\\\\\\{/g, \"{\");\n\t\t\tpropInfo = propInfo.replace(/\\\\\\}/g, \"}\");\n\t\t\tlet propInfos = JSON.parse(propInfo);\n\t\t\tpropInfos = this._formatPropertyInfo(propInfos);\n\t\t\tlet propertyInfoForFilterBar = JSON.stringify(propInfos);\n\t\t\tpropertyInfoForFilterBar = propertyInfoForFilterBar.replace(/\\{/g, \"\\\\{\");\n\t\t\tpropertyInfoForFilterBar = propertyInfoForFilterBar.replace(/\\}/g, \"\\\\}\");\n\t\t\treturn propertyInfoForFilterBar;\n\t\t} else {\n\t\t\treturn this._formatPropertyInfo(propertyInfos);\n\t\t}\n\t},\n\t/**\n\t * Removes unwanted property from PropertyInfos.\n\t * @param propertyInfos Array of propertyInfo\n\t * @returns Array of PropertyInfos after removing the unwanted properties\n\t */\n\t_formatPropertyInfo: function (propertyInfos: PropertyInfo[]): PropertyInfoExternal[] {\n\t\treturn propertyInfos.map((property) => {\n\t\t\tconst _propertyInfo: PropertyInfoExternal = {\n\t\t\t\tkey: property.key || property.name,\n\t\t\t\tdataType: \"\",\n\t\t\t\tlabel: \"\"\n\t\t\t};\n\t\t\tfor (const key in PropertyInfoKeys) {\n\t\t\t\tif (property.hasOwnProperty(key)) {\n\t\t\t\t\tswitch (key) {\n\t\t\t\t\t\tcase \"hiddenFilter\":\n\t\t\t\t\t\t\t_propertyInfo.hiddenFilter = property.hiddenFilter;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"required\":\n\t\t\t\t\t\t\t_propertyInfo.required = property.required;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"path\":\n\t\t\t\t\t\t\t_propertyInfo.path = property.path;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"tooltip\":\n\t\t\t\t\t\t\t_propertyInfo.tooltip = property.tooltip;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"visible\":\n\t\t\t\t\t\t\t_propertyInfo.visible = property.visible;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"maxConditions\":\n\t\t\t\t\t\t\t_propertyInfo.maxConditions = property.maxConditions;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"formatOptions\":\n\t\t\t\t\t\t\t_propertyInfo.formatOptions = property.formatOptions;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"constraints\":\n\t\t\t\t\t\t\t_propertyInfo.constraints = property.constraints;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"group\":\n\t\t\t\t\t\t\t_propertyInfo.group = property.group;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"groupLabel\":\n\t\t\t\t\t\t\t_propertyInfo.groupLabel = property.groupLabel;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"caseSensitive\":\n\t\t\t\t\t\t\t_propertyInfo.caseSensitive = property.caseSensitive;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (property.dataType) {\n\t\t\t\t_propertyInfo.dataType = property.dataType;\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Missing mandatory property dataType for filter-bar filter field: ${property}`);\n\t\t\t}\n\t\t\tif (property.label) {\n\t\t\t\t_propertyInfo.label = property.label;\n\t\t\t}\n\t\t\treturn _propertyInfo;\n\t\t});\n\t}\n};\n\nexport default oFilterUtils;\n"],"mappings":"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","ignoreList":[]}
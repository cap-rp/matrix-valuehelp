{"version":3,"file":"FilterHelper.js","names":["oExcludeMap","Contains","StartsWith","EndsWith","Empty","NotEmpty","LE","GE","LT","GT","BT","NE","EQ","_getDateTimeOffsetCompliantValue","sValue","oValue","match","indexOf","length","split","undefined","_exports","_getDateCompliantValue","getTypeCompliantValue","value","edmType","option","isTypeFilterable","retValue","numFloat","Number","isNaN","parseFloat","toString","numInt","parseInt","resolveConditionValues","sOption","oV1","oV2","sSign","validOperators","arguments","oValue2","sInternalOperation","nIndexOf","nLastIndex","lastIndexOf","substring","Log","warning","includes","condition","values","isEmpty","operator","push","getRangeProperty","sProperty","_buildConditionsFromSelectionRanges","Ranges","property","propertyName","getCustomConditions","conditions","hasValueHelpAnnotation","hasValueHelp","forEach","Range","oCondition","getConditions","type","_getProperty","propertyPath","metaModel","entitySetPath","propertyContext","getMetaContext","dataModelObjectPath","getInvolvedDataModelObjects","targetObject","_buildFiltersConditionsFromSelectOption","selectOption","PropertyName","filterConditions","$PropertyPath","targetProperty","concat","getFiltersConditionsFromSelectionVariant","sEntitySetPath","oMetaModel","selectionVariant","oFilterConditions","aSelectOptions","SelectOptions","aParameters","Parameters","sPropertyName","Object","keys","parameter","sPropertyPath","value1","PropertyValue","value2","path","isParameter","validated","ConditionValidated","Validated","sign","Sign","Option","Low","High","conditionValues","NotValidated","Condition","createCondition","err","message","Error","String","error","getDefaultValueFilters","oContext","properties","getInterface","getPath","getModel","key","defaultFilterValue","getObject","getDefaultSemanticDateFilters","defaultSemanticDates","oInterface","sEntityTypePath","aPropertyPathParts","sPath","iPropertyPathLength","sNavigationPath","slice","join","vProperty","$kind","$isCollection","operatorParamsArr","getEditStatusFilter","ofilterConditions","getFilterConditions","entitySet","viewData","showDraftEditState","editStateFilter","entityTypeAnnotations","entityTypeProperties","defaultFilters","defaultSemanticDateFilters","retFilterConditions","filterConfigs","controlConfiguration","getConditionsOfSupportedOperators","JSON","stringify","replace","requiresIContext","entitySetContext","controlConfigs","filterFields","useSemanticDateRange","createBindingContext","propertyMetaInfo","propertyFilterFieldConfig","settings","operatorsString","FilterFieldHelper","operators","CommonHelper","stringifyCustomData","supportedOperators","_updateConditionsForSupportedOperators","propertyConditions","retConditions","allSemanticDateOperators","SemanticDateOperators","getSemanticDateOperations","filter"],"sources":["./FilterHelper.ts"],"sourcesContent":["import type { Property } from \"@sap-ux/vocabularies-types\";\nimport type {\n\tParameterTypes,\n\tSelectionRangeTypeTypes,\n\tSelectionVariantType,\n\tSelectOptionType\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport type { FilterManifestConfiguration } from \"sap/fe/core/converters/ManifestSettings\";\nimport { getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport type { ViewData } from \"sap/fe/core/services/TemplatedViewServiceFactory\";\nimport { hasValueHelp } from \"sap/fe/core/templating/PropertyHelper\";\nimport type { DefaultTypeForEdmType } from \"sap/fe/core/type/EDM\";\nimport { isTypeFilterable } from \"sap/fe/core/type/EDM\";\nimport FilterFieldHelper from \"sap/fe/macros/field/FieldHelper\";\nimport type { SelectOption } from \"sap/fe/navigation/SelectionVariant\";\nimport type UI5Date from \"sap/ui/core/date/UI5Date\";\nimport type { IContext } from \"sap/ui/core/util/XMLPreprocessor\";\nimport type { ConditionObject } from \"sap/ui/mdc/condition/Condition\";\nimport Condition from \"sap/ui/mdc/condition/Condition\";\nimport ConditionValidated from \"sap/ui/mdc/enums/ConditionValidated\";\nimport type { EntitySet } from \"sap/ui/model/odata/ODataMetaModel\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type { MetaModelType } from \"../../../../../../../types/metamodel_types\";\nimport CommonHelper from \"../CommonHelper\";\nimport SemanticDateOperators from \"./SemanticDateOperators\";\n\nexport type FilterConditions = {\n\toperator: string;\n\tvalue1?: unknown;\n\tvalue2?: unknown;\n\tvalues: Array<string>;\n\tisEmpty?: boolean | null;\n\tvalidated?: string;\n\tisParameter?: boolean;\n\tpath?:string;\n};\n\ntype ConditionValue = string | number | boolean | Date | UI5Date | undefined | null;\n\nconst oExcludeMap: Record<string, string> = {\n\tContains: \"NotContains\",\n\tStartsWith: \"NotStartsWith\",\n\tEndsWith: \"NotEndsWith\",\n\tEmpty: \"NotEmpty\",\n\tNotEmpty: \"Empty\",\n\tLE: \"NOTLE\",\n\tGE: \"NOTGE\",\n\tLT: \"NOTLT\",\n\tGT: \"NOTGT\",\n\tBT: \"NOTBT\",\n\tNE: \"EQ\",\n\tEQ: \"NE\"\n};\n\nexport function _getDateTimeOffsetCompliantValue(sValue: string): string | undefined {\n\tlet oValue;\n\tif (sValue.match(/^(\\d{4})-(\\d{1,2})-(\\d{1,2})T(\\d{1,2}):(\\d{1,2}):(\\d{1,2})\\+(\\d{1,2}):(\\d{1,2})/)) {\n\t\toValue = sValue.match(/^(\\d{4})-(\\d{1,2})-(\\d{1,2})T(\\d{1,2}):(\\d{1,2}):(\\d{1,2})\\+(\\d{1,2}):(\\d{1,2})/)![0];\n\t} else if (sValue.match(/^(\\d{4})-(\\d{1,2})-(\\d{1,2})T(\\d{1,2}):(\\d{1,2}):(\\d{1,2}).(\\d{1,7})[+-](\\d{1,2}):(\\d{1,2})/)) {\n\t\toValue = sValue;\n\t} else if (sValue.match(/^(\\d{4})-(\\d{1,2})-(\\d{1,2})T(\\d{1,2}):(\\d{1,2}):(\\d{1,2})/)) {\n\t\toValue = `${sValue.match(/^(\\d{4})-(\\d{1,2})-(\\d{1,2})T(\\d{1,2}):(\\d{1,2}):(\\d{1,2})/)![0]}+0000`;\n\t} else if (sValue.match(/^(\\d{4})-(\\d{1,2})-(\\d{1,2})/)) {\n\t\toValue = `${sValue.match(/^(\\d{4})-(\\d{1,2})-(\\d{1,2})/)![0]}T00:00:00+0000`;\n\t} else if (sValue.indexOf(\"Z\") === sValue.length - 1) {\n\t\toValue = `${sValue.split(\"Z\")[0]}+0100`;\n\t} else {\n\t\toValue = undefined;\n\t}\n\treturn oValue;\n}\n\nexport function _getDateCompliantValue(sValue: string): string | null {\n\treturn sValue.match(/^(\\d{4})-(\\d{1,2})-(\\d{1,2})/)\n\t\t? sValue.match(/^(\\d{4})-(\\d{1,2})-(\\d{1,2})/)![0]\n\t\t: sValue.match(/^(\\d{8})/) && sValue.match(/^(\\d{8})/)![0];\n}\n\n/**\n * Method to get the compliant value type based on the data type.\n * @param  sValue Raw value\n * @param  sType The property type\n * @param  option The operation to consider\n * @returns Value to be propagated to the condition.\n */\n\nexport function getTypeCompliantValue(value: ConditionValue, edmType: string, option?: string): ConditionValue {\n\tif (!isTypeFilterable(edmType as keyof typeof DefaultTypeForEdmType) || !option) {\n\t\treturn undefined;\n\t}\n\n\tif (value === undefined || value === null) {\n\t\treturn value;\n\t}\n\tlet retValue: ConditionValue = value;\n\tswitch (edmType) {\n\t\tcase \"Edm.Boolean\":\n\t\t\tif (typeof value === \"boolean\") {\n\t\t\t\tretValue = value;\n\t\t\t} else {\n\t\t\t\tretValue = value === \"true\" || (value === \"false\" ? false : undefined);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"Edm.Double\":\n\t\tcase \"Edm.Single\":\n\t\t\tif (value === \"\" && option === \"EQ\") {\n\t\t\t\t// the operator will be calulcated as empty\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst numFloat = Number(value);\n\t\t\tretValue = isNaN(numFloat) ? undefined : parseFloat(value.toString());\n\t\t\tbreak;\n\t\tcase \"Edm.Byte\":\n\t\tcase \"Edm.Int16\":\n\t\tcase \"Edm.Int32\":\n\t\tcase \"Edm.SByte\":\n\t\t\tif (retValue === \"\" && option === \"EQ\") {\n\t\t\t\t// the operator will be calulcated as empty\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst numInt = Number(value);\n\t\t\tretValue = isNaN(numInt) ? undefined : parseInt(value.toString(), 10);\n\t\t\tbreak;\n\t\tcase \"Edm.Date\":\n\t\t\tretValue = _getDateCompliantValue(value.toString());\n\t\t\tbreak;\n\t\tcase \"Edm.DateTimeOffset\":\n\t\t\tretValue = _getDateTimeOffsetCompliantValue(value.toString());\n\t\t\tbreak;\n\t\tcase \"Edm.TimeOfDay\":\n\t\t\tretValue = value.toString().match(/(\\d{1,2}):(\\d{1,2}):(\\d{1,2})/)\n\t\t\t\t? value.toString().match(/(\\d{1,2}):(\\d{1,2}):(\\d{1,2})/)?.[0]\n\t\t\t\t: undefined;\n\t\t\tbreak;\n\t\tdefault:\n\t}\n\n\treturn retValue === null ? undefined : retValue;\n}\n\n/**\n * Method to create a condition.\n * @param  sOption Operator to be used.\n * @param  oV1 Lower value\n * @param  oV2 Higher value\n * @param sSign\n * @param validOperators Operators supported.\n * @returns Condition to be created\n */\nexport function resolveConditionValues(\n\tsOption: string | undefined,\n\toV1: string,\n\toV2: string,\n\tsSign: string | undefined,\n\tvalidOperators: string[] = []\n): FilterConditions | undefined {\n\tlet oValue = oV1,\n\t\toValue2,\n\t\tsInternalOperation: string;\n\tif (oV1 === undefined || oV1 === null) {\n\t\treturn undefined;\n\t}\n\n\tswitch (sOption) {\n\t\tcase \"CP\":\n\t\t\tsInternalOperation = \"Contains\";\n\t\t\tif (oValue) {\n\t\t\t\tconst nIndexOf = oValue.indexOf(\"*\");\n\t\t\t\tconst nLastIndex = oValue.lastIndexOf(\"*\");\n\n\t\t\t\t// only when there are '*' at all\n\t\t\t\tif (nIndexOf > -1) {\n\t\t\t\t\tif (nIndexOf === 0 && nLastIndex !== oValue.length - 1) {\n\t\t\t\t\t\tsInternalOperation = \"EndsWith\";\n\t\t\t\t\t\toValue = oValue.substring(1, oValue.length);\n\t\t\t\t\t} else if (nIndexOf !== 0 && nLastIndex === oValue.length - 1) {\n\t\t\t\t\t\tsInternalOperation = \"StartsWith\";\n\t\t\t\t\t\toValue = oValue.substring(0, oValue.length - 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\toValue = oValue.substring(1, oValue.length - 1);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tLog.warning(\"Contains Option cannot be used without '*'.\");\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"EQ\":\n\t\t\tsInternalOperation = sOption;\n\t\t\tif (validOperators.length === 0 || validOperators.includes(\"Empty\")) {\n\t\t\t\tsInternalOperation = oV1 === \"\" ? \"Empty\" : sOption;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"NE\":\n\t\t\tsInternalOperation = oV1 === \"\" ? \"NotEmpty\" : sOption;\n\t\t\tbreak;\n\t\tcase \"BT\":\n\t\t\tif (oV2 === undefined || oV2 === null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\toValue2 = oV2;\n\t\t\tsInternalOperation = sOption;\n\t\t\tbreak;\n\t\tcase \"LE\":\n\t\tcase \"GE\":\n\t\tcase \"GT\":\n\t\tcase \"LT\":\n\t\t\tsInternalOperation = sOption;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tLog.warning(`Selection Option is not supported : '${sOption}'`);\n\t\t\treturn undefined;\n\t}\n\tif (sSign === \"E\") {\n\t\tsInternalOperation = oExcludeMap[sInternalOperation];\n\t}\n\tconst condition: FilterConditions = {\n\t\tvalues: [],\n\t\tisEmpty: null,\n\t\toperator: sInternalOperation\n\t};\n\tif (sInternalOperation !== \"Empty\") {\n\t\tcondition.values.push(oValue);\n\t\tif (oValue2) {\n\t\t\tcondition.values.push(oValue2);\n\t\t}\n\t}\n\treturn condition;\n}\n\n/* Method to get the Range property from the Selection Option */\nexport function getRangeProperty(sProperty: string): string {\n\treturn sProperty.indexOf(\"/\") > 0 ? sProperty.split(\"/\")[1] : sProperty;\n}\n\nfunction _buildConditionsFromSelectionRanges(\n\tRanges: MetaModelType<SelectionRangeTypeTypes>[],\n\tproperty: Property,\n\tpropertyName: string,\n\tgetCustomConditions?: Function\n): ConditionObject[] {\n\tconst conditions: ConditionObject[] = [];\n\tconst hasValueHelpAnnotation = hasValueHelp(property);\n\tRanges?.forEach((Range: MetaModelType<SelectionRangeTypeTypes>) => {\n\t\tconst oCondition = getCustomConditions\n\t\t\t? getCustomConditions(Range, property, propertyName)\n\t\t\t: getConditions(Range, property.type, hasValueHelpAnnotation);\n\t\tif (oCondition) {\n\t\t\tconditions.push(oCondition);\n\t\t}\n\t});\n\treturn conditions;\n}\n\n/**\n * Method to get the concerned property for the property path.\n * @param  propertyPath Relative property path from annotations\n * @param  metaModel Metamodel\n * @param  entitySetPath Filter bar entitySet path\n * @returns Property if found.\n */\nfunction _getProperty(propertyPath: string, metaModel: ODataMetaModel, entitySetPath: string): Property | undefined {\n\tconst propertyContext = metaModel.getMetaContext(`${entitySetPath}/${propertyPath}`),\n\t\tdataModelObjectPath = getInvolvedDataModelObjects<Property>(propertyContext);\n\n\treturn dataModelObjectPath.targetObject;\n}\n\nfunction _buildFiltersConditionsFromSelectOption(\n\tselectOption: MetaModelType<SelectOptionType> | SelectOptionType,\n\tmetaModel: ODataMetaModel,\n\tentitySetPath: string,\n\tgetCustomConditions?: Function\n): Record<string, FilterConditions[]> {\n\tconst propertyName = selectOption.PropertyName as { value?: string; $PropertyPath: string },\n\t\tfilterConditions: Record<string, FilterConditions[]> = {},\n\t\tpropertyPath: string = propertyName.value || propertyName?.$PropertyPath,\n\t\tRanges: MetaModelType<SelectionRangeTypeTypes>[] = selectOption.Ranges ?? [];\n\tconst targetProperty = _getProperty(propertyPath, metaModel, entitySetPath);\n\tif (targetProperty) {\n\t\tconst conditions: ConditionObject[] = _buildConditionsFromSelectionRanges(\n\t\t\tRanges,\n\t\t\ttargetProperty,\n\t\t\tpropertyPath,\n\t\t\tgetCustomConditions\n\t\t);\n\t\tif (conditions.length) {\n\t\t\tfilterConditions[propertyPath] = (filterConditions[propertyPath] || []).concat(conditions);\n\t\t}\n\t}\n\treturn filterConditions;\n}\n\nexport function getFiltersConditionsFromSelectionVariant(\n\tsEntitySetPath: string,\n\toMetaModel: ODataMetaModel,\n\tselectionVariant: MetaModelType<SelectionVariantType> | SelectionVariantType,\n\tgetCustomConditions?: Function\n): Record<string, FilterConditions[]> {\n\tlet oFilterConditions: Record<string, FilterConditions[]> = {};\n\tif (!selectionVariant) {\n\t\treturn oFilterConditions;\n\t}\n\tconst aSelectOptions = selectionVariant.SelectOptions,\n\t\taParameters = selectionVariant.Parameters as MetaModelType<ParameterTypes>[];\n\taSelectOptions?.forEach((selectOption) => {\n\t\tconst propertyName = selectOption.PropertyName as { value?: string; $PropertyPath: string };\n\t\tconst sPropertyName = propertyName.value || propertyName.$PropertyPath;\n\t\tif (Object.keys(oFilterConditions).includes(sPropertyName)) {\n\t\t\toFilterConditions[sPropertyName] = oFilterConditions[sPropertyName].concat(\n\t\t\t\t_buildFiltersConditionsFromSelectOption(selectOption, oMetaModel, sEntitySetPath, getCustomConditions)[sPropertyName]\n\t\t\t);\n\t\t} else {\n\t\t\toFilterConditions = {\n\t\t\t\t...oFilterConditions,\n\t\t\t\t..._buildFiltersConditionsFromSelectOption(selectOption, oMetaModel, sEntitySetPath, getCustomConditions)\n\t\t\t};\n\t\t}\n\t});\n\taParameters?.forEach((parameter) => {\n\t\tconst sPropertyPath = (parameter.PropertyName as { value?: string }).value || parameter.PropertyName!.$PropertyPath;\n\t\tconst oCondition: FilterConditions = getCustomConditions\n\t\t\t? ({\n\t\t\t\t\toperator: \"EQ\",\n\t\t\t\t\tvalue1: parameter.PropertyValue,\n\t\t\t\t\tvalue2: null,\n\t\t\t\t\tpath: sPropertyPath,\n\t\t\t\t\tisParameter: true\n\t\t\t  } as unknown as FilterConditions) // FIXME path here is unexpected\n\t\t\t: {\n\t\t\t\t\toperator: \"EQ\",\n\t\t\t\t\tvalues: [parameter.PropertyValue],\n\t\t\t\t\tisEmpty: null,\n\t\t\t\t\tvalidated: ConditionValidated.Validated,\n\t\t\t\t\tisParameter: true\n\t\t\t  };\n\t\toFilterConditions[sPropertyPath] = [oCondition];\n\t});\n\n\treturn oFilterConditions;\n}\n\nexport function getConditions(\n\tselectOption: MetaModelType<SelectOption>,\n\tedmType: string,\n\thasValueHelpAnnotation: boolean,\n\tvalidOperators: string[] = []\n): ConditionObject | undefined {\n\tlet condition;\n\n\ttry {\n\t\tconst sign: string = getRangeProperty(selectOption.Sign!);\n\t\tconst option: string = getRangeProperty(selectOption.Option!);\n\t\tconst value1 = getTypeCompliantValue(selectOption.Low, edmType, option);\n\t\tconst value2 = selectOption.High ? getTypeCompliantValue(selectOption.High, edmType, option) : undefined;\n\t\tconst conditionValues = resolveConditionValues(option, value1 as string, value2 as string, sign, validOperators);\n\t\tif (conditionValues) {\n\t\t\t// 1. Conditions with EQ operator of properties with VH need to be set Validated, they are shown in VH Panel.\n\t\t\t// 2. Other conditions of properties without VH or non-EQ operators cannot be represented in VH panel, they will be in Define Conditions Panel. These are set NotValidated.\n\t\t\tconst validated =\n\t\t\t\thasValueHelpAnnotation && conditionValues.operator === \"EQ\"\n\t\t\t\t\t? ConditionValidated.Validated\n\t\t\t\t\t: ConditionValidated.NotValidated;\n\t\t\tcondition = Condition.createCondition(conditionValues.operator, conditionValues.values, null, null, validated);\n\t\t}\n\t} catch (err: unknown) {\n\t\tconst message = err instanceof Error ? err.message : String(err);\n\t\tLog.error(`FE : Core : FilterHelper : getConditions : ${message}`);\n\t}\n\n\treturn condition;\n}\n\nconst getDefaultValueFilters = function (oContext: IContext, properties: unknown): Record<string, FilterConditions[]> {\n\tconst filterConditions: Record<string, FilterConditions[]> = {};\n\tconst entitySetPath = oContext.getInterface(1).getPath(),\n\t\toMetaModel = oContext.getInterface(1).getModel() as ODataMetaModel;\n\tif (properties) {\n\t\tfor (const key in properties) {\n\t\t\tconst defaultFilterValue = oMetaModel.getObject(`${entitySetPath}/${key}@com.sap.vocabularies.Common.v1.FilterDefaultValue`);\n\t\t\tif (defaultFilterValue !== undefined) {\n\t\t\t\tconst PropertyName = key;\n\t\t\t\tfilterConditions[PropertyName] = [\n\t\t\t\t\tCondition.createCondition(\"EQ\", [defaultFilterValue], null, null, ConditionValidated.Validated) as FilterConditions\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\t}\n\treturn filterConditions;\n};\n\nconst getDefaultSemanticDateFilters = function (\n\toContext: IContext,\n\tdefaultSemanticDates: Record<string, FilterConditions[]>\n): Record<string, FilterConditions[]> {\n\tconst filterConditions: Record<string, FilterConditions[]> = {};\n\tconst oInterface = oContext.getInterface(1);\n\tconst oMetaModel = oInterface.getModel() as ODataMetaModel;\n\tconst sEntityTypePath = oInterface.getPath();\n\tfor (const key in defaultSemanticDates) {\n\t\tif (defaultSemanticDates[key][0]) {\n\t\t\tconst aPropertyPathParts = key.split(\"::\");\n\t\t\tlet sPath = \"\";\n\t\t\tconst iPropertyPathLength = aPropertyPathParts.length;\n\t\t\tconst sNavigationPath = aPropertyPathParts.slice(0, aPropertyPathParts.length - 1).join(\"/\");\n\t\t\tconst sProperty = aPropertyPathParts[iPropertyPathLength - 1];\n\t\t\tif (sNavigationPath) {\n\t\t\t\t//Create Proper Condition Path e.g. _Item*/Property or _Item/Property\n\t\t\t\tconst vProperty = oMetaModel.getObject(sEntityTypePath + \"/\" + sNavigationPath);\n\t\t\t\tif (vProperty.$kind === \"NavigationProperty\" && vProperty.$isCollection) {\n\t\t\t\t\tsPath += `${sNavigationPath}*/`;\n\t\t\t\t} else if (vProperty.$kind === \"NavigationProperty\") {\n\t\t\t\t\tsPath += `${sNavigationPath}/`;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsPath += sProperty;\n\t\t\tconst operatorParamsArr = \"values\" in defaultSemanticDates[key][0] ? defaultSemanticDates[key][0].values : [];\n\t\t\tfilterConditions[sPath] = [\n\t\t\t\tCondition.createCondition(defaultSemanticDates[key][0].operator, operatorParamsArr, null, null, null) as FilterConditions\n\t\t\t];\n\t\t}\n\t}\n\treturn filterConditions;\n};\n\nexport function getEditStatusFilter(): Record<string, ConditionObject[]> {\n\tconst ofilterConditions: Record<string, ConditionObject[]> = {};\n\tofilterConditions[\"$editState\"] = [Condition.createCondition(\"DRAFT_EDIT_STATE\", [\"ALL\"], null, null, ConditionValidated.Validated)];\n\treturn ofilterConditions;\n}\n\nexport function getFilterConditions(\n\toContext: IContext,\n\tfilterConditions: {\n\t\tselectionVariant?: MetaModelType<SelectionVariantType> | SelectionVariantType;\n\t\tdefaultSemanticDates?: Record<string, FilterConditions[]>;\n\t},\n\tentitySet: MetaModelType<EntitySet>,\n\tviewData?: ViewData,\n\tshowDraftEditState = true\n): string | undefined {\n\tlet editStateFilter;\n\tconst entitySetPath = oContext.getInterface(1).getPath(),\n\t\toMetaModel = oContext.getInterface(1).getModel(),\n\t\tentityTypeAnnotations = oMetaModel?.getObject(`${entitySetPath}@`),\n\t\tentityTypeProperties = oMetaModel?.getObject(`${entitySetPath}/`);\n\tif (\n\t\tentityTypeAnnotations &&\n\t\t(entityTypeAnnotations[\"@com.sap.vocabularies.Common.v1.DraftRoot\"] ||\n\t\t\tentityTypeAnnotations[\"@com.sap.vocabularies.Common.v1.DraftNode\"]) &&\n\t\tshowDraftEditState\n\t) {\n\t\teditStateFilter = getEditStatusFilter();\n\t}\n\tconst selectionVariant = filterConditions?.selectionVariant;\n\tconst defaultSemanticDates = filterConditions?.defaultSemanticDates || {};\n\tconst defaultFilters = getDefaultValueFilters(oContext, entityTypeProperties);\n\tconst defaultSemanticDateFilters = getDefaultSemanticDateFilters(oContext, defaultSemanticDates);\n\tlet retFilterConditions: Record<string, FilterConditions[]> = {};\n\n\tif (selectionVariant) {\n\t\tretFilterConditions = getFiltersConditionsFromSelectionVariant(\n\t\t\tentitySetPath as string,\n\t\t\toMetaModel as ODataMetaModel,\n\t\t\tselectionVariant\n\t\t);\n\t} else if (defaultFilters) {\n\t\tretFilterConditions = defaultFilters;\n\t}\n\tif (defaultSemanticDateFilters) {\n\t\t// only for semantic date:\n\t\t// 1. value from manifest get merged with SV\n\t\t// 2. manifest value is given preference when there is same semantic date property in SV and manifest\n\t\tretFilterConditions = { ...retFilterConditions, ...defaultSemanticDateFilters };\n\t}\n\tif (editStateFilter) {\n\t\tretFilterConditions = { ...retFilterConditions, ...editStateFilter };\n\t}\n\tconst filterConfigs = viewData?.controlConfiguration?.[\"@com.sap.vocabularies.UI.v1.SelectionFields\"] ?? {};\n\tretFilterConditions = getConditionsOfSupportedOperators(oContext.getInterface(1), retFilterConditions, filterConfigs);\n\treturn Object.keys(retFilterConditions).length > 0 ? JSON.stringify(retFilterConditions).replace(/([{}])/g, \"\\\\$1\") : undefined;\n}\ngetFilterConditions.requiresIContext = true;\n\n/**\n * Get only the conditions with supported operators.\n * @param  entitySetContext EntitySet interface\n * @param  filterConditions All filter conditions\n * @param  controlConfigs FilterBar configuration\n * @returns Filter conditions.\n */\nexport function getConditionsOfSupportedOperators(\n\tentitySetContext: IContext,\n\tfilterConditions: Record<string, FilterConditions[]>,\n\tcontrolConfigs: FilterManifestConfiguration\n): Record<string, FilterConditions[]> {\n\tconst metaModel = entitySetContext.getModel() as ODataMetaModel;\n\tconst { filterFields = {}, useSemanticDateRange = true } = controlConfigs;\n\n\tfor (const property in filterConditions) {\n\t\ttry {\n\t\t\tconst propertyContext = metaModel.createBindingContext(`${entitySetContext.getPath()}/${property}`);\n\t\t\tconst propertyMetaInfo = propertyContext?.getObject();\n\t\t\tconst propertyFilterFieldConfig = filterFields[property]?.settings;\n\t\t\tif (propertyContext) {\n\t\t\t\tconst operatorsString = FilterFieldHelper.operators(\n\t\t\t\t\tpropertyContext,\n\t\t\t\t\tpropertyMetaInfo,\n\t\t\t\t\tuseSemanticDateRange,\n\t\t\t\t\tCommonHelper.stringifyCustomData(propertyFilterFieldConfig),\n\t\t\t\t\tentitySetContext.getPath() || \"\"\n\t\t\t\t);\n\t\t\t\tconst supportedOperators = operatorsString ? operatorsString.split(\",\") : [];\n\t\t\t\tfilterConditions[property] = _updateConditionsForSupportedOperators(\n\t\t\t\t\tsupportedOperators,\n\t\t\t\t\tfilterConditions[property],\n\t\t\t\t\tproperty\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (err: unknown) {\n\t\t\tconst message = err instanceof Error ? err.message : String(err);\n\t\t\tLog.error(`FE : FilterBar : Error determining conditions for supported operators of property ${property} : ${message}`);\n\t\t}\n\t}\n\treturn filterConditions;\n}\n\n/**\n * Filter conditions.\n * @param  supportedOperators Supported Operators for the filter field\n * @param  propertyConditions Conditions of the particular property\n * @param  propertyName Property name\n * @returns Filtered conditions.\n */\nfunction _updateConditionsForSupportedOperators(\n\tsupportedOperators: string[],\n\tpropertyConditions: FilterConditions[],\n\tpropertyName: string\n): FilterConditions[] {\n\tlet retConditions = propertyConditions;\n\tconst allSemanticDateOperators = SemanticDateOperators.getSemanticDateOperations();\n\tif (supportedOperators.length > 0) {\n\t\tretConditions = propertyConditions.filter((condition) => {\n\t\t\tconst operator = condition.operator;\n\t\t\tif (allSemanticDateOperators.includes(operator) && !supportedOperators.includes(operator)) {\n\t\t\t\t// If it is a semantic operator and is not supported.\n\t\t\t\tLog.warning(`FE : FilterBar : ${operator} not supported for property ${propertyName}. Hence, not applied to FilterBar.`);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}, [] as FilterConditions[]);\n\t}\n\treturn retConditions;\n}\n"],"mappings":"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","ignoreList":[]}
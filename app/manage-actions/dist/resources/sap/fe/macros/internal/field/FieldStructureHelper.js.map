{"version":3,"file":"FieldStructureHelper.js","names":["setUpField","field","controlConfiguration","viewDataModel","internalModel","appComponent","isReadOnlyInitial","metaPath","contextPath","resultField","Object","defineProperty","get","value","description","change","visible","vhIdPrefix","_flexId","id","idPrefix","formatOptions","getFormatOptions","showOnlyUnitDecimals","getProperty","valueHelpMetaPath","computeCommonProperties","getModel","convertedMetaPath","setUpDataPointType","setUpVisibleProperties","computeIDs","dataSourcePath","getTargetObjectPath","dataModelPath","computeExternalID","entityType","odataMetaModel","createBindingContext","targetEntityType","fullyQualifiedName","forInlineCreationRows","hasPropertyInsertRestrictions","computeEditMode","computeCollaborationProperties","computeEditableExpressions","setUpFormatOptions","dataModelPathExternalID","setUpDisplayStyle","setUpEditStyle","valueState","setUpValueState","editStyle","editStylePlaceholder","setInputWithValuehelpPlaceholder","computeFileUploaderProperties","computeInlineEditProperties","aDisplayStylesWithoutPropText","displayStyle","includes","targetObject","text","FieldTemplating","getTextBinding","showEmptyIndicator","emptyIndicatorMode","String","undefined","isProperty","annotations","UI","DataFieldDefault","computedEditMode","compileExpression","ifElse","equal","readOnly","eventHandlers","liveChange","validateFieldGroup","handleTypeMissmatch","handleFileSizeExceed","handleUploadComplete","uploadStream","removeStream","handleOpenUploader","handleCloseUploader","openExternalLink","onFocusOut","linkPressed","displayAggregationDetails","onDataFieldWithNavigationPath","showCollaborationEditUser","onDataFieldActionButton","onDataFieldWithIBN","_exports","computedEditableExpression","UIFormatters","getEditableExpressionAsObject","propertyForFieldControl","ModelHelper","isCollaborationDraftSupported","editMode","FieldEditMode","Display","collaborationEnabled","collaborationExpression","getCollaborationExpression","CollaborationFormatters","hasCollaborationActivity","editableExpression","and","not","constant","IsInactive","editModeAsObject","metaModel","MetaModelConverter","convertMetaModelContext","metaPathContext","getInvolvedDataModelObjects","getDataModelObjectPathForValue","property","Value","requiredPropertiesFromInsertRestrictions","getRequiredPropertiesFromInsertRestrictions","contextPathContext","getPath","replaceAll","requiredPropertiesFromUpdateRestrictions","getRequiredPropertiesFromUpdateRestrictions","oRequiredProperties","enabledExpression","getEnabledExpression","requiredExpression","getRequiredExpression","measureReadOnly","measureDisplayMode","getEditMode","externalIDProperty","getAssociatedExternalIdProperty","type","isDataField","$target","externalIdPropertyPath","getAssociatedExternalIdPropertyPath","externalIdContext","convertedMetaPathExternalID","computeFieldGroupIds","typesForCollaborationFocusManagement","sideEffectService","getSideEffectsService","fieldGroupIds","mainPropertyRelativePath","getContextRelativeTargetObjectPath","collaborationFieldGroup","CollaborationFieldGroupPrefix","push","length","_apiId","getContentId","editStyleId","generate","fieldMode","displayStyleId","textAlignMode","displayMode","textLinesEdit","textMaxLines","textMaxCharactersDisplay","textExpandBehaviorDisplay","textMaxLength","fieldEditStyle","radioButtonsHorizontalLayout","showTime","showTimezone","showDate","getObjectIdentifierText","fieldFormatOptions","propertyDataModelObjectPath","propertyBindingExpression","pathInModel","targetDisplayMode","propertyDefinition","isPropertyPathExpression","commonText","Common","Text","formatWithTypeInformation","relativeLocation","getRelativePaths","getExpressionFromAnnotation","formatResult","valueFormatters","formatToKeepWhitespace","getOverrides","props","controlConfig","keys","forEach","configKey","manageQuickViewForDisplayStyle","hasSemanticObjects","hasQuickView","quickViewType","foundSemanticObjects","manageSemanticObjectsForCurrentUser","semanticObject","hasReachableStaticSemanticObject","dynamicSemanticObjects","propertyOrNavigationPropertyHasSemanticObject","getPropertyWithSemanticObject","fieldContainerType","propertyPath","name","recommendationValue","recommendationDescription","placeholderExp","additionalValueFormatter","formatPlaceholder","dataField","dataPointType","term","$Type","getDecimalPadding","manifest","getManifestEntry","Measures","ISOCurrency","macros","table","currency","decimalPadding","unitOfMeasure","hasUnitOrCurrency","Unit","hasValidAnalyticalCurrencyOrUnit","textFromValueList","IsImage","IsImageURL","InputMask","Masked","setUpDraftIndicator","Target","isUsedInNavigationWithQuickViewFacets","isSemanticKey","semanticKeyStyle","setUpObjectIdentifierTitleAndText","showErrorIndicator","contextLocation","_type","fieldGroupDraftIndicatorPropertyPath","situationsIndicatorPropertyPath","Criticality","isCurrencyOrUnitAligned","FieldStructureHelper","valueAsStringBindingExpression","getValueBinding","unitBindingExpression","getBindingForUnitOrCurrency","Communication","IsEmailAddress","IsPhoneNumber","MultiLineText","hasSituationsIndicator","SituationsIndicator","getSituationsNavigationProperty","targetEntitySet","DraftRoot","hasDraftIndicator","draftIndicatorVisible","getDraftIndicatorVisibleBinding","addDraftIndicator","setEditStyleProperties","semanticStyle","identifierTitle","getTitleBindingExpression","getTextBindingExpression","splitTitleOnTwoLines","identifierText","overrideProps","getDisplayMode","retrieveTextFromValueList","isRetrieveTextFromValueListEnabled","hasEntityTextArrangement","TextArrangement","valueStateExp","propertyPathInModel","textPath","formatValueState","getVisibleExpression","displayVisible","macroId","fileRelativePropertyPath","fileNameAnnotation","Core","ContentDisposition","Filename","isPathAnnotationExpression","fileNameDataModelPath","enhanceDataModelPath","path","fileFilenameExpression","inlineEditEnabled","hasInlineEdit","transformRecursively","expr","modelName"],"sources":["./FieldStructureHelper.ts"],"sourcesContent":["import type { EntitySet, Property, PropertyPath, ServiceObject } from \"@sap-ux/vocabularies-types\";\nimport type {\n\tDataFieldAbstractTypes,\n\tDataFieldForAnnotation,\n\tDataFieldTypes,\n\tDataPoint,\n\tDataPointTypeTypes\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTerms, UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport type {\n\tBindingToolkitExpression,\n\tCompiledBindingToolkitExpression,\n\tExpressionOrPrimitive,\n\tPathInModelExpression\n} from \"sap/fe/base/BindingToolkit\";\nimport {\n\tand,\n\tcompileExpression,\n\tconstant,\n\tequal,\n\tformatResult,\n\tformatWithTypeInformation,\n\tgetExpressionFromAnnotation,\n\tifElse,\n\tnot,\n\tpathInModel,\n\ttransformRecursively\n} from \"sap/fe/base/BindingToolkit\";\nimport type { PropertiesOf } from \"sap/fe/base/ClassSupport\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport type { TemplateProcessorSettings } from \"sap/fe/core/buildingBlocks/templating/BuildingBlockTemplateProcessor\";\nimport { CollaborationFieldGroupPrefix } from \"sap/fe/core/controllerextensions/collaboration/CollaborationCommon\";\nimport * as MetaModelConverter from \"sap/fe/core/converters/MetaModelConverter\";\nimport { isDataField } from \"sap/fe/core/converters/annotations/DataField\";\nimport * as CollaborationFormatters from \"sap/fe/core/formatters/CollaborationFormatter\";\nimport valueFormatters from \"sap/fe/core/formatters/ValueFormatter\";\nimport { UI } from \"sap/fe/core/helpers/BindingHelper\";\nimport {\n\tgetRequiredPropertiesFromInsertRestrictions,\n\tgetRequiredPropertiesFromUpdateRestrictions\n} from \"sap/fe/core/helpers/MetaModelFunction\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport { generate } from \"sap/fe/core/helpers/StableIdHelper\";\nimport { getTitleBindingExpression } from \"sap/fe/core/helpers/TitleHelper\";\nimport { isPathAnnotationExpression, isProperty, isPropertyPathExpression } from \"sap/fe/core/helpers/TypeGuards\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport {\n\tenhanceDataModelPath,\n\tgetContextRelativeTargetObjectPath,\n\tgetRelativePaths,\n\tgetTargetObjectPath\n} from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { getAssociatedExternalIdProperty, getAssociatedExternalIdPropertyPath, isSemanticKey } from \"sap/fe/core/templating/PropertyHelper\";\nimport { getPropertyWithSemanticObject, manageSemanticObjectsForCurrentUser } from \"sap/fe/core/templating/SemanticObjectHelper\";\nimport type { DisplayMode } from \"sap/fe/core/templating/UIFormatters\";\nimport * as UIFormatters from \"sap/fe/core/templating/UIFormatters\";\nimport type { InputMaskFormatOptions } from \"sap/fe/core/type/InputMask\";\nimport * as FieldTemplating from \"sap/fe/macros/field/FieldTemplating\";\nimport {\n\tgetDataModelObjectPathForValue,\n\tgetDraftIndicatorVisibleBinding,\n\tgetTextBindingExpression,\n\tgetValueBinding,\n\tgetVisibleExpression,\n\thasPropertyInsertRestrictions,\n\tisRetrieveTextFromValueListEnabled,\n\tisUsedInNavigationWithQuickViewFacets,\n\tsetEditStyleProperties\n} from \"sap/fe/macros/field/FieldTemplating\";\nimport additionalValueFormatter from \"sap/fe/macros/internal/valuehelp/AdditionalValueFormatter\";\nimport SituationsIndicator from \"sap/fe/macros/situations/SituationsIndicator\";\nimport FieldEditMode from \"sap/ui/mdc/enums/FieldEditMode\";\nimport type Context from \"sap/ui/model/Context\";\nimport type JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type { EventHandler } from \"types/extension_types\";\nimport type Field from \"../../Field\";\nimport type FieldFormatOptions from \"../../field/FieldFormatOptions\";\nimport type { DisplayStyle as DisplayStyleType, EditStyle as EditStyleType, FieldProperties } from \"./FieldStyles\";\n\nexport type InputFieldBlockProperties = Omit<PropertiesOf<Field>, \"readOnly\"> & {\n\tisPublicField?: boolean; //\n\t//add events from Field - 'PropertiesOf' does not include them\n\tchange?: EventHandler;\n\tliveChange?: EventHandler;\n\tonLiveChange?: string;\n\treadOnly?: BindingToolkitExpression<boolean>;\n};\nexport type FieldBlockProperties = {\n\t_controlConfiguration: TemplateProcessorSettings;\n\t_settings: TemplateProcessorSettings;\n\tisDynamicInstantiation?: boolean;\n\tchange: string | undefined | EventHandler;\n\tmetaPath: Context;\n\tcontextPath: Context;\n\tisPublicField: boolean;\n\tvisible?: boolean | CompiledBindingToolkitExpression;\n\tliveChange: EventHandler;\n\tonLiveChange?: string | EventHandler;\n\t//-----\n\tformatOptions: FieldFormatOptions;\n\tproperty: Property;\n\tdataModelPath: DataModelObjectPath<Property>;\n\tvalueAsStringBindingExpression?: CompiledBindingToolkitExpression;\n\tunitBindingExpression?: string;\n\tdisplayVisible?: string | boolean;\n\thasValidAnalyticalCurrencyOrUnit?: CompiledBindingToolkitExpression;\n\tconvertedMetaPath: DataFieldAbstractTypes | DataPointTypeTypes;\n\tclass?: string;\n\tariaLabelledBy?: string[];\n\thasUnitOrCurrency?: boolean;\n\ttext?: BindingToolkitExpression<string> | CompiledBindingToolkitExpression;\n\temptyIndicatorMode?: string;\n\teditableExpression: string | CompiledBindingToolkitExpression;\n\tfieldGroupIds?: string[];\n\tdisplayStyleId?: string;\n\ttextFromValueList?: CompiledBindingToolkitExpression;\n\thasQuickView: boolean;\n\tidentifierTitle?: CompiledBindingToolkitExpression;\n\tidentifierText?: CompiledBindingToolkitExpression;\n\thasSituationsIndicator?: boolean;\n\tsituationsIndicatorPropertyPath: string;\n\tshowErrorIndicator: boolean;\n\tdynamicSemanticObjects?: BindingToolkitExpression<string>[];\n\tcollaborationExpression: BindingToolkitExpression<boolean>;\n\tdataSourcePath?: string;\n\teditStyleId?: string;\n\tenabledExpression: string | CompiledBindingToolkitExpression;\n\trequiredExpression?: string;\n\teditModeAsObject: CompiledBindingToolkitExpression | BindingToolkitExpression<string>;\n\tcomputedEditMode: FieldEditMode | CompiledBindingToolkitExpression;\n\tvalueBindingExpression?: CompiledBindingToolkitExpression;\n\tshowTimezone?: boolean;\n\tminDateExpression: BindingToolkitExpression<unknown> | undefined | CompiledBindingToolkitExpression;\n\tmaxDateExpression: BindingToolkitExpression<unknown> | undefined | CompiledBindingToolkitExpression;\n\teditStylePlaceholder?: string;\n\tstaticDescription?: string;\n\tvalueState?: CompiledBindingToolkitExpression;\n\tfileFilenameExpression: string;\n\tfileRelativePropertyPath: string;\n\ttextBindingExpression?: CompiledBindingToolkitExpression;\n\tratingIndicatorTooltip?: CompiledBindingToolkitExpression;\n\tratingIndicatorTargetValue?: CompiledBindingToolkitExpression;\n\tmask?: InputMaskFormatOptions | null;\n\teditStyle?: EditStyleType | null;\n\t_apiId?: string;\n\tentityType?: Context;\n\todataMetaModel: ODataMetaModel;\n\tpropertyForFieldControl: UIFormatters.PropertyOrPath<Property>;\n\tdescriptionBindingExpression?: string;\n\tquickViewType?: \"SemanticLinks\" | \"Facets\" | \"FacetsAndSemanticLinks\";\n\tdisplayStyle?: DisplayStyleType;\n\tunitEditable?: string;\n\tstaticUnit?: string;\n\tvalueInputWidth?: string;\n\tvalueInputFieldWidth?: string;\n\tunitInputVisible?: CompiledBindingToolkitExpression;\n\tdraftIndicatorVisible?: string;\n\thasPropertyInsertRestrictions?: boolean | ExpressionOrPrimitive<boolean>;\n\taddDraftIndicator: boolean | undefined;\n\tconvertedMetaPathExternalID?: Property;\n\tdataModelPathExternalID?: DataModelObjectPath<Property | PropertyPath>;\n\tvalueHelpMetaPath?: Context;\n\tid: string;\n\tvalueHelpId: string | undefined;\n\tmetaPathContext: Context | undefined;\n\tcontextPathContext: Context | undefined;\n\teventHandlers: {\n\t\tchange: EventHandler;\n\t\tliveChange: EventHandler;\n\t\tvalidateFieldGroup: EventHandler;\n\t\thandleTypeMissmatch: EventHandler;\n\t\thandleFileSizeExceed: EventHandler;\n\t\thandleUploadComplete: EventHandler;\n\t\tuploadStream: EventHandler;\n\t\tremoveStream: EventHandler;\n\t\thandleOpenUploader: EventHandler;\n\t\thandleCloseUploader: EventHandler;\n\t\topenExternalLink: EventHandler;\n\t\tonFocusOut: EventHandler;\n\t\tlinkPressed: EventHandler;\n\t\tdisplayAggregationDetails: EventHandler;\n\t\tonDataFieldWithNavigationPath: EventHandler;\n\t\tonDataFieldActionButton: EventHandler;\n\t\tonDataFieldWithIBN: EventHandler;\n\t\tshowCollaborationEditUser: EventHandler;\n\t};\n} & Omit<Field, \"metaPath\" | \"contextPath\" | \"change\" | \"visible\">;\n\nexport function setUpField(\n\tfield: InputFieldBlockProperties,\n\tcontrolConfiguration: TemplateProcessorSettings,\n\tviewDataModel: JSONModel,\n\tinternalModel: JSONModel,\n\tappComponent: AppComponent,\n\tisReadOnlyInitial?: boolean,\n\tmetaPath?: Context | undefined,\n\tcontextPath?: Context | undefined\n): FieldBlockProperties {\n\tconst resultField = { ...field } as unknown as FieldBlockProperties;\n\tObject.defineProperty(resultField, \"value\", {\n\t\tget: () => {\n\t\t\treturn field.value;\n\t\t}\n\t});\n\tObject.defineProperty(resultField, \"description\", {\n\t\tget: () => {\n\t\t\treturn field.description;\n\t\t}\n\t});\n\n\tresultField.change = field.change;\n\tresultField.metaPath = (metaPath ? metaPath : field.metaPath) as Context;\n\tresultField.contextPath = (contextPath ? contextPath : field.contextPath) as Context;\n\tresultField.visible = field.visible;\n\n\t//this currently works only for the field\n\tif (!resultField.vhIdPrefix) {\n\t\tresultField.vhIdPrefix = \"FieldValueHelp\";\n\t\tresultField._flexId = field.id;\n\t\tif (!resultField.idPrefix) {\n\t\t\tresultField.idPrefix = field.id;\n\t\t}\n\t}\n\n\tresultField.formatOptions ??= {} as FieldFormatOptions;\n\tresultField.formatOptions = getFormatOptions(resultField);\n\tresultField.formatOptions.showOnlyUnitDecimals =\n\t\tviewDataModel?.getProperty(\"/sapFeManifestConfiguration/app/showOnlyUnitDecimals\") === true;\n\n\tresultField.valueHelpMetaPath = metaPath ? metaPath : resultField.metaPath;\n\tcomputeCommonProperties(resultField, resultField.valueHelpMetaPath?.getModel());\n\tresultField.convertedMetaPath = setUpDataPointType(resultField.convertedMetaPath);\n\tsetUpVisibleProperties(resultField);\n\tcomputeIDs(resultField);\n\tresultField.dataSourcePath = getTargetObjectPath(resultField.dataModelPath);\n\n\t/* EXTERNALID */\n\tcomputeExternalID(resultField);\n\tresultField.entityType = resultField.odataMetaModel.createBindingContext(\n\t\t`/${resultField.dataModelPath.targetEntityType.fullyQualifiedName}`\n\t);\n\tif (resultField.formatOptions?.forInlineCreationRows === true) {\n\t\tresultField.hasPropertyInsertRestrictions = hasPropertyInsertRestrictions(resultField.dataModelPath);\n\t}\n\tcomputeEditMode(resultField);\n\tcomputeCollaborationProperties(resultField);\n\tcomputeEditableExpressions(resultField);\n\tresultField.formatOptions = resultField.formatOptions ? resultField.formatOptions : ({} as FieldFormatOptions);\n\tsetUpFormatOptions(\n\t\tresultField,\n\t\t(resultField.dataModelPathExternalID as DataModelObjectPath<Property>) || resultField.dataModelPath,\n\t\tcontrolConfiguration,\n\t\tviewDataModel\n\t);\n\tsetUpDisplayStyle(resultField, resultField.convertedMetaPath, resultField.dataModelPath, internalModel, appComponent);\n\tsetUpEditStyle(resultField, appComponent);\n\n\tresultField.valueState = setUpValueState(resultField);\n\tif (resultField.editStyle === \"InputWithValueHelp\") {\n\t\tresultField.editStylePlaceholder = setInputWithValuehelpPlaceholder(resultField);\n\t}\n\n\tcomputeFileUploaderProperties(resultField);\n\n\tcomputeInlineEditProperties(resultField, viewDataModel);\n\n\t// ---------------------------------------- compute bindings----------------------------------------------------\n\tconst aDisplayStylesWithoutPropText = [\"Avatar\", \"AmountWithCurrency\"];\n\tif (\n\t\tresultField.displayStyle &&\n\t\t!aDisplayStylesWithoutPropText.includes(resultField.displayStyle) &&\n\t\tresultField.dataModelPath.targetObject\n\t) {\n\t\tresultField.text =\n\t\t\tresultField.text ??\n\t\t\tresultField.value ??\n\t\t\tFieldTemplating.getTextBinding(\n\t\t\t\t(resultField.dataModelPathExternalID as DataModelObjectPath<Property>) || resultField.dataModelPath,\n\t\t\t\tresultField.formatOptions\n\t\t\t);\n\t} else {\n\t\tresultField.text = \"\";\n\t}\n\n\tif (resultField.formatOptions.showEmptyIndicator) {\n\t\tresultField.emptyIndicatorMode = String(resultField.formatOptions.showEmptyIndicator) === \"true\" ? \"On\" : undefined;\n\t} else {\n\t\tresultField.emptyIndicatorMode = undefined;\n\t}\n\n\t// If the target is a property with a DataFieldDefault, use this as data field\n\tif (isProperty(resultField.convertedMetaPath) && resultField.convertedMetaPath.annotations?.UI?.DataFieldDefault !== undefined) {\n\t\tresultField.metaPath = resultField.odataMetaModel.createBindingContext(\n\t\t\t`@${UIAnnotationTerms.DataFieldDefault}`,\n\t\t\tmetaPath ? metaPath : resultField.metaPath\n\t\t);\n\t}\n\n\tif (!isReadOnlyInitial) {\n\t\tresultField.computedEditMode = compileExpression(ifElse(equal(resultField.readOnly, true), \"Display\", \"Editable\"));\n\t}\n\n\tresultField.eventHandlers = {\n\t\tchange: (): void => {},\n\t\tliveChange: (): void => {},\n\t\tvalidateFieldGroup: (): void => {},\n\t\thandleTypeMissmatch: (): void => {},\n\t\thandleFileSizeExceed: (): void => {},\n\t\thandleUploadComplete: (): void => {},\n\t\tuploadStream: (): void => {},\n\t\tremoveStream: (): void => {},\n\t\thandleOpenUploader: (): void => {},\n\t\thandleCloseUploader: (): void => {},\n\t\topenExternalLink: (): void => {},\n\t\tonFocusOut: (): void => {},\n\t\tlinkPressed: (): void => {},\n\t\tdisplayAggregationDetails: (): void => {},\n\t\tonDataFieldWithNavigationPath: (): void => {},\n\t\tshowCollaborationEditUser: (): void => {},\n\t\tonDataFieldActionButton: (): void => {},\n\t\tonDataFieldWithIBN: (): void => {}\n\t};\n\n\treturn resultField;\n}\n\n/**\n * This helper computes the properties that are needed for the collaboration avatar.\n * @param field Reference to the current field instance\n */\nexport function computeCollaborationProperties(field: FieldBlockProperties): void {\n\tconst computedEditableExpression = UIFormatters.getEditableExpressionAsObject(\n\t\tfield.propertyForFieldControl,\n\t\tfield.convertedMetaPath,\n\t\tfield.dataModelPath\n\t);\n\tif (ModelHelper.isCollaborationDraftSupported(field.odataMetaModel) && field.editMode !== FieldEditMode.Display) {\n\t\tconst collaborationEnabled = true;\n\t\t// Expressions needed for Collaboration Visualization\n\t\tconst collaborationExpression = UIFormatters.getCollaborationExpression(\n\t\t\tfield.dataModelPath,\n\t\t\tCollaborationFormatters.hasCollaborationActivity\n\t\t);\n\t\tconst editableExpression = compileExpression(and(computedEditableExpression, not(collaborationExpression)));\n\n\t\tconst editMode = compileExpression(\n\t\t\tifElse(\n\t\t\t\tcollaborationExpression,\n\t\t\t\tconstant(\"ReadOnly\"),\n\t\t\t\tifElse(and(UI.IsInactive, !!field.hasPropertyInsertRestrictions), \"Display\", field.editModeAsObject)\n\t\t\t)\n\t\t);\n\t\tfield.collaborationEnabled = collaborationEnabled;\n\t\tfield.collaborationExpression = collaborationExpression;\n\t\tfield.editableExpression = editableExpression;\n\t\tfield.computedEditMode = editMode;\n\t} else {\n\t\tfield.editableExpression = compileExpression(computedEditableExpression);\n\t}\n}\n\n/**\n * This helper sets the common properties convertedMetaPath, dataModelPath\n * and property that can be reused in the individual templates if required.\n * @param field Reference to the current field instance\n * @param metaModel\n */\nexport function computeCommonProperties(field: FieldBlockProperties, metaModel: ODataMetaModel): void {\n\tfield.convertedMetaPath = MetaModelConverter.convertMetaModelContext(field.metaPathContext ? field.metaPathContext : field.metaPath) as\n\t\t| DataFieldAbstractTypes\n\t\t| DataPointTypeTypes;\n\n\tlet dataModelPath = MetaModelConverter.getInvolvedDataModelObjects<DataFieldAbstractTypes | DataPointTypeTypes | Property>(\n\t\tfield.metaPathContext ? field.metaPathContext : field.metaPath,\n\t\tfield.contextPath\n\t);\n\tdataModelPath =\n\t\tgetDataModelObjectPathForValue(dataModelPath as DataModelObjectPath<DataFieldAbstractTypes | DataPointTypeTypes>) || dataModelPath;\n\tfield.dataModelPath = dataModelPath as DataModelObjectPath<Property>;\n\tfield.property = dataModelPath.targetObject as Property;\n\tfield.odataMetaModel = metaModel;\n\tfield.propertyForFieldControl = (dataModelPath?.targetObject as unknown as DataFieldTypes)?.Value\n\t\t? (dataModelPath?.targetObject as unknown as DataFieldTypes).Value\n\t\t: dataModelPath?.targetObject;\n}\n\n/**\n * Helper to computes some of the expression for further processing.\n * @param field Reference to the current field instance\n */\nexport function computeEditableExpressions(field: FieldBlockProperties): void {\n\tconst requiredPropertiesFromInsertRestrictions = getRequiredPropertiesFromInsertRestrictions(\n\t\t(field.contextPathContext ? field.contextPathContext : field.contextPath)\n\t\t\t?.getPath()\n\t\t\t.replaceAll(\"/$NavigationPropertyBinding/\", \"/\"),\n\t\tfield.odataMetaModel\n\t);\n\tconst requiredPropertiesFromUpdateRestrictions = getRequiredPropertiesFromUpdateRestrictions(\n\t\t(field.contextPathContext ? field.contextPathContext : field.contextPath)\n\t\t\t?.getPath()\n\t\t\t.replaceAll(\"/$NavigationPropertyBinding/\", \"/\"),\n\t\tfield.odataMetaModel\n\t);\n\tconst oRequiredProperties = {\n\t\trequiredPropertiesFromInsertRestrictions: requiredPropertiesFromInsertRestrictions,\n\t\trequiredPropertiesFromUpdateRestrictions: requiredPropertiesFromUpdateRestrictions\n\t};\n\n\tconst enabledExpression = UIFormatters.getEnabledExpression(\n\t\tfield.propertyForFieldControl,\n\t\tfield.convertedMetaPath,\n\t\tfalse,\n\t\tfield.dataModelPath\n\t) as CompiledBindingToolkitExpression;\n\tconst requiredExpression = UIFormatters.getRequiredExpression(\n\t\tfield.propertyForFieldControl,\n\t\tfield.convertedMetaPath,\n\t\tfalse,\n\t\tfalse,\n\t\toRequiredProperties,\n\t\tfield.dataModelPath\n\t) as CompiledBindingToolkitExpression;\n\n\tfield.enabledExpression = enabledExpression;\n\tfield.requiredExpression = requiredExpression;\n}\n\nexport function computeEditMode(field: FieldBlockProperties): void {\n\tif (field.editMode !== undefined && field.editMode !== null) {\n\t\t// Even if it provided as a string it's a valid part of a binding expression that can be later combined into something else.\n\t\tfield.editModeAsObject = field.editMode;\n\t} else {\n\t\tconst measureReadOnly = field.formatOptions?.measureDisplayMode ? field.formatOptions.measureDisplayMode === \"ReadOnly\" : false;\n\n\t\tfield.editModeAsObject = UIFormatters.getEditMode(\n\t\t\tfield.propertyForFieldControl,\n\t\t\tfield.dataModelPath,\n\t\t\tmeasureReadOnly,\n\t\t\ttrue,\n\t\t\tfield.convertedMetaPath\n\t\t);\n\t\tfield.computedEditMode = compileExpression(\n\t\t\tifElse(and(UI.IsInactive, !!field.hasPropertyInsertRestrictions), \"Display\", field.editModeAsObject)\n\t\t);\n\t}\n}\n\nexport function computeExternalID(field: FieldBlockProperties): void {\n\tconst externalIDProperty = getAssociatedExternalIdProperty(field.property);\n\n\tif (externalIDProperty) {\n\t\tif (field.property) field.property.type = externalIDProperty.type;\n\t\tif (isDataField(field.convertedMetaPath)) {\n\t\t\tfield.convertedMetaPath.Value.$target.type = externalIDProperty.type;\n\t\t}\n\t\tconst externalIdPropertyPath = getAssociatedExternalIdPropertyPath(field.property);\n\t\tconst externalIdContext = field.metaPath\n\t\t\t.getModel()\n\t\t\t.createBindingContext(field.contextPath?.getPath() + \"/\" + externalIdPropertyPath, field.metaPath);\n\n\t\tfield.convertedMetaPathExternalID = MetaModelConverter.convertMetaModelContext(externalIdContext) as Property;\n\n\t\tlet dataModelPath: DataModelObjectPath<Property> = MetaModelConverter.getInvolvedDataModelObjects(\n\t\t\texternalIdContext as Context,\n\t\t\tfield.contextPath\n\t\t);\n\t\tdataModelPath = getDataModelObjectPathForValue(dataModelPath as DataModelObjectPath<DataFieldAbstractTypes>) || dataModelPath;\n\t\tfield.dataModelPathExternalID = dataModelPath;\n\t}\n}\n\n/**\n * Calculate the fieldGroupIds for an Input or other edit control.\n * @param field\n * @param appComponent\n * @returns The fieldGroupIds\n */\nfunction computeFieldGroupIds(field: FieldBlockProperties, appComponent?: AppComponent): string[] | undefined {\n\tconst typesForCollaborationFocusManagement = [\n\t\t\"InputWithValueHelp\",\n\t\t\"TextArea\",\n\t\t\"DatePicker\",\n\t\t\"TimePicker\",\n\t\t\"DateTimePicker\",\n\t\t\"InputWithUnit\",\n\t\t\"Input\",\n\t\t\"InputMask\",\n\t\t\"Masked\"\n\t];\n\n\tif (!appComponent) {\n\t\t//for ValueHelp / Mass edit Templating the appComponent is not passed to the templating\n\t\treturn;\n\t}\n\tconst sideEffectService = appComponent.getSideEffectsService();\n\tconst fieldGroupIds = sideEffectService.computeFieldGroupIds(\n\t\tfield.dataModelPath.targetEntityType?.fullyQualifiedName ?? \"\",\n\t\tfield.dataModelPath.targetObject?.fullyQualifiedName ?? \"\"\n\t);\n\n\tfield.mainPropertyRelativePath = isProperty(field.dataModelPath.targetObject)\n\t\t? getContextRelativeTargetObjectPath(field.dataModelPath)\n\t\t: undefined;\n\n\tif (field.collaborationEnabled && typesForCollaborationFocusManagement.includes(field.editStyle || \"\")) {\n\t\tconst collaborationFieldGroup = `${CollaborationFieldGroupPrefix}${field.dataSourcePath}`;\n\t\tfieldGroupIds.push(collaborationFieldGroup);\n\t}\n\n\treturn fieldGroupIds.length ? fieldGroupIds : undefined;\n}\n\n/**\n * This helper is for the ID of the field according to several different scenarios.\n *\n * displayStyleId is used for all controls inside the field wrapper in display mode. A <sap.m.text> control would get this ID. An example is: ApplicationContext::Field-display.\n * editStyleId is used for all controls inside the field wrapper in edit mode. A <sap.ui.mdc.field> control would get this ID. An example is: ApplicationContext::Field-edit.\n *\n * If no wrapper exists the wrappers ID will be propagated to the first control displayed, A <sap.m.text> control would get this ID. An example is: ApplicationContext::Field-content.\n * @param field Reference to the current field instance\n */\nexport function computeIDs(field: Partial<FieldBlockProperties>): void {\n\tif (field._flexId && !field._apiId) {\n\t\tfield._apiId = field._flexId;\n\t\tfield._flexId = getContentId(field._flexId);\n\t}\n\n\tif (field.idPrefix) {\n\t\tfield.editStyleId = generate([field.idPrefix, \"Field-edit\"]);\n\t}\n\t//NoWrapperId scenario is for the LR table.\n\tif (field.formatOptions?.fieldMode === \"nowrapper\" && field.editMode === \"Display\") {\n\t\tif (field._flexId) {\n\t\t\tfield.displayStyleId = field._flexId;\n\t\t} else {\n\t\t\tfield.displayStyleId = field.idPrefix ? generate([field.idPrefix, \"Field-content\"]) : undefined;\n\t\t}\n\t} else if (field.idPrefix) {\n\t\tfield.displayStyleId = generate([field.idPrefix, \"Field-display\"]);\n\t}\n}\n\n/**\n * Sets the internal formatOptions for the building block.\n * @param field\n * @returns A string with the internal formatOptions for the building block\n */\nexport function getFormatOptions(field: FieldBlockProperties): FieldFormatOptions {\n\treturn {\n\t\t...field.formatOptions,\n\t\ttextAlignMode: field.formatOptions.textAlignMode ?? \"Form\",\n\t\tshowEmptyIndicator: field.formatOptions.showEmptyIndicator ?? true,\n\t\tdisplayMode: field.formatOptions.displayMode as DisplayMode,\n\t\tmeasureDisplayMode: field.formatOptions.measureDisplayMode,\n\t\ttextLinesEdit: field.formatOptions.textLinesEdit,\n\t\ttextMaxLines: field.formatOptions.textMaxLines,\n\t\ttextMaxCharactersDisplay: field.formatOptions.textMaxCharactersDisplay,\n\t\ttextExpandBehaviorDisplay: field.formatOptions.textExpandBehaviorDisplay,\n\t\ttextMaxLength: field.formatOptions.textMaxLength,\n\t\tfieldEditStyle: field.formatOptions.fieldEditStyle,\n\t\tradioButtonsHorizontalLayout: field.formatOptions.radioButtonsHorizontalLayout,\n\t\tshowTime: field.formatOptions.showTime,\n\t\tshowTimezone: field.formatOptions.showTimezone,\n\t\tshowDate: field.formatOptions.showDate\n\t} as FieldFormatOptions;\n}\n\nfunction getObjectIdentifierText(\n\tfieldFormatOptions: FieldFormatOptions,\n\tpropertyDataModelObjectPath: DataModelObjectPath<Property | PropertyPath>\n): CompiledBindingToolkitExpression {\n\tlet propertyBindingExpression: BindingToolkitExpression<string> = pathInModel(\n\t\tgetContextRelativeTargetObjectPath(propertyDataModelObjectPath)\n\t);\n\tconst targetDisplayMode = fieldFormatOptions?.displayMode;\n\tconst propertyDefinition = isPropertyPathExpression(propertyDataModelObjectPath.targetObject)\n\t\t? (propertyDataModelObjectPath.targetObject.$target as Property)\n\t\t: (propertyDataModelObjectPath.targetObject as Property);\n\n\tconst commonText = propertyDefinition.annotations?.Common?.Text;\n\tif (commonText === undefined) {\n\t\treturn undefined;\n\t}\n\tpropertyBindingExpression = formatWithTypeInformation(propertyDefinition, propertyBindingExpression);\n\n\tswitch (targetDisplayMode) {\n\t\tcase \"ValueDescription\":\n\t\t\tconst relativeLocation = getRelativePaths(propertyDataModelObjectPath);\n\t\t\treturn compileExpression(getExpressionFromAnnotation(commonText, relativeLocation));\n\t\tcase \"DescriptionValue\":\n\t\t\treturn compileExpression(formatResult([propertyBindingExpression], valueFormatters.formatToKeepWhitespace));\n\t\tdefault:\n\t\t\treturn undefined;\n\t}\n}\n\nfunction getOverrides(controlConfiguration: TemplateProcessorSettings, id: string): FieldProperties {\n\t/*\n\t\tQualms: We need to use this TemplateProcessorSettings type to be able to iterate\n\t\tover the properties later on and cast it afterwards as a field property type\n\t*/\n\tconst props = {} as TemplateProcessorSettings;\n\n\tif (controlConfiguration) {\n\t\tconst controlConfig = controlConfiguration[id] as TemplateProcessorSettings;\n\t\tif (controlConfig) {\n\t\t\tObject.keys(controlConfig).forEach(function (configKey) {\n\t\t\t\tprops[configKey] = controlConfig[configKey];\n\t\t\t});\n\t\t}\n\t}\n\treturn props as unknown as FieldProperties;\n}\n\n/**\n * Prepare the display style of the field in case of semantic objects or quickview facets.\n * @param field The field\n * @param internalModel\n * @param dataModelPath The DataModelObjectPath of the property\n * @param hasSemanticObjects\n * @param hasQuickView\n */\nfunction manageQuickViewForDisplayStyle(\n\tfield: FieldBlockProperties,\n\tinternalModel: JSONModel,\n\tdataModelPath: DataModelObjectPath<Property>,\n\thasSemanticObjects: boolean,\n\thasQuickView: boolean\n): void {\n\tif (hasQuickView) {\n\t\tfield.hasQuickView = true;\n\t\tfield.quickViewType = \"Facets\";\n\t}\n\tif (hasSemanticObjects) {\n\t\tconst foundSemanticObjects = manageSemanticObjectsForCurrentUser(field.semanticObject, dataModelPath, internalModel);\n\t\tif (foundSemanticObjects.hasReachableStaticSemanticObject || foundSemanticObjects.dynamicSemanticObjects.length) {\n\t\t\tfield.hasQuickView = true;\n\t\t\tfield.quickViewType = hasQuickView ? \"FacetsAndSemanticLinks\" : \"SemanticLinks\";\n\t\t\tfield.dynamicSemanticObjects =\n\t\t\t\tfoundSemanticObjects.hasReachableStaticSemanticObject !== true ? foundSemanticObjects.dynamicSemanticObjects : undefined;\n\t\t}\n\t}\n}\n\n/**\n * Check field to know if it has a semantic object.\n * @param field The field\n * @param dataModelPath The DataModelObjectPath of the property\n * @returns True if field has a semantic object\n */\nfunction propertyOrNavigationPropertyHasSemanticObject(field: FieldBlockProperties, dataModelPath: DataModelObjectPath<Property>): boolean {\n\treturn !!getPropertyWithSemanticObject(dataModelPath) || (field.semanticObject !== undefined && field.semanticObject !== \"\");\n}\n\nexport function setInputWithValuehelpPlaceholder(field: FieldBlockProperties): CompiledBindingToolkitExpression {\n\tlet targetEntityType;\n\tconst editStylePlaceholder = field.editStylePlaceholder;\n\tconst fieldContainerType = field.formatOptions.textAlignMode;\n\tif (fieldContainerType === \"Table\") {\n\t\ttargetEntityType = field.dataModelPath.targetEntityType;\n\t}\n\tconst propertyPath = field.dataModelPath.targetObject?.name;\n\tconst recommendationValue = pathInModel(`${propertyPath}@$ui5.fe.recommendations.placeholderValue`);\n\tconst recommendationDescription = pathInModel(`${propertyPath}@$ui5.fe.recommendations.placeholderDescription`);\n\tconst placeholderExp = formatResult(\n\t\t[\n\t\t\trecommendationValue,\n\t\t\trecommendationDescription,\n\t\t\tpathInModel(`/recommendationsData`, \"internal\"),\n\t\t\tpathInModel(`/currentCtxt`, \"internal\"),\n\t\t\tpathInModel(`${propertyPath}@$ui5.fe.messageType`),\n\t\t\teditStylePlaceholder,\n\t\t\tfield.formatOptions.displayMode\n\t\t],\n\t\tadditionalValueFormatter.formatPlaceholder,\n\t\ttargetEntityType\n\t);\n\n\treturn compileExpression(placeholderExp);\n}\n\nexport function setUpDataPointType(dataField: DataFieldAbstractTypes | DataPointTypeTypes): DataFieldAbstractTypes | DataPointTypeTypes {\n\t// data point annotations need not have $Type defined, so add it if missing\n\tconst dataPointType = { ...dataField };\n\tif ((dataField as unknown as DataPoint)?.term === \"com.sap.vocabularies.UI.v1.DataPoint\") {\n\t\tdataPointType.$Type = dataField.$Type || UIAnnotationTypes.DataPointType;\n\t}\n\treturn dataPointType;\n}\n\nexport function getDecimalPadding(appComponent: AppComponent | undefined, property: Property): number | undefined {\n\tconst manifest = appComponent?.getManifestEntry(\"sap.fe\");\n\treturn property?.annotations?.Measures?.ISOCurrency\n\t\t? manifest?.macros?.table?.currency?.decimalPadding ?? 3\n\t\t: manifest?.macros?.table?.unitOfMeasure?.decimalPadding ?? 3;\n}\n\nexport function setUpDisplayStyle(\n\tfield: FieldBlockProperties,\n\tdataField: DataFieldAbstractTypes | DataPointTypeTypes,\n\tdataModelPath: DataModelObjectPath<DataFieldAbstractTypes | DataPointTypeTypes | Property>,\n\tinternalModel: JSONModel,\n\tappComponent: AppComponent\n): FieldBlockProperties {\n\tconst resultField: FieldBlockProperties = field;\n\tconst property: Property = dataModelPath.targetObject as Property;\n\tif (!dataModelPath.targetObject) {\n\t\tresultField.displayStyle = \"Text\";\n\t\treturn resultField;\n\t}\n\n\tresultField.hasUnitOrCurrency =\n\t\tproperty.annotations?.Measures?.Unit !== undefined || property.annotations?.Measures?.ISOCurrency !== undefined;\n\tresultField.hasValidAnalyticalCurrencyOrUnit = UIFormatters.hasValidAnalyticalCurrencyOrUnit(\n\t\tdataModelPath as DataModelObjectPath<Property>\n\t);\n\tresultField.textFromValueList = compileExpression(\n\t\tformatResult(\n\t\t\t[\n\t\t\t\tpathInModel(getContextRelativeTargetObjectPath(dataModelPath)),\n\t\t\t\t`/${property.fullyQualifiedName}`,\n\t\t\t\tresultField.formatOptions.displayMode\n\t\t\t],\n\t\t\t\"sap.fe.macros.field.FieldRuntime.retrieveTextFromValueList\"\n\t\t)\n\t);\n\n\tif (property.annotations?.UI?.IsImage) {\n\t\tresultField.displayStyle = \"File\";\n\t\treturn resultField;\n\t}\n\tif (property.annotations?.UI?.IsImageURL) {\n\t\tresultField.displayStyle = \"Avatar\";\n\t\treturn resultField;\n\t}\n\tif (property.annotations?.UI?.InputMask) {\n\t\tresultField.displayStyle = \"Text\";\n\t\treturn resultField;\n\t}\n\tif (property.annotations?.Common?.Masked) {\n\t\tresultField.displayStyle = \"Masked\";\n\t\treturn resultField;\n\t}\n\t// For compatibility reasons, Stream will be shown within an entity instance as circle if the entity is annotated as IsNaturalPerson\n\t// and neither IsImage nor IsImageURL annotation has been used.\n\tif (property.type === \"Edm.Stream\") {\n\t\tresultField.displayStyle = \"File\";\n\t\treturn resultField;\n\t}\n\tsetUpDraftIndicator(dataModelPath as DataModelObjectPath<Property>, resultField);\n\tswitch (dataField.$Type as string) {\n\t\tcase UIAnnotationTypes.DataPointType:\n\t\t\tresultField.displayStyle = \"DataPoint\";\n\t\t\treturn resultField;\n\t\tcase UIAnnotationTypes.DataFieldForAnnotation:\n\t\t\tif ((dataField as unknown as DataFieldForAnnotation).Target?.$target?.$Type === UIAnnotationTypes.DataPointType) {\n\t\t\t\tresultField.displayStyle = \"DataPoint\";\n\t\t\t\treturn resultField;\n\t\t\t} else if (\n\t\t\t\t(dataField as unknown as DataFieldForAnnotation).Target?.$target?.$Type ===\n\t\t\t\t\"com.sap.vocabularies.Communication.v1.ContactType\"\n\t\t\t) {\n\t\t\t\tresultField.displayStyle = \"Contact\";\n\t\t\t\treturn resultField;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.DataFieldForAction:\n\t\tcase UIAnnotationTypes.DataFieldForIntentBasedNavigation:\n\t\t\tresultField.displayStyle = \"Button\";\n\t\t\treturn resultField;\n\t\tcase UIAnnotationTypes.DataFieldWithIntentBasedNavigation:\n\t\tcase UIAnnotationTypes.DataFieldWithNavigationPath:\n\t\tcase UIAnnotationTypes.DataFieldWithAction:\n\t\t\tresultField.displayStyle = \"Link\";\n\t\t\treturn resultField;\n\t}\n\tconst hasQuickView = isUsedInNavigationWithQuickViewFacets(dataModelPath, property);\n\tconst hasSemanticObjects = propertyOrNavigationPropertyHasSemanticObject(resultField, dataModelPath as DataModelObjectPath<Property>);\n\n\tif (isSemanticKey(property, dataModelPath) && resultField.formatOptions.semanticKeyStyle) {\n\t\tmanageQuickViewForDisplayStyle(\n\t\t\tresultField,\n\t\t\tinternalModel,\n\t\t\tdataModelPath as DataModelObjectPath<Property>,\n\t\t\thasSemanticObjects,\n\t\t\thasQuickView\n\t\t);\n\t\tsetUpObjectIdentifierTitleAndText(resultField, dataModelPath as DataModelObjectPath<Property>);\n\t\tresultField.showErrorIndicator =\n\t\t\t(dataModelPath.contextLocation as unknown as DataModelObjectPath<ServiceObject>)?.targetObject?._type ===\n\t\t\t\t\"NavigationProperty\" && !resultField.formatOptions.fieldGroupDraftIndicatorPropertyPath;\n\t\tresultField.situationsIndicatorPropertyPath = (dataModelPath.targetObject as Property).name;\n\t\tresultField.displayStyle =\n\t\t\tresultField.formatOptions.semanticKeyStyle === \"ObjectIdentifier\" ? \"ObjectIdentifier\" : \"LabelSemanticKey\";\n\t\treturn resultField;\n\t}\n\tif (dataField.Criticality) {\n\t\tmanageQuickViewForDisplayStyle(\n\t\t\tresultField,\n\t\t\tinternalModel,\n\t\t\tdataModelPath as DataModelObjectPath<Property>,\n\t\t\thasSemanticObjects,\n\t\t\thasQuickView\n\t\t);\n\t\tresultField.displayStyle = \"ObjectStatus\";\n\t\treturn resultField;\n\t}\n\tif (\n\t\t(property.annotations?.Measures?.ISOCurrency || property.annotations?.Measures?.Unit) &&\n\t\tString(resultField.formatOptions.isCurrencyOrUnitAligned) === \"true\" &&\n\t\tresultField.formatOptions.measureDisplayMode !== \"Hidden\"\n\t) {\n\t\tconst decimalPadding = FieldStructureHelper.getDecimalPadding(appComponent, property);\n\t\tresultField.valueAsStringBindingExpression = resultField.value\n\t\t\t? resultField.value\n\t\t\t: getValueBinding(\n\t\t\t\t\tdataModelPath as DataModelObjectPath<Property>,\n\t\t\t\t\tresultField.formatOptions,\n\t\t\t\t\tfalse,\n\t\t\t\t\ttrue,\n\t\t\t\t\tundefined,\n\t\t\t\t\ttrue,\n\t\t\t\t\tfalse,\n\t\t\t\t\tdecimalPadding,\n\t\t\t\t\ttrue\n\t\t\t  );\n\n\t\tresultField.unitBindingExpression = compileExpression(\n\t\t\tUIFormatters.getBindingForUnitOrCurrency(\n\t\t\t\tdataModelPath as DataModelObjectPath<Property>,\n\t\t\t\ttrue,\n\t\t\t\t!!field.formatOptions.showOnlyUnitDecimals\n\t\t\t)\n\t\t);\n\t\tresultField.displayStyle = \"NumberWithUnitOrCurrencyAligned\";\n\n\t\treturn resultField;\n\t}\n\tif (property.annotations?.Communication?.IsEmailAddress || property.annotations?.Communication?.IsPhoneNumber) {\n\t\tresultField.displayStyle = \"Link\";\n\t\treturn resultField;\n\t}\n\tif (property.annotations?.UI?.MultiLineText) {\n\t\tresultField.displayStyle = \"ExpandableText\";\n\t\treturn resultField;\n\t}\n\n\tif (dataField.$Type === UIAnnotationTypes.DataFieldWithUrl) {\n\t\tresultField.displayStyle = \"Link\";\n\t\treturn resultField;\n\t}\n\n\tresultField.displayStyle = \"Text\";\n\tmanageQuickViewForDisplayStyle(\n\t\tresultField,\n\t\tinternalModel,\n\t\tdataModelPath as DataModelObjectPath<Property>,\n\t\thasSemanticObjects,\n\t\thasQuickView\n\t);\n\tif (resultField.hasQuickView) {\n\t\tresultField.displayStyle = \"LinkWithQuickView\";\n\t}\n\treturn resultField;\n}\n\n/**\n * This determines whether we should add a draft indicator within the field template.\n * @param dataModelPath DataModelObjectPath pointing to the main property for the field\n * @param field\n */\nfunction setUpDraftIndicator(dataModelPath: DataModelObjectPath<Property>, field: FieldBlockProperties): void {\n\tif (isSemanticKey(dataModelPath.targetObject as Property, dataModelPath)) {\n\t\tfield.hasSituationsIndicator = SituationsIndicator.getSituationsNavigationProperty(dataModelPath.targetEntityType) !== undefined;\n\t\tif (\n\t\t\t(dataModelPath.contextLocation?.targetEntitySet as EntitySet | undefined)?.annotations?.Common?.DraftRoot &&\n\t\t\t(dataModelPath.targetEntitySet as EntitySet | undefined)?.annotations?.Common?.DraftRoot &&\n\t\t\tfield.formatOptions?.hasDraftIndicator === true\n\t\t) {\n\t\t\t// In case of a grid table or tree table hasDraftIndicator will be false since the draft\n\t\t\t// indicator needs to be rendered into a separate column\n\t\t\t// Hence we then fall back to display styles ObjectIdentifier or LabelSemanticKey instead\n\t\t\t// of the combined ID and draft indicator style\n\t\t\tfield.draftIndicatorVisible = getDraftIndicatorVisibleBinding(dataModelPath.targetObject?.name) as string;\n\t\t\tfield.addDraftIndicator = true;\n\t\t}\n\t}\n}\n\nexport function setUpEditStyle(field: FieldBlockProperties, appComponent?: AppComponent): FieldBlockProperties {\n\tconst resultField = field;\n\tsetEditStyleProperties(resultField, resultField.convertedMetaPath, resultField.dataModelPath);\n\tresultField.fieldGroupIds = computeFieldGroupIds(resultField, appComponent);\n\treturn resultField;\n}\n\nexport function setUpObjectIdentifierTitleAndText(\n\tfield: FieldBlockProperties,\n\tpropertyDataModelObjectPath: DataModelObjectPath<Property>\n): void {\n\tconst semanticStyle = field.formatOptions?.semanticKeyStyle;\n\tconst displayMode = field.formatOptions.displayMode;\n\tfield.identifierTitle = getTitleBindingExpression(\n\t\tpropertyDataModelObjectPath,\n\t\tgetTextBindingExpression,\n\t\t{ displayMode, splitTitleOnTwoLines: field.formatOptions.semanticKeyStyle === \"ObjectIdentifier\" },\n\t\tundefined,\n\t\tundefined\n\t);\n\tfield.identifierText =\n\t\tsemanticStyle === \"ObjectIdentifier\" ? getObjectIdentifierText(field.formatOptions, propertyDataModelObjectPath) : undefined;\n}\n\nexport function setUpFormatOptions(\n\tfield: FieldBlockProperties,\n\tdataModelPath: DataModelObjectPath<Property>,\n\tcontrolConfiguration: TemplateProcessorSettings,\n\tviewDataModel: JSONModel\n): void {\n\tconst overrideProps = getOverrides(controlConfiguration, (field.metaPathContext ? field.metaPathContext : field.metaPath).getPath());\n\n\tif (!field.formatOptions.displayMode) {\n\t\tfield.formatOptions.displayMode = UIFormatters.getDisplayMode(dataModelPath);\n\t}\n\tif (field.formatOptions.displayMode === \"Description\") {\n\t\tfield.valueAsStringBindingExpression = field.value\n\t\t\t? field.value\n\t\t\t: getValueBinding(dataModelPath, field.formatOptions, true, true, undefined, true);\n\t}\n\tfield.formatOptions.textLinesEdit =\n\t\t(overrideProps as unknown as FieldFormatOptions).textLinesEdit ||\n\t\t(overrideProps.formatOptions && overrideProps.formatOptions.textLinesEdit) ||\n\t\tfield.formatOptions.textLinesEdit ||\n\t\t4;\n\tfield.formatOptions.textMaxLines =\n\t\t(overrideProps as unknown as FieldFormatOptions).textMaxLines ||\n\t\t(overrideProps.formatOptions && overrideProps.formatOptions.textMaxLines) ||\n\t\tfield.formatOptions.textMaxLines;\n\n\t// Retrieve text from value list as fallback feature for missing text annotation on the property\n\tif (viewDataModel?.getProperty(\"/retrieveTextFromValueList\")) {\n\t\tfield.formatOptions.retrieveTextFromValueList = isRetrieveTextFromValueListEnabled(\n\t\t\tdataModelPath.targetObject!,\n\t\t\tfield.formatOptions\n\t\t);\n\t\tif (field.formatOptions.retrieveTextFromValueList) {\n\t\t\t// Consider TextArrangement at EntityType otherwise set default display format 'DescriptionValue'\n\t\t\tconst hasEntityTextArrangement = !!dataModelPath?.targetEntityType?.annotations?.UI?.TextArrangement;\n\t\t\tfield.formatOptions.displayMode = hasEntityTextArrangement ? field.formatOptions.displayMode : \"DescriptionValue\";\n\t\t}\n\t}\n}\n\nexport function setUpValueState(field: FieldBlockProperties): CompiledBindingToolkitExpression {\n\tlet valueStateExp;\n\tconst fieldContainerType = field.formatOptions?.textAlignMode ? field.formatOptions?.textAlignMode : \"Form\";\n\tconst propertyPathInModel = pathInModel(getContextRelativeTargetObjectPath(field.dataModelPath)) as PathInModelExpression<Property>;\n\tconst relativeLocation = getRelativePaths(field.dataModelPath);\n\tconst textPath = getExpressionFromAnnotation(field.dataModelPath?.targetObject?.annotations?.Common?.Text, relativeLocation);\n\tconst propertyPath = field.dataModelPath.targetObject?.name;\n\tconst recommendationValue = pathInModel(`${propertyPath}@$ui5.fe.recommendations.placeholderValue`);\n\tconst recommendationDescription = pathInModel(`${propertyPath}@$ui5.fe.recommendations.placeholderDescription`);\n\tif (fieldContainerType === \"Table\") {\n\t\tvalueStateExp = formatResult(\n\t\t\t[\n\t\t\t\trecommendationValue,\n\t\t\t\trecommendationDescription,\n\t\t\t\tpathInModel(`/recommendationsData`, \"internal\"),\n\t\t\t\tpathInModel(`/isEditable`, \"ui\"),\n\t\t\t\tfield.dataSourcePath,\n\t\t\t\tpropertyPathInModel,\n\t\t\t\ttextPath\n\t\t\t],\n\t\t\tadditionalValueFormatter.formatValueState,\n\t\t\tfield.dataModelPath.targetEntityType\n\t\t);\n\t} else {\n\t\tvalueStateExp = formatResult(\n\t\t\t[\n\t\t\t\trecommendationValue,\n\t\t\t\trecommendationDescription,\n\t\t\t\tpathInModel(`/recommendationsData`, \"internal\"),\n\t\t\t\tpathInModel(`/isEditable`, \"ui\"),\n\t\t\t\tfield.dataSourcePath,\n\t\t\t\tpropertyPathInModel,\n\t\t\t\ttextPath\n\t\t\t],\n\t\t\tadditionalValueFormatter.formatValueState\n\t\t);\n\t}\n\n\tfield.valueState = compileExpression(valueStateExp);\n\treturn field.valueState;\n}\n\nexport function setUpVisibleProperties(field: FieldBlockProperties): void {\n\t// we do this before enhancing the dataModelPath so that it still points at the DataField\n\t// const visibleProperties: Partial<fieldBlock> = {};\n\tconst propertyDataModelObjectPath = MetaModelConverter.getInvolvedDataModelObjects<DataFieldAbstractTypes>(\n\t\tfield.metaPathContext ? field.metaPathContext : field.metaPath,\n\t\tfield.contextPath\n\t);\n\n\tfield.visible ??= getVisibleExpression(propertyDataModelObjectPath, field.formatOptions);\n\tfield.displayVisible = field.formatOptions?.fieldMode === \"nowrapper\" ? field.visible : undefined;\n}\n\nfunction getContentId(macroId: string): string {\n\treturn `${macroId}-content`;\n}\n\n/**\n * Computes properties for the file templating.\n * @param field The field\n */\nfunction computeFileUploaderProperties(field: FieldBlockProperties): void {\n\tif (field.displayStyle === \"File\") {\n\t\tfield.fileRelativePropertyPath = getContextRelativeTargetObjectPath(field.dataModelPath) || \"\";\n\t\tconst fileNameAnnotation = field.property.annotations.Core?.ContentDisposition?.Filename;\n\t\tif (isPathAnnotationExpression(fileNameAnnotation)) {\n\t\t\tconst fileNameDataModelPath = enhanceDataModelPath(field.dataModelPath, fileNameAnnotation.path);\n\t\t\tfield.fileFilenameExpression = getContextRelativeTargetObjectPath(fileNameDataModelPath) ?? \"\";\n\t\t}\n\t}\n}\n\n/**\n * Computes properties for the inline edit templating.\n * @param field The field\n * @param viewDataModel\n */\nfunction computeInlineEditProperties(field: FieldBlockProperties, viewDataModel: JSONModel): void {\n\tif (field.displayStyle === \"File\" || field.displayStyle === \"Avatar\") {\n\t\tfield.inlineEditEnabled = undefined;\n\t\treturn;\n\t}\n\tfield.inlineEditEnabled =\n\t\tfield.inlineEditEnabled === true || viewDataModel?.getProperty(\"/isInlineEditEnabled\") === true ? true : undefined;\n\tif (field.inlineEditEnabled && field.editModeAsObject !== \"Display\") {\n\t\tconst computedEditableExpression = UIFormatters.getEditableExpressionAsObject(\n\t\t\tfield.propertyForFieldControl,\n\t\t\tfield.convertedMetaPath,\n\t\t\tfield.dataModelPath\n\t\t);\n\n\t\tfield.hasInlineEdit = transformRecursively(\n\t\t\tcomputedEditableExpression,\n\t\t\t\"PathInModel\",\n\t\t\t(expr) => {\n\t\t\t\tif (expr.path === \"isEditable\" && expr.modelName === \"ui\") {\n\t\t\t\t\treturn constant(true);\n\t\t\t\t}\n\t\t\t\treturn expr;\n\t\t\t},\n\t\t\ttrue\n\t\t) as unknown as boolean;\n\t}\n}\n\nconst FieldStructureHelper = {\n\tgetDecimalPadding,\n\tsetUpField,\n\tcomputeExternalID,\n\tsetUpDisplayStyle,\n\tsetUpObjectIdentifierTitleAndText,\n\tsetUpValueState\n};\nexport default FieldStructureHelper;\n"],"mappings":"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","ignoreList":[]}
{"version":3,"names":["ActionHelper","getMultiSelectDisabledActions","collections","multiSelectDisabledActions","actions","filter","collection","$Type","action","actionTarget","ActionTarget","isBound","parameter","parameters","isPathAnnotationExpression","annotations","UI","Hidden","Common","FieldControl","push","name","getPressEventDataFieldForActionButton","sId","oAction","oParams","sOperationAvailableMap","sInvocationGrouping","InvocationGrouping","$EnumMember","CommonHelper","addSingleQuotes","Label","generateFunction","Action","objectToString","feFrameworkCall","getNumberOfContextsExpression","vActionEnabled","forContextMenu","arguments","length","undefined","sNumberOfSelectedContexts","selectedContext","getOperationAvailableMap","control","context","operationAvailableMap","forEach","record","actionName","includes","Determining","_getOperationAvailableMapOfTable","_getOperationAvailableMapOfChart","Actions","oDataFieldForAction","sActionName","oOperationAvailableMap","oConverterContext","Core","OperationAvailable","bindingParameterFullName","fullyQualifiedName","targetExpression","getExpressionFromAnnotation","path","bindingContextPathVisitor","getConvertedTypes","isPathInModelExpression","_addToMap","oContext","oResult","getActionPath","sProperty","substring","sBindingParameter","sKey","oValue","oMap"],"sourceRoot":".","sources":["ActionHelper.ts"],"sourcesContent":["import type { DataFieldAbstractTypes, OperationGroupingType } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTypes, type DataFieldForAction } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { getExpressionFromAnnotation, isPathInModelExpression } from \"sap/fe/base/BindingToolkit\";\nimport type ConverterContext from \"sap/fe/core/converters/ConverterContext\";\nimport { bindingContextPathVisitor } from \"sap/fe/core/helpers/BindingHelper\";\nimport { isPathAnnotationExpression } from \"sap/fe/core/helpers/TypeGuards\";\nimport type { ComputedAnnotationInterface } from \"sap/fe/core/templating/UIFormatters\";\nimport CommonHelper from \"sap/fe/macros/CommonHelper\";\nimport type { MetaModelEnum, MetaModelType } from \"../../../../../../../../types/metamodel_types\";\n\nconst ActionHelper = {\n\t/**\n\t * Returns an array of actions that are not enabled with a multiple selection.\n\t * @param collections Array of records\n\t * @returns An array of action paths\n\t */\n\tgetMultiSelectDisabledActions(collections?: DataFieldAbstractTypes[]): string[] {\n\t\tconst multiSelectDisabledActions: string[] = [];\n\t\tconst actions = (collections?.filter((collection) => collection.$Type === UIAnnotationTypes.DataFieldForAction) ??\n\t\t\t[]) as DataFieldForAction[];\n\t\tfor (const action of actions) {\n\t\t\tconst actionTarget = action?.ActionTarget;\n\t\t\tif (actionTarget?.isBound === true) {\n\t\t\t\tfor (const parameter of actionTarget.parameters) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tisPathAnnotationExpression(parameter.annotations.UI?.Hidden) ||\n\t\t\t\t\t\tisPathAnnotationExpression(parameter.annotations.Common?.FieldControl)\n\t\t\t\t\t) {\n\t\t\t\t\t\tmultiSelectDisabledActions.push(actionTarget.name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn multiSelectDisabledActions;\n\t},\n\n\t/**\n\t * Method to get the expression for the 'press' event for the DataFieldForActionButton.\n\t * @param sId Control ID\n\t * @param oAction Action object\n\t * @param oParams Parameters\n\t * @param oParams.invocationGrouping Invocation grouping\n\t * @param oParams.controlId Control ID\n\t * @param oParams.operationAvailableMap OperationAvailableMap\n\t * @param oParams.model Model\n\t * @param oParams.label Label\n\t * @param oParams.contexts Contexts\n\t * @param sOperationAvailableMap OperationAvailableMap as stringified JSON object\n\t * @returns The binding expression\n\t */\n\tgetPressEventDataFieldForActionButton(\n\t\tsId: string,\n\t\toAction: MetaModelType<DataFieldForAction> & { InvocationGrouping: MetaModelEnum<OperationGroupingType> },\n\t\toParams: {\n\t\t\tinvocationGrouping?: string;\n\t\t\tcontrolId?: string;\n\t\t\toperationAvailableMap?: string;\n\t\t\tmodel?: string;\n\t\t\tlabel?: string;\n\t\t\tcontexts?: string;\n\t\t},\n\t\tsOperationAvailableMap: string\n\t): string {\n\t\tconst sInvocationGrouping =\n\t\t\toAction.InvocationGrouping &&\n\t\t\toAction.InvocationGrouping.$EnumMember === \"com.sap.vocabularies.UI.v1.OperationGroupingType/ChangeSet\"\n\t\t\t\t? \"ChangeSet\"\n\t\t\t\t: \"Isolated\";\n\t\toParams = oParams || {};\n\t\toParams[\"invocationGrouping\"] = CommonHelper.addSingleQuotes(sInvocationGrouping);\n\t\toParams[\"controlId\"] = CommonHelper.addSingleQuotes(sId);\n\t\toParams[\"operationAvailableMap\"] = CommonHelper.addSingleQuotes(sOperationAvailableMap);\n\t\toParams[\"model\"] = \"${$source>/}.getModel()\";\n\t\toParams[\"label\"] = oAction.Label && CommonHelper.addSingleQuotes(oAction.Label, true);\n\n\t\treturn CommonHelper.generateFunction(\n\t\t\t\".editFlow.invokeAction\",\n\t\t\tCommonHelper.addSingleQuotes(oAction.Action!),\n\t\t\tCommonHelper.objectToString({ ...oParams, ...{ feFrameworkCall: true } })\n\t\t);\n\t},\n\t/**\n\t * Return Number of contexts expression.\n\t * @param vActionEnabled Status of action (single or multiselect)\n\t * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n\t * @returns Number of contexts expression\n\t */\n\tgetNumberOfContextsExpression(vActionEnabled: string, forContextMenu = false): string {\n\t\tlet sNumberOfSelectedContexts;\n\t\tconst selectedContext = !forContextMenu\n\t\t\t? \"${internal>numberOfSelectedContexts}\"\n\t\t\t: \"${internal>contextmenu/numberOfSelectedContexts}\";\n\t\tif (vActionEnabled === \"single\") {\n\t\t\tsNumberOfSelectedContexts = selectedContext + \" === 1\";\n\t\t} else {\n\t\t\tsNumberOfSelectedContexts = selectedContext + \" > 0\";\n\t\t}\n\t\treturn sNumberOfSelectedContexts;\n\t},\n\t/**\n\t * Return UI Control (LineItem/Chart) Operation Available Map.\n\t * @param aCollection Array of records\n\t * @param sControl Control name (lineItem / chart)\n\t * @param oContext Converter context\n\t * @returns The record containing all action names and their corresponding Core.OperationAvailable property paths\n\t */\n\tgetOperationAvailableMap(\n\t\tcollection: DataFieldAbstractTypes[] | undefined,\n\t\tcontrol: string,\n\t\tcontext: ConverterContext<unknown> | ComputedAnnotationInterface\n\t): Record<string, unknown> {\n\t\tlet operationAvailableMap: Record<string, unknown> = {};\n\t\tif (collection) {\n\t\t\tcollection.forEach((record: DataFieldAbstractTypes) => {\n\t\t\t\tif (record.$Type === UIAnnotationTypes.DataFieldForAction) {\n\t\t\t\t\tconst actionName = record.Action as string;\n\t\t\t\t\tif (!actionName?.includes(\"/\") && !record.Determining) {\n\t\t\t\t\t\tif (control === \"table\") {\n\t\t\t\t\t\t\toperationAvailableMap = this._getOperationAvailableMapOfTable(\n\t\t\t\t\t\t\t\trecord,\n\t\t\t\t\t\t\t\tactionName,\n\t\t\t\t\t\t\t\toperationAvailableMap,\n\t\t\t\t\t\t\t\tcontext as ConverterContext<unknown>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (control === \"chart\") {\n\t\t\t\t\t\t\toperationAvailableMap = this._getOperationAvailableMapOfChart(\n\t\t\t\t\t\t\t\tactionName,\n\t\t\t\t\t\t\t\toperationAvailableMap,\n\t\t\t\t\t\t\t\tcontext as ComputedAnnotationInterface\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (record.$Type === UIAnnotationTypes.DataFieldForActionGroup) {\n\t\t\t\t\toperationAvailableMap = this.getOperationAvailableMap(record.Actions, control, context);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn operationAvailableMap;\n\t},\n\n\t/**\n\t * Return LineItem Action Operation Available Map.\n\t * @private\n\t * @param oDataFieldForAction Data field for action object\n\t * @param sActionName Action name\n\t * @param oOperationAvailableMap Operation available map object\n\t * @param oConverterContext Converter context object\n\t * @returns The record containing all action name of line item and the corresponding Core.OperationAvailable property path\n\t */\n\t_getOperationAvailableMapOfTable(\n\t\toDataFieldForAction: DataFieldForAction,\n\t\tsActionName: string,\n\t\toOperationAvailableMap: Record<string, unknown>,\n\t\toConverterContext: ConverterContext<unknown>\n\t): Record<string, unknown> {\n\t\tconst actionTarget = oDataFieldForAction.ActionTarget;\n\t\tif (actionTarget?.annotations?.Core?.OperationAvailable === null) {\n\t\t\t// We disabled action advertisement but kept it in the code for the time being\n\t\t\t//oOperationAvailableMap = this._addToMap(sActionName, null, oOperationAvailableMap);\n\t\t} else if (actionTarget?.parameters?.length) {\n\t\t\tconst bindingParameterFullName = actionTarget.parameters[0].fullyQualifiedName,\n\t\t\t\ttargetExpression = getExpressionFromAnnotation(\n\t\t\t\t\tactionTarget?.annotations?.Core?.OperationAvailable,\n\t\t\t\t\t[],\n\t\t\t\t\tundefined,\n\t\t\t\t\t(path: string) => bindingContextPathVisitor(path, oConverterContext.getConvertedTypes(), bindingParameterFullName)\n\t\t\t\t);\n\t\t\tif (isPathInModelExpression(targetExpression)) {\n\t\t\t\toOperationAvailableMap = this._addToMap(sActionName, targetExpression.path, oOperationAvailableMap);\n\t\t\t} else if (actionTarget?.annotations?.Core?.OperationAvailable !== undefined) {\n\t\t\t\toOperationAvailableMap = this._addToMap(sActionName, targetExpression, oOperationAvailableMap);\n\t\t\t}\n\t\t}\n\t\treturn oOperationAvailableMap;\n\t},\n\n\t/**\n\t * Return LineItem Action Operation Available Map.\n\t * @private\n\t * @param sActionName Action name\n\t * @param oOperationAvailableMap Operation available map object\n\t * @param oContext Context object\n\t * @param oContext.context Context object\n\t * @returns The record containing all action name of chart and the corresponding Core.OperationAvailable property path\n\t */\n\t_getOperationAvailableMapOfChart(\n\t\tsActionName: string,\n\t\toOperationAvailableMap: Record<string, unknown>,\n\t\toContext: ComputedAnnotationInterface\n\t): Record<string, unknown> {\n\t\tlet oResult = CommonHelper.getActionPath(oContext.context, false, sActionName, true);\n\t\tif (oResult === null) {\n\t\t\toOperationAvailableMap = this._addToMap(sActionName, null, oOperationAvailableMap);\n\t\t} else {\n\t\t\toResult = CommonHelper.getActionPath(oContext.context, false, sActionName) as {\n\t\t\t\tsContextPath: string;\n\t\t\t\tsProperty: string;\n\t\t\t\tsBindingParameter: string;\n\t\t\t};\n\t\t\tif (oResult.sProperty) {\n\t\t\t\toOperationAvailableMap = this._addToMap(\n\t\t\t\t\tsActionName,\n\t\t\t\t\toResult.sProperty.substring(oResult.sBindingParameter.length + 1),\n\t\t\t\t\toOperationAvailableMap\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn oOperationAvailableMap;\n\t},\n\n\t/**\n\t * Return Map.\n\t * @private\n\t * @param sKey Key\n\t * @param oValue Value\n\t * @param oMap Map object\n\t * @returns Map object\n\t */\n\t_addToMap(sKey: string, oValue: unknown, oMap: Record<string, unknown>): Record<string, unknown> {\n\t\tif (sKey && oMap) {\n\t\t\toMap[sKey] = oValue;\n\t\t}\n\t\treturn oMap;\n\t}\n};\n\nexport default ActionHelper;\n"],"mappings":"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","ignoreList":[],"file":"ActionHelper-dbg.js"}
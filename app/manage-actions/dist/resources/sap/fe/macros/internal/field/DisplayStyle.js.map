{"version":3,"file":"DisplayStyle.js","names":["DisplayStyle","getPrecisionForCurrency","field","scale","property","precision","Math","min","getCurrencyOrUnitControl","currencyOrUnit","visibleExpression","_jsx","Link","text","press","eventHandlers","displayAggregationDetails","visible","children","dependents","clone","getNumberWithUnitOrCurrencyAlignedTemplate","relativePropertyPath","getContextRelativeTargetObjectPath","dataModelPath","overallVisible","not","equal","pathInModel","undefined","currency","_jsxs","HBox","renderType","justifyContent","class","Text","textDirection","wrapping","textAlign","valueAsStringBindingExpression","unitBindingExpression","width","formatOptions","isAnalytics","ConditionalWrapper","displayVisible","condition","hasValidAnalyticalCurrencyOrUnit","contentTrue","contentFalse","this","getAvatarTemplate","avatarId","_flexId","idPrefix","generate","avatarVisible","FieldTemplating","getVisibleExpression","avatarSrc","getValueBinding","avatarDisplayShape","getAvatarShape","FormElementWrapper","Avatar","id","src","displaySize","imageFitType","displayShape","getButtonTemplate","icon","showIconUrl","convertedMetaPath","IconUrl","Label","tooltip","buttonPress","buttonIsBound","buttonOperationAvailable","buttonOperationAvailableFormatted","navigationAvailable","$Type","onDataFieldActionButton","ActionTarget","isBound","annotations","Core","OperationAvailable","actionTarget","bindingParamName","parameters","name","compileExpression","getExpressionFromAnnotation","path","startsWith","replace","onDataFieldWithIBN","NavigationAvailable","String","ignoreNavigationAvailable","button","Button","enabled","FieldHelper","isDataFieldActionButtonVisible","isDataFieldActionButtonEnabled","isAnalyticalAggregatedRow","and","resolveBindingString","UI","isNodeLevelNavigable","type","buildExpressionForCriticalityButtonType","getContactTemplate","contactMetaPath","metaPath","getModel","createBindingContext","contactVisible","Contact","ariaLabelledBy","getPath","contextPath","showEmptyIndicator","getDataPointInnerPart","withConditionalWrapper","convertedDataField","MetaModelConverter","convertMetaModelContext","measureDisplayMode","DataPoint","value","getDataPointTemplate","hasUnitOrCurrency","getExpandableText","ExpandableText","displayStyleId","overflowMode","textExpandBehaviorDisplay","maxCharacters","textMaxCharactersDisplay","emptyIndicatorMode","getFileTemplate","innerFilePart","fileStreamNotEmpty","fileRelativePropertyPath","fileFilenameExpression","fileUploadUrl","fileFilenamePath","ContentDisposition","Filename","fileMediaType","MediaType","fileIsImage","IsImageURL","IsImage","test","toString","fileAvatarSrc","fileAvatarDisplayShape","fileIconSrc","getPathForIconSource","fileLinkText","getFilenameExpr","fileLinkHref","getDownloadUrl","fileTextVisible","fileAcceptableMediaTypes","AcceptableMediaTypes","acceptedTypes","Array","from","map","join","fileMaximumSize","calculateMBfromByte","maxLength","avatar","customData","ImageCustomData","paramName","Icon","link","target","href","editMode","computedEditMode","FieldEditMode","Display","beforeDialogOpen","collaborationEnabled","handleOpenUploader","afterDialogOpen","handleCloseUploader","fileUploader","FileUploader","editableExpression","buttonOnly","iconOnly","multiple","style","sendXHR","useMultipart","sameFilenameAllowed","mimeType","typeMissmatch","handleTypeMissmatch","maximumFileSize","fileSizeExceed","handleFileSizeExceed","uploadOnChange","uploadComplete","handleUploadComplete","httpRequestMethod","isDynamicInstantiation","FileUploaderHttpRequestMethod","Put","change","uploadStream","afterDialogClose","uploadStart","deleteButton","removeStream","FileWrapper","uploadUrl","propertyPath","filename","mediaType","fieldGroupIds","validateFieldGroup","CustomData","dataSourcePath","getLinkTemplate","linkUrl","iconUrl","linkActived","linkTarget","computeTextWithWhiteSpace","accessibleRole","LinkAccessibleRole","onDataFieldWithNavigationPath","html5LinkTarget","HTML5","LinkTarget","linkBinding","Url","Communication","IsEmailAddress","IsPhoneNumber","linkIsEmailAddress","linkIsPhoneNumber","propertyValueBinding","mailBlockId","uid","Email","mail","ObjectStatus","openExternalLink","active","wrap","getForeignKeyForCustomData","relativePathToQuickViewEntity","QuickView","getRelativePathToQuickViewEntity","targetNavigationProperties","targetEntityType","navigationProperties","targetNavProp","find","navProp","refConstraint","referentialConstraint","key","length","targetProperty","keyToFetch","getForeignKeyValueExpression","foreignKeyRelativePath","expression","_type","ifElse","constant","getStandardLinkWithQuickViewTemplate","linkPressed","getMdcLinkForQuickView","getConditionalLinkWithQuickViewTemplate","semanticObject","bindingString","TextLink","showAsLink","getConditionalWrapperForQuickViewTemplate","getLinkWithQuickViewTemplate","retrieveTextFromValueList","textFromValueList","getQuickViewCondition","getTextTemplate","renderWhitespace","customdata","displayMode","getPasswordTemplate","textBinding","getTextBinding","textExpression","isPathInModelExpression","formatResult","valueFormatters","formatPasswordText","getObjectIdentifier","titleActive","hasQuickView","identifier","ObjectIdentifier","title","identifierTitle","identifierText","titlePress","hasSituationsIndicator","alignItems","SituationsIndicator","situationsIndicatorPropertyPath","showErrorIndicator","showErrorObjectStatus","VBox","state","getObjectStatus","objectStatus","requiredHelper","dataModelObjectPath","getInvolvedDataModelObjects","enhancedValueDataModelPath","enhanceDataModelPath","targetObject","Value","criticalityIcon","buildExpressionForCriticalityIcon","buildExpressionForCriticalityColor","content","isActive","pressAction","createContent","getLabelSemanticKey","design","hasQuickview","addDraftIndicator","semanticKeyTemplate","fieldGroupDraftIndicatorPropertyPath","getMarginClass","compactSemanticKey","DraftIndicator","draftIndicatorType","ObjectMarkerVisibility","IconAndText","draftIndicatorVisible","dataModelPathExternalID","replaceWhitespace","quickViewType","dynamicSemanticObjects","listOfDynamicSemanticObjects","semanticObjectExpression","push","semanticObjectsPath","concat","hasSemanticObjects","getTemplate","innerFieldContent","displayStyle"],"sources":["./DisplayStyle.tsx"],"sourcesContent":["import type { Action, PathAnnotationExpression, Property, PropertyAnnotationValue } from \"@sap-ux/vocabularies-types\";\nimport type {\n\tDataField,\n\tDataFieldAbstractTypes,\n\tDataFieldForAction,\n\tDataFieldTypes,\n\tDataFieldWithUrl,\n\tDataPointType\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport uid from \"sap/base/util/uid\";\nimport type { BindingToolkitExpression, CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport {\n\tand,\n\tcompileExpression,\n\tconstant,\n\tequal,\n\tformatResult,\n\tgetExpressionFromAnnotation,\n\tifElse,\n\tisPathInModelExpression,\n\tnot,\n\tpathInModel,\n\tresolveBindingString\n} from \"sap/fe/base/BindingToolkit\";\nimport FormElementWrapper from \"sap/fe/core/controls/FormElementWrapper\";\nimport * as MetaModelConverter from \"sap/fe/core/converters/MetaModelConverter\";\nimport valueFormatters from \"sap/fe/core/formatters/ValueFormatter\";\nimport { UI } from \"sap/fe/core/helpers/BindingHelper\";\nimport { generate } from \"sap/fe/core/helpers/StableIdHelper\";\nimport {\n\tbuildExpressionForCriticalityButtonType,\n\tbuildExpressionForCriticalityColor,\n\tbuildExpressionForCriticalityIcon\n} from \"sap/fe/core/templating/CriticalityFormatters\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { enhanceDataModelPath, getContextRelativeTargetObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { hasValidAnalyticalCurrencyOrUnit } from \"sap/fe/core/templating/UIFormatters\";\nimport FieldHelper from \"sap/fe/macros/field/FieldHelper\";\nimport * as FieldTemplating from \"sap/fe/macros/field/FieldTemplating\";\nimport type { FieldBlockProperties } from \"sap/fe/macros/internal/field/FieldStructureHelper\";\nimport QuickView from \"sap/fe/macros/quickView/QuickView\";\nimport Avatar from \"sap/m/Avatar\";\nimport Button from \"sap/m/Button\";\nimport ExpandableText from \"sap/m/ExpandableText\";\nimport HBox from \"sap/m/HBox\";\nimport ImageCustomData from \"sap/m/ImageCustomData\";\nimport Label from \"sap/m/Label\";\nimport type { Link$PressEvent } from \"sap/m/Link\";\nimport Link from \"sap/m/Link\";\nimport ObjectIdentifier from \"sap/m/ObjectIdentifier\";\nimport ObjectStatus from \"sap/m/ObjectStatus\";\nimport Text from \"sap/m/Text\";\nimport VBox from \"sap/m/VBox\";\nimport { LinkAccessibleRole, ObjectMarkerVisibility } from \"sap/m/library\";\nimport type Event from \"sap/ui/base/Event\";\nimport type EventProvider from \"sap/ui/base/EventProvider\";\nimport type Control from \"sap/ui/core/Control\";\nimport type { Control$ValidateFieldGroupEvent } from \"sap/ui/core/Control\";\nimport CustomData from \"sap/ui/core/CustomData\";\nimport Icon from \"sap/ui/core/Icon\";\nimport type MdcLink from \"sap/ui/mdc/Link\";\nimport FieldEditMode from \"sap/ui/mdc/enums/FieldEditMode\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport type {\n\tFileUploader$ChangeEvent,\n\tFileUploader$FileSizeExceedEvent,\n\tFileUploader$TypeMissmatchEvent,\n\tFileUploader$UploadCompleteEvent,\n\tFileUploader$UploadStartEvent\n} from \"sap/ui/unified/FileUploader\";\nimport FileUploader from \"sap/ui/unified/FileUploader\";\nimport FileUploaderHttpRequestMethod from \"sap/ui/unified/FileUploaderHttpRequestMethod\";\nimport Contact from \"../../contact/Contact\";\nimport Email from \"../../contact/Email\";\nimport ConditionalWrapper from \"../../controls/ConditionalWrapper\";\nimport FileWrapper from \"../../controls/FileWrapper\";\nimport TextLink from \"../../controls/TextLink\";\nimport DraftIndicator from \"../../draftIndicator/DraftIndicator\";\nimport SituationsIndicator from \"../../situations/SituationsIndicator\";\nimport DataPoint from \"../DataPoint\";\nimport type { DisplayStyle as DisplayStyleType } from \"./FieldStyles\";\n\nconst DisplayStyle = {\n\tgetPrecisionForCurrency(field: FieldBlockProperties): number {\n\t\tlet scale = field.property.scale ?? 5;\n\t\tif (typeof scale !== \"number\") {\n\t\t\t// Scale can be \"variable\" but it's not typed as such. In this case, Scale equals the precision\n\t\t\tscale = field.property.precision ?? 5;\n\t\t}\n\t\treturn Math.min(scale, 5);\n\t},\n\n\tgetCurrencyOrUnitControl(\n\t\tfield: FieldBlockProperties,\n\t\tcurrencyOrUnit: string | Control,\n\t\tvisibleExpression?: BindingToolkitExpression<boolean>\n\t): Control {\n\t\treturn (\n\t\t\t<Link\n\t\t\t\tcore:require=\"{FIELDRUNTIME: 'sap/fe/macros/field/FieldRuntime'}\"\n\t\t\t\ttext=\"{sap.fe.i18n>M_TABLE_SHOW_DETAILS}\"\n\t\t\t\tpress={field.eventHandlers.displayAggregationDetails}\n\t\t\t\tvisible={visibleExpression}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tdependents: (currencyOrUnit as Control)?.clone ? (currencyOrUnit as Control).clone() : currencyOrUnit\n\t\t\t\t}}\n\t\t\t</Link>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the NumberWithUnitOrCurrencyAligned template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetNumberWithUnitOrCurrencyAlignedTemplate(field: FieldBlockProperties): string {\n\t\t// We don't display anything if the value is undefined\n\t\tconst relativePropertyPath = getContextRelativeTargetObjectPath(field.dataModelPath);\n\t\tconst overallVisible = not(equal(pathInModel(relativePropertyPath), undefined));\n\t\tconst currency = (\n\t\t\t<HBox renderType=\"Bare\" justifyContent=\"End\" class=\"sapFeControlsUnitCurrencyHbox\">\n\t\t\t\t<Text\n\t\t\t\t\ttextDirection=\"LTR\"\n\t\t\t\t\twrapping=\"false\"\n\t\t\t\t\ttextAlign=\"End\"\n\t\t\t\t\tclass=\"sapUiTinyMarginEnd\"\n\t\t\t\t\ttext={field.valueAsStringBindingExpression}\n\t\t\t\t></Text>\n\t\t\t\t<Text textDirection=\"LTR\" wrapping=\"false\" textAlign=\"End\" text={field.unitBindingExpression} width=\"3.3em\"></Text>\n\t\t\t</HBox>\n\t\t);\n\t\tif (field.formatOptions.isAnalytics) {\n\t\t\treturn (\n\t\t\t\t<ConditionalWrapper visible={field.displayVisible} condition={field.hasValidAnalyticalCurrencyOrUnit as unknown as boolean}>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcontentTrue: currency,\n\t\t\t\t\t\tcontentFalse: this.getCurrencyOrUnitControl(field, currency, overallVisible)\n\t\t\t\t\t}}\n\t\t\t\t</ConditionalWrapper>\n\t\t\t);\n\t\t} else {\n\t\t\treturn currency;\n\t\t}\n\t},\n\n\t/**\n\t * Generates the Avatar template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetAvatarTemplate(field: FieldBlockProperties): string {\n\t\tlet avatarId;\n\t\tif (field._flexId) {\n\t\t\tavatarId = field._flexId;\n\t\t} else if (field.idPrefix) {\n\t\t\tavatarId = generate([field.idPrefix, \"Field-content\"]);\n\t\t}\n\n\t\tconst avatarVisible = FieldTemplating.getVisibleExpression(field.dataModelPath as DataModelObjectPath<DataPointType>);\n\n\t\tconst avatarSrc = FieldTemplating.getValueBinding(field.dataModelPath, {});\n\t\tconst avatarDisplayShape = FieldTemplating.getAvatarShape(field.dataModelPath);\n\n\t\treturn (\n\t\t\t<FormElementWrapper visible={avatarVisible}>\n\t\t\t\t<Avatar\n\t\t\t\t\tid={avatarId}\n\t\t\t\t\tsrc={avatarSrc}\n\t\t\t\t\tdisplaySize=\"S\"\n\t\t\t\t\tclass=\"sapUiSmallMarginEnd\"\n\t\t\t\t\timageFitType=\"Cover\"\n\t\t\t\t\tdisplayShape={avatarDisplayShape}\n\t\t\t\t/>\n\t\t\t</FormElementWrapper>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the button template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetButtonTemplate: (field: FieldBlockProperties): string => {\n\t\tconst icon = field.formatOptions?.showIconUrl ?? false ? (field.convertedMetaPath as DataFieldTypes).IconUrl : undefined;\n\t\tconst text = !(field.formatOptions?.showIconUrl ?? false) ? (field.convertedMetaPath as DataFieldTypes).Label : undefined;\n\t\tconst tooltip = field.formatOptions?.showIconUrl ?? false ? (field.convertedMetaPath as DataFieldTypes).Label : undefined;\n\n\t\tlet buttonPress;\n\t\tlet buttonIsBound;\n\t\tlet buttonOperationAvailable;\n\t\tlet buttonOperationAvailableFormatted;\n\t\tlet navigationAvailable;\n\n\t\tif (field.convertedMetaPath.$Type === UIAnnotationTypes.DataFieldForAction) {\n\t\t\tbuttonPress = field.eventHandlers.onDataFieldActionButton;\n\n\t\t\tbuttonIsBound = field.convertedMetaPath.ActionTarget ? field.convertedMetaPath.ActionTarget.isBound : true;\n\t\t\tbuttonOperationAvailable = field.convertedMetaPath.ActionTarget\n\t\t\t\t? field.convertedMetaPath.ActionTarget.annotations?.Core?.OperationAvailable\n\t\t\t\t: \"false\";\n\t\t\tbuttonOperationAvailableFormatted = field.convertedMetaPath.ActionTarget ? undefined : \"false\";\n\n\t\t\tif (buttonOperationAvailable && buttonOperationAvailable !== \"false\") {\n\t\t\t\tconst actionTarget = field.convertedMetaPath.ActionTarget as Action;\n\t\t\t\tconst bindingParamName = actionTarget.parameters[0].name;\n\t\t\t\t//QUALMS, needs to be checked whether this makes sense at that place, might be good in a dedicated helper function\n\t\t\t\tbuttonOperationAvailableFormatted = compileExpression(\n\t\t\t\t\tgetExpressionFromAnnotation(\n\t\t\t\t\t\tbuttonOperationAvailable as PropertyAnnotationValue<boolean>,\n\t\t\t\t\t\t[],\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t(path: string) => {\n\t\t\t\t\t\t\tif (path.startsWith(bindingParamName)) {\n\t\t\t\t\t\t\t\treturn path.replace(bindingParamName + \"/\", \"\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn path;\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (field.convertedMetaPath.$Type === UIAnnotationTypes.DataFieldForIntentBasedNavigation) {\n\t\t\tbuttonPress = field.eventHandlers.onDataFieldWithIBN;\n\t\t\tnavigationAvailable = true;\n\t\t\tif (\n\t\t\t\tfield.convertedMetaPath?.$Type === UIAnnotationTypes.DataFieldForIntentBasedNavigation &&\n\t\t\t\tfield.convertedMetaPath.NavigationAvailable !== undefined &&\n\t\t\t\tString(field.formatOptions.ignoreNavigationAvailable) !== \"true\"\n\t\t\t) {\n\t\t\t\tnavigationAvailable = compileExpression(getExpressionFromAnnotation(field.convertedMetaPath.NavigationAvailable));\n\t\t\t}\n\t\t}\n\n\t\tlet button = \"\";\n\t\tif (field.convertedMetaPath.$Type === UIAnnotationTypes.DataFieldForIntentBasedNavigation) {\n\t\t\tbutton = (\n\t\t\t\t<Button\n\t\t\t\t\tvisible={field.visible}\n\t\t\t\t\ttext={text}\n\t\t\t\t\ticon={icon}\n\t\t\t\t\tenabled={navigationAvailable}\n\t\t\t\t\ttooltip={tooltip}\n\t\t\t\t\tpress={buttonPress as unknown as ((oEvent: Event<object, EventProvider>) => void) | undefined}\n\t\t\t\t/>\n\t\t\t);\n\t\t} else if (\n\t\t\tFieldHelper.isDataFieldActionButtonVisible(\n\t\t\t\tfield.convertedMetaPath,\n\t\t\t\tbuttonIsBound,\n\t\t\t\tbuttonOperationAvailable as boolean | undefined\n\t\t\t)\n\t\t) {\n\t\t\tlet enabled: string | CompiledBindingToolkitExpression = FieldHelper.isDataFieldActionButtonEnabled(\n\t\t\t\tfield.convertedMetaPath as DataFieldForAction,\n\t\t\t\tbuttonIsBound as unknown as boolean,\n\t\t\t\tbuttonOperationAvailable,\n\t\t\t\tbuttonOperationAvailableFormatted as string\n\t\t\t);\n\n\t\t\tif (field.formatOptions.isAnalyticalAggregatedRow) {\n\t\t\t\tenabled = compileExpression(and(resolveBindingString(enabled), UI.isNodeLevelNavigable));\n\t\t\t}\n\n\t\t\tconst type = buildExpressionForCriticalityButtonType(field.dataModelPath as DataModelObjectPath<DataPointType>);\n\n\t\t\tbutton = (\n\t\t\t\t<Button\n\t\t\t\t\tclass={field.class}\n\t\t\t\t\ttext={text}\n\t\t\t\t\ticon={icon}\n\t\t\t\t\ttooltip={tooltip}\n\t\t\t\t\tpress={buttonPress as unknown as ((oEvent: Event<object, EventProvider>) => void) | undefined}\n\t\t\t\t\tenabled={enabled}\n\t\t\t\t\tvisible={field.visible}\n\t\t\t\t\ttype={type}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t\treturn button;\n\t},\n\n\t/**\n\t * Generates the Contact template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetContactTemplate(field: FieldBlockProperties): string {\n\t\tconst contactMetaPath = field.metaPath.getModel().createBindingContext(\"Target/$AnnotationPath\", field.metaPath);\n\t\tconst contactVisible = FieldTemplating.getVisibleExpression(field.dataModelPath as DataModelObjectPath<DataPointType>);\n\n\t\treturn (\n\t\t\t<Contact\n\t\t\t\tidPrefix={field.idPrefix}\n\t\t\t\tariaLabelledBy={field.ariaLabelledBy}\n\t\t\t\tmetaPath={contactMetaPath.getPath()}\n\t\t\t\tcontextPath={field.contextPath.getPath()}\n\t\t\t\t_flexId={field._flexId}\n\t\t\t\tvisible={contactVisible}\n\t\t\t\tshowEmptyIndicator={field.formatOptions.showEmptyIndicator}\n\t\t\t/>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the innerpart of the data point to be used in getDataPointTemplate.\n\t * @param field Reference to the current field instance\n\t * @param withConditionalWrapper Boolean value to determine whether the DataPoint\n\t * \t\t\t\t\t  \t\t\tshall be generated for the conditional wrapper case\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetDataPointInnerPart(field: FieldBlockProperties, withConditionalWrapper: boolean): string {\n\t\tconst convertedDataField = MetaModelConverter.convertMetaModelContext(field.metaPath) as DataFieldAbstractTypes;\n\n\t\tconst metaPath =\n\t\t\tconvertedDataField.$Type === UIAnnotationTypes.DataFieldForAnnotation\n\t\t\t\t? field.metaPath.getModel().createBindingContext(\"Target/$AnnotationPath\", field.metaPath)\n\t\t\t\t: field.metaPath;\n\n\t\tconst formatOptions = {\n\t\t\tmeasureDisplayMode: field.formatOptions.measureDisplayMode,\n\t\t\tshowEmptyIndicator: field.formatOptions.showEmptyIndicator\n\t\t};\n\n\t\treturn (\n\t\t\t<DataPoint\n\t\t\t\tidPrefix={withConditionalWrapper ? undefined : field.idPrefix}\n\t\t\t\tvisible={(!withConditionalWrapper ? field.displayVisible : undefined) as unknown as string | undefined}\n\t\t\t\tariaLabelledBy={field.ariaLabelledBy ? field.ariaLabelledBy : undefined}\n\t\t\t\tmetaPath={metaPath.getPath()}\n\t\t\t\tcontextPath={field.contextPath?.getPath()}\n\t\t\t\tvalue={field.value}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tformatOptions: { formatOptions }\n\t\t\t\t}}\n\t\t\t</DataPoint>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the DataPoint template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetDataPointTemplate(field: FieldBlockProperties): string {\n\t\tif ((field.formatOptions.isAnalytics ?? false) && (field.hasUnitOrCurrency ?? false)) {\n\t\t\treturn (\n\t\t\t\t<ConditionalWrapper visible={field.displayVisible} condition={field.hasValidAnalyticalCurrencyOrUnit as unknown as boolean}>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcontentTrue: this.getDataPointInnerPart(field, true),\n\t\t\t\t\t\tcontentFalse: this.getCurrencyOrUnitControl(field, this.getDataPointInnerPart(field, true))\n\t\t\t\t\t}}\n\t\t\t\t</ConditionalWrapper>\n\t\t\t);\n\t\t} else {\n\t\t\treturn this.getDataPointInnerPart(field, false);\n\t\t}\n\t},\n\n\t/**\n\t * Generates the ExpandableText template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetExpandableText(field: FieldBlockProperties): string {\n\t\treturn (\n\t\t\t<ExpandableText\n\t\t\t\tid={field?.displayStyleId}\n\t\t\t\tvisible={field?.displayVisible}\n\t\t\t\ttext={field.text}\n\t\t\t\toverflowMode={field?.formatOptions?.textExpandBehaviorDisplay}\n\t\t\t\tmaxCharacters={field?.formatOptions?.textMaxCharactersDisplay}\n\t\t\t\temptyIndicatorMode={field?.emptyIndicatorMode}\n\t\t\t/>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the File template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetFileTemplate(field: FieldBlockProperties): string {\n\t\tlet innerFilePart;\n\n\t\tconst fileStreamNotEmpty = compileExpression(\n\t\t\tnot(equal(pathInModel(`${field.fileRelativePropertyPath}@odata.mediaContentType`), null))\n\t\t);\n\n\t\tconst fileFilenameExpression = field.fileFilenameExpression ? \"{ path: '\" + field.fileFilenameExpression + \"' }\" : \"\";\n\n\t\t// FileWrapper\n\t\tconst fileUploadUrl = FieldTemplating.getValueBinding(field.dataModelPath, {});\n\t\tconst fileFilenamePath = (field.property.annotations.Core?.ContentDisposition?.Filename as PathAnnotationExpression<string>)?.path;\n\t\tconst fileMediaType =\n\t\t\tfield.property.annotations.Core?.MediaType &&\n\t\t\tcompileExpression(getExpressionFromAnnotation(field.property.annotations.Core?.MediaType));\n\n\t\t// template:if\n\t\tconst fileIsImage =\n\t\t\t!!field.property.annotations.UI?.IsImageURL ||\n\t\t\t!!field.property.annotations.UI?.IsImage ||\n\t\t\t/image\\//i.test(field.property.annotations.Core?.MediaType?.toString() ?? \"\");\n\n\t\t// Avatar\n\t\tconst fileAvatarSrc = FieldTemplating.getValueBinding(field.dataModelPath, {});\n\t\tconst fileAvatarDisplayShape = FieldTemplating.getAvatarShape(field.dataModelPath);\n\n\t\t// Icon\n\t\tconst fileIconSrc = FieldHelper.getPathForIconSource(field.fileRelativePropertyPath);\n\n\t\t// Link\n\t\tconst fileLinkText = FieldHelper.getFilenameExpr(fileFilenameExpression, \"{sap.fe.i18n>M_FIELD_FILEUPLOADER_NOFILENAME_TEXT}\");\n\t\tconst fileLinkHref = FieldHelper.getDownloadUrl(fileUploadUrl ?? \"\");\n\n\t\t// Text\n\t\tconst fileTextVisible = compileExpression(equal(pathInModel(`${field.fileRelativePropertyPath}@odata.mediaContentType`), null));\n\n\t\tlet fileAcceptableMediaTypes;\n\t\t// FileUploader\n\t\tif (field.property.annotations.Core?.AcceptableMediaTypes) {\n\t\t\tconst acceptedTypes = Array.from(field.property.annotations.Core.AcceptableMediaTypes as unknown as string[]).map(\n\t\t\t\t(type) => `'${type}'`\n\t\t\t);\n\t\t\tfileAcceptableMediaTypes = `{=odata.collection([${acceptedTypes.join(\",\")}])}`; // This does not feel right, but follows the logic of AnnotationHelper#value\n\t\t}\n\t\tconst fileMaximumSize = FieldHelper.calculateMBfromByte(field.property.maxLength);\n\n\t\tif (fileIsImage) {\n\t\t\tinnerFilePart = {\n\t\t\t\tavatar: (\n\t\t\t\t\t<Avatar\n\t\t\t\t\t\tvisible={field.displayVisible}\n\t\t\t\t\t\tsrc={fileAvatarSrc}\n\t\t\t\t\t\tdisplaySize=\"S\"\n\t\t\t\t\t\tclass=\"sapUiSmallMarginEnd\"\n\t\t\t\t\t\timageFitType=\"Cover\"\n\t\t\t\t\t\tdisplayShape={fileAvatarDisplayShape}\n\t\t\t\t\t>\n\t\t\t\t\t\t{{\n\t\t\t\t\t\t\tcustomData: <ImageCustomData paramName=\"xcache\" />\n\t\t\t\t\t\t}}\n\t\t\t\t\t</Avatar>\n\t\t\t\t)\n\t\t\t};\n\t\t} else {\n\t\t\tinnerFilePart = {\n\t\t\t\ticon: <Icon src={fileIconSrc} class=\"sapUiSmallMarginEnd\" visible={fileStreamNotEmpty} />,\n\t\t\t\tlink: <Link text={fileLinkText} target=\"_blank\" href={fileLinkHref} visible={fileStreamNotEmpty} wrapping=\"true\" />,\n\t\t\t\ttext: <Text emptyIndicatorMode={field.emptyIndicatorMode} text=\"\" visible={fileTextVisible} />\n\t\t\t};\n\t\t}\n\n\t\tif ((field.editMode ?? field.computedEditMode) !== FieldEditMode.Display) {\n\t\t\tconst beforeDialogOpen = field.collaborationEnabled ? field.eventHandlers.handleOpenUploader : undefined;\n\t\t\tconst afterDialogOpen = field.collaborationEnabled ? field.eventHandlers.handleCloseUploader : undefined;\n\n\t\t\tinnerFilePart = {\n\t\t\t\t...innerFilePart,\n\t\t\t\tfileUploader: (\n\t\t\t\t\t<FileUploader\n\t\t\t\t\t\tname=\"FEV4FileUpload\"\n\t\t\t\t\t\tvisible={field.editableExpression}\n\t\t\t\t\t\tbuttonOnly=\"true\"\n\t\t\t\t\t\ticonOnly=\"true\"\n\t\t\t\t\t\tmultiple=\"false\"\n\t\t\t\t\t\ttooltip=\"{sap.fe.i18n>M_FIELD_FILEUPLOADER_UPLOAD_BUTTON_TOOLTIP}\"\n\t\t\t\t\t\ticon=\"sap-icon://upload\"\n\t\t\t\t\t\tstyle=\"Transparent\"\n\t\t\t\t\t\tsendXHR=\"true\"\n\t\t\t\t\t\tuseMultipart=\"false\"\n\t\t\t\t\t\tsameFilenameAllowed=\"true\"\n\t\t\t\t\t\tmimeType={fileAcceptableMediaTypes}\n\t\t\t\t\t\ttypeMissmatch={\n\t\t\t\t\t\t\tfield.eventHandlers.handleTypeMissmatch as unknown as (oEvent: FileUploader$TypeMissmatchEvent) => void\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmaximumFileSize={fileMaximumSize}\n\t\t\t\t\t\tfileSizeExceed={\n\t\t\t\t\t\t\tfield.eventHandlers.handleFileSizeExceed as unknown as (oEvent: FileUploader$FileSizeExceedEvent) => void\n\t\t\t\t\t\t}\n\t\t\t\t\t\tuploadOnChange=\"false\"\n\t\t\t\t\t\tuploadComplete={\n\t\t\t\t\t\t\tfield.eventHandlers.handleUploadComplete as unknown as (oEvent: FileUploader$UploadCompleteEvent) => void\n\t\t\t\t\t\t}\n\t\t\t\t\t\thttpRequestMethod={field.isDynamicInstantiation ? FileUploaderHttpRequestMethod.Put : \"Put\"}\n\t\t\t\t\t\tchange={field.eventHandlers.uploadStream as unknown as (oEvent: FileUploader$ChangeEvent) => void}\n\t\t\t\t\t\tbeforeDialogOpen={beforeDialogOpen as unknown as (oEvent: Event) => void}\n\t\t\t\t\t\tafterDialogClose={afterDialogOpen as unknown as (oEvent: Event) => void}\n\t\t\t\t\t\tuploadStart={field.eventHandlers.handleOpenUploader as unknown as (oEvent: FileUploader$UploadStartEvent) => void}\n\t\t\t\t\t/>\n\t\t\t\t),\n\t\t\t\tdeleteButton: (\n\t\t\t\t\t<Button\n\t\t\t\t\t\ticon=\"sap-icon://sys-cancel\"\n\t\t\t\t\t\ttype=\"Transparent\"\n\t\t\t\t\t\tpress={field.eventHandlers.removeStream as unknown as (oEvent: Event) => void}\n\t\t\t\t\t\ttooltip=\"{sap.fe.i18n>M_FIELD_FILEUPLOADER_DELETE_BUTTON_TOOLTIP}\"\n\t\t\t\t\t\tvisible={field.editableExpression}\n\t\t\t\t\t\tenabled={fileStreamNotEmpty}\n\t\t\t\t\t/>\n\t\t\t\t)\n\t\t\t};\n\t\t}\n\n\t\treturn (\n\t\t\t<FileWrapper\n\t\t\t\tcore:require=\"{FieldRuntimeHelper: 'sap/fe/macros/field/FieldRuntimeHelper'}\"\n\t\t\t\tvisible={field.visible}\n\t\t\t\tuploadUrl={fileUploadUrl}\n\t\t\t\tpropertyPath={field.fileRelativePropertyPath}\n\t\t\t\tfilename={fileFilenamePath}\n\t\t\t\tmediaType={fileMediaType}\n\t\t\t\tfieldGroupIds={field.fieldGroupIds}\n\t\t\t\tvalidateFieldGroup={field.eventHandlers.validateFieldGroup as (oEvent: Control$ValidateFieldGroupEvent) => void}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: <CustomData key=\"sourcePath\" value={field.dataSourcePath} />,\n\t\t\t\t\tinnerFilePart\n\t\t\t\t}}\n\t\t\t</FileWrapper>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the Link template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetLinkTemplate(field: FieldBlockProperties): string {\n\t\tlet linkUrl;\n\t\tlet iconUrl;\n\t\tlet linkActived;\n\t\ttype LinkTarget = \"_blank\" | \"_self\" | \"_top\" | \"_parent\";\n\t\tlet linkTarget: LinkTarget | undefined;\n\n\t\tswitch (field.convertedMetaPath.$Type as string) {\n\t\t\tcase UIAnnotationTypes.DataFieldWithIntentBasedNavigation:\n\t\t\t\treturn (\n\t\t\t\t\t<Link\n\t\t\t\t\t\tid={field.displayStyleId}\n\t\t\t\t\t\tvisible={field.displayVisible}\n\t\t\t\t\t\ttext={DisplayStyle.computeTextWithWhiteSpace(field)}\n\t\t\t\t\t\tpress={field.eventHandlers.onDataFieldWithIBN as unknown as (oEvent: Link$PressEvent) => void}\n\t\t\t\t\t\tariaLabelledBy={field.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t\t\t\tclass=\"sapMTextRenderWhitespaceWrap\"\n\t\t\t\t\t\taccessibleRole={LinkAccessibleRole.Button}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\tcase UIAnnotationTypes.DataFieldWithNavigationPath:\n\t\t\t\treturn (\n\t\t\t\t\t<Link\n\t\t\t\t\t\tid={field.displayStyleId}\n\t\t\t\t\t\tcore:require=\"{FieldRuntimeHelper: 'sap/fe/macros/field/FieldRuntimeHelper'}\"\n\t\t\t\t\t\tvisible={field.displayVisible}\n\t\t\t\t\t\ttext={field.text}\n\t\t\t\t\t\tpress={field.eventHandlers.onDataFieldWithNavigationPath as unknown as (oEvent: Link$PressEvent) => void}\n\t\t\t\t\t\tenabled={field.formatOptions.isAnalyticalAggregatedRow ? UI.isNodeLevelNavigable : undefined}\n\t\t\t\t\t\tariaLabelledBy={field.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t\t\t\tclass=\"sapMTextRenderWhitespaceWrap\"\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\tcase UIAnnotationTypes.DataFieldWithAction:\n\t\t\t\treturn (\n\t\t\t\t\t<Link\n\t\t\t\t\t\tid={field.displayStyleId}\n\t\t\t\t\t\tvisible={field.displayVisible}\n\t\t\t\t\t\ttext={field.text}\n\t\t\t\t\t\tpress={field.eventHandlers.onDataFieldActionButton as unknown as (oEvent: Link$PressEvent) => void}\n\t\t\t\t\t\tenabled={field.formatOptions.isAnalyticalAggregatedRow ? UI.isNodeLevelNavigable : undefined}\n\t\t\t\t\t\tariaLabelledBy={field.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t\t\t\tclass=\"sapMTextRenderWhitespaceWrap\"\n\t\t\t\t\t\taccessibleRole={LinkAccessibleRole.Button}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\tcase UIAnnotationTypes.DataFieldWithUrl:\n\t\t\t\tconst html5LinkTarget = field.property.annotations.HTML5?.LinkTarget;\n\t\t\t\tfield.text = DisplayStyle.computeTextWithWhiteSpace(field);\n\t\t\t\ticonUrl = (field.convertedMetaPath as DataFieldTypes).IconUrl\n\t\t\t\t\t? compileExpression(\n\t\t\t\t\t\t\tgetExpressionFromAnnotation(\n\t\t\t\t\t\t\t\t(field.convertedMetaPath as DataFieldTypes).IconUrl as unknown as PropertyAnnotationValue<String>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t  )\n\t\t\t\t\t: undefined;\n\t\t\t\tconst linkBinding = getExpressionFromAnnotation(\n\t\t\t\t\t(field.convertedMetaPath as DataFieldWithUrl).Url as unknown as PropertyAnnotationValue<String>\n\t\t\t\t);\n\t\t\t\tlinkUrl = compileExpression(linkBinding);\n\t\t\t\tlinkActived = compileExpression(not(equal(linkBinding, \"\")));\n\t\t\t\tlinkTarget = html5LinkTarget && (html5LinkTarget.toString() as LinkTarget);\n\t\t}\n\n\t\tif (field.property.annotations?.Communication?.IsEmailAddress || field.property.annotations?.Communication?.IsPhoneNumber) {\n\t\t\tconst linkIsEmailAddress = field.property.annotations.Communication?.IsEmailAddress !== undefined;\n\t\t\tconst linkIsPhoneNumber = field.property.annotations.Communication?.IsPhoneNumber !== undefined;\n\t\t\tconst propertyValueBinding = FieldTemplating.getValueBinding(field.dataModelPath, {});\n\t\t\tconst mailBlockId = field.displayStyleId ? field.displayStyleId : `mailBlock${uid()}`;\n\t\t\tif (linkIsEmailAddress) {\n\t\t\t\tlinkUrl = `mailto:${propertyValueBinding}`;\n\t\t\t\treturn (\n\t\t\t\t\t<Email\n\t\t\t\t\t\tid={mailBlockId}\n\t\t\t\t\t\tvisible={field.displayVisible}\n\t\t\t\t\t\ttext={field.text}\n\t\t\t\t\t\tmail={propertyValueBinding}\n\t\t\t\t\t\tariaLabelledBy={field.ariaLabelledBy ? field.ariaLabelledBy : undefined}\n\t\t\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (linkIsPhoneNumber) {\n\t\t\t\tlinkUrl = `tel:${propertyValueBinding}`;\n\t\t\t\treturn (\n\t\t\t\t\t<Link\n\t\t\t\t\t\tid={field.displayStyleId}\n\t\t\t\t\t\tvisible={field.displayVisible}\n\t\t\t\t\t\ttext={DisplayStyle.computeTextWithWhiteSpace(field)}\n\t\t\t\t\t\thref={linkUrl}\n\t\t\t\t\t\tenabled={linkActived}\n\t\t\t\t\t\tariaLabelledBy={field.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t\t\t\tclass=\"sapMTextRenderWhitespaceWrap\"\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (iconUrl) {\n\t\t\treturn (\n\t\t\t\t<ObjectStatus\n\t\t\t\t\tcore:require=\"{FieldRuntimeHelper: 'sap/fe/macros/field/FieldRuntimeHelper'}\"\n\t\t\t\t\tid={field.displayStyleId}\n\t\t\t\t\ticon={iconUrl}\n\t\t\t\t\tvisible={field.displayVisible}\n\t\t\t\t\ttext={field.text}\n\t\t\t\t\tpress={field.eventHandlers.openExternalLink as unknown as (oEvent: Event) => void}\n\t\t\t\t\tactive={linkActived}\n\t\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t\t\tariaLabelledBy={field.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\t>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcustomData: <CustomData key={\"url\"} value={linkUrl} />\n\t\t\t\t\t}}\n\t\t\t\t</ObjectStatus>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<Link\n\t\t\t\t\tid={field.displayStyleId}\n\t\t\t\t\tvisible={field.displayVisible}\n\t\t\t\t\ttext={field.text}\n\t\t\t\t\thref={linkUrl}\n\t\t\t\t\tenabled={linkActived}\n\t\t\t\t\ttarget={linkTarget === undefined ? \"_top\" : linkTarget}\n\t\t\t\t\twrapping={field.wrap === undefined ? true : field.wrap}\n\t\t\t\t\tariaLabelledBy={field.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t},\n\n\t/**\n\t * Find the foreign key of target entity which quick view Facets we want to display.\n\t * @param field Reference to the current field instance\n\t * @returns The key of the target entity\n\t */\n\tgetForeignKeyForCustomData(field: FieldBlockProperties): string | undefined {\n\t\tconst relativePathToQuickViewEntity = QuickView.getRelativePathToQuickViewEntity(field.dataModelPath);\n\t\tif (relativePathToQuickViewEntity) {\n\t\t\tconst targetNavigationProperties = field.dataModelPath.targetEntityType.navigationProperties;\n\t\t\tconst targetNavProp = targetNavigationProperties.find((navProp) => navProp.name === relativePathToQuickViewEntity);\n\t\t\tconst refConstraint = targetNavProp?.referentialConstraint;\n\t\t\tconst key = refConstraint?.length && typeof refConstraint[0] === \"object\" && refConstraint[0].targetProperty;\n\t\t\tconst keyToFetch = key ? `${relativePathToQuickViewEntity}/${key}` : undefined;\n\t\t\tif (keyToFetch !== undefined) {\n\t\t\t\treturn keyToFetch;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t},\n\n\t/**\n\t * Generates the check expression for displaying or not a quickview.\n\t * @param field Reference to the current field instance\n\t * @returns The key of the target entity\n\t */\n\tgetForeignKeyValueExpression(field: FieldBlockProperties): string {\n\t\tconst foreignKeyRelativePath = QuickView.getRelativePathToQuickViewEntity(field.dataModelPath)\n\t\t\t? this.getForeignKeyForCustomData(field)\n\t\t\t: undefined;\n\t\tconst expression: BindingToolkitExpression<string> = {\n\t\t\tpath: `${foreignKeyRelativePath}`,\n\t\t\t_type: \"PathInModel\"\n\t\t};\n\t\treturn `${compileExpression(ifElse(equal(foreignKeyRelativePath, undefined), constant(true), not(equal(null, expression))))}`;\n\t},\n\n\t/**\n\t * Generates the StandardLinkWithQuickView template.\n\t * @param field Reference to the current field instance\n\t * @param text The text to display\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetStandardLinkWithQuickViewTemplate(field: FieldBlockProperties, text: CompiledBindingToolkitExpression): string {\n\t\treturn (\n\t\t\t<Link\n\t\t\t\tid={field.displayStyleId}\n\t\t\t\tcore:require=\"{FieldRuntimeHelper: 'sap/fe/macros/field/FieldRuntimeHelper'}\"\n\t\t\t\ttext={text}\n\t\t\t\tvisible={field.displayVisible}\n\t\t\t\twrapping={field.wrap === undefined ? true : field.wrap}\n\t\t\t\tpress={field.eventHandlers.linkPressed}\n\t\t\t\tariaLabelledBy={field.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t\taccessibleRole={LinkAccessibleRole.Button}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [<CustomData key={\"loadValue\"} value={field.valueAsStringBindingExpression} />],\n\t\t\t\t\tdependents: DisplayStyle.getMdcLinkForQuickView(field)\n\t\t\t\t}}\n\t\t\t</Link>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the ConditionalLinkTemplate template.\n\t * @param field Reference to the current field instance\n\t * @param condition Condition to display a Link or a Text\n\t * @param text The text to display\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetConditionalLinkWithQuickViewTemplate(\n\t\tfield: FieldBlockProperties,\n\t\tcondition: CompiledBindingToolkitExpression,\n\t\ttext: CompiledBindingToolkitExpression\n\t): string {\n\t\tconst semanticObject = field.semanticObject?.bindingString ?? field.semanticObject;\n\t\treturn (\n\t\t\t<TextLink\n\t\t\t\tid={field.displayStyleId}\n\t\t\t\tcore:require=\"{FieldRuntimeHelper: 'sap/fe/macros/field/FieldRuntimeHelper'}\"\n\t\t\t\tshowAsLink={condition as unknown as boolean}\n\t\t\t\tsemanticObject={semanticObject}\n\t\t\t\ttext={text}\n\t\t\t\tvisible={field.displayVisible}\n\t\t\t\twrapping={field.wrap === undefined ? true : field.wrap}\n\t\t\t\tpress={field.eventHandlers.linkPressed}\n\t\t\t\tariaLabelledBy={field.ariaLabelledBy}\n\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [<CustomData key={\"loadValue\"} value={field.valueAsStringBindingExpression} />],\n\t\t\t\t\tdependents: DisplayStyle.getMdcLinkForQuickView(field)\n\t\t\t\t}}\n\t\t\t</TextLink>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the ConditionalLinkTemplate template.\n\t * @param field Reference to the current field instance\n\t * @param condition Condition to display a Link or a Text\n\t * @param contentTrue The Control to display in case condition is true\n\t * @param contentFalse The Control to display in case condition is false\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetConditionalWrapperForQuickViewTemplate(\n\t\tfield: FieldBlockProperties,\n\t\tcondition: string,\n\t\tcontentTrue: string,\n\t\tcontentFalse: string\n\t): string {\n\t\treturn (\n\t\t\t<ConditionalWrapper visible={field.displayVisible} condition={condition as unknown as boolean}>\n\t\t\t\t{{\n\t\t\t\t\tcontentTrue: contentTrue,\n\t\t\t\t\tcontentFalse: contentFalse\n\t\t\t\t}}\n\t\t\t</ConditionalWrapper>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the LinkWithQuickView template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetLinkWithQuickViewTemplate(field: FieldBlockProperties): string {\n\t\tconst text = field.formatOptions.retrieveTextFromValueList\n\t\t\t? field.textFromValueList\n\t\t\t: DisplayStyle.computeTextWithWhiteSpace(field);\n\t\tconst condition = this.getQuickViewCondition(field);\n\t\tif (condition === \"true\") {\n\t\t\treturn this.getStandardLinkWithQuickViewTemplate(field, text);\n\t\t}\n\t\treturn this.getConditionalLinkWithQuickViewTemplate(field, condition, text);\n\t},\n\n\t/**\n\t * Generates the Text template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetTextTemplate(field: FieldBlockProperties): string {\n\t\tif (field.formatOptions.retrieveTextFromValueList) {\n\t\t\treturn (\n\t\t\t\t<Text\n\t\t\t\t\tid={field.displayStyleId}\n\t\t\t\t\tvisible={field.displayVisible}\n\t\t\t\t\ttext={field.textFromValueList}\n\t\t\t\t\tcore:require=\"{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}\"\n\t\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t\t\trenderWhitespace=\"true\"\n\t\t\t\t/>\n\t\t\t);\n\t\t} else {\n\t\t\t// When having a TextArrangement with TextOnly, RTA can only find the binding for the text, but not for the field.\n\t\t\t// To prevent that such a field can be added twice via RTA, we need to provide the field binding as a dummy custom binding.\n\t\t\tlet customdata;\n\t\t\tif (field.formatOptions.displayMode === \"Description\" && field.valueAsStringBindingExpression) {\n\t\t\t\tcustomdata = <CustomData key=\"fieldBinding\" value={field.valueAsStringBindingExpression} />;\n\t\t\t}\n\t\t\treturn (\n\t\t\t\t<Text\n\t\t\t\t\tid={field.displayStyleId}\n\t\t\t\t\tvisible={field.displayVisible}\n\t\t\t\t\ttext={field.text}\n\t\t\t\t\twrapping={field.wrap}\n\t\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t\t\trenderWhitespace=\"true\"\n\t\t\t\t>\n\t\t\t\t\t{customdata}\n\t\t\t\t</Text>\n\t\t\t);\n\t\t}\n\t},\n\n\t/**\n\t * Gets template for the password field.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetPasswordTemplate(field: FieldBlockProperties): string {\n\t\tconst textBinding = FieldTemplating.getTextBinding(field.dataModelPath, field.formatOptions, true);\n\t\tconst textExpression =\n\t\t\tisPathInModelExpression(textBinding) || typeof textBinding === \"string\"\n\t\t\t\t? compileExpression(formatResult([textBinding], valueFormatters.formatPasswordText))\n\t\t\t\t: compileExpression(textBinding);\n\t\treturn (\n\t\t\t<Text\n\t\t\t\tcore:require=\"{valueFormatters: 'sap/fe/core/formatters/ValueFormatter'}\"\n\t\t\t\tid={field.displayStyleId}\n\t\t\t\tvisible={field.displayVisible}\n\t\t\t\ttext={textExpression}\n\t\t\t\twrapping={field.wrap}\n\t\t\t\trenderWhitespace=\"true\"\n\t\t\t></Text>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the ObjectIdentifier template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetObjectIdentifier(field: FieldBlockProperties): string {\n\t\tlet dependents: MdcLink | undefined;\n\t\tlet titleActive;\n\t\tif (field.hasQuickView) {\n\t\t\ttitleActive = this.getQuickViewCondition(field);\n\t\t\tdependents = DisplayStyle.getMdcLinkForQuickView(field);\n\t\t} else {\n\t\t\ttitleActive = false;\n\t\t}\n\n\t\tlet identifier = (\n\t\t\t<ObjectIdentifier\n\t\t\t\tcore:require=\"{FieldRuntimeHelper: 'sap/fe/macros/field/FieldRuntimeHelper'}\"\n\t\t\t\tid={field.displayStyleId}\n\t\t\t\ttitle={field.identifierTitle}\n\t\t\t\ttext={field.identifierText}\n\t\t\t\ttitleActive={titleActive}\n\t\t\t\ttitlePress={field.eventHandlers.linkPressed}\n\t\t\t\tariaLabelledBy={field.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [<CustomData key={\"loadValue\"} value={field.valueAsStringBindingExpression} />],\n\t\t\t\t\tdependents: dependents\n\t\t\t\t}}\n\t\t\t</ObjectIdentifier>\n\t\t);\n\t\tif (field.hasSituationsIndicator) {\n\t\t\tidentifier = (\n\t\t\t\t<HBox alignItems=\"Center\" justifyContent=\"SpaceBetween\" width=\"100%\">\n\t\t\t\t\t{identifier}\n\t\t\t\t\t<SituationsIndicator contextPath={field.contextPath.getPath()} propertyPath={field.situationsIndicatorPropertyPath} />\n\t\t\t\t</HBox>\n\t\t\t);\n\t\t}\n\t\tif (field.showErrorIndicator && field.showErrorObjectStatus) {\n\t\t\tidentifier = (\n\t\t\t\t<VBox>\n\t\t\t\t\t{identifier}\n\t\t\t\t\t<ObjectStatus\n\t\t\t\t\t\tvisible={field.showErrorObjectStatus}\n\t\t\t\t\t\tclass=\"sapUiSmallMarginBottom\"\n\t\t\t\t\t\ttext=\"{sap.fe.i18n>Contains_Errors}\"\n\t\t\t\t\t\tstate=\"Error\"\n\t\t\t\t\t/>\n\t\t\t\t</VBox>\n\t\t\t);\n\t\t}\n\n\t\treturn identifier;\n\t},\n\n\t/**\n\t * Generates the ObjectStatus template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetObjectStatus(field: FieldBlockProperties): string {\n\t\tlet objectStatus;\n\t\tlet requiredHelper = {\n\t\t\t\"core:require\": \"{FieldRuntimeHelper: 'sap/fe/macros/field/FieldRuntimeHelper'}\"\n\t\t};\n\t\tconst dataModelObjectPath = MetaModelConverter.getInvolvedDataModelObjects<DataField>(field.metaPath, field.contextPath);\n\t\tconst enhancedValueDataModelPath = enhanceDataModelPath<Property>(\n\t\t\tdataModelObjectPath,\n\t\t\tdataModelObjectPath.targetObject?.Value.path\n\t\t);\n\t\tconst condition = hasValidAnalyticalCurrencyOrUnit(enhancedValueDataModelPath);\n\t\tconst convertedDataField = MetaModelConverter.getInvolvedDataModelObjects<DataPointType>(field.metaPath);\n\t\tconst criticalityIcon = buildExpressionForCriticalityIcon(convertedDataField);\n\t\tconst state = buildExpressionForCriticalityColor(convertedDataField);\n\n\t\tconst linkUrl = (field.convertedMetaPath as DataFieldWithUrl).Url\n\t\t\t? compileExpression(\n\t\t\t\t\tgetExpressionFromAnnotation(\n\t\t\t\t\t\t(field.convertedMetaPath as DataFieldWithUrl).Url as unknown as PropertyAnnotationValue<String>\n\t\t\t\t\t)\n\t\t\t  )\n\t\t\t: undefined;\n\n\t\tif (field.formatOptions.isAnalytics && field.hasUnitOrCurrency) {\n\t\t\tconst content = DisplayStyle.getCurrencyOrUnitControl(field, <Text text={field.text} textAlign=\"End\"></Text>);\n\t\t\tobjectStatus = (\n\t\t\t\t<ConditionalWrapper id={field.displayStyleId} condition={condition as unknown as boolean}>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcontentTrue: (\n\t\t\t\t\t\t\t<ObjectStatus\n\t\t\t\t\t\t\t\ticon={criticalityIcon}\n\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\tvisible={field.displayVisible}\n\t\t\t\t\t\t\t\ttext={field.text}\n\t\t\t\t\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t\t\t\t\t\tclass=\"sapMTextRenderWhitespaceWrap\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t),\n\t\t\t\t\t\tcontentFalse: content\n\t\t\t\t\t}}\n\t\t\t\t</ConditionalWrapper>\n\t\t\t);\n\t\t} else {\n\t\t\tlet dependents: MdcLink | undefined;\n\t\t\tlet active = false;\n\t\t\tlet isActive;\n\t\t\tlet pressAction;\n\t\t\tif (field.hasQuickView) {\n\t\t\t\tdependents = DisplayStyle.getMdcLinkForQuickView(field);\n\t\t\t\tisActive = this.getQuickViewCondition(field);\n\t\t\t\tpressAction = \"FieldRuntimeHelper.pressLink\";\n\t\t\t}\n\t\t\tif (linkUrl) {\n\t\t\t\tactive = true;\n\t\t\t\trequiredHelper = {\n\t\t\t\t\t\"core:require\": \"{FieldRuntimeHelper: 'sap/fe/macros/field/FieldRuntimeHelper'}\"\n\t\t\t\t};\n\t\t\t\tpressAction = field.eventHandlers.openExternalLink;\n\t\t\t}\n\n\t\t\tobjectStatus = (\n\t\t\t\t<ObjectStatus\n\t\t\t\t\tid={field.displayStyleId}\n\t\t\t\t\ticon={criticalityIcon}\n\t\t\t\t\tstate={state}\n\t\t\t\t\ttext={field.text}\n\t\t\t\t\tvisible={field.displayVisible}\n\t\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t\t\t{...requiredHelper}\n\t\t\t\t\tactive={isActive ? isActive : active}\n\t\t\t\t\tpress={pressAction as unknown as (oEvent: Event) => void}\n\t\t\t\t\tariaLabelledBy={field.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\t>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcustomData: [\n\t\t\t\t\t\t\t<CustomData key={\"loadValue\"} value={field.valueAsStringBindingExpression} />,\n\t\t\t\t\t\t\t<CustomData key={\"url\"} value={linkUrl} />\n\t\t\t\t\t\t],\n\t\t\t\t\t\tdependents: dependents\n\t\t\t\t\t}}\n\t\t\t\t</ObjectStatus>\n\t\t\t);\n\t\t}\n\n\t\treturn objectStatus;\n\t},\n\n\tgetMdcLinkForQuickView(field: FieldBlockProperties): MdcLink {\n\t\tconst semanticObject = field.semanticObject?.bindingString ?? field.semanticObject;\n\t\treturn new QuickView(\n\t\t\tfield.dataModelPath,\n\t\t\tfield.metaPath.getPath(),\n\t\t\tfield.contextPath.getPath(),\n\t\t\tsemanticObject\n\t\t).createContent() as MdcLink;\n\t},\n\n\t/**\n\t * Generates the LabelSemantickey template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetLabelSemanticKey(field: FieldBlockProperties): string {\n\t\tconst contentTrue = (\n\t\t\t<Link\n\t\t\t\ttext={field.text}\n\t\t\t\twrapping=\"true\"\n\t\t\t\tcore:require=\"{FieldRuntimeHelper: 'sap/fe/macros/field/FieldRuntimeHelper'}\"\n\t\t\t\tpress={field.eventHandlers.linkPressed}\n\t\t\t\tariaLabelledBy={field.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t\taccessibleRole={LinkAccessibleRole.Button}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [<CustomData key={\"loadValue\"} value={field.valueAsStringBindingExpression} />],\n\t\t\t\t\tdependents: DisplayStyle.getMdcLinkForQuickView(field)\n\t\t\t\t}}\n\t\t\t</Link>\n\t\t);\n\t\tconst contentFalse = <Label id={field.displayStyleId} visible={field.displayVisible} text={field.identifierTitle} design=\"Bold\" />;\n\t\tif (field.hasQuickView) {\n\t\t\tconst hasQuickview = this.getQuickViewCondition(field);\n\t\t\tif (hasQuickview === \"true\") {\n\t\t\t\treturn contentTrue;\n\t\t\t} else {\n\t\t\t\treturn this.getConditionalWrapperForQuickViewTemplate(field, hasQuickview as string, contentTrue, contentFalse);\n\t\t\t}\n\t\t}\n\t\treturn <Label id={field.displayStyleId} visible={field.displayVisible} text={field.identifierTitle} design=\"Bold\" />;\n\t},\n\t/**\n\t * Gets the template for the semantic key with draft indicator.\n\t * @param semanticKeyTemplate The template result without draft indicator\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\taddDraftIndicator(semanticKeyTemplate: string, field: FieldBlockProperties): string {\n\t\tif (!field.formatOptions.fieldGroupDraftIndicatorPropertyPath) {\n\t\t\t// if the draftIndicator is not handled at the fieldGroup level\n\t\t\t//TODO could this be a boolean no draftIndicator\n\t\t\tsemanticKeyTemplate = (\n\t\t\t\t<FormElementWrapper visible={field.displayVisible}>\n\t\t\t\t\t<VBox class={FieldHelper.getMarginClass(field.formatOptions.compactSemanticKey)}>\n\t\t\t\t\t\t{semanticKeyTemplate}\n\t\t\t\t\t\t<DraftIndicator\n\t\t\t\t\t\t\tdraftIndicatorType={ObjectMarkerVisibility.IconAndText}\n\t\t\t\t\t\t\tcontextPath={field.contextPath.getPath()}\n\t\t\t\t\t\t\tvisible={field.draftIndicatorVisible}\n\t\t\t\t\t\t\tariaLabelledBy={field.ariaLabelledBy ? field.ariaLabelledBy : []}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</VBox>\n\t\t\t\t</FormElementWrapper>\n\t\t\t);\n\t\t}\n\t\treturn semanticKeyTemplate;\n\t},\n\n\t/**\n\t * Computes the text property with the appropriate white space handling.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tcomputeTextWithWhiteSpace(field: FieldBlockProperties): CompiledBindingToolkitExpression {\n\t\tconst text = FieldTemplating.getTextBinding(\n\t\t\t(field.dataModelPathExternalID as DataModelObjectPath<Property>) ?? field.dataModelPath,\n\t\t\tfield.formatOptions,\n\t\t\ttrue\n\t\t);\n\t\treturn isPathInModelExpression(text) || typeof text === \"string\"\n\t\t\t? compileExpression(formatResult([text], valueFormatters.replaceWhitespace))\n\t\t\t: compileExpression(text);\n\t},\n\t/**\n\t * Gets the condition for having an active link that opens the quick view.\n\t * @param field\n\t * @returns A compile binding expression for the condition.\n\t */\n\tgetQuickViewCondition(field: FieldBlockProperties): CompiledBindingToolkitExpression {\n\t\tswitch (field.quickViewType) {\n\t\t\tcase \"Facets\":\n\t\t\t\t//there is quick viewFacets annotation only then we check if the navigation is reachable\n\t\t\t\treturn this.getForeignKeyValueExpression(field);\n\n\t\t\tcase \"SemanticLinks\":\n\t\t\t\tif (field.dynamicSemanticObjects) {\n\t\t\t\t\tconst listOfDynamicSemanticObjects: BindingToolkitExpression<string>[] = [];\n\t\t\t\t\tif (field.semanticObject) {\n\t\t\t\t\t\t// If we see a dynamic expression with a formatter, we return false. The condition will be resolved later in TextLink control.\n\t\t\t\t\t\treturn compileExpression(constant(false));\n\t\t\t\t\t}\n\t\t\t\t\tfor (const semanticObjectExpression of field.dynamicSemanticObjects) {\n\t\t\t\t\t\tif (semanticObjectExpression._type === \"PathInModel\" || semanticObjectExpression._type === \"Constant\") {\n\t\t\t\t\t\t\tlistOfDynamicSemanticObjects.push(semanticObjectExpression);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// If we see a dynamic expression ($edmJson), we return true.\n\t\t\t\t\t\t\treturn compileExpression(constant(true));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst semanticObjectsPath = [\n\t\t\t\t\t\tpathInModel<Context[]>(\"/semanticObjects\", \"internal\") as BindingToolkitExpression<string>\n\t\t\t\t\t].concat(listOfDynamicSemanticObjects);\n\t\t\t\t\treturn compileExpression(formatResult(semanticObjectsPath, valueFormatters.hasSemanticObjects));\n\t\t\t\t}\n\t\t\t\treturn \"true\";\n\t\t\tdefault:\n\t\t\t\t// \"facetsAndSemanticLinks\"\n\t\t\t\t// if there is both facets and semantic links, we do not check if the navigation is reachable\n\t\t\t\treturn \"true\";\n\t\t}\n\t},\n\n\t/**\n\t * Entry point for further templating processings.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetTemplate: (field: FieldBlockProperties): string => {\n\t\tlet innerFieldContent;\n\t\tswitch (field.displayStyle as DisplayStyleType) {\n\t\t\tcase \"NumberWithUnitOrCurrencyAligned\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getNumberWithUnitOrCurrencyAlignedTemplate(field);\n\t\t\t\tbreak;\n\t\t\tcase \"Avatar\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getAvatarTemplate(field);\n\t\t\t\tbreak;\n\t\t\tcase \"Button\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getButtonTemplate(field);\n\t\t\t\tbreak;\n\t\t\tcase \"Contact\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getContactTemplate(field);\n\t\t\t\tbreak;\n\t\t\tcase \"DataPoint\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getDataPointTemplate(field);\n\t\t\t\tbreak;\n\t\t\tcase \"ExpandableText\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getExpandableText(field);\n\t\t\t\tbreak;\n\t\t\tcase \"File\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getFileTemplate(field);\n\t\t\t\tbreak;\n\t\t\tcase \"Link\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getLinkTemplate(field);\n\t\t\t\tbreak;\n\t\t\tcase \"LinkWithQuickView\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getLinkWithQuickViewTemplate(field);\n\t\t\t\tbreak;\n\t\t\tcase \"ObjectIdentifier\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getObjectIdentifier(field);\n\t\t\t\tbreak;\n\t\t\tcase \"ObjectStatus\": {\n\t\t\t\tinnerFieldContent = DisplayStyle.getObjectStatus(field);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"LabelSemanticKey\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getLabelSemanticKey(field);\n\t\t\t\tbreak;\n\t\t\tcase \"Text\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getTextTemplate(field);\n\t\t\t\tbreak;\n\t\t\tcase \"Masked\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getPasswordTemplate(field);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tinnerFieldContent = \"\";\n\t\t}\n\t\tif (field.addDraftIndicator && innerFieldContent) {\n\t\t\tinnerFieldContent = DisplayStyle.addDraftIndicator(innerFieldContent, field);\n\t\t}\n\n\t\treturn innerFieldContent;\n\t}\n};\n\nexport default DisplayStyle;\n"],"mappings":"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","ignoreList":[]}
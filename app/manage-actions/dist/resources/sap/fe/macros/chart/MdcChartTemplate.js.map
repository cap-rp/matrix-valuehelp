{"version":3,"file":"MdcChartTemplate.js","names":["measureRole","personalizationValues","createChartDefinition","chartBlock","converterContext","contextObjectPath","controlPath","visualizationPath","getContextRelativeTargetObjectPath","visualizations","_metaPathContext","getObject","$Type","Visualizations","PresentationVariant","length","checkChartExists","visualizationDefinition","getDataVisualizationConfiguration","isCondensedTableLayoutCompliant","useCondensedLayout","isMacroOrMultipleView","shouldCreateTemplateChartVisualization","some","visualization","includes","$AnnotationPath","getContentId","macroId","getExtraParams","extraParams","customActions","actions","Object","values","forEach","action","isA","key","getActionProperties","text","placement","anchor","map","_","index","act","actionKey","concat","press","requiresSelection","enabled","undefined","position","menu","actionProperties","__noWrap","createBindingContext","data","contextPath","uid","actionsModel","JSONModel","setProperty","getChartMeasures","aggregationHelper","chartAnnotationPath","chartDefinition","annotationPath","split","filter","item","pos","indexOf","toString","replaceAll","oChart","getInvolvedDataModelObjects","_metaModel","_context","targetObject","aggregatedProperty","getAggregatedProperty","measures","annoPath","getPath","aggregatedProperties","getAggregatedProperties","chartMeasures","Measures","chartDynamicMeasures","DynamicMeasures","transAggInMeasures","properties","propertyMeasureType","Name","value","entitySetPath","replace","transAggregations","transAgg","customAggregations","customAgg","Log","warning","isCustomAggregateIsMeasure","oChartMeasure","oCustomAggMeasure","getCustomAggMeasure","Error","dynamicMeasure","getDynamicMeasures","chartMeasure","customAggMeasure","measureType","setCustomAggMeasure","setTransAggMeasure","setChartMeasureAttributes","_chart","MeasureAttributes","measuresModel","$$valueAsPromise","measure","error","role","label","propertyPath","push","transAggMeasure","name","aggregationMethod","chartDynamicMeasure","chart","startsWith","AggregatableProperty","AggregationMethod","resolveBindingString","annotations","Common","Label","$target","measureAttributes","measureAttribute","_setChartMeasureAttribute","path","DynamicMeasure","Measure","measureAttributeDataPoint","DataPoint","Role","dataPoint","setMeasureRole","setMeasureDataPoint","createDataPointProperty","oDataPointAnno","oDataPoint","TargetValue","targetValue","$Path","ForecastValue","foreCastValue","oCriticality","Criticality","isPathAnnotationExpression","Calculated","Static","$EnumMember","CriticalityCalculation","oThresholds","bConstant","buildThresholds","ConstantThresholds","DynamicThresholds","criticality","thresholds","criticalityCalculation","keys","ImprovementDirection","dynamicThresholds","oneSupplied","usedMeasures","constantThresholds","initialiseThresholds","processThresholds","AggregationLevels","processAggregationLevelForThresholds","oAggregationLevel","VisibleDimensions","sKey","processAggregationLevelsForConstantThresholds","aggregationLevel","aggregationLevelInfo","visibleDimensions","AggregationLevel","$PropertyPath","Value","ChartHelper","formatJSONToString","getDependents","chartContext","_commandActions","commandAction","getActionCommand","checkPersonalizationInChartProperties","personalization","_personalization","join","verifyValidPersonalization","valid","splitArray","acceptedValues","arrayElement","getVariantManagement","variantManagement","createVariantManagement","_jsx","VariantManagement","id","generate","_blockId","for","showSetAsDefault","headerLevel","select","event","fireVariantSelected","save","fireVariantSaved","getPersistenceProvider","PersistenceProvider","pushActionCommand","actionContext","dataField","chartOperationAvailableMap","onExecuteAction","getPressEventForDataFieldForActionButton","onExecuteIBN","CommonHelper","getPressHandlerForDataFieldForIBN","onExecuteManifest","buildActionWrapper","dataFieldContext","dataFieldAction","getActionContext","isBoundPath","getPathToBoundActionOverload","isBound","escapeXMLAttributeValue","getOperationAvailableMap","context","isActionEnabled","isDataFieldForActionButtonEnabled","$IsBound","Action","enableOnSelect","isIBNEnabled","RequiresContext","commandEnabled","type","actionCommand","CommandExecution","execute","commandExecute","visible","getVisible","command","IsBound","view","CommonUtils","getTargetView","getSource","controller","getController","sInvocationGrouping","InvocationGrouping","params","contexts","getBindingContext","getProperty","invocationGrouping","controlId","operationAvailableMap","model","getModel","editFlow","invokeAction","navigationParameters","navigationContexts","Mapping","semanticObjectMapping","JSON","stringify","_intentBasedNavigation","navigate","SemanticObject","FPMHelper","actionWrapper","handlerModule","handlerMethod","getItems","dimensions","Dimensions","formatDimensions","_chartContext","dimension","getItem","formatMeasures","prefix","MdcChartItem","propertyKey","getToolbarActions","getActions","onSegmentedButtonPressed","getSegmentedButton","isInsightsEnabled","getStandardActions","isInsightsVisible","ActionToolbarAction","children","Button","onAddCardToInsightsPressed","layoutData","OverflowToolbarLayoutData","priority","removeMenuItems","chartActions","getAction","hasOwnProperty","getCustomActions","idx","splice","actionEnabled","getActionToolbarAction","unittestid","ariaHasPopup","getActionToolbarMenuAction","useDefaultActionOnly","DefaultActionHandler","getUseDefaultActionOnly","buttonMode","getButtonMode","defaultAction","getMenuItemFromMenu","menuItemAction","pressHandler","noWrap","functionName","selectedContexts","MenuItem","props","aMenuItems","MenuButton","menuPosition","Dock","BeginBottom","Menu","isMenuItem","getNavigationActions","getAnnotationActions","menuItems","menuAction","icon","isAIOperation","aiIcon","actionObject","getAnnotationActionsEnabled","dataFieldModelObjectPath","isDataModelObjectPathForActionWithDialog","toolbarAction","pressEvent","buildAction","getActionPress","actionPress","getCustomActionPress","getActionPressWithAnnotationPath","getStandardActionPressWithNoCommand","layoutInformation","aggregationName","alignment","SegmentedButton","selectionChange","fireSegmentedButtonPressed","merge","getParameters","selectedKey","getSelectedKey","notEqual","pathInModel","items","getSegmentedButtonItems","segmentedButtonItems","isDesktop","getSegmentedButtonItem","tooltip","SegmentedButtonItem","getVisualizationPath","metaPath","term","resolvedTarget","getEntityTypeAnnotation","getVisualizationsFromAnnotation","chartViz","find","viz","hiddenPathContext","getHiddenPathExpressionForTableActionsAndIBN","getChartConverterContext","originalViewData","diagnostics","viewData","assign","resourceModel","appComponent","deepClone","controlConfiguration","relativePath","getTargetObjectPath","contextLocation","entitySetName","targetEntitySet","entitySet","ConverterContext","createConverterContextForMacro","startingEntitySet","ManifestWrapper","getConverterContext","initialConverterContext","modifyIdentifiers","_applyIdToContent","_contentId","initialise","metaContextPath","getMetaPathObject","_resolvedContextPath","_getOwner","preprocessorContext","models","metaModel","getContextPath","viewConfig","getManifestWrapper","getViewConfiguration","isMultiTabs","paths","hasMultipleVisualizations","getTemplateType","TemplateType","AnalyticalListPage","AggregationHelper","getEntityType","getUiChart","_blockActions","collection","navigationPath","autoBindOnInit","vizProperties","getFilterBar","slice","draftSupported","ModelHelper","isDraftSupported","_chartType","formatChartType","ChartType","commandActions","presentationPath","createPresentationPathContext","_sortConditions","getSortConditions","applySupported","chartActionsContext","Actions","targetCollectionPath","getTargetCollectionPath","targetCollectionPathContext","actionsObject","convertedTypes","resolvePath","target","_customData","entityType","parse","multiSelectDisabledActions","ActionHelper","getMultiSelectDisabledActions","segmentedButtonId","multiViews","selectionPresentationVariantPath","chartDimensionKeyAndRole","chartMeasureKeyAndRole","isParameterizedEntitySet","substring","filterBar","Element","getElementById","getDelegate","chartDelegate","payload","selectionMode","toUpperCase","chartContextPath","parameters","$$groupId","getCustomData","CustomData","getNoData","IllustratedMessage","illustrationSize","IllustratedMessageSize","Auto","illustrationType","IllustratedMessageType","BeforeSearch","title","getTranslatedText","description","enableDefaultTitleAndDescription","enableVerticalResponsiveness","getMdcChartTemplate","FlexItemData","growFactor","shrinkFactor","MdcChart","binding","internal","chartType","sortConditions","header","Title","headerVisible","minHeight","Device","system","phone","height","width","headerStyle","p13nMode","noDataText","delegate","customData","dependents","variant","noData","_exports"],"sources":["./MdcChartTemplate.tsx"],"sourcesContent":["import type { PrimitiveType, PropertyPath } from \"@sap-ux/vocabularies-types\";\nimport type { AggregatedProperty } from \"@sap-ux/vocabularies-types/vocabularies/Analytics\";\nimport { AnalyticsAnnotationTerms } from \"@sap-ux/vocabularies-types/vocabularies/Analytics\";\nimport { CoreAnnotationTerms } from \"@sap-ux/vocabularies-types/vocabularies/Core\";\nimport type {\n\tChartMeasureAttributeType,\n\tChartMeasureRoleType,\n\tChart as ChartType,\n\tCriticalityCalculationType,\n\tCriticalityType,\n\tDataFieldAbstractTypes,\n\tDataFieldForAction,\n\tDataFieldForIntentBasedNavigation,\n\tDataPoint,\n\tImprovementDirectionType,\n\tLevelThresholdsType,\n\tPresentationVariant,\n\tSelectionPresentationVariant\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { OperationGroupingType, UIAnnotationTerms, UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport deepClone from \"sap/base/util/deepClone\";\nimport merge from \"sap/base/util/merge\";\nimport uid from \"sap/base/util/uid\";\nimport {\n\tnotEqual,\n\tpathInModel,\n\tresolveBindingString,\n\ttype BindingToolkitExpression,\n\ttype CompiledBindingToolkitExpression\n} from \"sap/fe/base/BindingToolkit\";\nimport type { CommandProperties } from \"sap/fe/base/jsx-runtime/jsx\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport { escapeXMLAttributeValue } from \"sap/fe/core/buildingBlocks/templating/BuildingBlockTemplateProcessor\";\nimport type { NavigationParameters } from \"sap/fe/core/controllerextensions/InternalIntentBasedNavigation\";\nimport CommandExecution from \"sap/fe/core/controls/CommandExecution\";\nimport ConverterContext from \"sap/fe/core/converters/ConverterContext\";\nimport type { BaseManifestSettings, ControlConfiguration } from \"sap/fe/core/converters/ManifestSettings\";\nimport { TemplateType } from \"sap/fe/core/converters/ManifestSettings\";\nimport ManifestWrapper from \"sap/fe/core/converters/ManifestWrapper\";\nimport { getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport { isDataModelObjectPathForActionWithDialog } from \"sap/fe/core/converters/annotations/DataField\";\nimport { aiIcon, type AnnotationAction, type BaseAction, type CustomAction } from \"sap/fe/core/converters/controls/Common/Action\";\nimport type { ChartP13nType, ChartVisualization } from \"sap/fe/core/converters/controls/Common/Chart\";\nimport type { VisualizationAndPath } from \"sap/fe/core/converters/controls/Common/DataVisualization\";\nimport {\n\tgetDataVisualizationConfiguration,\n\tgetVisualizationsFromAnnotation\n} from \"sap/fe/core/converters/controls/Common/DataVisualization\";\nimport { AggregationHelper } from \"sap/fe/core/converters/helpers/Aggregation\";\nimport FPMHelper from \"sap/fe/core/helpers/FPMHelper\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport { generate } from \"sap/fe/core/helpers/StableIdHelper\";\nimport { isPathAnnotationExpression } from \"sap/fe/core/helpers/TypeGuards\";\nimport type { ViewData } from \"sap/fe/core/services/TemplatedViewServiceFactory\";\nimport type Diagnostics from \"sap/fe/core/support/Diagnostics\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { getContextRelativeTargetObjectPath, getTargetObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport CommonHelper from \"sap/fe/macros/CommonHelper\";\nimport type Action from \"sap/fe/macros/chart/Action\";\nimport type ActionGroup from \"sap/fe/macros/chart/ActionGroup\";\nimport type { Button$PressEvent } from \"sap/m/Button\";\nimport Button from \"sap/m/Button\";\nimport FlexItemData from \"sap/m/FlexItemData\";\nimport IllustratedMessage from \"sap/m/IllustratedMessage\";\nimport IllustratedMessageSize from \"sap/m/IllustratedMessageSize\";\nimport IllustratedMessageType from \"sap/m/IllustratedMessageType\";\nimport Menu from \"sap/m/Menu\";\nimport MenuButton from \"sap/m/MenuButton\";\nimport MenuItem from \"sap/m/MenuItem\";\nimport OverflowToolbarLayoutData from \"sap/m/OverflowToolbarLayoutData\";\nimport type { SegmentedButton$SelectionChangeEvent } from \"sap/m/SegmentedButton\";\nimport SegmentedButton from \"sap/m/SegmentedButton\";\nimport SegmentedButtonItem from \"sap/m/SegmentedButtonItem\";\nimport Device from \"sap/ui/Device\";\nimport type { CommandExecution$ExecuteEvent } from \"sap/ui/core/CommandExecution\";\nimport CustomData from \"sap/ui/core/CustomData\";\nimport Element from \"sap/ui/core/Element\";\nimport { Dock } from \"sap/ui/core/Popup\";\nimport type { VariantManagement$SaveEvent, VariantManagement$SelectEvent } from \"sap/ui/fl/variants/VariantManagement\";\nimport VariantManagement from \"sap/ui/fl/variants/VariantManagement\";\nimport MdcChart from \"sap/ui/mdc/Chart\";\nimport type Control from \"sap/ui/mdc/Control\";\nimport ActionToolbarAction from \"sap/ui/mdc/actiontoolbar/ActionToolbarAction\";\nimport MdcChartItem from \"sap/ui/mdc/chart/Item\";\nimport PersistenceProvider from \"sap/ui/mdc/p13n/PersistenceProvider\";\nimport type Context from \"sap/ui/model/Context\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type { ExpandPathType, MetaModelEnum, MetaModelType } from \"../../../../../../../types/metamodel_types\";\nimport type ChartBlock from \"../Chart\";\nimport type MacroAPI from \"../MacroAPI\";\nimport ActionHelper from \"../internal/helpers/ActionHelper\";\nimport DefaultActionHandler from \"../internal/helpers/DefaultActionHandler\";\nimport ChartHelper from \"./ChartHelper\";\n\nconst measureRole: { [key: string]: string } = {\n\t\"com.sap.vocabularies.UI.v1.ChartMeasureRoleType/Axis1\": \"axis1\",\n\t\"com.sap.vocabularies.UI.v1.ChartMeasureRoleType/Axis2\": \"axis2\",\n\t\"com.sap.vocabularies.UI.v1.ChartMeasureRoleType/Axis3\": \"axis3\",\n\t\"com.sap.vocabularies.UI.v1.ChartMeasureRoleType/Axis4\": \"axis4\"\n};\ntype ExtendedActionGroup = ActionGroup & { menuContentActions?: Record<string, Action> };\ntype ChartPayload = {\n\tchartContextPath: string;\n\tparameters: object;\n\tselectionMode: string;\n};\ntype ChartDelegate = {\n\tname: string;\n\tpayload: ChartPayload;\n};\nexport type ActionOrActionGroup = Record<string, Action | ExtendedActionGroup>;\nexport type CustomAndAction = CustomAction & (Action | ActionGroup);\ntype CustomToolbarMenuAction = {\n\tid: string;\n\ttext: string | undefined;\n\tvisible: string | undefined;\n\tenabled?: string | boolean;\n\tuseDefaultActionOnly?: boolean;\n\tbuttonMode?: string;\n\tdefaultAction?: string;\n\tactions?: CustomAction;\n};\n\nenum personalizationValues {\n\tSort = \"Sort\",\n\tType = \"Type\",\n\tItem = \"Item\",\n\tFilter = \"Filter\"\n}\n\nexport type MeasureType = {\n\tid?: string;\n\tkey?: string;\n\trole?: string;\n\tpropertyPath?: string;\n\taggregationMethod?: string;\n\tlabel?: string | BindingToolkitExpression<PrimitiveType>;\n\tvalue?: string;\n\tdataPoint?: string;\n\tname?: string;\n};\n\ntype DimensionType = {\n\tid?: string;\n\tkey?: string;\n\trole?: string;\n\tpropertyPath?: string;\n\tlabel?: string | BindingToolkitExpression<PrimitiveType>;\n\tvalue?: string;\n};\n\nexport type CommandAction = {\n\tactionContext: Context;\n\tonExecuteAction: string;\n\tonExecuteIBN?: string;\n\tonExecuteManifest: CompiledBindingToolkitExpression;\n\tchartOperationAvailableMap?: string;\n};\n\ntype ToolBarAction = {\n\tunittestid: string;\n\tid?: string;\n\tlabel: string;\n\tariaHasPopup?: string;\n\tpress?: string;\n\tenabled?: string | boolean;\n\tvisible: string | boolean;\n};\n\nexport type ChartCustomData = {\n\ttargetCollectionPath: string;\n\tentitySet: string;\n\tentityType: string;\n\toperationAvailableMap: string;\n\tmultiSelectDisabledActions: string;\n\tsegmentedButtonId: string;\n\tcustomAgg: object;\n\ttransAgg: object;\n\tapplySupported: object;\n\tvizProperties: object;\n\tdraftSupported?: boolean;\n\tmultiViews?: boolean;\n\tselectionPresentationVariantPath?: object;\n\tchartDimensionKeyAndRole?: object;\n\tchartMeasureKeyAndRole?: object;\n};\n\nexport type ChartContextObjectPath = ChartType | SelectionPresentationVariant | PresentationVariant;\n\ntype ActionProperties = {\n\tkey: string;\n\ttext: string;\n\t__noWrap: boolean;\n\tpress: string | null;\n\trequiresSelection: boolean;\n\tenabled: boolean;\n\tposition?: object;\n\tmenu?: string[];\n};\n\ntype ToolbarAction = MenuItem | ActionToolbarAction | undefined;\n\nfunction createChartDefinition(\n\tchartBlock: ChartBlock,\n\tconverterContext: ConverterContext,\n\tcontextObjectPath: DataModelObjectPath<ChartType | SelectionPresentationVariant | PresentationVariant>,\n\tcontrolPath: string\n): ChartVisualization {\n\tlet visualizationPath = getContextRelativeTargetObjectPath(contextObjectPath);\n\tlet visualizations: Record<string, string>[] = [];\n\tif (chartBlock._metaPathContext?.getObject()?.$Type === UIAnnotationTypes.PresentationVariantType) {\n\t\tvisualizations = chartBlock._metaPathContext.getObject().Visualizations;\n\t} else if (chartBlock._metaPathContext?.getObject()?.$Type === UIAnnotationTypes.SelectionPresentationVariantType) {\n\t\tvisualizations = chartBlock._metaPathContext.getObject().PresentationVariant?.Visualizations;\n\t}\n\tif (visualizations?.length && !checkChartExists(visualizations, controlPath)) {\n\t\tvisualizationPath = \"\";\n\t}\n\n\t// fallback to default Chart if visualizationPath is missing or visualizationPath is not found in control (in case of PresentationVariant)\n\tif (!visualizationPath) {\n\t\tvisualizationPath = `@${UIAnnotationTerms.Chart}`;\n\t}\n\n\tconst visualizationDefinition = getDataVisualizationConfiguration(visualizationPath, converterContext, {\n\t\tisCondensedTableLayoutCompliant: chartBlock.useCondensedLayout,\n\t\tisMacroOrMultipleView: true,\n\t\tshouldCreateTemplateChartVisualization: false\n\t});\n\treturn visualizationDefinition.visualizations[0] as ChartVisualization;\n}\n\nfunction checkChartExists(visualizations: Record<string, string>[], visualizationPath: string | undefined): boolean {\n\treturn visualizations.some((visualization) => visualizationPath?.includes(visualization.$AnnotationPath));\n}\n\nfunction getContentId(macroId: string): string {\n\treturn `${macroId}-content`;\n}\n\n/**\n * Function used to get details WRT action(s) shown in the chart's toolbar.\n * @param chartBlock Chart block properties\n * @param visualizationPath Visualization path\n * @returns Object with all the required action(s) details\n */\nfunction getExtraParams(chartBlock: ChartBlock, visualizationPath: string | undefined): Record<string, object> {\n\tconst extraParams: Record<string, object> = {};\n\tconst customActions: Record<string, object> = {};\n\n\tif (chartBlock.actions) {\n\t\tObject.values(chartBlock.actions)?.forEach((action: Action | ActionGroup) => {\n\t\t\tif (action.isA<ActionGroup>(\"sap.fe.macros.chart.ActionGroup\")) {\n\t\t\t\tcustomActions[action.key] = getActionProperties(\n\t\t\t\t\taction.key,\n\t\t\t\t\taction.text,\n\t\t\t\t\tnull,\n\t\t\t\t\tfalse,\n\t\t\t\t\ttrue,\n\t\t\t\t\t{\n\t\t\t\t\t\tplacement: action.placement,\n\t\t\t\t\t\tanchor: action.anchor\n\t\t\t\t\t},\n\t\t\t\t\taction.actions.map((_, index) => action.key + \"_Menu_\" + index)\n\t\t\t\t);\n\n\t\t\t\taction.actions?.forEach((act: Action, index: number) => {\n\t\t\t\t\tconst actionKey = action.key.concat(\"_Menu_\", index as unknown as string);\n\t\t\t\t\tcustomActions[actionKey] = getActionProperties(\n\t\t\t\t\t\tactionKey,\n\t\t\t\t\t\tact.text,\n\t\t\t\t\t\tact.press,\n\t\t\t\t\t\t!!act.requiresSelection,\n\t\t\t\t\t\tact.enabled === null || act.enabled === undefined ? true : act.enabled\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else if (action.isA<Action>(\"sap.fe.macros.chart.Action\")) {\n\t\t\t\tcustomActions[action.key] = getActionProperties(\n\t\t\t\t\taction.key,\n\t\t\t\t\taction.text,\n\t\t\t\t\taction.press,\n\t\t\t\t\t!!action.requiresSelection,\n\t\t\t\t\taction.enabled === null || action.enabled == undefined ? true : action.enabled,\n\t\t\t\t\t{\n\t\t\t\t\t\tplacement: action.placement,\n\t\t\t\t\t\tanchor: action.anchor\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n\tif (visualizationPath && chartBlock.actions) {\n\t\textraParams[visualizationPath] = {\n\t\t\tactions: customActions\n\t\t};\n\t}\n\n\treturn extraParams;\n}\n\nfunction getActionProperties(\n\tkey: string,\n\ttext: string,\n\tpress: string | null,\n\trequiresSelection: boolean,\n\tenabled: boolean,\n\tposition?: object,\n\tmenu?: string[]\n): ActionProperties {\n\tconst actionProperties: ActionProperties = {\n\t\tkey,\n\t\ttext,\n\t\t__noWrap: true,\n\t\tpress,\n\t\trequiresSelection,\n\t\tenabled\n\t};\n\n\tif (position) {\n\t\tactionProperties.position = position;\n\t}\n\tif (menu) {\n\t\tactionProperties.menu = menu;\n\t}\n\n\treturn actionProperties;\n}\n\nfunction createBindingContext(data: object | BaseAction[] | CustomAction): Context {\n\tconst contextPath = `/${uid()}`;\n\tconst actionsModel = new JSONModel();\n\tactionsModel.setProperty(contextPath, data);\n\treturn actionsModel.createBindingContext(contextPath)!;\n}\n\nfunction getChartMeasures(chartBlock: ChartBlock, aggregationHelper: AggregationHelper): Context {\n\tconst chartAnnotationPath = chartBlock.chartDefinition.annotationPath.split(\"/\");\n\t// this is required because getAbsolutePath in converterContext returns \"/SalesOrderManage/_Item/_Item/@com.sap.vocabularies.v1.Chart\" as annotationPath\n\tconst annotationPath = chartAnnotationPath\n\t\t.filter(function (item: string, pos: number): boolean {\n\t\t\treturn chartAnnotationPath.indexOf(item) == pos;\n\t\t})\n\t\t.toString()\n\t\t.replaceAll(\",\", \"/\");\n\tconst oChart = getInvolvedDataModelObjects<ChartType>(\n\t\tchartBlock._metaModel.createBindingContext(annotationPath)!,\n\t\tchartBlock._context\n\t).targetObject;\n\tconst aggregatedProperty = aggregationHelper.getAggregatedProperty();\n\tlet measures: MeasureType[] = [];\n\tconst annoPath = chartBlock._metaPathContext.getPath();\n\tconst aggregatedProperties = aggregationHelper.getAggregatedProperties();\n\tconst chartMeasures = oChart?.Measures ? oChart.Measures : [];\n\tconst chartDynamicMeasures = oChart?.DynamicMeasures ? oChart.DynamicMeasures : [];\n\t//check if there are measures pointing to aggregated properties\n\tconst transAggInMeasures = aggregatedProperties[0]\n\t\t? aggregatedProperties[0].filter(function (properties) {\n\t\t\t\treturn chartMeasures.some(function (propertyMeasureType: MeasureType) {\n\t\t\t\t\treturn properties.Name === propertyMeasureType.value;\n\t\t\t\t});\n\t\t  })\n\t\t: undefined;\n\tconst entitySetPath = annoPath.replace(/@com.sap.vocabularies.UI.v1.(Chart|PresentationVariant|SelectionPresentationVariant).*/, \"\");\n\tconst transAggregations = chartBlock.chartDefinition.transAgg as Record<string, MeasureType>;\n\tconst customAggregations = chartBlock.chartDefinition.customAgg as Record<string, Record<string, unknown>>;\n\t// intimate the user if there is AggregateProperty configured with no DYnamicMeasures, bu there are measures with AggregatedProperties\n\tif (aggregatedProperty.length > 0 && !chartDynamicMeasures && transAggInMeasures && transAggInMeasures.length > 0) {\n\t\tLog.warning(\n\t\t\t\"The transformational aggregate measures are configured as Chart.Measures but should be configured as Chart.DynamicMeasures instead. Please check the SAP Help documentation and correct the configuration accordingly.\"\n\t\t);\n\t}\n\tconst isCustomAggregateIsMeasure = chartMeasures.some((oChartMeasure: MeasureType) => {\n\t\tconst oCustomAggMeasure = getCustomAggMeasure(customAggregations, oChartMeasure);\n\t\treturn !!oCustomAggMeasure;\n\t});\n\tif (aggregatedProperty.length > 0 && !chartDynamicMeasures?.length && !isCustomAggregateIsMeasure) {\n\t\tthrow new Error(\"Please configure DynamicMeasures for the chart\");\n\t}\n\tif (aggregatedProperty.length > 0 && oChart) {\n\t\tfor (const dynamicMeasure of chartDynamicMeasures) {\n\t\t\tmeasures = getDynamicMeasures(measures, dynamicMeasure, entitySetPath, oChart, chartBlock);\n\t\t}\n\t}\n\tfor (const chartMeasure of chartMeasures) {\n\t\tconst key = chartMeasure.value;\n\t\tconst customAggMeasure = getCustomAggMeasure(customAggregations, chartMeasure);\n\t\tconst measureType: MeasureType = {};\n\t\tif (customAggMeasure) {\n\t\t\tmeasures = setCustomAggMeasure(measures, measureType, customAggMeasure, key);\n\t\t\t//if there is neither aggregatedProperty nor measures pointing to customAggregates, but we have normal measures. Now check if these measures are part of AggregatedProperties Obj\n\t\t} else if (aggregatedProperty.length === 0 && transAggregations[key]) {\n\t\t\tmeasures = setTransAggMeasure(measures, measureType, transAggregations, key);\n\t\t}\n\t\tsetChartMeasureAttributes(chartBlock._chart.MeasureAttributes, entitySetPath, measureType, chartBlock);\n\t}\n\tconst measuresModel: JSONModel = new JSONModel(measures);\n\t(measuresModel as { $$valueAsPromise?: boolean }).$$valueAsPromise = true;\n\treturn measuresModel.createBindingContext(\"/\");\n}\n\nfunction setCustomAggMeasure(measures: MeasureType[], measure: MeasureType, customAggMeasure: MeasureType, key: string): MeasureType[] {\n\tif (key.includes(\"/\")) {\n\t\tLog.error(`$expand is not yet supported. Measure: ${key} from an association cannot be used`);\n\t}\n\tmeasure.key = customAggMeasure.value;\n\tmeasure.role = \"axis1\";\n\tmeasure.label = customAggMeasure.label;\n\tmeasure.propertyPath = customAggMeasure.value;\n\tmeasures.push(measure);\n\treturn measures;\n}\n\nfunction setTransAggMeasure(\n\tmeasures: MeasureType[],\n\tmeasure: MeasureType,\n\ttransAggregations: Record<string, MeasureType>,\n\tkey: string\n): MeasureType[] {\n\tconst transAggMeasure = transAggregations[key];\n\tmeasure.key = transAggMeasure.name;\n\tmeasure.role = \"axis1\";\n\tmeasure.propertyPath = key;\n\tmeasure.aggregationMethod = transAggMeasure.aggregationMethod;\n\tmeasure.label = transAggMeasure.label || measure.label;\n\tmeasures.push(measure);\n\treturn measures;\n}\n\nfunction getDynamicMeasures(\n\tmeasures: MeasureType[],\n\tchartDynamicMeasure: MeasureType,\n\tentitySetPath: string,\n\tchart: ChartType,\n\tchartBlock: ChartBlock\n): MeasureType[] {\n\tconst key = chartDynamicMeasure.value || \"\";\n\tconst aggregatedProperty = getInvolvedDataModelObjects<AggregatedProperty>(\n\t\tchartBlock._metaModel.createBindingContext(entitySetPath + key) as Context,\n\t\tchartBlock._context\n\t).targetObject;\n\tif (key.includes(\"/\")) {\n\t\tLog.error(`$expand is not yet supported. Measure: ${key} from an association cannot be used`);\n\t\t// check if the annotation path is wrong\n\t} else if (!aggregatedProperty) {\n\t\tthrow new Error(`Please provide the right AnnotationPath to the Dynamic Measure ${chartDynamicMeasure.value}`);\n\t\t// check if the path starts with @\n\t} else if (chartDynamicMeasure.value?.startsWith(`@${AnalyticsAnnotationTerms.AggregatedProperty}`) === null) {\n\t\tthrow new Error(`Please provide the right AnnotationPath to the Dynamic Measure ${chartDynamicMeasure.value}`);\n\t} else {\n\t\t// check if AggregatedProperty is defined in given DynamicMeasure\n\t\tconst dynamicMeasure: MeasureType = {\n\t\t\tkey: aggregatedProperty.Name.toString(),\n\t\t\trole: \"axis1\"\n\t\t};\n\t\tdynamicMeasure.propertyPath = aggregatedProperty.AggregatableProperty.value;\n\t\tdynamicMeasure.aggregationMethod = aggregatedProperty.AggregationMethod.toString();\n\t\tdynamicMeasure.label = resolveBindingString(\n\t\t\taggregatedProperty.annotations?.Common?.Label?.toString() ??\n\t\t\t\taggregatedProperty.AggregatableProperty.$target?.annotations?.Common?.Label?.toString() ??\n\t\t\t\t\"\"\n\t\t);\n\t\tsetChartMeasureAttributes(chart.MeasureAttributes, entitySetPath, dynamicMeasure, chartBlock);\n\t\tmeasures.push(dynamicMeasure);\n\t}\n\treturn measures;\n}\n\nfunction getCustomAggMeasure(customAggregations: Record<string, MeasureType | undefined>, measure: MeasureType): MeasureType | null {\n\tif (measure.value && customAggregations[measure.value]) {\n\t\tmeasure.label = customAggregations[measure.value]?.label;\n\t\treturn measure;\n\t}\n\treturn null;\n}\n\nfunction setChartMeasureAttributes(\n\tmeasureAttributes: ChartMeasureAttributeType[],\n\tentitySetPath: string,\n\tmeasure: MeasureType,\n\tchartBlock: ChartBlock\n): void {\n\tif (measureAttributes?.length) {\n\t\tfor (const measureAttribute of measureAttributes) {\n\t\t\t_setChartMeasureAttribute(measureAttribute, entitySetPath, measure, chartBlock);\n\t\t}\n\t}\n}\n\nfunction _setChartMeasureAttribute(\n\tmeasureAttribute: ChartMeasureAttributeType,\n\tentitySetPath: string,\n\tmeasure: MeasureType,\n\tchartBlock: ChartBlock\n): void {\n\tconst path = measureAttribute.DynamicMeasure ? measureAttribute?.DynamicMeasure?.value : measureAttribute?.Measure?.value;\n\tconst measureAttributeDataPoint = measureAttribute.DataPoint ? measureAttribute?.DataPoint?.value : null;\n\tconst role = measureAttribute.Role;\n\tconst dataPoint: DataPoint | undefined = measureAttributeDataPoint\n\t\t? getInvolvedDataModelObjects<DataPoint>(\n\t\t\t\tchartBlock._metaModel.createBindingContext(entitySetPath + measureAttributeDataPoint) as Context,\n\t\t\t\tchartBlock._context\n\t\t  ).targetObject\n\t\t: undefined;\n\tif (measure.key === path) {\n\t\tsetMeasureRole(measure, role as unknown as MetaModelEnum<ChartMeasureRoleType>);\n\t\t//still to add data point, but UI5 Chart API is missing\n\t\tsetMeasureDataPoint(measure, dataPoint);\n\t}\n}\n\n/**\n * Format the data point as a JSON object.\n * @param oDataPointAnno\n * @returns The formatted json object\n */\nfunction createDataPointProperty(oDataPointAnno: DataPoint): {\n\ttargetValue?: string;\n\tforeCastValue?: string;\n\tcriticality?: Record<string, unknown>;\n} {\n\tconst oDataPoint: { targetValue?: string; foreCastValue?: string; criticality?: Record<string, unknown> } = {};\n\n\tif (oDataPointAnno.TargetValue) {\n\t\toDataPoint.targetValue = oDataPointAnno.TargetValue.$Path;\n\t}\n\n\tif (oDataPointAnno.ForecastValue) {\n\t\toDataPoint.foreCastValue = oDataPointAnno.ForecastValue.$Path;\n\t}\n\n\tlet oCriticality = null;\n\tif (oDataPointAnno.Criticality) {\n\t\tif (isPathAnnotationExpression(oDataPointAnno.Criticality) && oDataPointAnno.Criticality.path) {\n\t\t\t//will be an aggregated property or custom aggregate\n\t\t\toCriticality = {\n\t\t\t\tCalculated: oDataPointAnno.Criticality.path\n\t\t\t};\n\t\t} else {\n\t\t\toCriticality = {\n\t\t\t\tStatic: (oDataPointAnno.Criticality as unknown as MetaModelEnum<CriticalityType>).$EnumMember.replace(\n\t\t\t\t\t\"com.sap.vocabularies.UI.v1.CriticalityType/\",\n\t\t\t\t\t\"\"\n\t\t\t\t)\n\t\t\t};\n\t\t}\n\t} else if (oDataPointAnno.CriticalityCalculation) {\n\t\tconst oThresholds: Record<string, unknown> & { AggregationLevels?: unknown[] } = {};\n\t\tconst bConstant = buildThresholds(oThresholds, oDataPointAnno.CriticalityCalculation);\n\n\t\tif (bConstant) {\n\t\t\toCriticality = {\n\t\t\t\tConstantThresholds: oThresholds\n\t\t\t};\n\t\t} else {\n\t\t\toCriticality = {\n\t\t\t\tDynamicThresholds: oThresholds\n\t\t\t};\n\t\t}\n\t}\n\n\tif (oCriticality) {\n\t\toDataPoint.criticality = oCriticality;\n\t}\n\n\treturn oDataPoint;\n}\n\n/**\n * Checks whether the thresholds are dynamic or constant.\n * @param thresholds The threshold skeleton\n * @param criticalityCalculation The UI.DataPoint.CriticalityCalculation annotation\n * @returns `true` if the threshold should be supplied as ConstantThresholds, <code>false</code> if the threshold should\n * be supplied as DynamicThresholds\n * @private\n */\nfunction buildThresholds(\n\tthresholds: Record<string, unknown> & { AggregationLevels?: unknown[] },\n\tcriticalityCalculation: CriticalityCalculationType\n): boolean {\n\tconst keys = [\n\t\t\"AcceptanceRangeLowValue\",\n\t\t\"AcceptanceRangeHighValue\",\n\t\t\"ToleranceRangeLowValue\",\n\t\t\"ToleranceRangeHighValue\",\n\t\t\"DeviationRangeLowValue\",\n\t\t\"DeviationRangeHighValue\"\n\t];\n\tthresholds.ImprovementDirection = (\n\t\tcriticalityCalculation.ImprovementDirection as unknown as MetaModelEnum<ImprovementDirectionType>\n\t)?.$EnumMember.replace(\"com.sap.vocabularies.UI.v1.ImprovementDirectionType/\", \"\");\n\n\tconst dynamicThresholds: Record<string, unknown> & { usedMeasures: unknown[] } = {\n\t\toneSupplied: false,\n\t\tusedMeasures: []\n\t\t// combination to check whether at least one is supplied\n\t};\n\tconst constantThresholds: Record<string, unknown> = {\n\t\toneSupplied: false\n\t\t// combination to check whether at least one is supplied\n\t};\n\n\tinitialiseThresholds(keys, dynamicThresholds, constantThresholds, criticalityCalculation);\n\tprocessThresholds(keys, thresholds, dynamicThresholds, constantThresholds, criticalityCalculation);\n\n\treturn !dynamicThresholds.oneSupplied;\n}\n\nfunction initialiseThresholds(\n\tkeys: string[],\n\tdynamicThresholds: Record<string, unknown> & { usedMeasures: unknown[] },\n\tconstantThresholds: Record<string, unknown>,\n\tcriticalityCalculation: CriticalityCalculationType\n): void {\n\tfor (const key of keys) {\n\t\tdynamicThresholds[key] = criticalityCalculation[key as keyof CriticalityCalculationType]\n\t\t\t? criticalityCalculation[key as keyof CriticalityCalculationType].$Path\n\t\t\t: undefined;\n\t\tdynamicThresholds.oneSupplied = dynamicThresholds.oneSupplied || dynamicThresholds[key];\n\n\t\tif (!dynamicThresholds.oneSupplied) {\n\t\t\t// only consider in case no dynamic threshold is supplied\n\t\t\tconstantThresholds[key] = criticalityCalculation[key as keyof CriticalityCalculationType];\n\t\t\tconstantThresholds.oneSupplied = constantThresholds.oneSupplied || constantThresholds[key];\n\t\t} else if (dynamicThresholds[key]) {\n\t\t\tdynamicThresholds.usedMeasures.push(dynamicThresholds[key as keyof CriticalityCalculationType]);\n\t\t}\n\t}\n}\n\nfunction processThresholds(\n\tkeys: string[],\n\tthresholds: Record<string, unknown> & { AggregationLevels?: unknown[] },\n\tdynamicThresholds: Record<string, unknown> & { usedMeasures: unknown[] },\n\tconstantThresholds: Record<string, unknown>,\n\tcriticalityCalculation: CriticalityCalculationType\n): void {\n\t// dynamic definition shall overrule constant definition\n\tif (dynamicThresholds.oneSupplied) {\n\t\tfor (const key of keys) {\n\t\t\tif (dynamicThresholds[key]) {\n\t\t\t\tthresholds[key] = dynamicThresholds[key];\n\t\t\t}\n\t\t}\n\t\tthresholds.usedMeasures = dynamicThresholds.usedMeasures;\n\t} else {\n\t\tthresholds.AggregationLevels = [];\n\t\tprocessAggregationLevelForThresholds(keys, thresholds, constantThresholds, criticalityCalculation);\n\t}\n}\n\nfunction processAggregationLevelForThresholds(\n\tkeys: string[],\n\tthresholds: Record<string, unknown> & { AggregationLevels?: unknown[] },\n\tconstantThresholds: Record<string, unknown>,\n\tcriticalityCalculation: CriticalityCalculationType\n): void {\n\tlet oAggregationLevel: Record<string, unknown> = {};\n\t// check if at least one static value is supplied\n\tif (constantThresholds.oneSupplied) {\n\t\t// add one entry in the aggregation level\n\t\toAggregationLevel = {\n\t\t\tVisibleDimensions: null\n\t\t};\n\n\t\tfor (const sKey of keys) {\n\t\t\tif (constantThresholds[sKey]) {\n\t\t\t\toAggregationLevel[sKey] = constantThresholds[sKey];\n\t\t\t}\n\t\t}\n\n\t\tthresholds.AggregationLevels?.push(oAggregationLevel);\n\t}\n\n\tprocessAggregationLevelsForConstantThresholds(keys, thresholds, criticalityCalculation, oAggregationLevel);\n}\n\nfunction processAggregationLevelsForConstantThresholds(\n\tkeys: string[],\n\tthresholds: Record<string, unknown> & { AggregationLevels?: unknown[] },\n\tcriticalityCalculation: CriticalityCalculationType,\n\taggregationLevel: Record<string, unknown>\n): void {\n\tif (criticalityCalculation.ConstantThresholds && criticalityCalculation.ConstantThresholds.length > 0) {\n\t\tfor (const aggregationLevelInfo of criticalityCalculation.ConstantThresholds) {\n\t\t\tconst visibleDimensions: string[] | null = aggregationLevelInfo.AggregationLevel ? [] : null;\n\n\t\t\tif (visibleDimensions && aggregationLevelInfo.AggregationLevel && aggregationLevelInfo.AggregationLevel.length > 0) {\n\t\t\t\tfor (const propertyPath of aggregationLevelInfo.AggregationLevel) {\n\t\t\t\t\tvisibleDimensions.push((propertyPath as unknown as ExpandPathType<PropertyPath>).$PropertyPath);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\taggregationLevel = {\n\t\t\t\tVisibleDimensions: visibleDimensions\n\t\t\t};\n\n\t\t\tfor (const key of keys) {\n\t\t\t\tconst value = aggregationLevelInfo[key as unknown as keyof LevelThresholdsType];\n\t\t\t\tif (value) {\n\t\t\t\t\taggregationLevel[key] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthresholds.AggregationLevels?.push(aggregationLevel);\n\t\t}\n\t}\n}\n\nfunction setMeasureDataPoint(measure: MeasureType, dataPoint: DataPoint | undefined): void {\n\tif (dataPoint && dataPoint.Value.$Path == measure.key) {\n\t\tmeasure.dataPoint = ChartHelper.formatJSONToString(createDataPointProperty(dataPoint)) || \"\";\n\t}\n}\n\nfunction setMeasureRole(measure: MeasureType, role: MetaModelEnum<ChartMeasureRoleType> | undefined): void {\n\tif (role != null) {\n\t\tconst index = role.$EnumMember;\n\t\tmeasure.role = measureRole[index];\n\t}\n}\n\nfunction getDependents(chartBlock: ChartBlock, chartContext: Context): string | string[] {\n\tif (chartBlock._commandActions.length > 0) {\n\t\treturn chartBlock._commandActions.map((commandAction: CommandAction) => {\n\t\t\treturn getActionCommand(commandAction, chartContext, chartBlock);\n\t\t});\n\t}\n\treturn \"\";\n}\n\n/**\n *\n * @param personalization Specifies the chart personalization\n */\n\nfunction checkPersonalizationInChartProperties(personalization: ChartP13nType, chartBlock: ChartBlock): void {\n\tif (personalization) {\n\t\tif (personalization === \"false\" || (personalization as boolean) === false) {\n\t\t\tchartBlock._personalization = undefined;\n\t\t} else if (personalization === \"true\" || (personalization as boolean) === true) {\n\t\t\tchartBlock._personalization = Object.values(personalizationValues).join(\",\");\n\t\t} else if (verifyValidPersonalization(personalization as string) === true) {\n\t\t\tchartBlock._personalization = personalization;\n\t\t} else {\n\t\t\tchartBlock._personalization = undefined;\n\t\t}\n\t}\n}\n\n/**\n *\n * @param personalization\n * @returns `true` or `false` if the personalization is valid or not valid\n */\nfunction verifyValidPersonalization(personalization: string): boolean {\n\tlet valid = true;\n\tconst splitArray = personalization.split(\",\");\n\tconst acceptedValues: string[] = Object.values(personalizationValues);\n\tsplitArray.forEach((arrayElement) => {\n\t\tif (!acceptedValues.includes(arrayElement)) {\n\t\t\tvalid = false;\n\t\t}\n\t});\n\treturn valid;\n}\n\nfunction getVariantManagement(chartBlock: ChartBlock): string {\n\tconst variantManagement = chartBlock.variantManagement ? chartBlock.variantManagement : chartBlock.chartDefinition.variantManagement;\n\treturn chartBlock.personalization === undefined ? \"None\" : variantManagement;\n}\n\nfunction createVariantManagement(chartBlock: ChartBlock): string {\n\tconst personalization = chartBlock.personalization;\n\tif (personalization) {\n\t\tconst variantManagement = getVariantManagement(chartBlock);\n\t\tif (variantManagement === \"Control\") {\n\t\t\treturn (\n\t\t\t\t<VariantManagement\n\t\t\t\t\tid={generate([chartBlock._blockId, \"VM\"])}\n\t\t\t\t\tfor={[chartBlock._blockId!]}\n\t\t\t\t\tshowSetAsDefault={true}\n\t\t\t\t\theaderLevel={chartBlock.headerLevel}\n\t\t\t\t\tselect={(event: VariantManagement$SelectEvent): void => {\n\t\t\t\t\t\tchartBlock.fireVariantSelected?.(event);\n\t\t\t\t\t}}\n\t\t\t\t\tsave={(event: VariantManagement$SaveEvent): void => {\n\t\t\t\t\t\tchartBlock.fireVariantSaved?.(event);\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t);\n\t\t} else if (variantManagement === \"None\" || variantManagement === \"Page\") {\n\t\t\treturn \"\";\n\t\t}\n\t} else if (!personalization) {\n\t\tLog.warning(\"Variant Management cannot be enabled when personalization is disabled\");\n\t}\n\treturn \"\";\n}\n\nfunction getPersistenceProvider(chartBlock: ChartBlock): PersistenceProvider | undefined {\n\tif (getVariantManagement(chartBlock) === \"None\") {\n\t\treturn <PersistenceProvider id={generate([chartBlock._blockId, \"PersistenceProvider\"])} for={chartBlock._blockId} />;\n\t}\n}\n\nfunction pushActionCommand(\n\tactionContext: Context,\n\tdataField: (MetaModelType<DataFieldForAction> & { InvocationGrouping: MetaModelEnum<OperationGroupingType> }) | undefined,\n\tchartOperationAvailableMap: string | undefined,\n\taction: BaseAction | CustomAction,\n\tchartBlock: ChartBlock\n): void {\n\tif (dataField) {\n\t\tconst commandAction = {\n\t\t\tactionContext: actionContext,\n\t\t\tonExecuteAction: ChartHelper.getPressEventForDataFieldForActionButton(\n\t\t\t\tchartBlock._blockId!,\n\t\t\t\tdataField,\n\t\t\t\tchartOperationAvailableMap || \"\"\n\t\t\t),\n\t\t\tonExecuteIBN: CommonHelper.getPressHandlerForDataFieldForIBN(\n\t\t\t\tdataField as unknown as DataFieldForIntentBasedNavigation,\n\t\t\t\t`\\${internal>selectedContexts}`,\n\t\t\t\tfalse\n\t\t\t),\n\t\t\tonExecuteManifest: CommonHelper.buildActionWrapper(action as CustomAction, chartBlock),\n\t\t\tchartOperationAvailableMap\n\t\t};\n\t\tchartBlock._commandActions.push(commandAction);\n\t}\n}\n\nfunction getActionCommand(commandAction: CommandAction, chartContext: Context, chartBlock: ChartBlock): string {\n\tconst action = commandAction.actionContext.getObject();\n\tconst dataFieldContext = action.annotationPath && chartBlock._metaModel.createBindingContext(action.annotationPath);\n\tconst dataField = dataFieldContext && dataFieldContext.getObject();\n\tconst dataFieldAction = chartBlock._metaModel.createBindingContext(action.annotationPath + \"/Action\")!;\n\tconst actionContext = CommonHelper.getActionContext(dataFieldAction);\n\tconst isBoundPath = CommonHelper.getPathToBoundActionOverload(dataFieldAction);\n\tconst isBound = chartBlock._metaModel.createBindingContext(isBoundPath)!.getObject();\n\tconst chartOperationAvailableMap = escapeXMLAttributeValue(\n\t\tChartHelper.getOperationAvailableMap(chartContext.getObject(), {\n\t\t\tcontext: chartContext\n\t\t})\n\t);\n\tconst isActionEnabled = action.enabled\n\t\t? action.enabled\n\t\t: ChartHelper.isDataFieldForActionButtonEnabled(\n\t\t\t\tisBound && isBound.$IsBound,\n\t\t\t\tdataField.Action,\n\t\t\t\tchartBlock._context,\n\t\t\t\tchartOperationAvailableMap || \"\",\n\t\t\t\taction.enableOnSelect || \"\"\n\t\t  );\n\tlet isIBNEnabled;\n\tif (action.enabled) {\n\t\tisIBNEnabled = action.enabled;\n\t} else if (dataField.RequiresContext) {\n\t\tisIBNEnabled = \"{= %{internal>numberOfSelectedContexts} >= 1}\";\n\t}\n\n\tlet commandEnabled: boolean;\n\tswitch (action.type) {\n\t\tcase \"ForAction\":\n\t\t\tcommandEnabled = isActionEnabled ?? action.enabled;\n\t\t\tbreak;\n\t\tcase \"ForNavigation\":\n\t\t\tcommandEnabled = isIBNEnabled ?? action.enabled;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tcommandEnabled = action.enabled;\n\t\t\tbreak;\n\t}\n\n\tconst actionCommand = (\n\t\t<CommandExecution\n\t\t\texecute={(event: CommandExecution$ExecuteEvent): void =>\n\t\t\t\tcommandExecute(event, action, chartBlock._blockId!, commandAction.chartOperationAvailableMap!, dataField)\n\t\t\t}\n\t\t\tenabled={commandEnabled}\n\t\t\tvisible={(getVisible(dataFieldContext, chartBlock) as boolean) ?? action.visible}\n\t\t\tcommand={action.command}\n\t\t/>\n\t);\n\n\tif (\n\t\taction.type == \"ForAction\" &&\n\t\t(!isBound ||\n\t\t\tisBound.IsBound !== true ||\n\t\t\t(actionContext as unknown as Record<string, unknown>)[`@${CoreAnnotationTerms.OperationAvailable}`] !== false)\n\t) {\n\t\treturn actionCommand;\n\t} else if (action.type == \"ForAction\") {\n\t\treturn \"\";\n\t} else {\n\t\treturn actionCommand;\n\t}\n}\n\nfunction commandExecute(\n\tevent: CommandExecution$ExecuteEvent,\n\taction: { InvocationGrouping: { $EnumMember: string }; action: string; type: string; handlerModule: string; handlerMethod: string },\n\tid: string,\n\tchartOperationAvailableMap: string,\n\tdataField: DataFieldForAction | DataFieldForIntentBasedNavigation\n): void {\n\tconst view = CommonUtils.getTargetView(event.getSource());\n\tconst controller = view?.getController();\n\n\tswitch (action.type) {\n\t\tcase \"ForAction\":\n\t\t\tconst sInvocationGrouping =\n\t\t\t\taction.InvocationGrouping &&\n\t\t\t\taction.InvocationGrouping.$EnumMember === \"com.sap.vocabularies.UI.v1.OperationGroupingType/ChangeSet\"\n\t\t\t\t\t? \"ChangeSet\"\n\t\t\t\t\t: \"Isolated\";\n\t\t\tconst params = {\n\t\t\t\tcontexts: view.getBindingContext(\"internal\")?.getProperty(\"selectedContexts\"),\n\t\t\t\tinvocationGrouping: sInvocationGrouping,\n\t\t\t\tcontrolId: id,\n\t\t\t\toperationAvailableMap: chartOperationAvailableMap,\n\t\t\t\tmodel: view.getModel(),\n\t\t\t\tlabel: dataField.Label as string\n\t\t\t};\n\t\t\tcontroller.editFlow.invokeAction(dataField.Action as string, params);\n\t\t\tbreak;\n\t\tcase \"ForNavigation\":\n\t\t\tconst navigationParameters: NavigationParameters = {\n\t\t\t\tnavigationContexts: view.getBindingContext(\"internal\")?.getProperty(\"selectedContexts\")\n\t\t\t};\n\t\t\tif ((dataField as DataFieldForIntentBasedNavigation).Mapping) {\n\t\t\t\tnavigationParameters.semanticObjectMapping = JSON.stringify((dataField as DataFieldForIntentBasedNavigation).Mapping);\n\t\t\t}\n\t\t\tcontroller._intentBasedNavigation.navigate(\n\t\t\t\t(dataField as DataFieldForIntentBasedNavigation).SemanticObject as unknown as string,\n\t\t\t\t(dataField as DataFieldForIntentBasedNavigation).Action as unknown as string,\n\t\t\t\tnavigationParameters\n\t\t\t);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tFPMHelper.actionWrapper(event, action.handlerModule, action.handlerMethod, {\n\t\t\t\tcontexts: view.getBindingContext(\"internal\")?.getProperty(\"selectedContexts\")\n\t\t\t});\n\t\t\tbreak;\n\t}\n}\n\nfunction getItems(chartBlock: ChartBlock): string | string[] {\n\tif (chartBlock._chart) {\n\t\tconst dimensions: string[] = [];\n\t\tconst measures: string[] = [];\n\t\tif (chartBlock._chart.Dimensions) {\n\t\t\tChartHelper.formatDimensions(chartBlock._chartContext)\n\t\t\t\t.getObject()\n\t\t\t\t.forEach((dimension: DimensionType) => {\n\t\t\t\t\tdimension.id = generate([chartBlock.id, \"dimension\", dimension.key]);\n\t\t\t\t\tdimensions.push(\n\t\t\t\t\t\tgetItem(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tid: dimension.id,\n\t\t\t\t\t\t\t\tkey: dimension.key,\n\t\t\t\t\t\t\t\tlabel: dimension.label,\n\t\t\t\t\t\t\t\trole: dimension.role\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"_fe_groupable_\",\n\t\t\t\t\t\t\t\"groupable\"\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t}\n\t\tif (chartBlock.measures) {\n\t\t\tChartHelper.formatMeasures(chartBlock.measures).forEach((measure: MeasureType) => {\n\t\t\t\tmeasure.id = generate([chartBlock.id, \"measure\", measure.key]);\n\t\t\t\tmeasures.push(\n\t\t\t\t\tgetItem(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: measure.id,\n\t\t\t\t\t\t\tkey: measure.key,\n\t\t\t\t\t\t\tlabel: measure.label,\n\t\t\t\t\t\t\trole: measure.role\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"_fe_aggregatable_\",\n\t\t\t\t\t\t\"aggregatable\"\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t\tif (dimensions.length && measures.length) {\n\t\t\treturn dimensions.concat(measures);\n\t\t}\n\t}\n\treturn \"\";\n}\n\nfunction getItem(item: MeasureType | DimensionType, prefix: string, type: string): string {\n\treturn (\n\t\t<MdcChartItem\n\t\t\tid={item.id}\n\t\t\tpropertyKey={prefix + item.key}\n\t\t\ttype={type}\n\t\t\tlabel={resolveBindingString(item.label as string, \"string\")}\n\t\t\trole={item.role}\n\t\t/>\n\t);\n}\n\nfunction getToolbarActions(chartBlock: ChartBlock): ToolbarAction[] {\n\tconst actions = getActions(chartBlock);\n\tif (chartBlock.chartDefinition?.onSegmentedButtonPressed) {\n\t\tactions.push(getSegmentedButton(chartBlock));\n\t}\n\tif (chartBlock.chartDefinition.isInsightsEnabled) {\n\t\tactions.push(\n\t\t\tgetStandardActions(\n\t\t\t\tchartBlock.chartDefinition.isInsightsEnabled,\n\t\t\t\tchartBlock.chartDefinition.isInsightsVisible,\n\t\t\t\tchartBlock._blockId!,\n\t\t\t\tchartBlock\n\t\t\t)\n\t\t);\n\t}\n\tif (actions.length > 0) {\n\t\treturn actions;\n\t}\n\treturn [];\n}\n\nfunction getStandardActions(\n\tisInsightsEnabled: BindingToolkitExpression<boolean> | undefined,\n\tisInsightsVisible: BindingToolkitExpression<boolean> | undefined,\n\tid: string,\n\tchartBlock: ChartBlock\n): MenuItem | ActionToolbarAction {\n\treturn (\n\t\t<ActionToolbarAction visible={isInsightsVisible}>\n\t\t\t<Button\n\t\t\t\tid={generate([id, \"StandardAction::Insights\"])}\n\t\t\t\ttext=\"{sap.fe.i18n>M_COMMON_INSIGHTS_CARD}\"\n\t\t\t\tpress={(): void => {\n\t\t\t\t\tchartBlock.onAddCardToInsightsPressed();\n\t\t\t\t}}\n\t\t\t\tenabled={isInsightsEnabled}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tlayoutData: <OverflowToolbarLayoutData priority=\"AlwaysOverflow\" />\n\t\t\t\t}}\n\t\t\t</Button>\n\t\t</ActionToolbarAction>\n\t);\n}\n\nfunction getActions(chartBlock: ChartBlock): ToolbarAction[] {\n\tconst actions = removeMenuItems(chartBlock.chartActions ?? []);\n\treturn actions.map((action: BaseAction) => {\n\t\tif (action.annotationPath || (action.type === \"Menu\" && !action.id?.startsWith(\"CustomAction\"))) {\n\t\t\t// Load annotation based actions\n\t\t\treturn getAction(action, chartBlock._chartContext, false, chartBlock);\n\t\t} else if (action.hasOwnProperty(\"noWrap\")) {\n\t\t\t// Load XML or manifest based actions / action groups\n\t\t\treturn getCustomActions(action as CustomAndAction, chartBlock._chartContext, chartBlock);\n\t\t}\n\t});\n}\n\nfunction removeMenuItems(actions: BaseAction[]): BaseAction[] {\n\t// If action is already part of menu in action group, then it will\n\t// be removed from the main actions list\n\tfor (const action of actions) {\n\t\tif (action.menu) {\n\t\t\taction.menu.forEach((item) => {\n\t\t\t\tconst idx = actions.map((act) => act.key).indexOf(item.key);\n\t\t\t\tif (idx !== -1) {\n\t\t\t\t\tactions.splice(idx, 1);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\treturn actions;\n}\n\nfunction getCustomActions(action: CustomAndAction, chartContext: Context, chartBlock: ChartBlock): ToolbarAction {\n\tlet actionEnabled = action.enabled as string | boolean | undefined;\n\tif ((action.requiresSelection ?? false) && action.enabled === \"true\") {\n\t\tactionEnabled = \"{= %{internal>numberOfSelectedContexts} >= 1}\";\n\t}\n\tif (action.type === \"Default\") {\n\t\t// Load XML or manifest based toolbar actions\n\t\treturn getActionToolbarAction(\n\t\t\taction,\n\t\t\t{\n\t\t\t\tid: generate([chartBlock._blockId, action.id]),\n\t\t\t\tunittestid: \"DataFieldForActionButtonAction\",\n\t\t\t\tlabel: action.text ? action.text : \"\",\n\t\t\t\tariaHasPopup: undefined,\n\t\t\t\tpress: action.press ? action.press : \"\",\n\t\t\t\tenabled: actionEnabled,\n\t\t\t\tvisible: action.visible ? action.visible : false\n\t\t\t},\n\t\t\tfalse,\n\t\t\tchartBlock\n\t\t);\n\t} else if (action.type === \"Menu\") {\n\t\t// Load action groups (Menu)\n\t\treturn getActionToolbarMenuAction(\n\t\t\t{\n\t\t\t\tid: generate([chartBlock._blockId, action.id]),\n\t\t\t\ttext: action.text,\n\t\t\t\tvisible: action.visible,\n\t\t\t\tenabled: actionEnabled,\n\t\t\t\tuseDefaultActionOnly: DefaultActionHandler.getUseDefaultActionOnly(action),\n\t\t\t\tbuttonMode: DefaultActionHandler.getButtonMode(action),\n\t\t\t\tdefaultAction: undefined,\n\t\t\t\tactions: action\n\t\t\t},\n\t\t\tchartContext,\n\t\t\tchartBlock\n\t\t);\n\t}\n}\n\nfunction getMenuItemFromMenu(menuItemAction: CustomAction, chartContext: Context, chartBlock: ChartBlock): ToolbarAction {\n\tlet pressHandler: { press: (event: Button$PressEvent) => void } | { \"jsx:command\": CommandProperties };\n\tif (menuItemAction.annotationPath) {\n\t\t//Annotation based action is passed as menu item for menu button\n\t\treturn getAction(menuItemAction, chartContext, true, chartBlock);\n\t}\n\tif (menuItemAction.command) {\n\t\tpressHandler = { \"jsx:command\": `cmd:${menuItemAction.command}|press` as CommandProperties };\n\t} else if (menuItemAction.noWrap ?? false) {\n\t\tpressHandler = {\n\t\t\tpress: (event: Button$PressEvent): void => {\n\t\t\t\tconst functionName = menuItemAction.handlerMethod?.split(\".\")[1] as string;\n\t\t\t\tconst controller = { ...CommonUtils.getTargetView(event.getSource()).getController() } as unknown as {\n\t\t\t\t\t[temp: string]: (event: Button$PressEvent) => void;\n\t\t\t\t};\n\t\t\t\tif (controller[functionName]) controller[functionName](event);\n\t\t\t}\n\t\t};\n\t} else {\n\t\tpressHandler = {\n\t\t\tpress: (event: Button$PressEvent): void => {\n\t\t\t\tconst selectedContexts = CommonUtils.getTargetView(event.getSource())\n\t\t\t\t\t.getBindingContext(\"internal\")\n\t\t\t\t\t?.getProperty(\"selectedContexts\");\n\t\t\t\tFPMHelper.actionWrapper(event, menuItemAction.handlerModule, menuItemAction.handlerMethod, { contexts: selectedContexts });\n\t\t\t}\n\t\t};\n\t}\n\n\treturn <MenuItem text={menuItemAction.text} {...pressHandler} visible={menuItemAction.visible} enabled={menuItemAction.enabled} />;\n}\n\nfunction getActionToolbarMenuAction(\n\tprops: CustomToolbarMenuAction,\n\tchartContext: Context,\n\tchartBlock: ChartBlock\n): MenuItem | ActionToolbarAction {\n\tconst aMenuItems = (props.actions?.menu as CustomAction[]).map((action: CustomAction) => {\n\t\treturn getMenuItemFromMenu(action, chartContext, chartBlock);\n\t});\n\treturn (\n\t\t<ActionToolbarAction>\n\t\t\t<MenuButton\n\t\t\t\ttext={props.text}\n\t\t\t\ttype=\"Transparent\"\n\t\t\t\tid={props.id}\n\t\t\t\tvisible={props.visible}\n\t\t\t\tenabled={props.enabled}\n\t\t\t\tuseDefaultActionOnly={props.useDefaultActionOnly}\n\t\t\t\tbuttonMode={props.buttonMode}\n\t\t\t\tmenuPosition={Dock.BeginBottom}\n\t\t\t\tdefaultAction={\"props.defaultAction\" as unknown as () => void}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tmenu: <Menu>{aMenuItems}</Menu>\n\t\t\t\t}}\n\t\t\t</MenuButton>\n\t\t</ActionToolbarAction>\n\t);\n}\n\nfunction getAction(action: BaseAction | CustomAction, chartContext: Context, isMenuItem: boolean, chartBlock: ChartBlock): ToolbarAction {\n\tconst dataFieldContext = chartBlock._metaModel.createBindingContext(action.annotationPath ?? \"\")!;\n\tif (action.type === \"ForNavigation\") {\n\t\treturn getNavigationActions(action, dataFieldContext, isMenuItem, chartBlock);\n\t} else if (action.type === \"ForAction\") {\n\t\treturn getAnnotationActions(chartContext, action as AnnotationAction, dataFieldContext, isMenuItem, chartBlock);\n\t} else if (action.type === \"Menu\") {\n\t\tconst menuItems = action.menu?.map((menuAction: BaseAction) => {\n\t\t\treturn getAction(menuAction, chartContext, true, chartBlock);\n\t\t});\n\t\treturn (\n\t\t\t<ActionToolbarAction>\n\t\t\t\t<MenuButton\n\t\t\t\t\ttext={action.text}\n\t\t\t\t\ttype=\"Transparent\"\n\t\t\t\t\tid={action.key}\n\t\t\t\t\tvisible={action.visible}\n\t\t\t\t\tenabled={action.enabled}\n\t\t\t\t\tmenuPosition={Dock.BeginBottom}\n\t\t\t\t\ticon={action?.isAIOperation === true ? aiIcon : undefined}\n\t\t\t\t>\n\t\t\t\t\t{{\n\t\t\t\t\t\tmenu: <Menu>{menuItems}</Menu>\n\t\t\t\t\t}}\n\t\t\t\t</MenuButton>\n\t\t\t</ActionToolbarAction>\n\t\t);\n\t}\n\treturn undefined;\n}\n\nfunction getNavigationActions(\n\taction: BaseAction | CustomAction,\n\tdataFieldContext: Context,\n\tisMenuItem: boolean,\n\tchartBlock: ChartBlock\n): MenuItem | ActionToolbarAction {\n\tlet enabled = \"true\";\n\tconst dataField = dataFieldContext.getObject();\n\tif (action.enabled !== undefined) {\n\t\tenabled = action.enabled;\n\t} else if (dataField.RequiresContext) {\n\t\tenabled = \"{= %{internal>numberOfSelectedContexts} >= 1}\";\n\t}\n\treturn getActionToolbarAction(\n\t\taction,\n\t\t{\n\t\t\tid: undefined,\n\t\t\tunittestid: \"DataFieldForIntentBasedNavigationButtonAction\",\n\t\t\tlabel: dataField.Label,\n\t\t\tariaHasPopup: undefined,\n\t\t\tpress: CommonHelper.getPressHandlerForDataFieldForIBN(dataField, `\\${internal>selectedContexts}`, false)!,\n\t\t\tenabled: enabled,\n\t\t\tvisible: getVisible(dataFieldContext, chartBlock)\n\t\t},\n\t\tisMenuItem,\n\t\tchartBlock,\n\t\tdataField\n\t);\n}\n\nfunction getAnnotationActions(\n\tchartContext: Context,\n\taction: AnnotationAction,\n\tdataFieldContext: Context,\n\tisMenuItem: boolean,\n\tchartBlock: ChartBlock\n): ToolbarAction {\n\tconst dataFieldAction = chartBlock._metaModel.createBindingContext(action.annotationPath + \"/Action\")!;\n\tconst actionContext = chartBlock._metaModel.createBindingContext(CommonHelper.getActionContext(dataFieldAction));\n\tconst actionObject = actionContext?.getObject();\n\tconst isBoundPath = CommonHelper.getPathToBoundActionOverload(dataFieldAction);\n\tconst isBound = chartBlock._metaModel.createBindingContext(isBoundPath)!.getObject();\n\tconst dataField = dataFieldContext.getObject();\n\tif (!isBound || isBound.$IsBound !== true || actionObject[`@${CoreAnnotationTerms.OperationAvailable}`] !== false) {\n\t\tconst enabled = getAnnotationActionsEnabled(action, isBound, dataField, chartContext, chartBlock._context);\n\t\tconst dataFieldModelObjectPath = getInvolvedDataModelObjects<DataFieldAbstractTypes>(\n\t\t\tchartBlock._metaModel.createBindingContext(action.annotationPath) as Context\n\t\t);\n\t\tconst ariaHasPopup = isDataModelObjectPathForActionWithDialog(dataFieldModelObjectPath);\n\t\tconst chartOperationAvailableMap =\n\t\t\tescapeXMLAttributeValue(\n\t\t\t\tChartHelper.getOperationAvailableMap(chartContext.getObject(), {\n\t\t\t\t\tcontext: chartContext\n\t\t\t\t})\n\t\t\t) || \"\";\n\t\treturn getActionToolbarAction(\n\t\t\taction,\n\t\t\t{\n\t\t\t\tid: generate([chartBlock._blockId, getInvolvedDataModelObjects(dataFieldContext)]),\n\t\t\t\tunittestid: \"DataFieldForActionButtonAction\",\n\t\t\t\tlabel: dataField.Label,\n\t\t\t\tariaHasPopup: ariaHasPopup,\n\t\t\t\tenabled: enabled,\n\t\t\t\tvisible: getVisible(dataFieldContext, chartBlock)\n\t\t\t},\n\t\t\tisMenuItem,\n\t\t\tchartBlock,\n\t\t\tdataField,\n\t\t\tchartOperationAvailableMap\n\t\t);\n\t}\n\treturn undefined;\n}\n\nfunction getActionToolbarAction(\n\taction: (BaseAction | CustomAction) & { noWrap?: boolean },\n\ttoolbarAction: ToolBarAction,\n\tisMenuItem: boolean,\n\tchartBlock: ChartBlock,\n\tdataField?: DataFieldForAction | DataFieldForIntentBasedNavigation,\n\tchartOperationAvailableMap?: string\n): MenuItem | ActionToolbarAction {\n\tif (isMenuItem) {\n\t\tconst pressEvent: { press: (event: Button$PressEvent) => void } | { \"jsx:command\": CommandProperties } = action.command\n\t\t\t? { \"jsx:command\": `cmd:${action.command}|press` as CommandProperties }\n\t\t\t: {\n\t\t\t\t\tpress: (event: Button$PressEvent): void => {\n\t\t\t\t\t\tconst view = CommonUtils.getTargetView(event.getSource());\n\t\t\t\t\t\tconst controller = view.getController();\n\t\t\t\t\t\tif (action.type === \"ForAction\") {\n\t\t\t\t\t\t\tconst params = {\n\t\t\t\t\t\t\t\tcontexts: view.getBindingContext(\"internal\")?.getProperty(\"selectedContexts\"),\n\t\t\t\t\t\t\t\tinvocationGrouping:\n\t\t\t\t\t\t\t\t\t(dataField as DataFieldForAction)?.InvocationGrouping === OperationGroupingType.ChangeSet\n\t\t\t\t\t\t\t\t\t\t? \"ChangeSet\"\n\t\t\t\t\t\t\t\t\t\t: \"Isolated\",\n\t\t\t\t\t\t\t\tcontrolId: chartBlock._blockId,\n\t\t\t\t\t\t\t\toperationAvailableMap: chartOperationAvailableMap,\n\t\t\t\t\t\t\t\tmodel: view.getModel(),\n\t\t\t\t\t\t\t\tlabel: dataField?.Label as string\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tcontroller.editFlow.invokeAction(dataField?.Action as string, params);\n\t\t\t\t\t\t} else if (action.type === \"ForNavigation\") {\n\t\t\t\t\t\t\tconst navigationParameters: NavigationParameters = {\n\t\t\t\t\t\t\t\tnavigationContexts: view.getBindingContext(\"internal\")?.getProperty(\"selectedContexts\")\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif ((dataField as DataFieldForIntentBasedNavigation)?.Mapping) {\n\t\t\t\t\t\t\t\tnavigationParameters.semanticObjectMapping = JSON.stringify(\n\t\t\t\t\t\t\t\t\t(dataField as DataFieldForIntentBasedNavigation).Mapping\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontroller._intentBasedNavigation.navigate(\n\t\t\t\t\t\t\t\t(dataField as DataFieldForIntentBasedNavigation).SemanticObject as unknown as string,\n\t\t\t\t\t\t\t\t(dataField as DataFieldForIntentBasedNavigation).Action as unknown as string,\n\t\t\t\t\t\t\t\tnavigationParameters\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t  };\n\n\t\treturn <MenuItem text={toolbarAction.label} {...pressEvent} enabled={toolbarAction.enabled} visible={toolbarAction.visible} />;\n\t} else {\n\t\treturn buildAction(action, toolbarAction, chartBlock, dataField, chartOperationAvailableMap);\n\t}\n}\n\nfunction buildAction(\n\taction: BaseAction | CustomAction,\n\ttoolbarAction: ToolBarAction,\n\tchartBlock: ChartBlock,\n\tdataField?: DataFieldForAction | DataFieldForIntentBasedNavigation,\n\tchartOperationAvailableMap?: string\n): ActionToolbarAction {\n\treturn (\n\t\t<ActionToolbarAction>\n\t\t\t<Button\n\t\t\t\tid={toolbarAction.id}\n\t\t\t\ttext={toolbarAction.label}\n\t\t\t\tariaHasPopup={toolbarAction.ariaHasPopup}\n\t\t\t\t{...getActionPress(action, dataField, chartOperationAvailableMap, chartBlock)}\n\t\t\t\tenabled={toolbarAction.enabled}\n\t\t\t\tvisible={toolbarAction.visible}\n\t\t\t\ticon={action.isAIOperation === true ? aiIcon : undefined}\n\t\t\t/>\n\t\t</ActionToolbarAction>\n\t);\n}\n\nfunction getActionPress(\n\taction: BaseAction | CustomAction,\n\tdataField?: DataFieldForAction | DataFieldForIntentBasedNavigation,\n\tchartOperationAvailableMap?: string,\n\tchartBlock?: ChartBlock\n): { press: (event: Button$PressEvent) => void } | { \"jsx:command\": CommandProperties } {\n\tlet actionPress: { press: (event: Button$PressEvent) => void } | { \"jsx:command\": CommandProperties } = {\n\t\tpress: \"\" as unknown as () => void\n\t};\n\n\tif (action.hasOwnProperty(\"noWrap\")) {\n\t\tif (action.command) {\n\t\t\tactionPress = { \"jsx:command\": `cmd:${action.command}|press` as CommandProperties };\n\t\t} else if ((action as CustomAction).noWrap === true) {\n\t\t\tactionPress = getCustomActionPress(action as CustomAction);\n\t\t} else if (!action.annotationPath) {\n\t\t\tactionPress = getActionPressWithAnnotationPath(action as CustomAction);\n\t\t}\n\t} else {\n\t\tactionPress = action.command\n\t\t\t? { \"jsx:command\": `cmd:${action.command}|press` as CommandProperties }\n\t\t\t: getStandardActionPressWithNoCommand(action, dataField, chartBlock, chartOperationAvailableMap);\n\t}\n\n\treturn actionPress;\n}\n\nfunction getCustomActionPress(action: CustomAction): { press: (event: Button$PressEvent) => void } {\n\treturn {\n\t\tpress: (event: Button$PressEvent): void => {\n\t\t\tconst functionName = action.handlerMethod?.split(\".\")[1] as string;\n\t\t\tconst controller = { ...CommonUtils.getTargetView(event.getSource()).getController() } as unknown as {\n\t\t\t\t[method: string]: (event: Button$PressEvent) => void;\n\t\t\t};\n\t\t\tif (controller[functionName]) controller[functionName](event);\n\t\t}\n\t};\n}\n\nfunction getActionPressWithAnnotationPath(action: CustomAction): { press: (event: Button$PressEvent) => void } {\n\treturn {\n\t\tpress: (event: Button$PressEvent): void => {\n\t\t\tconst selectedContexts = event.getSource().getBindingContext(\"internal\")?.getProperty(\"selectedContexts\");\n\t\t\tFPMHelper.actionWrapper(event, action.handlerModule, action.handlerMethod, {\n\t\t\t\tcontexts: selectedContexts\n\t\t\t});\n\t\t}\n\t};\n}\n\nfunction getStandardActionPressWithNoCommand(\n\taction: BaseAction | CustomAction,\n\tdataField?: DataFieldForAction | DataFieldForIntentBasedNavigation,\n\tchartBlock?: ChartBlock,\n\tchartOperationAvailableMap?: string\n): { press: (event: Button$PressEvent) => void } {\n\treturn {\n\t\tpress: (event: Button$PressEvent): void => {\n\t\t\tconst view = CommonUtils.getTargetView(event.getSource());\n\t\t\tconst controller = view.getController();\n\t\t\tif (action.type === \"ForAction\") {\n\t\t\t\tconst params = {\n\t\t\t\t\tcontexts: view.getBindingContext(\"internal\")?.getProperty(\"selectedContexts\"),\n\t\t\t\t\tinvocationGrouping:\n\t\t\t\t\t\t(dataField as DataFieldForAction)?.InvocationGrouping === OperationGroupingType.ChangeSet\n\t\t\t\t\t\t\t? \"ChangeSet\"\n\t\t\t\t\t\t\t: \"Isolated\",\n\t\t\t\t\tcontrolId: chartBlock?._blockId,\n\t\t\t\t\toperationAvailableMap: chartOperationAvailableMap,\n\t\t\t\t\tmodel: view.getModel(),\n\t\t\t\t\tlabel: dataField?.Label as string\n\t\t\t\t};\n\t\t\t\tcontroller.editFlow.invokeAction(dataField?.Action as string, params);\n\t\t\t} else if (action.type === \"ForNavigation\") {\n\t\t\t\tconst navigationParameters: NavigationParameters = {\n\t\t\t\t\tnavigationContexts: view.getBindingContext(\"internal\")?.getProperty(\"selectedContexts\")\n\t\t\t\t};\n\t\t\t\tif ((dataField as DataFieldForIntentBasedNavigation)?.Mapping) {\n\t\t\t\t\tnavigationParameters.semanticObjectMapping = JSON.stringify((dataField as DataFieldForIntentBasedNavigation).Mapping);\n\t\t\t\t}\n\t\t\t\tcontroller._intentBasedNavigation.navigate(\n\t\t\t\t\t(dataField as DataFieldForIntentBasedNavigation).SemanticObject as unknown as string,\n\t\t\t\t\t(dataField as DataFieldForIntentBasedNavigation).Action as unknown as string,\n\t\t\t\t\tnavigationParameters\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t};\n}\n\nfunction getAnnotationActionsEnabled(\n\taction: BaseAction,\n\tisBound: Record<string, boolean>,\n\tdataField: DataFieldForAction,\n\tchartContext: Context,\n\tcontext: Context\n): string {\n\treturn action.enabled !== undefined\n\t\t? action.enabled\n\t\t: ChartHelper.isDataFieldForActionButtonEnabled(\n\t\t\t\tisBound && isBound.$IsBound,\n\t\t\t\tdataField.Action as string,\n\t\t\t\tcontext,\n\t\t\t\tChartHelper.getOperationAvailableMap(chartContext.getObject(), { context: chartContext }),\n\t\t\t\taction.enableOnSelect || \"\"\n\t\t  );\n}\n\nfunction getSegmentedButton(chartBlock: ChartBlock): ActionToolbarAction {\n\treturn (\n\t\t<ActionToolbarAction\n\t\t\tlayoutInformation={{\n\t\t\t\taggregationName: \"end\",\n\t\t\t\talignment: \"End\"\n\t\t\t}}\n\t\t>\n\t\t\t<SegmentedButton\n\t\t\t\tid={generate([chartBlock._blockId, \"SegmentedButton\", \"TemplateContentView\"])}\n\t\t\t\tselectionChange={(event: SegmentedButton$SelectionChangeEvent): void => {\n\t\t\t\t\tchartBlock.fireSegmentedButtonPressed?.(\n\t\t\t\t\t\tmerge(event.getParameters(), { selectedKey: event.getSource().getSelectedKey() })\n\t\t\t\t\t);\n\t\t\t\t}}\n\t\t\t\tvisible={notEqual(pathInModel(\"alpContentView\", \"pageInternal\"), \"Table\")}\n\t\t\t\tselectedKey={pathInModel(\"alpContentView\", \"pageInternal\")}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\titems: getSegmentedButtonItems()\n\t\t\t\t}}\n\t\t\t</SegmentedButton>\n\t\t</ActionToolbarAction>\n\t);\n}\n\nfunction getSegmentedButtonItems(): string[] {\n\tconst segmentedButtonItems = [];\n\tif (CommonHelper.isDesktop()) {\n\t\tsegmentedButtonItems.push(\n\t\t\tgetSegmentedButtonItem(\"{sap.fe.i18n>M_COMMON_HYBRID_SEGMENTED_BUTTON_ITEM_TOOLTIP}\", \"Hybrid\", \"sap-icon://chart-table-view\")\n\t\t);\n\t}\n\tsegmentedButtonItems.push(\n\t\tgetSegmentedButtonItem(\"{sap.fe.i18n>M_COMMON_CHART_SEGMENTED_BUTTON_ITEM_TOOLTIP}\", \"Chart\", \"sap-icon://bar-chart\")\n\t);\n\tsegmentedButtonItems.push(\n\t\tgetSegmentedButtonItem(\"{sap.fe.i18n>M_COMMON_TABLE_SEGMENTED_BUTTON_ITEM_TOOLTIP}\", \"Table\", \"sap-icon://table-view\")\n\t);\n\treturn segmentedButtonItems;\n}\n\nfunction getSegmentedButtonItem(tooltip: string, key: string, icon: string): string {\n\treturn <SegmentedButtonItem tooltip={tooltip} key={key} icon={icon} />;\n}\n\n/**\n * Returns the annotation path pointing to the visualization annotation (Chart).\n * @param contextObjectPath The datamodel object path for the chart\n * @param converterContext The converter context\n * @returns The annotation path\n */\nfunction getVisualizationPath(\n\tcontextObjectPath: DataModelObjectPath<ChartType | SelectionPresentationVariant | PresentationVariant>,\n\tconverterContext: ConverterContext\n): string {\n\tconst metaPath = getContextRelativeTargetObjectPath(contextObjectPath);\n\n\t// fallback to default Chart if metaPath is not set\n\tif (!metaPath) {\n\t\tLog.error(`Missing metaPath parameter for Chart`);\n\t\treturn `@${UIAnnotationTerms.Chart}`;\n\t}\n\n\tif (contextObjectPath.targetObject?.term === UIAnnotationTerms.Chart) {\n\t\treturn metaPath; // MetaPath is already pointing to a Chart\n\t}\n\n\t//Need to switch to the context related the PV or SPV\n\tconst resolvedTarget = converterContext.getEntityTypeAnnotation(metaPath);\n\n\tlet visualizations: VisualizationAndPath[] = [];\n\tswitch (contextObjectPath.targetObject?.term) {\n\t\tcase UIAnnotationTerms.SelectionPresentationVariant:\n\t\t\tif (contextObjectPath.targetObject.PresentationVariant) {\n\t\t\t\tvisualizations = getVisualizationsFromAnnotation(\n\t\t\t\t\tcontextObjectPath.targetObject,\n\t\t\t\t\tmetaPath,\n\t\t\t\t\tresolvedTarget.converterContext,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase UIAnnotationTerms.PresentationVariant:\n\t\t\tvisualizations = getVisualizationsFromAnnotation(\n\t\t\t\tcontextObjectPath.targetObject,\n\t\t\t\tmetaPath,\n\t\t\t\tresolvedTarget.converterContext,\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\n\tconst chartViz = visualizations.find((viz) => {\n\t\treturn viz.visualization.term === UIAnnotationTerms.Chart;\n\t});\n\n\tif (chartViz) {\n\t\treturn chartViz.annotationPath;\n\t} else {\n\t\t// fallback to default Chart if annotation missing in PV\n\t\tLog.error(`Bad metaPath parameter for chart: ${contextObjectPath.targetObject?.term}`);\n\t\treturn `@${UIAnnotationTerms.Chart}`;\n\t}\n}\n\nfunction getVisible(dataFieldContext: Context, chartBlock: ChartBlock): string | boolean {\n\tconst dataField = dataFieldContext.getObject();\n\tif (dataField[`@${UIAnnotationTerms.Hidden}`] && dataField[`@${UIAnnotationTerms.Hidden}`].$Path) {\n\t\tconst hiddenPathContext = chartBlock._metaModel.createBindingContext(\n\t\t\tdataFieldContext.getPath() + `/@${UIAnnotationTerms.Hidden}/$Path`,\n\t\t\tdataField[`@${UIAnnotationTerms.Hidden}`].$Path\n\t\t);\n\t\treturn ChartHelper.getHiddenPathExpressionForTableActionsAndIBN(dataField[`@${UIAnnotationTerms.Hidden}`].$Path, {\n\t\t\tcontext: hiddenPathContext\n\t\t});\n\t} else if (dataField[`@${UIAnnotationTerms.Hidden}`]) {\n\t\treturn !dataField[`@${UIAnnotationTerms.Hidden}`];\n\t} else {\n\t\treturn true;\n\t}\n}\n\nfunction getChartConverterContext(\n\tproperties: ChartBlock,\n\toriginalViewData: Partial<ViewData>,\n\tcontextObjectPath: DataModelObjectPath<ChartContextObjectPath>,\n\tdiagnostics: Diagnostics,\n\textraParams?: Record<string, unknown>\n): ConverterContext<PageContextPathTarget> {\n\tlet viewData = Object.assign({}, originalViewData);\n\tdelete viewData.resourceModel;\n\tdelete viewData.appComponent;\n\tviewData = deepClone(viewData);\n\tlet controlConfiguration = {};\n\n\t// Only merge in page control configuration if the building block is on the same context\n\tconst relativePath = getTargetObjectPath(contextObjectPath.contextLocation ?? contextObjectPath);\n\tconst entitySetName = contextObjectPath.contextLocation?.targetEntitySet?.name ?? contextObjectPath.targetEntitySet?.name;\n\tif (\n\t\trelativePath === originalViewData?.contextPath ||\n\t\trelativePath === `/${originalViewData?.entitySet}` ||\n\t\tentitySetName === originalViewData?.entitySet\n\t) {\n\t\tcontrolConfiguration = viewData.controlConfiguration!;\n\t}\n\tviewData.controlConfiguration = merge(controlConfiguration, extraParams || {}) as ControlConfiguration;\n\n\treturn ConverterContext.createConverterContextForMacro(\n\t\tcontextObjectPath.startingEntitySet.name,\n\t\tproperties._metaModel,\n\t\tdiagnostics,\n\t\tmerge,\n\t\tcontextObjectPath.contextLocation,\n\t\tnew ManifestWrapper(viewData as BaseManifestSettings)\n\t);\n}\n\nfunction getConverterContext(\n\tchartBlock: ChartBlock,\n\tviewData: ViewData,\n\tcontextObjectPath: DataModelObjectPath<ChartContextObjectPath>,\n\tdiagnostics: Diagnostics\n): ConverterContext<PageContextPathTarget> {\n\tconst initialConverterContext = getChartConverterContext(chartBlock, viewData, contextObjectPath, diagnostics);\n\tconst visualizationPath = getVisualizationPath(contextObjectPath, initialConverterContext);\n\tconst extraParams = getExtraParams(chartBlock, visualizationPath);\n\treturn getChartConverterContext(chartBlock, viewData, contextObjectPath, diagnostics, extraParams);\n}\n\nfunction modifyIdentifiers(chartBlock: ChartBlock): void {\n\tif (chartBlock._applyIdToContent) {\n\t\tchartBlock._blockId = chartBlock.id.replace(/::Chart$/, \"\");\n\t\tchartBlock._contentId = chartBlock._blockId;\n\t} else {\n\t\tchartBlock._blockId = chartBlock.id;\n\t\tchartBlock._contentId = getContentId(chartBlock.id);\n\t}\n}\n\nfunction initialise(\n\tchartBlock: ChartBlock,\n\tviewData: ViewData,\n\tdiagnostics: Diagnostics,\n\tcontextObjectPath: DataModelObjectPath<ChartContextObjectPath>\n): void {\n\tconst metaContextPath = chartBlock.getMetaPathObject(chartBlock.metaPath, chartBlock._resolvedContextPath);\n\tchartBlock._metaModel = chartBlock._getOwner()?.preprocessorContext?.models.metaModel as ODataMetaModel;\n\tchartBlock._metaPathContext = chartBlock._metaModel.createBindingContext(metaContextPath!.getPath())!;\n\tchartBlock._context = chartBlock._metaModel.createBindingContext(chartBlock.contextPath ?? metaContextPath?.getContextPath())!;\n\n\tconst converterContext = getConverterContext(chartBlock, viewData, contextObjectPath, diagnostics);\n\tconst viewConfig = converterContext.getManifestWrapper()?.getViewConfiguration();\n\tconst isMultiTabs = (viewConfig?.paths?.length as number) > 1;\n\tconst hasMultipleVisualizations =\n\t\tconverterContext.getManifestWrapper()?.hasMultipleVisualizations() ||\n\t\tconverterContext.getTemplateType() === TemplateType.AnalyticalListPage;\n\tconst aggregationHelper = new AggregationHelper(converterContext.getEntityType(), converterContext, true); // passing the last parameter as true to consider the old annotations i.e. Aggregation.Aggregatable for backward compatibility in case of chart\n\n\tchartBlock._chartContext = ChartHelper.getUiChart(chartBlock._metaPathContext)!;\n\tchartBlock._chart = chartBlock._chartContext.getObject() as ChartType;\n\tchartBlock._blockActions = [];\n\tchartBlock._commandActions = [];\n\tmodifyIdentifiers(chartBlock);\n\n\tif (chartBlock._chart) {\n\t\tchartBlock.chartDefinition = createChartDefinition(\n\t\t\tchartBlock,\n\t\t\tconverterContext,\n\t\t\tcontextObjectPath,\n\t\t\tchartBlock._chartContext.getPath()\n\t\t);\n\t\tconst collection = chartBlock._metaModel.createBindingContext(chartBlock.chartDefinition.collection) as Context;\n\t\t// API Properties\n\t\tchartBlock.navigationPath = chartBlock.chartDefinition.navigationPath;\n\t\tchartBlock.autoBindOnInit = chartBlock.chartDefinition.autoBindOnInit;\n\t\tchartBlock.vizProperties = chartBlock.chartDefinition.vizProperties;\n\t\tchartBlock.chartActions = chartBlock.chartDefinition.actions;\n\t\tchartBlock.filter = getFilterBar(chartBlock);\n\t\tlet personalization: ChartP13nType;\n\t\tif (chartBlock.chartDefinition?.personalization !== undefined) {\n\t\t\tpersonalization = chartBlock.chartDefinition.personalization;\n\t\t} else {\n\t\t\tswitch (chartBlock.personalization) {\n\t\t\t\tcase \"false\":\n\t\t\t\t\tpersonalization = undefined;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"true\":\n\t\t\t\t\tpersonalization = Object.values(personalizationValues).join(\",\");\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tpersonalization = chartBlock.personalization as string;\n\t\t\t}\n\t\t}\n\t\tcheckPersonalizationInChartProperties(personalization, chartBlock);\n\t\tchartBlock.visible = chartBlock.chartDefinition.visible;\n\t\tlet contextPath = chartBlock._context.getPath();\n\t\tcontextPath = contextPath[contextPath.length - 1] === \"/\" ? contextPath.slice(0, -1) : contextPath;\n\t\tchartBlock.draftSupported = ModelHelper.isDraftSupported(chartBlock._metaModel, contextPath);\n\t\tchartBlock._chartType = ChartHelper.formatChartType(chartBlock._chart.ChartType);\n\n\t\tconst operationAvailableMap = ChartHelper.getOperationAvailableMap(chartBlock._chart, {\n\t\t\tcontext: chartBlock._chartContext\n\t\t});\n\n\t\tif (Object.keys(chartBlock.chartDefinition?.commandActions as object).length > 0) {\n\t\t\tObject.keys(chartBlock.chartDefinition?.commandActions as object).forEach((key: string) => {\n\t\t\t\tconst action = chartBlock.chartDefinition?.commandActions[key];\n\t\t\t\tconst actionContext = createBindingContext(action);\n\t\t\t\tconst dataFieldContext = action.annotationPath && chartBlock._metaModel.createBindingContext(action.annotationPath);\n\t\t\t\tconst dataField = dataFieldContext && dataFieldContext.getObject();\n\t\t\t\tconst chartOperationAvailableMap = escapeXMLAttributeValue(operationAvailableMap);\n\t\t\t\tpushActionCommand(actionContext, dataField, chartOperationAvailableMap, action, chartBlock);\n\t\t\t});\n\t\t}\n\t\tchartBlock.measures = getChartMeasures(chartBlock, aggregationHelper);\n\t\tconst presentationPath = CommonHelper.createPresentationPathContext(chartBlock._metaPathContext);\n\t\tchartBlock._sortConditions = ChartHelper.getSortConditions(\n\t\t\tchartBlock._metaPathContext,\n\t\t\tchartBlock._metaPathContext.getObject(),\n\t\t\tpresentationPath.getPath(),\n\t\t\tchartBlock.chartDefinition.applySupported\n\t\t);\n\t\tconst chartActionsContext = chartBlock._metaModel.createBindingContext(\n\t\t\tchartBlock._chartContext.getPath() + \"/Actions\",\n\t\t\tchartBlock._chart.Actions as unknown as Context\n\t\t);\n\t\tconst targetCollectionPath = CommonHelper.getTargetCollectionPath(collection);\n\t\tconst targetCollectionPathContext = chartBlock._metaModel.createBindingContext(targetCollectionPath, collection)!;\n\t\tconst actionsObject = contextObjectPath.convertedTypes.resolvePath(chartActionsContext.getPath())?.target;\n\n\t\tchartBlock._customData = {\n\t\t\ttargetCollectionPath: chartBlock.chartDefinition.collection,\n\t\t\tentitySet:\n\t\t\t\ttypeof targetCollectionPathContext.getObject() === \"string\"\n\t\t\t\t\t? targetCollectionPathContext.getObject()\n\t\t\t\t\t: targetCollectionPathContext.getObject(\"@sapui.name\"),\n\t\t\tentityType: chartBlock.chartDefinition.collection + \"/\",\n\t\t\toperationAvailableMap: JSON.parse(operationAvailableMap),\n\t\t\tmultiSelectDisabledActions: ActionHelper.getMultiSelectDisabledActions(actionsObject as DataFieldAbstractTypes[]) + \"\",\n\t\t\tsegmentedButtonId: generate([chartBlock._blockId, \"SegmentedButton\", \"TemplateContentView\"]),\n\t\t\tcustomAgg: chartBlock.chartDefinition?.customAgg,\n\t\t\ttransAgg: chartBlock.chartDefinition?.transAgg,\n\t\t\tapplySupported: chartBlock.chartDefinition?.applySupported,\n\t\t\tvizProperties: JSON.parse(chartBlock.vizProperties),\n\t\t\tdraftSupported: chartBlock.draftSupported,\n\t\t\tmultiViews: chartBlock.chartDefinition?.multiViews || (!hasMultipleVisualizations && isMultiTabs),\n\t\t\tselectionPresentationVariantPath: {\n\t\t\t\tdata: chartBlock.chartDefinition?.selectionPresentationVariantPath\n\t\t\t},\n\t\t\tchartDimensionKeyAndRole: chartBlock.chartDefinition?.chartDimensionKeyAndRole,\n\t\t\tchartMeasureKeyAndRole: chartBlock.chartDefinition?.chartMeasureKeyAndRole\n\t\t};\n\t\tif (chartBlock.chartDefinition.isParameterizedEntitySet) {\n\t\t\tchartBlock._customData.entitySet = chartBlock.chartDefinition.collection.substring(1);\n\t\t}\n\t} else {\n\t\t// fallback to display empty chart\n\t\tchartBlock.autoBindOnInit = false;\n\t\tchartBlock.visible = \"true\";\n\t\tchartBlock.navigationPath = \"\";\n\n\t\tchartBlock._customData = {\n\t\t\ttargetCollectionPath: \"\",\n\t\t\tentitySet: \"\",\n\t\t\tentityType: \"\",\n\t\t\toperationAvailableMap: \"\",\n\t\t\tmultiSelectDisabledActions: \"\",\n\t\t\tsegmentedButtonId: \"\",\n\t\t\tcustomAgg: {},\n\t\t\ttransAgg: {},\n\t\t\tapplySupported: {},\n\t\t\tvizProperties: {}\n\t\t};\n\t}\n}\n\nfunction getFilterBar(chartBlock: ChartBlock): string | undefined {\n\tconst filterBar = Element.getElementById(chartBlock.filterBar);\n\tif (chartBlock.filterBar && filterBar?.isA<MacroAPI>(\"sap.fe.macros.filterBar.FilterBarAPI\")) {\n\t\treturn getContentId(chartBlock.filterBar);\n\t} else if (filterBar?.isA<Control>(\"sap.fe.macros.controls.FilterBar\")) {\n\t\treturn chartBlock.filterBar;\n\t} else if (chartBlock.filterBar) {\n\t\treturn getContentId(chartBlock.filterBar);\n\t}\n}\n\nfunction getDelegate(chartBlock: ChartBlock): object {\n\tif (chartBlock.chartDelegate) {\n\t\t(chartBlock.chartDelegate as ChartDelegate).payload.selectionMode =\n\t\t\tchartBlock.chartDefinition.selectionMode?.toUpperCase() ??\n\t\t\t(chartBlock.chartDelegate as ChartDelegate).payload.selectionMode ??\n\t\t\t\"MULTIPLE\";\n\t}\n\treturn chartBlock.chartDelegate\n\t\t? chartBlock.chartDelegate\n\t\t: {\n\t\t\t\tname: \"sap/fe/macros/chart/ChartDelegate\",\n\t\t\t\tpayload: {\n\t\t\t\t\tchartContextPath: chartBlock._customData.targetCollectionPath,\n\t\t\t\t\tparameters: {\n\t\t\t\t\t\t$$groupId: \"$auto.Workers\"\n\t\t\t\t\t},\n\t\t\t\t\tselectionMode:\n\t\t\t\t\t\tchartBlock.chartDefinition.selectionMode?.toUpperCase() ?? chartBlock.selectionMode?.toUpperCase() ?? \"MULTIPLE\"\n\t\t\t\t}\n\t\t  };\n}\n\nfunction getCustomData(chartBlock: ChartBlock): CustomData[] {\n\treturn [\n\t\t<CustomData key={\"targetCollectionPath\"} value={chartBlock._customData.targetCollectionPath} />,\n\t\t<CustomData key={\"entitySet\"} value={chartBlock._customData.entitySet} />,\n\t\t<CustomData key={\"entityType\"} value={chartBlock._customData.entityType} />,\n\t\t<CustomData key={\"operationAvailableMap\"} value={chartBlock._customData.operationAvailableMap} />,\n\t\t<CustomData key={\"multiSelectDisabledActions\"} value={chartBlock._customData.multiSelectDisabledActions} />,\n\t\t<CustomData key={\"segmentedButtonId\"} value={chartBlock._customData.segmentedButtonId} />,\n\t\t<CustomData key={\"customAgg\"} value={chartBlock._customData.customAgg} />,\n\t\t<CustomData key={\"transAgg\"} value={chartBlock._customData.transAgg} />,\n\t\t<CustomData key={\"applySupported\"} value={chartBlock._customData.applySupported} />,\n\t\t<CustomData key={\"vizProperties\"} value={chartBlock._customData.vizProperties} />,\n\t\t<CustomData key={\"draftSupported\"} value={chartBlock._customData.draftSupported} />,\n\t\t<CustomData key={\"multiViews\"} value={chartBlock._customData.multiViews} />,\n\t\t<CustomData key={\"selectionPresentationVariantPath\"} value={chartBlock._customData.selectionPresentationVariantPath} />,\n\t\t<CustomData key={\"chartDimensionKeyAndRole\"} value={chartBlock._customData.chartDimensionKeyAndRole} />,\n\t\t<CustomData key={\"chartMeasureKeyAndRole\"} value={chartBlock._customData.chartMeasureKeyAndRole} />\n\t];\n}\n\nfunction getNoData(chartBlock: ChartBlock): IllustratedMessage | undefined {\n\tif (chartBlock._customData.targetCollectionPath === \"\") {\n\t\treturn;\n\t}\n\treturn (\n\t\t<IllustratedMessage\n\t\t\tillustrationSize={IllustratedMessageSize.Auto}\n\t\t\tillustrationType={IllustratedMessageType.BeforeSearch}\n\t\t\ttitle={chartBlock.getTranslatedText(\"T_TABLE_AND_CHART_NO_DATA_TITLE_TEXT\")}\n\t\t\tdescription={chartBlock.getTranslatedText(\"T_TABLE_AND_CHART_NO_DATA_TEXT\")}\n\t\t\tenableDefaultTitleAndDescription={false}\n\t\t\tenableVerticalResponsiveness={true}\n\t\t></IllustratedMessage>\n\t);\n}\n\nexport function getMdcChartTemplate(\n\tchartBlock: ChartBlock,\n\tviewData: ViewData,\n\tdiagnostics: Diagnostics,\n\tcontextObjectPath: DataModelObjectPath<ChartContextObjectPath>\n): MdcChart {\n\tinitialise(chartBlock, viewData, diagnostics, contextObjectPath);\n\tchartBlock.layoutData = <FlexItemData growFactor=\"1\" shrinkFactor=\"1\" />;\n\n\treturn (\n\t\t<MdcChart\n\t\t\tbinding={{ internal: \"controls/\" + chartBlock._blockId }}\n\t\t\tid={chartBlock._contentId}\n\t\t\tchartType={chartBlock._chartType}\n\t\t\tsortConditions={chartBlock._sortConditions}\n\t\t\theader={chartBlock.chartDefinition.header ?? chartBlock.header ?? chartBlock._chart?.Title?.toString() ?? \"\"}\n\t\t\theaderVisible={chartBlock.chartDefinition.headerVisible ?? chartBlock.headerVisible}\n\t\t\tminHeight={Device.system.phone ? \"80vh\" : \"400px\"}\n\t\t\theight=\"100%\"\n\t\t\twidth=\"100%\"\n\t\t\theaderLevel={chartBlock.headerLevel}\n\t\t\theaderStyle={chartBlock.headerStyle}\n\t\t\tp13nMode={(chartBlock._personalization! as string)?.split(\",\")}\n\t\t\tfilter={chartBlock.filter}\n\t\t\tnoDataText={\n\t\t\t\tchartBlock._customData.targetCollectionPath === \"\"\n\t\t\t\t\t? chartBlock.getTranslatedText(\"M_CHART_NO_ANNOTATION_SET_TEXT\")\n\t\t\t\t\t: chartBlock.noDataText\n\t\t\t}\n\t\t\tautoBindOnInit={chartBlock.autoBindOnInit}\n\t\t\tdelegate={getDelegate(chartBlock)}\n\t\t\tvisible={chartBlock.visible}\n\t\t>\n\t\t\t{{\n\t\t\t\tcustomData: getCustomData(chartBlock),\n\t\t\t\tdependents: [getDependents(chartBlock, chartBlock._chartContext), getPersistenceProvider(chartBlock)],\n\t\t\t\titems: getItems(chartBlock),\n\t\t\t\tactions: chartBlock.chartActions ? getToolbarActions(chartBlock) : chartBlock._blockActions,\n\t\t\t\tvariant: createVariantManagement(chartBlock),\n\t\t\t\tnoData: getNoData(chartBlock)\n\t\t\t}}\n\t\t</MdcChart>\n\t);\n}\n"],"mappings":"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","ignoreList":[]}
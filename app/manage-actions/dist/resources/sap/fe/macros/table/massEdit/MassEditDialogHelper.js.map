{"version":3,"file":"MassEditDialogHelper.js","names":["MassEditDialogHelper","props","this","maxAnalyzedRows","analyzedContexts","fieldProperties","entityTypePath","table","getParent","getTableDefinition","annotation","collection","metaModel","getModel","getMetaModel","manifestSettings","control","massEdit","onContextMenu","onDialogClose","onClose","view","CommonUtils","getTargetView","contexts","fetchContextsForEdit","degradedMode","length","slice","isAdaptation","getAppComponent","isAdaptationMode","headerInfo","getInvolvedDataModelObjects","getContext","targetEntityType","annotations","UI","HeaderInfo","_exports","_proto","prototype","open","async","templateComponent","Component","getOwnerComponentFor","internalModelContext","getBindingContext","internalModelProperty","selectedContexts","getProperty","getFieldsPropertiesFromInfo","getFieldsInfo","some","field","visible","noFieldInformation","confirmSelection","runAsOwner","massEditDialog","MassEditDialog","dialog","create","attachBeforeClose","requiredDataPromise","getRequiredDataPromise","getDataAfterOpeningDialog","resolve","error","Log","reject","visibleFieldsFromManifest","visibleFields","resourceBundle","Library","getResourceBundleFor","message","messageDetail","getText","getResourceText","TypeName","reduce","fields","fieldProperty","includes","propertyInfo","relativePath","push","label","join","MessageBox","information","details","coreResourceBundle","updatableContexts","Promise","tableAPI","editButton","cancelButton","typeName","typeNamePlural","TypeNamePlural","ModelHelper","isDraftSupported","data","readOnly","getMessageDetailForNonEditable","warning","actions","emphasizedAction","selection","undefined","getTranslatedTextFromExpBindingString","compileExpression","getExpressionFromAnnotation","toLocaleLowerCase","getEntityFieldsInfo","columnsData","columns","propertiesKeys","Set","column","type","name","transformPathsToInfo","getColumns","map","getPropertyKey","ignoredFields","ignoredField","delete","propertiesPaths","Array","from","columnInfos","propertyPath","columnInfo","getFieldInfo","entityPath","getMetaPath","entitySetDataModel","relatedColumnInfo","find","fieldInfo","annotationPath","propertyDataModel","enhanceDataModelPath","convertedAnnotation","convertMetaModelContext","targetProperty","getCompliantProperty","entityProperties","key","targetObject","isProperty","IsImageURL","isDataFieldTypes","hasOwnProperty","Value","$target","unitProperty","getAssociatedUnitProperty","isMultiValueField","hasValueHelp","Common","ValueListRelevantQualifiers","isHiddenForContexts","expBinding","anyObject","Any","anyBoolean","setModel","isHidden","context","setBindingContext","getBinding","getExternalValue","destroy","updatableContextProperty","getFieldProperties","deepClone","fieldsInfo","dataPropertyPath","getContextRelativeTargetObjectPath","unitOrCurrencyPropertyPath","getAssociatedUnitPropertyPath","getAssociatedCurrencyPropertyPath","inputType","getInputType","getRelativePaths","fieldData","visibilityBindings","isVisible","editMode","getEditMode","constant","Label","isFieldRequired","getRequiredExpression","descriptionPath","getAssociatedTextPropertyPath","textBinding","expression","getTextBinding","displayMode","getDisplayMode","IsTimezone","readOnlyExpression","isReadOnlyExpression","clearable","isPropertyClearable","emptyValue","getEmptyValueForProperty","selectItems","getDataForOpeningDialog","all","isFieldVisible","runtimeSelection","getRuntimeSelection","getDefaultSelectOptions","generateFieldsProperties","generateEntityFieldsProperties","missingContexts","bindingsToFetch","concat","pathInModel","getMissingData","bindingsToResolve","bindings","getViewData","converterType","displayedProperties","every","promises","controls","model","binding","filter","startsWith","parameters","bindingType","controlBinding","setBindingMode","BindingMode","OneTime","isA","getBindings","nestedBinding","requestValue","promise","property","nullable","any","formatWithTypeInformation","value","getBindingInfo","getType","parseValue","distinctMap","selectOptions","anyText","selectedContext","propertyText","has","add","text","unitOrCurrencyValue","getObject","propertyValue","keepEntry","SpecificSelectKeys","KeepKey","defaultOptions","ReplaceKey","ClearFieldValueKey","getFieldEditable","FieldEditMode","Editable","Object","keys","anyControl","dataFieldConverted","dataModelPath","editStyleProperties","setEditStyleProperties","editStyle","isStaticEditMode","isEditable"],"sources":["./MassEditDialogHelper.tsx"],"sourcesContent":["import type { PrimitiveType, Property, PropertyAnnotationValue } from \"@sap-ux/vocabularies-types\";\nimport type { DataField, DataFieldForAction, DataFieldForAnnotation, HeaderInfo } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport type ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport deepClone from \"sap/base/util/deepClone\";\nimport type { CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport {\n\tcompileExpression,\n\tconstant,\n\tformatWithTypeInformation,\n\tgetExpressionFromAnnotation,\n\tpathInModel\n} from \"sap/fe/base/BindingToolkit\";\nimport type { FEView } from \"sap/fe/core/BaseController\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type TemplateComponent from \"sap/fe/core/TemplateComponent\";\nimport Any from \"sap/fe/core/controls/Any\";\nimport { convertMetaModelContext, getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport { isDataFieldTypes } from \"sap/fe/core/converters/annotations/DataField\";\nimport type { MassEditTableConfiguration } from \"sap/fe/core/converters/controls/Common/Table\";\nimport type { AnnotationTableColumn } from \"sap/fe/core/converters/controls/Common/table/Columns\";\nimport type { InternalModelContext } from \"sap/fe/core/helpers/ModelHelper\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport { isProperty } from \"sap/fe/core/helpers/TypeGuards\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { enhanceDataModelPath, getContextRelativeTargetObjectPath, getRelativePaths } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { getDisplayMode } from \"sap/fe/core/templating/DisplayModeFormatter\";\nimport { isReadOnlyExpression } from \"sap/fe/core/templating/FieldControlHelper\";\nimport {\n\tgetAssociatedCurrencyPropertyPath,\n\tgetAssociatedTextPropertyPath,\n\tgetAssociatedUnitProperty,\n\tgetAssociatedUnitPropertyPath,\n\thasValueHelp\n} from \"sap/fe/core/templating/PropertyHelper\";\nimport { getEditMode, getRequiredExpression, isMultiValueField, isVisible } from \"sap/fe/core/templating/UIFormatters\";\nimport { getTextBinding, setEditStyleProperties } from \"sap/fe/macros/field/FieldTemplating\";\nimport type { FieldBlockProperties } from \"sap/fe/macros/internal/field/FieldStructureHelper\";\nimport type TableAPI from \"sap/fe/macros/table/TableAPI\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport Component from \"sap/ui/core/Component\";\nimport Library from \"sap/ui/core/Lib\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport FieldEditMode from \"sap/ui/mdc/enums/FieldEditMode\";\nimport BindingMode from \"sap/ui/model/BindingMode\";\nimport type CompositeBinding from \"sap/ui/model/CompositeBinding\";\nimport type PropertyBinding from \"sap/ui/model/PropertyBinding\";\nimport type ODataV4Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport type ODataPropertyBinding from \"sap/ui/model/odata/v4/ODataPropertyBinding\";\nimport MassEditDialog from \"./MassEditDialog\";\nimport type { BindingInfo, MassFieldProperties, SelectInfo } from \"./library\";\nimport { SpecificSelectKeys } from \"./library\";\n\ntype DataFieldTypes = DataField | DataFieldForAnnotation | DataFieldForAction;\ntype FieldInfo = {\n\tkey: string;\n\tpropertyDataModel: DataModelObjectPath<Property>;\n\ttargetProperty: Property;\n\tlabel: string;\n\tconvertedAnnotation: DataFieldTypes;\n};\n\ntype BindingToFetch = BindingInfo & { contexts?: ODataV4Context[] };\n\n/**\n * Display the massEdit dialog.\n */\nexport default class MassEditDialogHelper {\n\tprivate readonly table: Table;\n\n\tprivate readonly onContextMenu: boolean;\n\n\tprivate readonly onDialogClose: (() => void) | undefined;\n\n\tprivate readonly view: FEView;\n\n\tprivate readonly maxAnalyzedRows = 30;\n\n\tprivate contexts: ODataV4Context[];\n\n\tprivate readonly analyzedContexts: ODataV4Context[] = [];\n\n\tprivate readonly degradedMode: boolean;\n\n\tprivate readonly manifestSettings: MassEditTableConfiguration;\n\n\tprivate fieldProperties: MassFieldProperties[] = [];\n\n\tprivate readonly isAdaptation: boolean;\n\n\tprivate readonly headerInfo: HeaderInfo | undefined;\n\n\tmassEditDialog: MassEditDialog | undefined;\n\n\tconstructor(props: { table: Table; onContextMenu: boolean; onClose?: () => void }) {\n\t\tconst entityTypePath = (props.table.getParent() as TableAPI).getTableDefinition().annotation.collection,\n\t\t\tmetaModel = (props.table.getModel() as ODataModel).getMetaModel();\n\n\t\tthis.table = props.table;\n\t\tthis.manifestSettings = (this.table.getParent() as TableAPI).getTableDefinition().control.massEdit;\n\t\tthis.onContextMenu = props.onContextMenu;\n\t\tthis.onDialogClose = props.onClose;\n\t\tthis.view = CommonUtils.getTargetView(this.table);\n\t\tthis.contexts = this.fetchContextsForEdit();\n\t\tthis.degradedMode = this.contexts.length > this.maxAnalyzedRows;\n\t\tthis.analyzedContexts = this.degradedMode ? this.contexts.slice(0, this.maxAnalyzedRows) : this.contexts;\n\t\tthis.isAdaptation = CommonUtils.getAppComponent(this.table).isAdaptationMode();\n\t\tthis.headerInfo = getInvolvedDataModelObjects(metaModel.getContext(entityTypePath)).targetEntityType.annotations.UI?.HeaderInfo;\n\t}\n\n\t/**\n\t * Opens the mass edit dialog if all selected contexts are editable,\n\t * otherwise a message box to confirm the selection.\n\t * @returns A promise that resolves on open of the mass edit dialog.\n\t */\n\tasync open(): Promise<void> {\n\t\ttry {\n\t\t\tconst templateComponent = Component.getOwnerComponentFor(this.view) as TemplateComponent;\n\t\t\tconst internalModelContext = this.table.getBindingContext(\"internal\") as InternalModelContext,\n\t\t\t\tinternalModelProperty = !this.onContextMenu ? \"numberOfSelectedContexts\" : \"contextmenu/numberOfSelectedContexts\",\n\t\t\t\tselectedContexts = internalModelContext.getProperty(internalModelProperty) || 0;\n\t\t\tthis.fieldProperties = await this.getFieldsPropertiesFromInfo(this.getFieldsInfo());\n\t\t\tif (!this.isAdaptation) {\n\t\t\t\t// no field to edit\n\t\t\t\tif (!this.fieldProperties.some((field) => field.visible)) {\n\t\t\t\t\tthis.noFieldInformation();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t//Some rows are not editable -> do we want to continue?\n\t\t\t\tif (this.contexts.length !== selectedContexts) {\n\t\t\t\t\tthis.contexts = await this.confirmSelection(this.contexts, selectedContexts);\n\t\t\t\t\tif (!this.contexts.length) {\n\t\t\t\t\t\t// the user doesn't want to continue\n\t\t\t\t\t\tthis.onDialogClose?.();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait templateComponent.runAsOwner(async () => {\n\t\t\t\tthis.massEditDialog = new MassEditDialog({\n\t\t\t\t\ttable: this.table,\n\t\t\t\t\tcontexts: this.contexts,\n\t\t\t\t\tfieldProperties: this.fieldProperties\n\t\t\t\t});\n\t\t\t\tconst dialog = await this.massEditDialog.create();\n\t\t\t\tdialog.attachBeforeClose(() => {\n\t\t\t\t\tthis.onDialogClose?.();\n\t\t\t\t});\n\t\t\t\tdialog.open();\n\t\t\t\tconst requiredDataPromise = this.massEditDialog.getRequiredDataPromise();\n\t\t\t\ttry {\n\t\t\t\t\tawait this.getDataAfterOpeningDialog(this.fieldProperties);\n\t\t\t\t\trequiredDataPromise.resolve();\n\t\t\t\t} catch (error) {\n\t\t\t\t\tLog.error(\"Mass Edit: Something went wrong in mass edit dialog to get required data.\", error as string);\n\t\t\t\t\trequiredDataPromise.reject();\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (error: unknown) {\n\t\t\tLog.error(\"Mass Edit: Something went wrong in mass edit dialog creation.\", error as string);\n\t\t}\n\t}\n\n\t/**\n\t * Opens the message box to notify no fields are editable.\n\t */\n\tprivate noFieldInformation(): void {\n\t\tconst visibleFieldsFromManifest = (this.table.getParent() as TableAPI).getTableDefinition().control.massEdit.visibleFields;\n\t\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.macros\") as ResourceBundle;\n\t\tlet message = \"\",\n\t\t\tmessageDetail;\n\t\tif (visibleFieldsFromManifest.length > 0) {\n\t\t\tmessage = resourceBundle.getText(\"C_MASS_EDIT_NO_EDITABLE_FIELDS_WITH_MANIFEST\", [\n\t\t\t\tthis.getResourceText(this.headerInfo?.TypeName) ?? resourceBundle.getText(\"C_MASS_EDIT_DIALOG_DEFAULT_TYPENAME\")\n\t\t\t]);\n\t\t\tmessageDetail = `<ul>\n\t\t\t${this.fieldProperties\n\t\t\t\t.reduce((fields: string[], fieldProperty) => {\n\t\t\t\t\tif (visibleFieldsFromManifest.includes(fieldProperty.propertyInfo.relativePath)) {\n\t\t\t\t\t\tfields.push(`<li>${fieldProperty.label}</li>`);\n\t\t\t\t\t}\n\t\t\t\t\treturn fields;\n\t\t\t\t}, [])\n\t\t\t\t.join(\"\")} </ul>`;\n\t\t} else {\n\t\t\tmessage = resourceBundle.getText(\"C_MASS_EDIT_NO_EDITABLE_FIELDS_DEFAULT\");\n\t\t}\n\n\t\tMessageBox.information(message, {\n\t\t\tdetails: messageDetail,\n\t\t\tonClose: () => {\n\t\t\t\tthis.onDialogClose?.();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Opens the confirmation dialog to validate the selected contexts.\n\t * @param contexts The contexts set as updatable\n\t * @param selectedContexts  The number of selected contexts\n\t * @returns A promise that resolves the contexts to be finally managed.\n\t */\n\tprivate async confirmSelection(contexts: ODataV4Context[], selectedContexts: number): Promise<ODataV4Context[]> {\n\t\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.macros\") as ResourceBundle;\n\t\tconst coreResourceBundle = Library.getResourceBundleFor(\"sap.fe.core\") as ResourceBundle;\n\n\t\tconst updatableContexts = contexts.length;\n\t\treturn new Promise((resolve) => {\n\t\t\ttry {\n\t\t\t\tconst tableAPI = this.table.getParent() as TableAPI;\n\t\t\t\tconst editButton = resourceBundle.getText(\"C_MASS_EDIT_CONFIRM_BUTTON_TEXT\"),\n\t\t\t\t\tcancelButton = coreResourceBundle.getText(\"C_COMMON_OBJECT_PAGE_CANCEL\"),\n\t\t\t\t\tmetaModel = (this.table.getModel() as ODataModel).getMetaModel(),\n\t\t\t\t\ttypeName =\n\t\t\t\t\t\tthis.getResourceText(this.headerInfo?.TypeName) ?? resourceBundle.getText(\"C_MASS_EDIT_DIALOG_DEFAULT_TYPENAME\"),\n\t\t\t\t\ttypeNamePlural =\n\t\t\t\t\t\tthis.getResourceText(this.headerInfo?.TypeNamePlural) ??\n\t\t\t\t\t\tresourceBundle.getText(\"C_MASS_EDIT_DIALOG_DEFAULT_TYPENAME_PLURAL\"),\n\t\t\t\t\tmessageDetail =\n\t\t\t\t\t\tModelHelper.isDraftSupported(metaModel, this.table.data(\"targetCollectionPath\")) && tableAPI.readOnly\n\t\t\t\t\t\t\t? this.getMessageDetailForNonEditable(typeName, typeNamePlural)\n\t\t\t\t\t\t\t: \"\";\n\n\t\t\t\tMessageBox.warning(\n\t\t\t\t\tresourceBundle.getText(\"C_MASS_EDIT_CONFIRM_MESSAGE\", [\n\t\t\t\t\t\tselectedContexts - updatableContexts,\n\t\t\t\t\t\tselectedContexts,\n\t\t\t\t\t\tupdatableContexts,\n\t\t\t\t\t\ttypeNamePlural\n\t\t\t\t\t]),\n\t\t\t\t\t{\n\t\t\t\t\t\tdetails: messageDetail,\n\t\t\t\t\t\tactions: [editButton, cancelButton],\n\t\t\t\t\t\temphasizedAction: editButton,\n\t\t\t\t\t\tonClose: function (selection: string) {\n\t\t\t\t\t\t\tresolve(selection === editButton ? contexts : []);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tLog.error(error as string);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Gets the text according to an annotation.\n\t * @param annotation The annotation\n\t * @returns The text.\n\t */\n\tprivate getResourceText(annotation: PropertyAnnotationValue<String> | undefined): string | undefined {\n\t\tif (!annotation) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn CommonUtils.getTranslatedTextFromExpBindingString(\n\t\t\tcompileExpression(getExpressionFromAnnotation(annotation)) as string,\n\t\t\tthis.view\n\t\t)?.toLocaleLowerCase();\n\t}\n\n\t/**\n\t * Gets the message detail of the confirmation dialog.\n\t * @param typeName The type name of the entity set\n\t * @param typeNamePlural The type name plural of the entity set\n\t * @returns The text.\n\t */\n\tprivate getMessageDetailForNonEditable(typeName: string, typeNamePlural: string): string {\n\t\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.macros\") as ResourceBundle;\n\t\treturn `<p><strong>${resourceBundle.getText(\"C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_HEADER\")}</strong></p>\\n\n\t\t\t<p>${resourceBundle.getText(\"C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_REASON\", [typeNamePlural])}</p>\\n\n\t\t\t<ul>\n\t\t\t\t<li>${resourceBundle.getText(\"C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_REASON_DRAFT\", [typeName])}</li>\n\t\t\t\t<li>${resourceBundle.getText(\"C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_REASON_NON_EDITABLE\", [typeName])}</li>\n\t\t\t</ul>`;\n\t}\n\n\t/**\n\t * Gets information about the entity which is compliant for a Mass Edit.\n\t * @returns Array of the field information.\n\t */\n\n\tprivate getEntityFieldsInfo(): FieldInfo[] {\n\t\tconst tableAPI = this.table.getParent() as TableAPI;\n\t\tconst columnsData = tableAPI.getTableDefinition().columns;\n\n\t\tconst propertiesKeys = new Set(\n\t\t\tcolumnsData.reduce((fields: string[], column) => {\n\t\t\t\tif (column.type === \"Annotation\") {\n\t\t\t\t\tfields.push(column.name);\n\t\t\t\t}\n\t\t\t\treturn fields;\n\t\t\t}, [])\n\t\t);\n\t\treturn this.transformPathsToInfo(propertiesKeys);\n\t}\n\n\t/**\n\t * Gets information about the properties of the table which are compliant for a Mass Edit.\n\t * @returns Array of the field information.\n\t */\n\tprivate getFieldsInfo(): FieldInfo[] {\n\t\tconst propertiesKeys =\n\t\t\tthis.manifestSettings.visibleFields.length > 0\n\t\t\t\t? new Set(this.manifestSettings.visibleFields)\n\t\t\t\t: new Set(this.table.getColumns().map((column) => column.getPropertyKey()));\n\n\t\tif (this.manifestSettings.ignoredFields.length > 0) {\n\t\t\tfor (const ignoredField of this.manifestSettings.ignoredFields) {\n\t\t\t\tpropertiesKeys.delete(ignoredField);\n\t\t\t}\n\t\t}\n\t\treturn this.transformPathsToInfo(propertiesKeys);\n\t}\n\n\t/**\n\t * Transforms a set of property paths to an array of field information.\n\t * @param propertiesPaths The set of property paths\n\t * @returns Array of the field information.\n\t */\n\tprivate transformPathsToInfo(propertiesPaths: Set<string>): FieldInfo[] {\n\t\treturn Array.from(propertiesPaths).reduce((columnInfos: FieldInfo[], propertyPath) => {\n\t\t\tconst columnInfo = this.getFieldInfo(propertyPath);\n\t\t\tif (columnInfo) {\n\t\t\t\tcolumnInfos.push(columnInfo);\n\t\t\t}\n\t\t\treturn columnInfos;\n\t\t}, []);\n\t}\n\n\t/**\n\t * Gets information about a property.\n\t * @param propertyPath\n\t * @returns Field information.\n\t */\n\tprivate getFieldInfo(propertyPath: string): FieldInfo | undefined {\n\t\tconst columnsData = (this.table.getParent() as TableAPI).getTableDefinition().columns;\n\t\tconst metaModel = (this.table.getModel() as ODataModel).getMetaModel();\n\t\tconst entityPath = metaModel.getMetaPath(this.table.data(\"metaPath\"));\n\t\tconst entitySetDataModel = getInvolvedDataModelObjects(metaModel.getContext(entityPath));\n\t\tconst relatedColumnInfo = columnsData.find((fieldInfo) => fieldInfo.name === propertyPath && fieldInfo.type === \"Annotation\");\n\t\tif (relatedColumnInfo) {\n\t\t\tconst annotationPath = (relatedColumnInfo as AnnotationTableColumn).annotationPath;\n\t\t\tif (annotationPath && propertyPath) {\n\t\t\t\tconst propertyDataModel = enhanceDataModelPath<Property>(entitySetDataModel, propertyPath);\n\t\t\t\tconst convertedAnnotation = convertMetaModelContext(metaModel.getContext(annotationPath)) as\n\t\t\t\t\t| DataField\n\t\t\t\t\t| DataFieldForAnnotation\n\t\t\t\t\t| DataFieldForAction;\n\t\t\t\tconst targetProperty = this.getCompliantProperty(propertyDataModel, convertedAnnotation);\n\t\t\t\tif (targetProperty && entitySetDataModel.targetEntityType.entityProperties.includes(targetProperty))\n\t\t\t\t\treturn {\n\t\t\t\t\t\tkey: relatedColumnInfo.key,\n\t\t\t\t\t\tpropertyDataModel,\n\t\t\t\t\t\ttargetProperty,\n\t\t\t\t\t\tlabel: relatedColumnInfo.label ?? relatedColumnInfo.key,\n\t\t\t\t\t\tconvertedAnnotation\n\t\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Gets the property to display on the Dialog.\n\t * @param propertyDataModel The dataModelObjectPath of the column\n\t * @param annotation  The converted annotation of the column\n\t * @returns The property if it is compliant, undefined otherwise\n\t */\n\tprivate getCompliantProperty(propertyDataModel: DataModelObjectPath<Property>, annotation: DataFieldTypes): Property | undefined {\n\t\tconst targetObject = propertyDataModel.targetObject;\n\t\tlet targetProperty: Property;\n\t\tif (isProperty(targetObject)) {\n\t\t\ttargetProperty = targetObject;\n\t\t\tif (targetObject.annotations.UI?.IsImageURL) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (isDataFieldTypes(annotation) && !annotation.hasOwnProperty(\"Action\")) {\n\t\t\ttargetProperty = annotation.Value.$target;\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if the field is compliant for the MassEdit\n\t\tconst unitProperty = getAssociatedUnitProperty(targetProperty);\n\t\tif (\n\t\t\tisMultiValueField(propertyDataModel) ||\n\t\t\t(hasValueHelp(targetProperty) && targetProperty.annotations?.Common?.ValueListRelevantQualifiers) || // context dependent VH is not supported for Mass Edit.\n\t\t\t(unitProperty && hasValueHelp(unitProperty) && unitProperty.annotations?.Common?.ValueListRelevantQualifiers)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\treturn targetProperty;\n\t}\n\n\t/**\n\t * Checks if the field is hidden for the provided contexts.\n\t * @param expBinding The expression binding of the property.\n\t * @returns True if the field is hidden for all contexts, false otherwise\n\t */\n\tprivate isHiddenForContexts(expBinding: CompiledBindingToolkitExpression): boolean {\n\t\tif (expBinding === \"true\") {\n\t\t\treturn false;\n\t\t} else if (expBinding === \"false\") {\n\t\t\treturn true;\n\t\t}\n\t\tconst anyObject = new Any({ anyBoolean: expBinding });\n\t\tanyObject.setModel(this.analyzedContexts[0].getModel());\n\t\tconst isHidden = !this.analyzedContexts.find((context) => {\n\t\t\tanyObject.setBindingContext(context);\n\t\t\treturn (anyObject.getBinding(\"anyBoolean\") as PropertyBinding).getExternalValue();\n\t\t});\n\t\tanyObject.destroy();\n\t\treturn isHidden;\n\t}\n\n\t/**\n\t * Gets the selected context set as updatable.\n\t * @returns The contexts.\n\t */\n\tprivate fetchContextsForEdit(): ODataV4Context[] {\n\t\tconst internalModelContext = this.table.getBindingContext(\"internal\"),\n\t\t\tupdatableContextProperty = !this.onContextMenu ? \"updatableContexts\" : \"contextmenu/updatableContexts\";\n\t\treturn internalModelContext?.getProperty(updatableContextProperty) ?? [];\n\t}\n\n\t/**\n\t * Gets the properties of the mass edit fields.\n\t * @returns The properties of the mass edit field.\n\t */\n\tgetFieldProperties(): MassFieldProperties[] {\n\t\treturn deepClone(this.fieldProperties);\n\t}\n\n\t/**\n\t * Gets the properties of the mass edit fields from an array of field information.\n\t * @param fieldsInfo The field information.\n\t * @returns The properties of the mass edit fields.\n\t */\n\tprivate async getFieldsPropertiesFromInfo(fieldsInfo: FieldInfo[]): Promise<MassFieldProperties[]> {\n\t\tconst fieldProperties: MassFieldProperties[] = [];\n\n\t\tfor (const fieldInfo of fieldsInfo) {\n\t\t\tconst { targetProperty, propertyDataModel, convertedAnnotation } = fieldInfo;\n\t\t\tconst dataPropertyPath = getContextRelativeTargetObjectPath(propertyDataModel);\n\t\t\tif (dataPropertyPath) {\n\t\t\t\tconst unitOrCurrencyPropertyPath =\n\t\t\t\t\tgetAssociatedUnitPropertyPath(targetProperty) || getAssociatedCurrencyPropertyPath(targetProperty);\n\t\t\t\tconst inputType = this.getInputType(convertedAnnotation, propertyDataModel);\n\t\t\t\tif (inputType && propertyDataModel.targetObject) {\n\t\t\t\t\tconst relativePath = getRelativePaths(propertyDataModel);\n\t\t\t\t\tconst fieldData = {\n\t\t\t\t\t\tvisibilityBindings: {\n\t\t\t\t\t\t\tisVisible: compileExpression(isVisible(convertedAnnotation)),\n\t\t\t\t\t\t\teditMode: getEditMode(\n\t\t\t\t\t\t\t\ttargetProperty,\n\t\t\t\t\t\t\t\tpropertyDataModel,\n\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\tconvertedAnnotation,\n\t\t\t\t\t\t\t\tconstant(true)\n\t\t\t\t\t\t\t) as CompiledBindingToolkitExpression\n\t\t\t\t\t\t},\n\t\t\t\t\t\tvisible: true, //by default the field is visible\n\t\t\t\t\t\tlabel: fieldInfo.label || (targetProperty.annotations.Common?.Label as string | undefined) || dataPropertyPath,\n\t\t\t\t\t\tisFieldRequired: getRequiredExpression(\n\t\t\t\t\t\t\ttargetProperty,\n\t\t\t\t\t\t\tconvertedAnnotation,\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tpropertyDataModel\n\t\t\t\t\t\t) as CompiledBindingToolkitExpression,\n\t\t\t\t\t\tdescriptionPath: getAssociatedTextPropertyPath(propertyDataModel.targetObject),\n\t\t\t\t\t\ttextBinding: {\n\t\t\t\t\t\t\texpression: getTextBinding(propertyDataModel, {\n\t\t\t\t\t\t\t\tdisplayMode: getDisplayMode(targetProperty, propertyDataModel)\n\t\t\t\t\t\t\t}) as CompiledBindingToolkitExpression,\n\t\t\t\t\t\t\ttype:\n\t\t\t\t\t\t\t\ttargetProperty.type === \"Edm.DateTimeOffset\" || targetProperty?.annotations?.Common?.IsTimezone\n\t\t\t\t\t\t\t\t\t? \"anyText\"\n\t\t\t\t\t\t\t\t\t: \"any\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\treadOnlyExpression: isReadOnlyExpression(targetProperty, relativePath),\n\t\t\t\t\t\tinputType,\n\t\t\t\t\t\tpropertyInfo: {\n\t\t\t\t\t\t\tclearable: this.isPropertyClearable(targetProperty),\n\t\t\t\t\t\t\temptyValue: this.getEmptyValueForProperty(targetProperty, dataPropertyPath),\n\t\t\t\t\t\t\tkey: fieldInfo.key,\n\t\t\t\t\t\t\trelativePath: dataPropertyPath,\n\t\t\t\t\t\t\tunitOrCurrencyPropertyPath\n\t\t\t\t\t\t},\n\t\t\t\t\t\tselectItems: [] as SelectInfo[]\n\t\t\t\t\t};\n\t\t\t\t\tfieldProperties.push(fieldData);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tawait this.getDataForOpeningDialog(fieldProperties);\n\t\tawait Promise.all(\n\t\t\tfieldProperties.map(async (fieldData) => {\n\t\t\t\tfieldData.visible = this.manifestSettings.visibleFields.length === 0 ? this.isFieldVisible(fieldData) : true;\n\t\t\t\tconst runtimeSelection = !this.isAdaptation ? await this.getRuntimeSelection(fieldData) : [];\n\t\t\t\tfieldData.selectItems = [...this.getDefaultSelectOptions(fieldData), ...runtimeSelection];\n\t\t\t})\n\t\t);\n\t\treturn fieldProperties;\n\t}\n\n\t/**\n\t * Gets the properties of dialog fields.\n\t * @returns The properties.\n\t */\n\tasync generateFieldsProperties(): Promise<MassFieldProperties[]> {\n\t\treturn this.getFieldsPropertiesFromInfo(this.getFieldsInfo());\n\t}\n\n\t/**\n\t * Gets the properties of the entity.\n\t * @returns The properties.\n\t */\n\tasync generateEntityFieldsProperties(): Promise<MassFieldProperties[]> {\n\t\treturn this.getFieldsPropertiesFromInfo(this.getEntityFieldsInfo());\n\t}\n\n\t/**\n\t * Gets the relevant data from the model needed after the opening of the dialog.\n\t * This method is called only in the degraded mode since the data is already fetched in the normal mode.\n\t * the degraded mode is set when the number of selected contexts is greater than the max analyzed rows.\n\t * @param fieldProperties The field properties\n\t * @returns A promise that resolves when the data is fetched.\n\t */\n\tprivate async getDataAfterOpeningDialog(fieldProperties: MassFieldProperties[]): Promise<void> {\n\t\tif (this.degradedMode) {\n\t\t\tconst missingContexts = this.contexts.slice(this.maxAnalyzedRows, this.contexts.length);\n\t\t\tconst bindingsToFetch = ([] as BindingToFetch[]).concat(\n\t\t\t\t...fieldProperties.map((fieldData) => [\n\t\t\t\t\t{ expression: compileExpression(fieldData.readOnlyExpression), contexts: this.contexts },\n\t\t\t\t\t{ expression: compileExpression(pathInModel(fieldData.propertyInfo.relativePath)), contexts: missingContexts },\n\t\t\t\t\t{\n\t\t\t\t\t\texpression: compileExpression(pathInModel(fieldData.propertyInfo.unitOrCurrencyPropertyPath)),\n\t\t\t\t\t\tcontexts: missingContexts\n\t\t\t\t\t}\n\t\t\t\t])\n\t\t\t);\n\t\t\tawait this.getMissingData(bindingsToFetch);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the relevant data from the model needed to open the dialog.\n\t * @param fieldProperties The field properties\n\t * @returns A promise that resolves when the data is fetched.\n\t */\n\tprivate async getDataForOpeningDialog(fieldProperties: MassFieldProperties[]): Promise<void> {\n\t\tconst bindingsToResolve = ([] as BindingToFetch[]).concat(\n\t\t\tfieldProperties.reduce((bindings: BindingToFetch[], fieldData) => {\n\t\t\t\tbindings = bindings.concat([\n\t\t\t\t\t{ expression: fieldData.textBinding.expression },\n\t\t\t\t\t{\n\t\t\t\t\t\texpression: compileExpression(pathInModel(fieldData.propertyInfo.relativePath)),\n\t\t\t\t\t\ttype: fieldData.textBinding.type\n\t\t\t\t\t},\n\t\t\t\t\t{ expression: compileExpression(pathInModel(fieldData.propertyInfo.unitOrCurrencyPropertyPath)) }\n\t\t\t\t]);\n\t\t\t\tif (!this.manifestSettings.visibleFields.length) {\n\t\t\t\t\tbindings = bindings.concat([\n\t\t\t\t\t\t{ expression: fieldData.visibilityBindings.isVisible },\n\t\t\t\t\t\t{ expression: fieldData.visibilityBindings.editMode }\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t\tif (!this.degradedMode) {\n\t\t\t\t\tbindings.push({ expression: compileExpression(fieldData.readOnlyExpression) });\n\t\t\t\t}\n\t\t\t\treturn bindings;\n\t\t\t}, [])\n\t\t);\n\t\tawait this.getMissingData(bindingsToResolve);\n\t}\n\n\t/**\n\t * Gets the missing data for the fields.\n\t * This method generates controls with the provided bindings to fetch the missing data.\n\t * The model requests the data to the backend when the contexts doesn't contains the related properties.\n\t * @param bindingsToFetch The binding to resolve and its property path reference\n\t * @returns A promise that resolves when the data is fetched.\n\t */\n\tprivate async getMissingData(bindingsToFetch: BindingToFetch[]): Promise<undefined> {\n\t\tif (this.isAdaptation) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.view.getViewData().converterType === \"ObjectPage\") {\n\t\t\tconst displayedProperties = this.table.getColumns().map((column) => column.getPropertyKey());\n\t\t\tif (this.manifestSettings.visibleFields.every((field) => displayedProperties.includes(field))) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tconst promises = [];\n\t\tconst controls = [];\n\t\tconst model = this.contexts[0].getModel();\n\t\tfor (const binding of bindingsToFetch.filter((binding) => binding.expression?.startsWith(\"{\"))) {\n\t\t\t// Avoid to fetch constant bindings\n\t\t\tconst parameters = {} as Record<string, CompiledBindingToolkitExpression>;\n\t\t\tconst analyzedContexts = binding.contexts ?? this.analyzedContexts;\n\t\t\tconst bindingType = binding.type ?? \"any\";\n\t\t\tparameters[bindingType] = binding.expression;\n\t\t\tfor (const context of analyzedContexts) {\n\t\t\t\tconst control = new Any(parameters);\n\t\t\t\tcontrol.setModel(model);\n\t\t\t\tcontrol.setBindingContext(context);\n\t\t\t\tcontrols.push(control);\n\t\t\t\tpromises.push(async () => {\n\t\t\t\t\tconst controlBinding = control.getBinding(bindingType) as ODataPropertyBinding | undefined;\n\t\t\t\t\tif (controlBinding) {\n\t\t\t\t\t\tcontrolBinding.setBindingMode(BindingMode.OneTime);\n\t\t\t\t\t\tif (controlBinding.isA<CompositeBinding>(\"sap.ui.model.CompositeBinding\")) {\n\t\t\t\t\t\t\tawait Promise.all(controlBinding.getBindings().map((nestedBinding) => nestedBinding.requestValue?.()));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tawait controlBinding.requestValue?.();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tawait Promise.all(promises.map(async (promise) => promise()));\n\t\tfor (const control of controls) {\n\t\t\tcontrol.destroy();\n\t\t}\n\t}\n\n\t/**\n\t * Gets the default value of the property when the related field is empty.\n\t * @param property The property\n\t * @param propertyPath The property path\n\t * @returns The default value.\n\t */\n\tgetEmptyValueForProperty(property: Property, propertyPath: string): PrimitiveType {\n\t\tif (property.nullable !== false) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\tconst context = this.contexts[0];\n\t\t\tconst anyObject = new Any({ any: compileExpression(formatWithTypeInformation(property, pathInModel(propertyPath))) });\n\t\t\tanyObject.setModel(context.getModel());\n\t\t\tanyObject.setBindingContext(context);\n\t\t\tconst value = anyObject.getBindingInfo(\"any\").binding.getType().parseValue(\"\", \"string\");\n\t\t\tanyObject.destroy();\n\t\t\treturn value;\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the property is clearable.\n\t * Some OData types don't access empty string or 0 as a valid value when it's not nullable.\n\t * For example, Edm.DateTime doesn't accept an empty string as a valid value.\n\t * @param property The property\n\t * @returns True if the property is clearable, false otherwise.\n\t */\n\tisPropertyClearable(property: Property): PrimitiveType {\n\t\tif (property.nullable !== false) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn ![\"Edm.DateTime\", \"Edm.DateTimeOffset\", \"Edm.TimeOfDay\", \"Edm.Time\", \"Edm.Date\", \"Edm.DateTimeWithTimezone\"].includes(\n\t\t\t\tproperty.type\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the selection options of a field generated by the selected contexts.\n\t * @param fieldData Data of the field used by both the static and the runtime model\n\t * @returns The select options of the field\n\t */\n\tprivate async getRuntimeSelection(fieldData: MassFieldProperties): Promise<SelectInfo[]> {\n\t\tconst distinctMap = new Set<string>();\n\t\tconst selectOptions: SelectInfo[] = [];\n\t\tif (fieldData.inputType === \"CheckBox\") {\n\t\t\treturn [];\n\t\t}\n\t\tconst anyObject = new Any({ anyText: fieldData.textBinding.expression });\n\t\tanyObject.setModel(this.contexts[0].getModel());\n\t\tfor (const selectedContext of this.analyzedContexts) {\n\t\t\tanyObject.setBindingContext(selectedContext);\n\t\t\tconst textBinding = anyObject.getBinding(\"anyText\");\n\t\t\tif (textBinding?.isA<CompositeBinding>(\"sap.ui.model.CompositeBinding\")) {\n\t\t\t\t// If the text binding is a composite binding, we need to request the value of each binding\n\t\t\t\t// to wait for the promise to resolve before getting the value of requestUnitsOfMeasure/requestCurrencyCodes\n\t\t\t\t// for the custom units of measure and currency codes.\n\t\t\t\t// We have to set the binding mode to OneTime to avoid the binding to be updated when the context changes.\n\t\t\t\t// Indeed even if the requestUnitsOfMeasure/requestCurrencyCodes doesn't change it's trigger a PATCH request\n\t\t\t\ttextBinding.setBindingMode(BindingMode.OneTime);\n\t\t\t\tawait Promise.all(textBinding.getBindings().map((binding) => binding.requestValue?.()));\n\t\t\t}\n\t\t\tconst propertyText = (anyObject.getBinding(\"anyText\") as PropertyBinding | undefined)?.getExternalValue();\n\t\t\tif (propertyText && !distinctMap.has(propertyText)) {\n\t\t\t\tdistinctMap.add(propertyText);\n\t\t\t\tselectOptions.push({\n\t\t\t\t\ttext: propertyText,\n\t\t\t\t\tkey: propertyText,\n\t\t\t\t\tunitOrCurrencyValue: fieldData.propertyInfo.unitOrCurrencyPropertyPath\n\t\t\t\t\t\t? selectedContext.getObject(fieldData.propertyInfo.unitOrCurrencyPropertyPath)\n\t\t\t\t\t\t: \"\",\n\t\t\t\t\tpropertyValue: selectedContext.getObject(fieldData.propertyInfo.relativePath)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tanyObject.destroy();\n\t\treturn selectOptions;\n\t}\n\n\t/**\n\t * Gets the default selection options of a field.\n\t * @param fieldData The property information\n\t * @returns The default select options.\n\t */\n\tprivate getDefaultSelectOptions(fieldData: MassFieldProperties): SelectInfo[] {\n\t\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.macros\") as ResourceBundle;\n\t\tconst keepEntry = {\n\t\t\ttext: resourceBundle.getText(\"C_MASS_EDIT_COMBOBOX_KEEP_VALUES\"),\n\t\t\tkey: SpecificSelectKeys.KeepKey\n\t\t};\n\t\tconst defaultOptions: SelectInfo[] = [];\n\t\tdefaultOptions.push(keepEntry);\n\t\tif (fieldData.inputType === \"CheckBox\") {\n\t\t\tdefaultOptions.push({ text: resourceBundle.getText(\"yes\"), key: \"true\" }, { text: resourceBundle.getText(\"no\"), key: \"false\" });\n\t\t} else {\n\t\t\tdefaultOptions.push({\n\t\t\t\ttext: resourceBundle.getText(\"C_MASS_EDIT_COMBOBOX_REPLACE_VALUES\"),\n\t\t\t\tkey: SpecificSelectKeys.ReplaceKey\n\t\t\t});\n\t\t\tif (fieldData.isFieldRequired !== \"true\" && fieldData.propertyInfo.clearable) {\n\t\t\t\tdefaultOptions.push({\n\t\t\t\t\ttext: resourceBundle.getText(\"C_MASS_EDIT_COMBOBOX_CLEAR_VALUES\"),\n\t\t\t\t\tkey: SpecificSelectKeys.ClearFieldValueKey\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn defaultOptions;\n\t}\n\n\t/**\n\t * Checks if the the field is editable.\n\t * @param expBinding The expression binding of the property.\n\t * @returns Returns true if the mass edit field is editable.\n\t */\n\tprivate getFieldEditable(expBinding: CompiledBindingToolkitExpression): boolean {\n\t\tif (expBinding === FieldEditMode.Editable) {\n\t\t\treturn true;\n\t\t} else if (Object.keys(FieldEditMode).includes(expBinding as FieldEditMode)) {\n\t\t\treturn false;\n\t\t} else if (expBinding) {\n\t\t\tconst anyControl = new Any({ any: expBinding });\n\t\t\tconst model = this.analyzedContexts[0].getModel();\n\t\t\tanyControl.setModel(model);\n\t\t\tconst visible = this.analyzedContexts.some((context) => {\n\t\t\t\tanyControl.setBindingContext(context);\n\t\t\t\treturn (anyControl.getBinding(\"any\") as PropertyBinding).getExternalValue() === FieldEditMode.Editable;\n\t\t\t});\n\t\t\tanyControl.destroy();\n\t\t\treturn visible;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the input type of the field.\n\t * @param dataFieldConverted The converted annotation fo the field\n\t * @param dataModelPath The dataModelObjectPath of the property\n\t * @returns The input type.\n\t */\n\tprivate getInputType(dataFieldConverted: DataFieldTypes, dataModelPath: DataModelObjectPath<Property>): string | undefined | null {\n\t\tconst editStyleProperties = {} as FieldBlockProperties;\n\t\tsetEditStyleProperties(editStyleProperties, dataFieldConverted, dataModelPath, true);\n\t\treturn editStyleProperties?.editStyle;\n\t}\n\n\t/**\n\t * Gets the visibility of the field\n\t * This visibility is not dependent on the context when\n\t *  - either the adaptation mode is set.\n\t *  - or the field is visible in the manifest and the degraded mode is set.\n\t * @param fieldProperties The properties of the mass edit field\n\t * @returns True if the field is visible, false otherwise\n\t */\n\tprivate isFieldVisible(fieldProperties: MassFieldProperties): boolean {\n\t\tif (this.isAdaptation || (this.manifestSettings.visibleFields.length && this.degradedMode)) {\n\t\t\tconst isStaticEditMode = Object.keys(FieldEditMode).includes(fieldProperties.visibilityBindings.editMode as FieldEditMode);\n\t\t\tconst isEditable =\n\t\t\t\t!isStaticEditMode || (isStaticEditMode && fieldProperties.visibilityBindings.editMode === FieldEditMode.Editable);\n\t\t\treturn isEditable && fieldProperties.visibilityBindings.isVisible !== \"false\";\n\t\t}\n\t\treturn (\n\t\t\tthis.getFieldEditable(fieldProperties.visibilityBindings.editMode) &&\n\t\t\t!this.isHiddenForContexts(fieldProperties.visibilityBindings.isVisible)\n\t\t);\n\t}\n}\n"],"mappings":"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","ignoreList":[]}
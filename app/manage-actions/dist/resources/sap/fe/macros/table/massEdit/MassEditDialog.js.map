{"version":3,"file":"MassEditDialog.js","names":["MassEditDialog","props","this","requiredDataPromise","PromiseKeeper","updatedProperties","Set","dialog","undefined","table","contexts","isAdaptation","CommonUtils","getAppComponent","isAdaptationMode","fieldProperties","view","getTargetView","transientListBinding","generateListBinding","bindingContext","create","resourceBundle","Library","getResourceBundleFor","contextsOnError","fieldControls","_exports","_proto","prototype","listBinding","getRowBinding","getModel","bindList","getPath","getContext","$$updateGroupId","refreshInternal","async","coreResourceBundle","applyButtonText","getViewData","converterType","getText","dialogContent","createContent","_jsx","Dialog","id","ID","generate","getId","contentWidth","class","horizontalScrolling","title","length","toString","content","escapeHandler","onClose","bind","beforeOpen","beginButton","Button","text","type","press","onApply","endButton","setModel","JSONModel","isEditable","bindElement","path","model","event","getSource","setBindingContext","addDependent","destroy","close","getRequiredDataPromise","manageMessage","controller","getController","DraftStatus","FELibrary","internalModelContext","getBindingContext","setProperty","messageHandler","showMessages","onBeforeShowMessage","messages","showMessageParameters","fnGetMessageSubtitle","messageHandling","setMessageSubtitle","size","editFlow","setDraftStatus","Saved","MessageToast","show","Clear","getIsEditable","some","message","getTargets","showMessageBox","showMessageDialog","confirmButtonTxt","MessageBox","success","actions","emphasizedAction","saveChanges","fieldValuesInfo","manifestSettings","getParent","getTableDefinition","control","massEdit","isIsolated","operationGroupingMode","OperationGroupingMode","Isolated","isolatedGroupId","massEditSideEffects","MassEditSideEffects","fieldPromises","setContinueOnError","forEach","selectedContext","immediateSideEffects","refreshDescriptions","values","fieldControlReference","valueHasChanged","isReadOnlyOnContext","groupId","propertyPath","getProperty","push","then","add","catch","error","Log","map","executeImmediateSideEffects","immediateSideEffect","refreshDescription","submitBatch","Promise","allSettled","executeDeferredSideEffects","Array","from","getFieldValuesInfos","result","fieldControl","fieldValues","getFieldValues","applyChanges","promise","fieldsValuesInfo","customSave","customMassEditSave","aContexts","oUpdateData","isFieldValid","removeBoundTransitionMessages","removeUnboundTransitionMessages","isCustomSave","customFormContainer","createCustomContainer","_jsxs","_Fragment","children","getAdaptationMessage","Form","layout","ResponsiveGridLayout","labelSpanM","labelSpanL","labelSpanXL","formContainers","FormContainer","formElements","createFormElements","MessageStrip","customFragment","fromInline","resultXML","XMLPreprocessor","process","DOMParser","parseFromString","firstElementChild","models","getOwnerComponent","getPreprocessorContext","Fragment","load","definition","clone","getExtensionAPI","loadFragment","name","contextPath","getMetaModel","getMetaPath","getResolvedPath","createFormElement","fieldInfo","FormElement","visible","label","Label","propertyInfo","key","fields","createFields","metaModel","context","createBindingContext","massEditField","MassEditField","getControls"],"sources":["./MassEditDialog.tsx"],"sourcesContent":["import type { PrimitiveType } from \"@sap-ux/vocabularies-types\";\nimport Log from \"sap/base/Log\";\nimport type ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport type { EnhanceWithUI5 } from \"sap/fe/base/ClassSupport\";\nimport type { FEView } from \"sap/fe/core/BaseController\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type TemplateComponent from \"sap/fe/core/TemplateComponent\";\nimport messageHandling from \"sap/fe/core/controllerextensions/messageHandler/messageHandling\";\nimport { OperationGroupingMode } from \"sap/fe/core/converters/ManifestSettings\";\nimport PromiseKeeper from \"sap/fe/core/helpers/PromiseKeeper\";\nimport * as ID from \"sap/fe/core/helpers/StableIdHelper\";\nimport FELibrary from \"sap/fe/core/library\";\nimport type { SideEffectsEntityType, SideEffectsTarget, SideEffectsType } from \"sap/fe/core/services/SideEffectsServiceFactory\";\nimport type TableAPI from \"sap/fe/macros/table/TableAPI\";\nimport Button from \"sap/m/Button\";\nimport Dialog from \"sap/m/Dialog\";\nimport Label from \"sap/m/Label\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport MessageStrip from \"sap/m/MessageStrip\";\nimport MessageToast from \"sap/m/MessageToast\";\nimport type UI5Event from \"sap/ui/base/Event\";\nimport type Control from \"sap/ui/core/Control\";\nimport Fragment from \"sap/ui/core/Fragment\";\nimport Library from \"sap/ui/core/Lib\";\nimport type Message from \"sap/ui/core/message/Message\";\nimport XMLPreprocessor from \"sap/ui/core/util/XMLPreprocessor\";\nimport Form from \"sap/ui/layout/form/Form\";\nimport FormContainer from \"sap/ui/layout/form/FormContainer\";\nimport FormElement from \"sap/ui/layout/form/FormElement\";\nimport ResponsiveGridLayout from \"sap/ui/layout/form/ResponsiveGridLayout\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport type Context from \"sap/ui/model/Context\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type ODataV4Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataListBinding from \"sap/ui/model/odata/v4/ODataListBinding\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport MassEditField from \"./MassEditField\";\nimport MassEditSideEffects from \"./MassEditSideEffects\";\nimport type { MassFieldProperties } from \"./library\";\n\ntype MassEditSideEffectsProperties = {\n\tsideEffects: SideEffectsType;\n\ttableRefresh: {\n\t\tisRequested: boolean;\n\t\ttargetEntity?: SideEffectsEntityType;\n\t};\n\timmediate: { targets: SideEffectsTarget[]; triggerAction: string | undefined };\n\tdeferred: { targets: SideEffectsTarget[]; triggerAction: string | undefined };\n};\n\ntype FieldValuesInfo = {\n\tvalues: Record<string, PrimitiveType>;\n\tfieldControlReference: { control: MassEditField; values: Record<string, PrimitiveType> }[];\n};\n\nexport type MassEditSideEffectsExecutionProperties = MassEditSideEffectsProperties & { onRowContext: boolean };\n\nexport default class MassEditDialog {\n\tprivate readonly requiredDataPromise = new PromiseKeeper<void>();\n\n\tprivate dialog: Dialog | undefined;\n\n\tpublic readonly table: Table;\n\n\tpublic readonly fieldProperties: MassFieldProperties[];\n\n\tprivate readonly view: FEView;\n\n\tpublic readonly contexts: ODataV4Context[];\n\n\tprivate readonly contextsOnError: ODataV4Context[];\n\n\tprivate readonly updatedProperties: Set<string> = new Set();\n\n\tprivate readonly resourceBundle: ResourceBundle;\n\n\tpublic readonly bindingContext: ODataV4Context;\n\n\tpublic readonly transientListBinding: ODataListBinding;\n\n\tprivate readonly fieldControls: MassEditField[];\n\n\tprivate readonly isAdaptation: boolean;\n\n\t/**\n\t * Constructor of the MassEdit dialog.\n\t * @param props Contains the following attributes\n\t * @param props.table The table where the changes need to be applied\n\t * @param props.contexts The row contexts where the changes need to be applied\n\t * @param props.fieldProperties The properties ot the fields\n\t */\n\tconstructor(props: { table: Table; contexts: ODataV4Context[]; fieldProperties: MassFieldProperties[] }) {\n\t\tthis.dialog = undefined;\n\t\tthis.table = props.table;\n\t\tthis.contexts = props.contexts;\n\t\tthis.isAdaptation = CommonUtils.getAppComponent(this.table).isAdaptationMode();\n\t\tthis.fieldProperties = props.fieldProperties;\n\t\tthis.view = CommonUtils.getTargetView(this.table);\n\t\tthis.transientListBinding = this.generateListBinding();\n\t\tthis.bindingContext = this.transientListBinding.create({}, true);\n\n\t\tthis.resourceBundle = Library.getResourceBundleFor(\"sap.fe.macros\") as ResourceBundle;\n\t\tthis.contextsOnError = [];\n\t\tthis.fieldControls = [];\n\t}\n\n\t/**\n\t * Creates the context for the dialog.\n\t * @returns The context.\n\t */\n\tprivate generateListBinding(): ODataListBinding {\n\t\tconst listBinding = this.table.getRowBinding();\n\t\tconst transientListBinding = (this.table.getModel() as ODataModel).bindList(\n\t\t\tlistBinding.getPath(),\n\t\t\tlistBinding.getContext(),\n\t\t\t[],\n\t\t\t[],\n\t\t\t{\n\t\t\t\t$$updateGroupId: \"submitLater\"\n\t\t\t}\n\t\t);\n\t\ttransientListBinding.refreshInternal = (): void => {\n\t\t\t/* */\n\t\t};\n\t\treturn transientListBinding;\n\t}\n\n\t/**\n\t * Creates the dialog.\n\t * @returns The instance of dialog.\n\t */\n\tasync create(): Promise<Dialog> {\n\t\tif (!this.dialog) {\n\t\t\tconst coreResourceBundle = Library.getResourceBundleFor(\"sap.fe.core\") as ResourceBundle;\n\t\t\tconst applyButtonText =\n\t\t\t\tthis.view.getViewData().converterType === \"ListReport\"\n\t\t\t\t\t? this.resourceBundle.getText(\"C_MASS_EDIT_SAVE_BUTTON_TEXT\")\n\t\t\t\t\t: coreResourceBundle.getText(\"C_COMMON_DIALOG_OK\");\n\t\t\tconst dialogContent = await this.createContent();\n\t\t\tconst dialog = (\n\t\t\t\t<Dialog\n\t\t\t\t\tdt:designtime=\"sap/fe/macros/table/massEdit/designtime/MassEdit.designtime\"\n\t\t\t\t\tid={ID.generate([this.table.getId(), \"MED_\", \"Dialog\"])}\n\t\t\t\t\tcontentWidth=\"27rem\"\n\t\t\t\t\tclass=\"sapUiContentPadding\"\n\t\t\t\t\thorizontalScrolling=\"false\"\n\t\t\t\t\ttitle={this.resourceBundle.getText(\"C_MASS_EDIT_DIALOG_TITLE\", [this.contexts.length.toString()])}\n\t\t\t\t\tcontent={dialogContent}\n\t\t\t\t\tescapeHandler={this.onClose.bind(this)}\n\t\t\t\t\tbeforeOpen={this.beforeOpen.bind(this)}\n\t\t\t\t\tbeginButton={<Button text={applyButtonText} type=\"Emphasized\" press={this.onApply.bind(this)} />}\n\t\t\t\t\tendButton={<Button text={coreResourceBundle.getText(\"C_COMMON_OBJECT_PAGE_CANCEL\")} press={this.onClose.bind(this)} />}\n\t\t\t\t/>\n\t\t\t);\n\t\t\tthis.dialog = dialog;\n\t\t\t// We don't want to inherit from the PageComponent for the ui model -> into this dialog, fields are editable\n\t\t\tdialog.setModel(new JSONModel({ isEditable: true }), \"ui\");\n\t\t\tdialog.bindElement({\n\t\t\t\tpath: \"/\",\n\t\t\t\tmodel: \"ui\"\n\t\t\t});\n\t\t\treturn dialog;\n\t\t}\n\t\treturn this.dialog;\n\t}\n\n\t/**\n\t * Sets the last configuration before opening the dialog:\n\t *  - set the runtime model\n\t *  - set the OdataModel\n\t *  - add the dialog as dependent of the table.\n\t * @param event The ui5 event\n\t */\n\tprivate beforeOpen(event: UI5Event<{}, Dialog>): void {\n\t\tconst dialog = event.getSource();\n\t\tdialog.setModel(this.table.getModel());\n\t\tdialog.setBindingContext(this.bindingContext);\n\t\tthis.table.addDependent(dialog);\n\t}\n\n\t/**\n\t * Closes and destroys the dialog.\n\t */\n\tprivate onClose(): void {\n\t\tthis.transientListBinding.destroy();\n\t\tif (this.dialog) {\n\t\t\tthis.dialog.close();\n\t\t\tthis.dialog.destroy();\n\t\t}\n\t}\n\n\t/**\n\t * Gets the promise of the required data.\n\t * This promise is resolved when the required data is loaded.\n\t * This data are used on the save workflow to determine if the new data has to be saved or not.\n\t * The save workflow is executed only if this promise is resolved.\n\t * @returns The promise of the required data.\n\t */\n\tgetRequiredDataPromise(): PromiseKeeper<void> {\n\t\treturn this.requiredDataPromise;\n\t}\n\n\t/**\n\t * Manages the messages according to the contexts on error.\n\t */\n\tasync manageMessage(): Promise<void> {\n\t\tconst coreResourceBundle = Library.getResourceBundleFor(\"sap.fe.core\") as ResourceBundle;\n\t\tconst controller = this.view.getController();\n\t\tconst DraftStatus = FELibrary.DraftStatus;\n\t\tconst internalModelContext = this.view.getBindingContext(\"internal\");\n\t\tinternalModelContext?.setProperty(\"getBoundMessagesForMassEdit\", true);\n\t\tawait controller.messageHandler.showMessages({\n\t\t\tonBeforeShowMessage: (\n\t\t\t\tmessages: Message[],\n\t\t\t\tshowMessageParameters: {\n\t\t\t\t\tfnGetMessageSubtitle?: Function;\n\t\t\t\t\tshowMessageBox?: boolean;\n\t\t\t\t\tshowMessageDialog?: boolean;\n\t\t\t\t\tfilteredMessages?: Message[];\n\t\t\t\t\tshowChangeSetErrorDialog?: boolean;\n\t\t\t\t}\n\t\t\t) => {\n\t\t\t\tshowMessageParameters.fnGetMessageSubtitle = messageHandling.setMessageSubtitle.bind({}, this.table, this.contexts);\n\n\t\t\t\tif (!this.contextsOnError.length) {\n\t\t\t\t\tif (this.updatedProperties.size > 0) {\n\t\t\t\t\t\t//There is at least one new value set\n\t\t\t\t\t\tcontroller.editFlow.setDraftStatus(DraftStatus.Saved);\n\t\t\t\t\t\tif (this.view.getViewData().converterType === \"ListReport\") {\n\t\t\t\t\t\t\tMessageToast.show(this.resourceBundle.getText(\"C_MASS_EDIT_SUCCESS_TOAST\"));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tMessageToast.show(this.resourceBundle.getText(\"C_OBJECT_PAGE_MASS_EDIT_SUCCESS_TOAST\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tMessageToast.show(this.resourceBundle.getText(\"C_MASS_EDIT_NO_CHANGE\"));\n\t\t\t\t\t}\n\t\t\t\t} else if (this.contextsOnError.length < this.contexts.length) {\n\t\t\t\t\tcontroller.editFlow.setDraftStatus(DraftStatus.Saved);\n\t\t\t\t} else if (this.contextsOnError.length === this.contexts.length) {\n\t\t\t\t\tcontroller.editFlow.setDraftStatus(DraftStatus.Clear);\n\t\t\t\t}\n\n\t\t\t\tif (CommonUtils.getIsEditable(controller) && !messages.some((message) => !message.getTargets())) {\n\t\t\t\t\tshowMessageParameters.showMessageBox = false;\n\t\t\t\t\tshowMessageParameters.showMessageDialog = false;\n\t\t\t\t}\n\t\t\t\treturn showMessageParameters;\n\t\t\t}\n\t\t});\n\n\t\tif (!!this.contextsOnError.length && this.contextsOnError.length < this.contexts.length) {\n\t\t\tconst confirmButtonTxt = coreResourceBundle.getText(\"C_COMMON_DIALOG_OK\");\n\t\t\tMessageBox.success(\n\t\t\t\tthis.resourceBundle.getText(\"C_MASS_EDIT_CHANGES_WITH_ERROR\", [\n\t\t\t\t\tthis.contexts.length - this.contextsOnError.length,\n\t\t\t\t\tthis.contexts.length\n\t\t\t\t]),\n\t\t\t\t{\n\t\t\t\t\tactions: [confirmButtonTxt],\n\t\t\t\t\temphasizedAction: confirmButtonTxt\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t\tinternalModelContext?.setProperty(\"getBoundMessagesForMassEdit\", false);\n\t}\n\n\t/**\n\t * Saves the relevant contexts and refreshes the associated properties.\n\t * @param fieldValuesInfo The information of the values for all mass edit fields.\n\t * @returns A Promise.\n\t */\n\tprivate async saveChanges(fieldValuesInfo: FieldValuesInfo): Promise<void> {\n\t\tconst manifestSettings = (this.table.getParent() as TableAPI).getTableDefinition().control.massEdit;\n\t\tconst isIsolated = manifestSettings.operationGroupingMode === OperationGroupingMode.Isolated;\n\t\tconst isolatedGroupId = \"$auto.Isolated\";\n\t\tconst massEditSideEffects = new MassEditSideEffects(this); // Use the first line as reference context to calculate the map of side effects\n\t\tconst fieldPromises: Promise<unknown>[] = [];\n\t\tconst model = this.table.getModel() as ODataModel;\n\n\t\tif (isIsolated) {\n\t\t\tmodel.setContinueOnError(isolatedGroupId);\n\t\t}\n\t\tthis.contexts.forEach((selectedContext: ODataV4Context) => {\n\t\t\tconst immediateSideEffects: { propertyPath: string; groupId: string }[] = [];\n\t\t\tconst refreshDescriptions: { control: MassEditField; groupId: string }[] = [];\n\t\t\tfor (const { control, values } of fieldValuesInfo.fieldControlReference) {\n\t\t\t\tlet valueHasChanged = false;\n\t\t\t\tif (!control.isReadOnlyOnContext(selectedContext)) {\n\t\t\t\t\tconst groupId = isIsolated ? isolatedGroupId : \"$auto\";\n\t\t\t\t\tfor (const propertyPath in values) {\n\t\t\t\t\t\tif (selectedContext.getProperty(propertyPath) !== values[propertyPath]) {\n\t\t\t\t\t\t\tvalueHasChanged = true;\n\t\t\t\t\t\t\tfieldPromises.push(\n\t\t\t\t\t\t\t\tselectedContext\n\t\t\t\t\t\t\t\t\t.setProperty(propertyPath, values[propertyPath], groupId)\n\t\t\t\t\t\t\t\t\t.then(() => this.updatedProperties.add(propertyPath))\n\t\t\t\t\t\t\t\t\t.catch((error: unknown) => {\n\t\t\t\t\t\t\t\t\t\tthis.contextsOnError.push(selectedContext);\n\t\t\t\t\t\t\t\t\t\tLog.error(\"Mass Edit: Something went wrong in updating entries.\", error as string);\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\timmediateSideEffects.push({\n\t\t\t\t\t\t\t\tpropertyPath,\n\t\t\t\t\t\t\t\tgroupId\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (valueHasChanged) {\n\t\t\t\t\t\trefreshDescriptions.push({ control, groupId });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfieldPromises.push(\n\t\t\t\t...immediateSideEffects.map(async (immediateSideEffect) =>\n\t\t\t\t\tmassEditSideEffects.executeImmediateSideEffects(\n\t\t\t\t\t\tselectedContext,\n\t\t\t\t\t\timmediateSideEffect.propertyPath,\n\t\t\t\t\t\timmediateSideEffect.groupId\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t);\n\t\t\tfieldPromises.push(\n\t\t\t\t...refreshDescriptions.map(async (refreshDescription) =>\n\t\t\t\t\tmassEditSideEffects.refreshDescription(refreshDescription.control, selectedContext, refreshDescription.groupId)\n\t\t\t\t)\n\t\t\t);\n\t\t\tif (isIsolated) {\n\t\t\t\t//Create a new ChangeSet for the next requests\n\t\t\t\tmodel.submitBatch(isolatedGroupId);\n\t\t\t}\n\t\t});\n\n\t\tawait Promise.allSettled(fieldPromises);\n\t\tif (this.updatedProperties.size) {\n\t\t\tmassEditSideEffects.executeDeferredSideEffects(new Set([\"genericField\", ...Array.from(this.updatedProperties)]));\n\t\t}\n\t}\n\n\t/**\n\t * Gets the information of the values for all mass edit fields.\n\t * @returns The information.\n\t */\n\tprivate getFieldValuesInfos(): FieldValuesInfo {\n\t\tconst result = {\n\t\t\tvalues: {},\n\t\t\tfieldControlReference: []\n\t\t} as FieldValuesInfo;\n\t\tfor (const fieldControl of this.fieldControls) {\n\t\t\tconst fieldValues = fieldControl.getFieldValues();\n\t\t\tresult.values = { ...result.values, ...fieldValues };\n\t\t\tresult.fieldControlReference.push({ control: fieldControl, values: fieldValues });\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Updates the table fields according to the dialog entries.\n\t * @returns `true` if the custom save is executed, `false` otherwise.\n\t */\n\tasync applyChanges(): Promise<boolean> {\n\t\tawait this.requiredDataPromise.promise; // We need to wait for the required data to be loaded before saving.\n\t\t//We want to skip the patch handler(specific workflow done into the EditFlow) since the patch is managed here\n\t\tthis.view.getBindingContext(\"internal\")?.setProperty(\"skipPatchHandlers\", true);\n\n\t\tconst fieldsValuesInfo = this.getFieldValuesInfos();\n\t\tlet customSave = false;\n\t\ttry {\n\t\t\tcustomSave = await this.view\n\t\t\t\t.getController()\n\t\t\t\t.editFlow.customMassEditSave({ aContexts: this.contexts, oUpdateData: fieldsValuesInfo.values });\n\t\t} catch (error) {\n\t\t\tLog.error(\"Mass Edit: Something went wrong in updating entries.\", error as string);\n\t\t}\n\t\tif (!customSave) {\n\t\t\tawait this.saveChanges(fieldsValuesInfo);\n\t\t}\n\t\tthis.view.getBindingContext(\"internal\")?.setProperty(\"skipPatchHandlers\", false);\n\t\treturn customSave;\n\t}\n\n\t/**\n\t * Manages the press on the Apply Button.\n\t * @returns A promise.\n\t */\n\tprivate async onApply(): Promise<void> {\n\t\tif (this.fieldControls.some((fieldControl) => !fieldControl.isFieldValid())) {\n\t\t\treturn;\n\t\t}\n\t\tif (!this.isAdaptation) {\n\t\t\tmessageHandling.removeBoundTransitionMessages();\n\t\t\tmessageHandling.removeUnboundTransitionMessages();\n\t\t\tconst isCustomSave = await this.applyChanges();\n\t\t\tif (!isCustomSave) {\n\t\t\t\tthis.manageMessage();\n\t\t\t}\n\t\t}\n\t\tthis.onClose();\n\t}\n\n\t/**\n\t * Creates the dialog content.\n\t * @returns Promise returning instance of fragment.\n\t */\n\n\tprivate async createContent(): Promise<Form> {\n\t\tconst customFormContainer = await this.createCustomContainer();\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{this.getAdaptationMessage()}\n\t\t\t\t<Form>\n\t\t\t\t\t{{\n\t\t\t\t\t\tlayout: <ResponsiveGridLayout labelSpanM=\"12\" labelSpanL=\"12\" labelSpanXL=\"12\" />,\n\t\t\t\t\t\tformContainers: (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t{customFormContainer}\n\t\t\t\t\t\t\t\t<FormContainer>\n\t\t\t\t\t\t\t\t\t{{\n\t\t\t\t\t\t\t\t\t\tformElements: this.createFormElements()\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t</FormContainer>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)\n\t\t\t\t\t}}\n\t\t\t\t</Form>\n\t\t\t</>\n\t\t);\n\t}\n\n\t/**\n\t * Gets the adaptation message.\n\t * @returns The message strip if the dialog is displayed in adaptation mode.\n\t */\n\tprivate getAdaptationMessage(): MessageStrip | undefined {\n\t\tif (this.isAdaptation) {\n\t\t\treturn <MessageStrip text={this.resourceBundle.getText(\"C_MASS_EDIT_ADAPTATION_MODE\")} />;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Creates the custom form container according to the manifest settings.\n\t * @returns The custom form container.\n\t */\n\tprivate async createCustomContainer(): Promise<FormContainer | undefined> {\n\t\tconst manifestSettings = (this.table.getParent() as TableAPI).getTableDefinition().control.massEdit;\n\t\tif (manifestSettings.customFragment) {\n\t\t\tif (manifestSettings.fromInline === true) {\n\t\t\t\t// Inline configuration from a V2 block: the fragment is a string\n\t\t\t\tif (typeof manifestSettings.customFragment === \"string\") {\n\t\t\t\t\tconst resultXML = await XMLPreprocessor.process(\n\t\t\t\t\t\tnew DOMParser().parseFromString(manifestSettings.customFragment, \"text/xml\").firstElementChild,\n\t\t\t\t\t\t{ models: {} },\n\t\t\t\t\t\t(this.view.getController().getOwnerComponent() as EnhanceWithUI5<TemplateComponent>).getPreprocessorContext()\n\t\t\t\t\t);\n\t\t\t\t\treturn (await Fragment.load({\n\t\t\t\t\t\ttype: \"XML\",\n\t\t\t\t\t\tdefinition: resultXML,\n\t\t\t\t\t\tcontroller: this.view.getController()\n\t\t\t\t\t})) as unknown as FormContainer;\n\t\t\t\t} else {\n\t\t\t\t\t// Inline configuration from a V4 block: the fragment is already a FormContainer\n\t\t\t\t\treturn manifestSettings.customFragment.clone();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn (await this.view\n\t\t\t\t.getController()\n\t\t\t\t.getExtensionAPI()\n\t\t\t\t.loadFragment({\n\t\t\t\t\tid: \"customMassEdit\",\n\t\t\t\t\tname: manifestSettings.customFragment as string,\n\t\t\t\t\tcontextPath: this.transientListBinding\n\t\t\t\t\t\t.getModel()\n\t\t\t\t\t\t.getMetaModel()\n\t\t\t\t\t\t.getMetaPath(this.transientListBinding.getResolvedPath())\n\t\t\t\t})) as FormContainer;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Creates the form elements of the dialog.\n\t * @returns The form elements.\n\t */\n\tprivate createFormElements(): FormElement[] {\n\t\treturn this.fieldProperties.map(this.createFormElement.bind(this));\n\t}\n\n\t/**\n\t * Creates the form elements of a Field.\n\t * @param fieldInfo The field properties\n\t * @returns The form element.\n\t */\n\tprivate createFormElement(fieldInfo: MassFieldProperties): FormElement {\n\t\treturn (\n\t\t\t<FormElement visible={fieldInfo.visible}>\n\t\t\t\t{{\n\t\t\t\t\tlabel: <Label text={fieldInfo.label} id={ID.generate([\"MED_\", fieldInfo.propertyInfo.key, \"Label\"])} />,\n\t\t\t\t\tfields: this.createFields(fieldInfo)\n\t\t\t\t}}\n\t\t\t</FormElement>\n\t\t);\n\t}\n\n\t/**\n\t * Creates the fields of the dialog.\n\t * @param fieldInfo The field properties\n\t * @returns The fields.\n\t */\n\tprivate createFields(fieldInfo: MassFieldProperties): Control[] {\n\t\tconst metaModel = (this.table.getModel() as ODataModel).getMetaModel();\n\t\tconst context = metaModel.createBindingContext(metaModel.getMetaPath(this.bindingContext.getPath())) as Context;\n\t\tconst massEditField = new MassEditField(fieldInfo, context);\n\t\tthis.fieldControls.push(massEditField);\n\t\treturn massEditField.getControls();\n\t}\n}\n"],"mappings":"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","ignoreList":[]}
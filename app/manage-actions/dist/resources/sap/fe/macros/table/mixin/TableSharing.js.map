{"version":3,"file":"TableSharing.js","names":["TableSharing","_dec","controllerExtensionHandler","_class","_exports","_proto","prototype","setupMixin","_baseClass","_onShareToCollaborationManagerPress","controller","contexts","maxNumberofSelectedItems","length","forEach","async","targetPath","this","getUrlForCollaborationManager","context","isTableRowNavigationPossible","appComponent","getAppComponent","appTitle","getManifestEntry","title","collaborativeToolsService","getCollaborativeToolsService","collaborationManagerService","collaborationService","cmHelperService","triggerH2HChat","MessageBox","warning","Library","getResourceBundleFor","getText","view","CommonUtils","getTargetView","getContent","collaborativeDraft","getController","metaModel","getModel","getMetaModel","isDraft","ModelHelper","isDraftSupported","getPath","isCollaborationEnabled","getObject","IsActiveEntity","HasActiveEntity","undefined","path","rootPath","substring","indexOf","rootContext","bindContext","getBoundContext","siblingInfo","draft","computeSiblingInformation","targetContext","_isFclEnabled","layout","getFCLLayoutForCM","hashChangerInstance","HashChanger","getInstance","sBasePath","hrefForAppSpecificHash","window","location","origin","pathname","search","FCLLevel","_routing","getFCLLevel","getRootViewController","getFclConfig","maxColumnsCount","collectAvailableCards","cards","actionToolbarItems","getActions","hasInsightActionEnabled","getFilter","TableInsightsHelper","getInsightsRelevantColumns","card","getCardManifestTable","Object","keys","push","getTableDefinition","headerInfoTypeName","callback","onAddCardToCollaborationManagerCallback","bind","insightsRelevantColumns","insightsParams","createTableCardParams","getSortConditionsQuery","InsightsService","getCardManifest","showCollaborationManagerCardPreview","getPageController","collaborationManager","getService","e","showGenericErrorMessage","Log","error","_onAddCardToInsightsPressed","message","parameters","isNavigationEnabled","type","text","createNavigationErrorMessage","showInsightsCardPreview","scope","resourceModel","ResourceModelHelper","getResourceModel","getDownloadUrlWithFilters","table","filterBar","UI5Element","getElementById","Error","binding","getRowBinding","model","filterPropSV","getParent","getSelectionVariant","filtersWithSemanticDateOpsInfo","SemanticDateOperators","getSemanticOpsFilterProperties","_getSelectOptions","filtersWithoutSemanticDateOps","TableUtils","getAllFilterInfo","map","filterInfo","filterName","propertiesInfo","getPropertyInfoSet","flpMappedPlaceholders","semanticDateFilters","getSemanticDateFiltersWithFlpPlaceholders","allRelevantFilters","filters","concat","allFilters","Filter","and","$search","normalizeSearchTerm","getSearch","tempTableBinding","bindList","url","requestDownloadUrl","placeholder","value","entries","replace","sortConditions","getSortConditions","sorters","sortCondition","sortConditionsPath","getPropertyHelper","getProperty","name","descending","join","_applyDecoratedDescriptor","getOwnPropertyDescriptor"],"sources":["./TableSharing.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport { type IInterfaceWithMixin } from \"sap/fe/base/ClassSupport\";\nimport { controllerExtensionHandler } from \"sap/fe/base/HookSupport\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type PageController from \"sap/fe/core/PageController\";\nimport draft from \"sap/fe/core/controllerextensions/editFlow/draft\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport ResourceModelHelper from \"sap/fe/core/helpers/ResourceModelHelper\";\nimport type FclController from \"sap/fe/core/rootView/Fcl.controller\";\nimport { type WrappedCard } from \"sap/fe/core/services/CollaborationManagerServiceFactory\";\nimport type FilterBarAPI from \"sap/fe/macros/filterBar/FilterBarAPI\";\nimport { hasInsightActionEnabled, showGenericErrorMessage } from \"sap/fe/macros/insights/CommonInsightsHelper\";\nimport type { InsightsParams, TableContent } from \"sap/fe/macros/insights/InsightsService\";\nimport * as InsightsService from \"sap/fe/macros/insights/InsightsService\";\nimport * as TableInsightsHelper from \"sap/fe/macros/insights/TableInsightsHelper\";\nimport TableUtils from \"sap/fe/macros/table/Utils\";\nimport type { CardManifest, CardMessage } from \"sap/insights/CardHelper\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport type Control from \"sap/ui/core/Control\";\nimport UI5Element from \"sap/ui/core/Element\";\nimport Library from \"sap/ui/core/Lib\";\nimport HashChanger from \"sap/ui/core/routing/HashChanger\";\nimport type FilterBar from \"sap/ui/mdc/FilterBar\";\nimport type ActionToolbarAction from \"sap/ui/mdc/actiontoolbar/ActionToolbarAction\";\nimport Filter from \"sap/ui/model/Filter\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport SemanticDateOperators from \"../../filterBar/SemanticDateOperators\";\nimport { type ITableBlock } from \"../TableAPI\";\n\ntype SortConditions = {\n\tsorters: {\n\t\tname: string;\n\t\tdescending: boolean;\n\t}[];\n};\n\n/**\n * A mixin to manage all sharing related functionality of the table (including insight cards)\n */\nexport default class TableSharing implements IInterfaceWithMixin {\n\tsetupMixin(_baseClass: Function): void {}\n\n\t_onShareToCollaborationManagerPress(\n\t\tthis: ITableBlock & TableSharing,\n\t\tcontroller: PageController,\n\t\tcontexts: Context[],\n\t\tmaxNumberofSelectedItems: number\n\t): void {\n\t\tif (contexts.length <= maxNumberofSelectedItems) {\n\t\t\tcontexts.forEach(async (context: Context) => {\n\t\t\t\tconst targetPath = await this.getUrlForCollaborationManager(context);\n\t\t\t\tif (this.isTableRowNavigationPossible(context) && targetPath) {\n\t\t\t\t\tconst appComponent = controller.getAppComponent();\n\t\t\t\t\tconst appTitle = appComponent.getManifestEntry(\"sap.app\").title;\n\t\t\t\t\tconst collaborativeToolsService = appComponent?.getCollaborativeToolsService();\n\t\t\t\t\tconst collaborationManagerService = collaborativeToolsService?.collaborationService.cmHelperService;\n\t\t\t\t\tcollaborationManagerService?.triggerH2HChat(appTitle, targetPath);\n\t\t\t\t} else {\n\t\t\t\t\tMessageBox.warning(\n\t\t\t\t\t\tLibrary.getResourceBundleFor(\"sap.fe.macros\")!.getText(\n\t\t\t\t\t\t\t\"T_TABLE_SHARE_TO_COLLABORATION_MANAGER_NO_NAVIGATION_POSSIBLE\"\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tMessageBox.warning(\n\t\t\t\tLibrary.getResourceBundleFor(\"sap.fe.macros\")!.getText(\"T_TABLE_SHARE_TO_COLLABORATION_MANAGER_TOO_MANY_ITEMS_SELECTED\", [\n\t\t\t\t\tmaxNumberofSelectedItems\n\t\t\t\t])\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Get the URL for SAP Collaboration Manager. We always go to the active version, also from draft version. If there is no active version yet, we do not share a link.\n\t * @param context The context for which the URL is to be generated\n\t * @returns The URL for SAP Collaboration Manager\n\t */\n\tasync getUrlForCollaborationManager(this: ITableBlock & TableSharing, context: Context): Promise<string | undefined> {\n\t\tlet targetPath;\n\t\tconst view = CommonUtils.getTargetView(this.getContent());\n\t\tconst collaborativeDraft = view.getController().collaborativeDraft;\n\t\tconst metaModel = context.getModel()?.getMetaModel();\n\t\tconst isDraft = ModelHelper.isDraftSupported(metaModel, context.getPath());\n\t\tif (isDraft && !collaborativeDraft.isCollaborationEnabled() && context.getObject().IsActiveEntity === false) {\n\t\t\tif (context.getObject().HasActiveEntity === false) {\n\t\t\t\t// we have a draft entity with no active version\n\t\t\t\t// we do not support this for Collaboration Manager\n\t\t\t\treturn undefined;\n\t\t\t} else {\n\t\t\t\t// we have a draft entity with an active version and need to convert the path to an active path\n\t\t\t\tconst path = context.getPath();\n\t\t\t\tconst rootPath = path.substring(0, path.indexOf(\"/\", 1));\n\t\t\t\tconst rootContext = rootPath ? context.getModel().bindContext(rootPath).getBoundContext() : context;\n\t\t\t\tconst siblingInfo = await draft.computeSiblingInformation(rootContext, context);\n\t\t\t\ttargetPath = siblingInfo?.targetContext?.getPath();\n\t\t\t}\n\t\t} else {\n\t\t\t// we have an active entity or a collaborative draft or a non-draft programming model\n\t\t\ttargetPath = context.getPath();\n\t\t}\n\n\t\tif (targetPath) {\n\t\t\tif (targetPath[0] === \"/\") {\n\t\t\t\ttargetPath = targetPath.substring(1);\n\t\t\t}\n\t\t\tconst appComponent = CommonUtils.getAppComponent(this.getContent());\n\t\t\tif (appComponent._isFclEnabled()) {\n\t\t\t\tconst layout = this.getFCLLayoutForCM(appComponent);\n\t\t\t\ttargetPath += `?layout=${layout}`;\n\t\t\t}\n\t\t\tconst hashChangerInstance = HashChanger.getInstance();\n\t\t\tconst sBasePath = hashChangerInstance.hrefForAppSpecificHash ? hashChangerInstance.hrefForAppSpecificHash(\"\") : \"\";\n\t\t\treturn window.location.origin + window.location.pathname + window.location.search + sBasePath + targetPath;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * For 'Share to SAP Collaboration Manager', we always want the URL to go to full screen.\n\t * @param this\n\t * @param appComponent The app component\n\t * @returns The FCL layout for the Share to SAP Collaboration Manager\n\t */\n\tgetFCLLayoutForCM(this: ITableBlock & TableSharing, appComponent: AppComponent): string {\n\t\tconst FCLLevel = CommonUtils.getTargetView(this.getContent()).getController()._routing.getFCLLevel();\n\t\tif ((appComponent.getRootViewController() as FclController).getFclConfig().maxColumnsCount === 2) {\n\t\t\treturn \"MidColumnFullScreen\";\n\t\t}\n\n\t\treturn FCLLevel === 0 ? \"MidColumnFullScreen\" : \"EndColumnFullScreen\";\n\t}\n\n\t@controllerExtensionHandler(\"collaborationManager\", \"collectAvailableCards\")\n\tasync collectAvailableCards(this: ITableBlock & TableSharing, cards: WrappedCard[]): Promise<void> {\n\t\tconst actionToolbarItems = this.getContent().getActions() as ActionToolbarAction[];\n\t\tif (\n\t\t\thasInsightActionEnabled(actionToolbarItems, this.getContent().getFilter(), TableInsightsHelper.getInsightsRelevantColumns(this))\n\t\t) {\n\t\t\tconst card = await this.getCardManifestTable();\n\t\t\tif (Object.keys(card).length > 0) {\n\t\t\t\tcards.push({\n\t\t\t\t\tcard: card,\n\t\t\t\t\ttitle: (this.getTableDefinition().headerInfoTypeName as string | undefined) ?? \"\",\n\t\t\t\t\tcallback: this.onAddCardToCollaborationManagerCallback.bind(this)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets the card manifest optimized for the table case.\n\t * @returns Promise of CardManifest\n\t */\n\tprivate async getCardManifestTable(this: ITableBlock & TableSharing): Promise<CardManifest> {\n\t\tconst insightsRelevantColumns = TableInsightsHelper.getInsightsRelevantColumns(this);\n\t\tconst insightsParams = (await TableInsightsHelper.createTableCardParams(\n\t\t\tthis,\n\t\t\tinsightsRelevantColumns,\n\t\t\tthis.getSortConditionsQuery()\n\t\t)) as InsightsParams<TableContent>;\n\t\treturn InsightsService.getCardManifest(insightsParams);\n\t}\n\n\t/**\n\t * Event handler to create insightsParams and call the API to show insights card preview for table.\n\t * @param card The card manifest to be used for the callback\n\t * @returns Undefined if card preview is rendered.\n\t */\n\tasync onAddCardToCollaborationManagerCallback(this: ITableBlock & TableSharing, card: CardManifest): Promise<void> {\n\t\ttry {\n\t\t\tif (card) {\n\t\t\t\tawait InsightsService.showCollaborationManagerCardPreview(card, this.getPageController().collaborationManager.getService());\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tshowGenericErrorMessage(this.getContent());\n\t\t\tLog.error(e as string);\n\t\t}\n\t}\n\n\t/**\n\t * Event handler to create insightsParams and call the API to show insights card preview for table.\n\t * @returns Undefined if the card preview is rendered.\n\t */\n\tasync _onAddCardToInsightsPressed(this: ITableBlock & TableSharing): Promise<void> {\n\t\ttry {\n\t\t\tconst insightsRelevantColumns = TableInsightsHelper.getInsightsRelevantColumns(this);\n\t\t\tconst insightsParams = await TableInsightsHelper.createTableCardParams(\n\t\t\t\tthis,\n\t\t\t\tinsightsRelevantColumns,\n\t\t\t\tthis.getSortConditionsQuery()\n\t\t\t);\n\t\t\tif (insightsParams) {\n\t\t\t\tconst message: CardMessage = insightsParams.parameters.isNavigationEnabled\n\t\t\t\t\t? undefined\n\t\t\t\t\t: {\n\t\t\t\t\t\t\ttype: \"Warning\",\n\t\t\t\t\t\t\ttext: this.createNavigationErrorMessage(this.getContent())\n\t\t\t\t\t  };\n\n\t\t\t\tInsightsService.showInsightsCardPreview(insightsParams, message);\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tshowGenericErrorMessage(this.getContent());\n\t\t\tLog.error(e as string);\n\t\t}\n\t}\n\n\tcreateNavigationErrorMessage(scope: Control): string {\n\t\tconst resourceModel = ResourceModelHelper.getResourceModel(scope);\n\t\treturn resourceModel.getText(\"M_ROW_LEVEL_NAVIGATION_DISABLED_MSG_REASON_EXTERNAL_NAVIGATION_CONFIGURED\");\n\t}\n\n\tasync getDownloadUrlWithFilters(this: ITableBlock & TableSharing): Promise<string> {\n\t\tconst table = this.getContent();\n\t\tconst filterBar = UI5Element.getElementById(table.getFilter()) as FilterBar | undefined;\n\n\t\tif (!filterBar) {\n\t\t\tthrow new Error(\"filter bar is not available\");\n\t\t}\n\t\tconst binding = table.getRowBinding();\n\t\tconst model = table.getModel() as ODataModel;\n\t\tconst filterPropSV = await (filterBar.getParent() as FilterBarAPI).getSelectionVariant();\n\t\t// ignore filters with semantic operators which needs to be added later as filters with flp semantic date placeholders\n\t\tconst filtersWithSemanticDateOpsInfo = SemanticDateOperators.getSemanticOpsFilterProperties(filterPropSV._getSelectOptions());\n\t\tconst filtersWithoutSemanticDateOps = TableUtils.getAllFilterInfo(\n\t\t\ttable,\n\t\t\tfiltersWithSemanticDateOpsInfo.map((filterInfo) => filterInfo.filterName)\n\t\t);\n\t\tconst propertiesInfo = filterBar.getPropertyInfoSet();\n\t\t// get the filters with semantic date operators with flp placeholder format and append to the exisiting filters\n\t\tconst [flpMappedPlaceholders, semanticDateFilters] = SemanticDateOperators.getSemanticDateFiltersWithFlpPlaceholders(\n\t\t\tfiltersWithSemanticDateOpsInfo,\n\t\t\tpropertiesInfo\n\t\t);\n\n\t\tlet allRelevantFilters: Filter[] = [];\n\t\tif (filtersWithoutSemanticDateOps.filters.length > 0) {\n\t\t\tallRelevantFilters = allRelevantFilters.concat(filtersWithoutSemanticDateOps.filters);\n\t\t}\n\t\tif (semanticDateFilters.length > 0) {\n\t\t\tallRelevantFilters.push(...semanticDateFilters);\n\t\t}\n\t\tconst allFilters = new Filter({\n\t\t\tfilters: allRelevantFilters,\n\t\t\tand: true\n\t\t});\n\t\tconst parameters = {\n\t\t\t$search: CommonUtils.normalizeSearchTerm(filterBar.getSearch()) || undefined\n\t\t};\n\t\t// create hidden binding with all filters e.g. static filters and filters with semantic operators\n\t\tconst tempTableBinding = model.bindList(binding.getPath(), undefined, undefined, allFilters, parameters);\n\t\tlet url = (await tempTableBinding.requestDownloadUrl()) ?? \"\";\n\t\tfor (const [placeholder, value] of Object.entries(flpMappedPlaceholders)) {\n\t\t\turl = url.replace(placeholder, value);\n\t\t}\n\t\treturn url;\n\t}\n\n\t/**\n\t * Get the sort conditions query string.\n\t * @returns The sort conditions query string\n\t */\n\tgetSortConditionsQuery(this: ITableBlock & TableSharing): string {\n\t\tconst table = this.getContent();\n\t\tconst sortConditions = (table.getSortConditions() as SortConditions)?.sorters;\n\t\treturn sortConditions\n\t\t\t? sortConditions\n\t\t\t\t\t.map(function (sortCondition) {\n\t\t\t\t\t\tconst sortConditionsPath = table.getPropertyHelper().getProperty(sortCondition.name)?.path;\n\t\t\t\t\t\tif (sortConditionsPath) {\n\t\t\t\t\t\t\treturn `${sortConditionsPath}${sortCondition.descending ? \" desc\" : \"\"}`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t})\n\t\t\t\t\t.join(\",\")\n\t\t\t: \"\";\n\t}\n}\n"],"mappings":"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","ignoreList":[]}
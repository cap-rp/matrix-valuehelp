{"version":3,"names":["MassEditDialogHelper","props","maxAnalyzedRows","analyzedContexts","fieldProperties","entityTypePath","table","getParent","getTableDefinition","annotation","collection","metaModel","getModel","getMetaModel","manifestSettings","control","massEdit","onContextMenu","onDialogClose","onClose","view","CommonUtils","getTargetView","contexts","fetchContextsForEdit","degradedMode","length","slice","isAdaptation","getAppComponent","isAdaptationMode","headerInfo","getInvolvedDataModelObjects","getContext","targetEntityType","annotations","UI","HeaderInfo","_exports","_proto","prototype","open","templateComponent","Component","getOwnerComponentFor","internalModelContext","getBindingContext","internalModelProperty","selectedContexts","getProperty","getFieldsPropertiesFromInfo","getFieldsInfo","some","field","visible","noFieldInformation","confirmSelection","runAsOwner","massEditDialog","MassEditDialog","dialog","create","attachBeforeClose","requiredDataPromise","getRequiredDataPromise","getDataAfterOpeningDialog","resolve","error","Log","reject","visibleFieldsFromManifest","visibleFields","resourceBundle","Library","getResourceBundleFor","message","messageDetail","getText","getResourceText","TypeName","reduce","fields","fieldProperty","includes","propertyInfo","relativePath","push","label","join","MessageBox","information","details","coreResourceBundle","updatableContexts","Promise","tableAPI","editButton","cancelButton","typeName","typeNamePlural","TypeNamePlural","ModelHelper","isDraftSupported","data","readOnly","getMessageDetailForNonEditable","warning","actions","emphasizedAction","selection","undefined","getTranslatedTextFromExpBindingString","compileExpression","getExpressionFromAnnotation","toLocaleLowerCase","getEntityFieldsInfo","columnsData","columns","propertiesKeys","Set","column","type","name","transformPathsToInfo","getColumns","map","getPropertyKey","ignoredFields","ignoredField","delete","propertiesPaths","Array","from","columnInfos","propertyPath","columnInfo","getFieldInfo","entityPath","getMetaPath","entitySetDataModel","relatedColumnInfo","find","fieldInfo","annotationPath","propertyDataModel","enhanceDataModelPath","convertedAnnotation","convertMetaModelContext","targetProperty","getCompliantProperty","entityProperties","key","targetObject","isProperty","IsImageURL","isDataFieldTypes","hasOwnProperty","Value","$target","unitProperty","getAssociatedUnitProperty","isMultiValueField","hasValueHelp","Common","ValueListRelevantQualifiers","isHiddenForContexts","expBinding","anyObject","Any","anyBoolean","setModel","isHidden","context","setBindingContext","getBinding","getExternalValue","destroy","updatableContextProperty","getFieldProperties","deepClone","fieldsInfo","dataPropertyPath","getContextRelativeTargetObjectPath","unitOrCurrencyPropertyPath","getAssociatedUnitPropertyPath","getAssociatedCurrencyPropertyPath","inputType","getInputType","getRelativePaths","fieldData","visibilityBindings","isVisible","editMode","getEditMode","constant","Label","isFieldRequired","getRequiredExpression","descriptionPath","getAssociatedTextPropertyPath","textBinding","expression","getTextBinding","displayMode","getDisplayMode","IsTimezone","readOnlyExpression","isReadOnlyExpression","clearable","isPropertyClearable","emptyValue","getEmptyValueForProperty","selectItems","getDataForOpeningDialog","all","isFieldVisible","runtimeSelection","getRuntimeSelection","getDefaultSelectOptions","generateFieldsProperties","generateEntityFieldsProperties","missingContexts","bindingsToFetch","concat","pathInModel","getMissingData","bindingsToResolve","bindings","getViewData","converterType","displayedProperties","every","promises","controls","model","binding","filter","startsWith","parameters","bindingType","controlBinding","setBindingMode","BindingMode","OneTime","isA","getBindings","nestedBinding","requestValue","promise","property","nullable","any","formatWithTypeInformation","value","getBindingInfo","getType","parseValue","distinctMap","selectOptions","anyText","selectedContext","propertyText","has","add","text","unitOrCurrencyValue","getObject","propertyValue","keepEntry","SpecificSelectKeys","KeepKey","defaultOptions","ReplaceKey","ClearFieldValueKey","getFieldEditable","FieldEditMode","Editable","Object","keys","anyControl","dataFieldConverted","dataModelPath","editStyleProperties","setEditStyleProperties","editStyle","isStaticEditMode","isEditable"],"sourceRoot":".","sources":["MassEditDialogHelper.tsx"],"sourcesContent":["import type { PrimitiveType, Property, PropertyAnnotationValue } from \"@sap-ux/vocabularies-types\";\nimport type { DataField, DataFieldForAction, DataFieldForAnnotation, HeaderInfo } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport type ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport deepClone from \"sap/base/util/deepClone\";\nimport type { CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport {\n\tcompileExpression,\n\tconstant,\n\tformatWithTypeInformation,\n\tgetExpressionFromAnnotation,\n\tpathInModel\n} from \"sap/fe/base/BindingToolkit\";\nimport type { FEView } from \"sap/fe/core/BaseController\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type TemplateComponent from \"sap/fe/core/TemplateComponent\";\nimport Any from \"sap/fe/core/controls/Any\";\nimport { convertMetaModelContext, getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport { isDataFieldTypes } from \"sap/fe/core/converters/annotations/DataField\";\nimport type { MassEditTableConfiguration } from \"sap/fe/core/converters/controls/Common/Table\";\nimport type { AnnotationTableColumn } from \"sap/fe/core/converters/controls/Common/table/Columns\";\nimport type { InternalModelContext } from \"sap/fe/core/helpers/ModelHelper\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport { isProperty } from \"sap/fe/core/helpers/TypeGuards\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { enhanceDataModelPath, getContextRelativeTargetObjectPath, getRelativePaths } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { getDisplayMode } from \"sap/fe/core/templating/DisplayModeFormatter\";\nimport { isReadOnlyExpression } from \"sap/fe/core/templating/FieldControlHelper\";\nimport {\n\tgetAssociatedCurrencyPropertyPath,\n\tgetAssociatedTextPropertyPath,\n\tgetAssociatedUnitProperty,\n\tgetAssociatedUnitPropertyPath,\n\thasValueHelp\n} from \"sap/fe/core/templating/PropertyHelper\";\nimport { getEditMode, getRequiredExpression, isMultiValueField, isVisible } from \"sap/fe/core/templating/UIFormatters\";\nimport { getTextBinding, setEditStyleProperties } from \"sap/fe/macros/field/FieldTemplating\";\nimport type { FieldBlockProperties } from \"sap/fe/macros/internal/field/FieldStructureHelper\";\nimport type TableAPI from \"sap/fe/macros/table/TableAPI\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport Component from \"sap/ui/core/Component\";\nimport Library from \"sap/ui/core/Lib\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport FieldEditMode from \"sap/ui/mdc/enums/FieldEditMode\";\nimport BindingMode from \"sap/ui/model/BindingMode\";\nimport type CompositeBinding from \"sap/ui/model/CompositeBinding\";\nimport type PropertyBinding from \"sap/ui/model/PropertyBinding\";\nimport type ODataV4Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport type ODataPropertyBinding from \"sap/ui/model/odata/v4/ODataPropertyBinding\";\nimport MassEditDialog from \"./MassEditDialog\";\nimport type { BindingInfo, MassFieldProperties, SelectInfo } from \"./library\";\nimport { SpecificSelectKeys } from \"./library\";\n\ntype DataFieldTypes = DataField | DataFieldForAnnotation | DataFieldForAction;\ntype FieldInfo = {\n\tkey: string;\n\tpropertyDataModel: DataModelObjectPath<Property>;\n\ttargetProperty: Property;\n\tlabel: string;\n\tconvertedAnnotation: DataFieldTypes;\n};\n\ntype BindingToFetch = BindingInfo & { contexts?: ODataV4Context[] };\n\n/**\n * Display the massEdit dialog.\n */\nexport default class MassEditDialogHelper {\n\tprivate readonly table: Table;\n\n\tprivate readonly onContextMenu: boolean;\n\n\tprivate readonly onDialogClose: (() => void) | undefined;\n\n\tprivate readonly view: FEView;\n\n\tprivate readonly maxAnalyzedRows = 30;\n\n\tprivate contexts: ODataV4Context[];\n\n\tprivate readonly analyzedContexts: ODataV4Context[] = [];\n\n\tprivate readonly degradedMode: boolean;\n\n\tprivate readonly manifestSettings: MassEditTableConfiguration;\n\n\tprivate fieldProperties: MassFieldProperties[] = [];\n\n\tprivate readonly isAdaptation: boolean;\n\n\tprivate readonly headerInfo: HeaderInfo | undefined;\n\n\tmassEditDialog: MassEditDialog | undefined;\n\n\tconstructor(props: { table: Table; onContextMenu: boolean; onClose?: () => void }) {\n\t\tconst entityTypePath = (props.table.getParent() as TableAPI).getTableDefinition().annotation.collection,\n\t\t\tmetaModel = (props.table.getModel() as ODataModel).getMetaModel();\n\n\t\tthis.table = props.table;\n\t\tthis.manifestSettings = (this.table.getParent() as TableAPI).getTableDefinition().control.massEdit;\n\t\tthis.onContextMenu = props.onContextMenu;\n\t\tthis.onDialogClose = props.onClose;\n\t\tthis.view = CommonUtils.getTargetView(this.table);\n\t\tthis.contexts = this.fetchContextsForEdit();\n\t\tthis.degradedMode = this.contexts.length > this.maxAnalyzedRows;\n\t\tthis.analyzedContexts = this.degradedMode ? this.contexts.slice(0, this.maxAnalyzedRows) : this.contexts;\n\t\tthis.isAdaptation = CommonUtils.getAppComponent(this.table).isAdaptationMode();\n\t\tthis.headerInfo = getInvolvedDataModelObjects(metaModel.getContext(entityTypePath)).targetEntityType.annotations.UI?.HeaderInfo;\n\t}\n\n\t/**\n\t * Opens the mass edit dialog if all selected contexts are editable,\n\t * otherwise a message box to confirm the selection.\n\t * @returns A promise that resolves on open of the mass edit dialog.\n\t */\n\tasync open(): Promise<void> {\n\t\ttry {\n\t\t\tconst templateComponent = Component.getOwnerComponentFor(this.view) as TemplateComponent;\n\t\t\tconst internalModelContext = this.table.getBindingContext(\"internal\") as InternalModelContext,\n\t\t\t\tinternalModelProperty = !this.onContextMenu ? \"numberOfSelectedContexts\" : \"contextmenu/numberOfSelectedContexts\",\n\t\t\t\tselectedContexts = internalModelContext.getProperty(internalModelProperty) || 0;\n\t\t\tthis.fieldProperties = await this.getFieldsPropertiesFromInfo(this.getFieldsInfo());\n\t\t\tif (!this.isAdaptation) {\n\t\t\t\t// no field to edit\n\t\t\t\tif (!this.fieldProperties.some((field) => field.visible)) {\n\t\t\t\t\tthis.noFieldInformation();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t//Some rows are not editable -> do we want to continue?\n\t\t\t\tif (this.contexts.length !== selectedContexts) {\n\t\t\t\t\tthis.contexts = await this.confirmSelection(this.contexts, selectedContexts);\n\t\t\t\t\tif (!this.contexts.length) {\n\t\t\t\t\t\t// the user doesn't want to continue\n\t\t\t\t\t\tthis.onDialogClose?.();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait templateComponent.runAsOwner(async () => {\n\t\t\t\tthis.massEditDialog = new MassEditDialog({\n\t\t\t\t\ttable: this.table,\n\t\t\t\t\tcontexts: this.contexts,\n\t\t\t\t\tfieldProperties: this.fieldProperties\n\t\t\t\t});\n\t\t\t\tconst dialog = await this.massEditDialog.create();\n\t\t\t\tdialog.attachBeforeClose(() => {\n\t\t\t\t\tthis.onDialogClose?.();\n\t\t\t\t});\n\t\t\t\tdialog.open();\n\t\t\t\tconst requiredDataPromise = this.massEditDialog.getRequiredDataPromise();\n\t\t\t\ttry {\n\t\t\t\t\tawait this.getDataAfterOpeningDialog(this.fieldProperties);\n\t\t\t\t\trequiredDataPromise.resolve();\n\t\t\t\t} catch (error) {\n\t\t\t\t\tLog.error(\"Mass Edit: Something went wrong in mass edit dialog to get required data.\", error as string);\n\t\t\t\t\trequiredDataPromise.reject();\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (error: unknown) {\n\t\t\tLog.error(\"Mass Edit: Something went wrong in mass edit dialog creation.\", error as string);\n\t\t}\n\t}\n\n\t/**\n\t * Opens the message box to notify no fields are editable.\n\t */\n\tprivate noFieldInformation(): void {\n\t\tconst visibleFieldsFromManifest = (this.table.getParent() as TableAPI).getTableDefinition().control.massEdit.visibleFields;\n\t\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.macros\") as ResourceBundle;\n\t\tlet message = \"\",\n\t\t\tmessageDetail;\n\t\tif (visibleFieldsFromManifest.length > 0) {\n\t\t\tmessage = resourceBundle.getText(\"C_MASS_EDIT_NO_EDITABLE_FIELDS_WITH_MANIFEST\", [\n\t\t\t\tthis.getResourceText(this.headerInfo?.TypeName) ?? resourceBundle.getText(\"C_MASS_EDIT_DIALOG_DEFAULT_TYPENAME\")\n\t\t\t]);\n\t\t\tmessageDetail = `<ul>\n\t\t\t${this.fieldProperties\n\t\t\t\t.reduce((fields: string[], fieldProperty) => {\n\t\t\t\t\tif (visibleFieldsFromManifest.includes(fieldProperty.propertyInfo.relativePath)) {\n\t\t\t\t\t\tfields.push(`<li>${fieldProperty.label}</li>`);\n\t\t\t\t\t}\n\t\t\t\t\treturn fields;\n\t\t\t\t}, [])\n\t\t\t\t.join(\"\")} </ul>`;\n\t\t} else {\n\t\t\tmessage = resourceBundle.getText(\"C_MASS_EDIT_NO_EDITABLE_FIELDS_DEFAULT\");\n\t\t}\n\n\t\tMessageBox.information(message, {\n\t\t\tdetails: messageDetail,\n\t\t\tonClose: () => {\n\t\t\t\tthis.onDialogClose?.();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Opens the confirmation dialog to validate the selected contexts.\n\t * @param contexts The contexts set as updatable\n\t * @param selectedContexts  The number of selected contexts\n\t * @returns A promise that resolves the contexts to be finally managed.\n\t */\n\tprivate async confirmSelection(contexts: ODataV4Context[], selectedContexts: number): Promise<ODataV4Context[]> {\n\t\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.macros\") as ResourceBundle;\n\t\tconst coreResourceBundle = Library.getResourceBundleFor(\"sap.fe.core\") as ResourceBundle;\n\n\t\tconst updatableContexts = contexts.length;\n\t\treturn new Promise((resolve) => {\n\t\t\ttry {\n\t\t\t\tconst tableAPI = this.table.getParent() as TableAPI;\n\t\t\t\tconst editButton = resourceBundle.getText(\"C_MASS_EDIT_CONFIRM_BUTTON_TEXT\"),\n\t\t\t\t\tcancelButton = coreResourceBundle.getText(\"C_COMMON_OBJECT_PAGE_CANCEL\"),\n\t\t\t\t\tmetaModel = (this.table.getModel() as ODataModel).getMetaModel(),\n\t\t\t\t\ttypeName =\n\t\t\t\t\t\tthis.getResourceText(this.headerInfo?.TypeName) ?? resourceBundle.getText(\"C_MASS_EDIT_DIALOG_DEFAULT_TYPENAME\"),\n\t\t\t\t\ttypeNamePlural =\n\t\t\t\t\t\tthis.getResourceText(this.headerInfo?.TypeNamePlural) ??\n\t\t\t\t\t\tresourceBundle.getText(\"C_MASS_EDIT_DIALOG_DEFAULT_TYPENAME_PLURAL\"),\n\t\t\t\t\tmessageDetail =\n\t\t\t\t\t\tModelHelper.isDraftSupported(metaModel, this.table.data(\"targetCollectionPath\")) && tableAPI.readOnly\n\t\t\t\t\t\t\t? this.getMessageDetailForNonEditable(typeName, typeNamePlural)\n\t\t\t\t\t\t\t: \"\";\n\n\t\t\t\tMessageBox.warning(\n\t\t\t\t\tresourceBundle.getText(\"C_MASS_EDIT_CONFIRM_MESSAGE\", [\n\t\t\t\t\t\tselectedContexts - updatableContexts,\n\t\t\t\t\t\tselectedContexts,\n\t\t\t\t\t\tupdatableContexts,\n\t\t\t\t\t\ttypeNamePlural\n\t\t\t\t\t]),\n\t\t\t\t\t{\n\t\t\t\t\t\tdetails: messageDetail,\n\t\t\t\t\t\tactions: [editButton, cancelButton],\n\t\t\t\t\t\temphasizedAction: editButton,\n\t\t\t\t\t\tonClose: function (selection: string) {\n\t\t\t\t\t\t\tresolve(selection === editButton ? contexts : []);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tLog.error(error as string);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Gets the text according to an annotation.\n\t * @param annotation The annotation\n\t * @returns The text.\n\t */\n\tprivate getResourceText(annotation: PropertyAnnotationValue<String> | undefined): string | undefined {\n\t\tif (!annotation) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn CommonUtils.getTranslatedTextFromExpBindingString(\n\t\t\tcompileExpression(getExpressionFromAnnotation(annotation)) as string,\n\t\t\tthis.view\n\t\t)?.toLocaleLowerCase();\n\t}\n\n\t/**\n\t * Gets the message detail of the confirmation dialog.\n\t * @param typeName The type name of the entity set\n\t * @param typeNamePlural The type name plural of the entity set\n\t * @returns The text.\n\t */\n\tprivate getMessageDetailForNonEditable(typeName: string, typeNamePlural: string): string {\n\t\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.macros\") as ResourceBundle;\n\t\treturn `<p><strong>${resourceBundle.getText(\"C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_HEADER\")}</strong></p>\\n\n\t\t\t<p>${resourceBundle.getText(\"C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_REASON\", [typeNamePlural])}</p>\\n\n\t\t\t<ul>\n\t\t\t\t<li>${resourceBundle.getText(\"C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_REASON_DRAFT\", [typeName])}</li>\n\t\t\t\t<li>${resourceBundle.getText(\"C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_REASON_NON_EDITABLE\", [typeName])}</li>\n\t\t\t</ul>`;\n\t}\n\n\t/**\n\t * Gets information about the entity which is compliant for a Mass Edit.\n\t * @returns Array of the field information.\n\t */\n\n\tprivate getEntityFieldsInfo(): FieldInfo[] {\n\t\tconst tableAPI = this.table.getParent() as TableAPI;\n\t\tconst columnsData = tableAPI.getTableDefinition().columns;\n\n\t\tconst propertiesKeys = new Set(\n\t\t\tcolumnsData.reduce((fields: string[], column) => {\n\t\t\t\tif (column.type === \"Annotation\") {\n\t\t\t\t\tfields.push(column.name);\n\t\t\t\t}\n\t\t\t\treturn fields;\n\t\t\t}, [])\n\t\t);\n\t\treturn this.transformPathsToInfo(propertiesKeys);\n\t}\n\n\t/**\n\t * Gets information about the properties of the table which are compliant for a Mass Edit.\n\t * @returns Array of the field information.\n\t */\n\tprivate getFieldsInfo(): FieldInfo[] {\n\t\tconst propertiesKeys =\n\t\t\tthis.manifestSettings.visibleFields.length > 0\n\t\t\t\t? new Set(this.manifestSettings.visibleFields)\n\t\t\t\t: new Set(this.table.getColumns().map((column) => column.getPropertyKey()));\n\n\t\tif (this.manifestSettings.ignoredFields.length > 0) {\n\t\t\tfor (const ignoredField of this.manifestSettings.ignoredFields) {\n\t\t\t\tpropertiesKeys.delete(ignoredField);\n\t\t\t}\n\t\t}\n\t\treturn this.transformPathsToInfo(propertiesKeys);\n\t}\n\n\t/**\n\t * Transforms a set of property paths to an array of field information.\n\t * @param propertiesPaths The set of property paths\n\t * @returns Array of the field information.\n\t */\n\tprivate transformPathsToInfo(propertiesPaths: Set<string>): FieldInfo[] {\n\t\treturn Array.from(propertiesPaths).reduce((columnInfos: FieldInfo[], propertyPath) => {\n\t\t\tconst columnInfo = this.getFieldInfo(propertyPath);\n\t\t\tif (columnInfo) {\n\t\t\t\tcolumnInfos.push(columnInfo);\n\t\t\t}\n\t\t\treturn columnInfos;\n\t\t}, []);\n\t}\n\n\t/**\n\t * Gets information about a property.\n\t * @param propertyPath\n\t * @returns Field information.\n\t */\n\tprivate getFieldInfo(propertyPath: string): FieldInfo | undefined {\n\t\tconst columnsData = (this.table.getParent() as TableAPI).getTableDefinition().columns;\n\t\tconst metaModel = (this.table.getModel() as ODataModel).getMetaModel();\n\t\tconst entityPath = metaModel.getMetaPath(this.table.data(\"metaPath\"));\n\t\tconst entitySetDataModel = getInvolvedDataModelObjects(metaModel.getContext(entityPath));\n\t\tconst relatedColumnInfo = columnsData.find((fieldInfo) => fieldInfo.name === propertyPath && fieldInfo.type === \"Annotation\");\n\t\tif (relatedColumnInfo) {\n\t\t\tconst annotationPath = (relatedColumnInfo as AnnotationTableColumn).annotationPath;\n\t\t\tif (annotationPath && propertyPath) {\n\t\t\t\tconst propertyDataModel = enhanceDataModelPath<Property>(entitySetDataModel, propertyPath);\n\t\t\t\tconst convertedAnnotation = convertMetaModelContext(metaModel.getContext(annotationPath)) as\n\t\t\t\t\t| DataField\n\t\t\t\t\t| DataFieldForAnnotation\n\t\t\t\t\t| DataFieldForAction;\n\t\t\t\tconst targetProperty = this.getCompliantProperty(propertyDataModel, convertedAnnotation);\n\t\t\t\tif (targetProperty && entitySetDataModel.targetEntityType.entityProperties.includes(targetProperty))\n\t\t\t\t\treturn {\n\t\t\t\t\t\tkey: relatedColumnInfo.key,\n\t\t\t\t\t\tpropertyDataModel,\n\t\t\t\t\t\ttargetProperty,\n\t\t\t\t\t\tlabel: relatedColumnInfo.label ?? relatedColumnInfo.key,\n\t\t\t\t\t\tconvertedAnnotation\n\t\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Gets the property to display on the Dialog.\n\t * @param propertyDataModel The dataModelObjectPath of the column\n\t * @param annotation  The converted annotation of the column\n\t * @returns The property if it is compliant, undefined otherwise\n\t */\n\tprivate getCompliantProperty(propertyDataModel: DataModelObjectPath<Property>, annotation: DataFieldTypes): Property | undefined {\n\t\tconst targetObject = propertyDataModel.targetObject;\n\t\tlet targetProperty: Property;\n\t\tif (isProperty(targetObject)) {\n\t\t\ttargetProperty = targetObject;\n\t\t\tif (targetObject.annotations.UI?.IsImageURL) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (isDataFieldTypes(annotation) && !annotation.hasOwnProperty(\"Action\")) {\n\t\t\ttargetProperty = annotation.Value.$target;\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if the field is compliant for the MassEdit\n\t\tconst unitProperty = getAssociatedUnitProperty(targetProperty);\n\t\tif (\n\t\t\tisMultiValueField(propertyDataModel) ||\n\t\t\t(hasValueHelp(targetProperty) && targetProperty.annotations?.Common?.ValueListRelevantQualifiers) || // context dependent VH is not supported for Mass Edit.\n\t\t\t(unitProperty && hasValueHelp(unitProperty) && unitProperty.annotations?.Common?.ValueListRelevantQualifiers)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\treturn targetProperty;\n\t}\n\n\t/**\n\t * Checks if the field is hidden for the provided contexts.\n\t * @param expBinding The expression binding of the property.\n\t * @returns True if the field is hidden for all contexts, false otherwise\n\t */\n\tprivate isHiddenForContexts(expBinding: CompiledBindingToolkitExpression): boolean {\n\t\tif (expBinding === \"true\") {\n\t\t\treturn false;\n\t\t} else if (expBinding === \"false\") {\n\t\t\treturn true;\n\t\t}\n\t\tconst anyObject = new Any({ anyBoolean: expBinding });\n\t\tanyObject.setModel(this.analyzedContexts[0].getModel());\n\t\tconst isHidden = !this.analyzedContexts.find((context) => {\n\t\t\tanyObject.setBindingContext(context);\n\t\t\treturn (anyObject.getBinding(\"anyBoolean\") as PropertyBinding).getExternalValue();\n\t\t});\n\t\tanyObject.destroy();\n\t\treturn isHidden;\n\t}\n\n\t/**\n\t * Gets the selected context set as updatable.\n\t * @returns The contexts.\n\t */\n\tprivate fetchContextsForEdit(): ODataV4Context[] {\n\t\tconst internalModelContext = this.table.getBindingContext(\"internal\"),\n\t\t\tupdatableContextProperty = !this.onContextMenu ? \"updatableContexts\" : \"contextmenu/updatableContexts\";\n\t\treturn internalModelContext?.getProperty(updatableContextProperty) ?? [];\n\t}\n\n\t/**\n\t * Gets the properties of the mass edit fields.\n\t * @returns The properties of the mass edit field.\n\t */\n\tgetFieldProperties(): MassFieldProperties[] {\n\t\treturn deepClone(this.fieldProperties);\n\t}\n\n\t/**\n\t * Gets the properties of the mass edit fields from an array of field information.\n\t * @param fieldsInfo The field information.\n\t * @returns The properties of the mass edit fields.\n\t */\n\tprivate async getFieldsPropertiesFromInfo(fieldsInfo: FieldInfo[]): Promise<MassFieldProperties[]> {\n\t\tconst fieldProperties: MassFieldProperties[] = [];\n\n\t\tfor (const fieldInfo of fieldsInfo) {\n\t\t\tconst { targetProperty, propertyDataModel, convertedAnnotation } = fieldInfo;\n\t\t\tconst dataPropertyPath = getContextRelativeTargetObjectPath(propertyDataModel);\n\t\t\tif (dataPropertyPath) {\n\t\t\t\tconst unitOrCurrencyPropertyPath =\n\t\t\t\t\tgetAssociatedUnitPropertyPath(targetProperty) || getAssociatedCurrencyPropertyPath(targetProperty);\n\t\t\t\tconst inputType = this.getInputType(convertedAnnotation, propertyDataModel);\n\t\t\t\tif (inputType && propertyDataModel.targetObject) {\n\t\t\t\t\tconst relativePath = getRelativePaths(propertyDataModel);\n\t\t\t\t\tconst fieldData = {\n\t\t\t\t\t\tvisibilityBindings: {\n\t\t\t\t\t\t\tisVisible: compileExpression(isVisible(convertedAnnotation)),\n\t\t\t\t\t\t\teditMode: getEditMode(\n\t\t\t\t\t\t\t\ttargetProperty,\n\t\t\t\t\t\t\t\tpropertyDataModel,\n\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\tconvertedAnnotation,\n\t\t\t\t\t\t\t\tconstant(true)\n\t\t\t\t\t\t\t) as CompiledBindingToolkitExpression\n\t\t\t\t\t\t},\n\t\t\t\t\t\tvisible: true, //by default the field is visible\n\t\t\t\t\t\tlabel: fieldInfo.label || (targetProperty.annotations.Common?.Label as string | undefined) || dataPropertyPath,\n\t\t\t\t\t\tisFieldRequired: getRequiredExpression(\n\t\t\t\t\t\t\ttargetProperty,\n\t\t\t\t\t\t\tconvertedAnnotation,\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tpropertyDataModel\n\t\t\t\t\t\t) as CompiledBindingToolkitExpression,\n\t\t\t\t\t\tdescriptionPath: getAssociatedTextPropertyPath(propertyDataModel.targetObject),\n\t\t\t\t\t\ttextBinding: {\n\t\t\t\t\t\t\texpression: getTextBinding(propertyDataModel, {\n\t\t\t\t\t\t\t\tdisplayMode: getDisplayMode(targetProperty, propertyDataModel)\n\t\t\t\t\t\t\t}) as CompiledBindingToolkitExpression,\n\t\t\t\t\t\t\ttype:\n\t\t\t\t\t\t\t\ttargetProperty.type === \"Edm.DateTimeOffset\" || targetProperty?.annotations?.Common?.IsTimezone\n\t\t\t\t\t\t\t\t\t? \"anyText\"\n\t\t\t\t\t\t\t\t\t: \"any\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\treadOnlyExpression: isReadOnlyExpression(targetProperty, relativePath),\n\t\t\t\t\t\tinputType,\n\t\t\t\t\t\tpropertyInfo: {\n\t\t\t\t\t\t\tclearable: this.isPropertyClearable(targetProperty),\n\t\t\t\t\t\t\temptyValue: this.getEmptyValueForProperty(targetProperty, dataPropertyPath),\n\t\t\t\t\t\t\tkey: fieldInfo.key,\n\t\t\t\t\t\t\trelativePath: dataPropertyPath,\n\t\t\t\t\t\t\tunitOrCurrencyPropertyPath\n\t\t\t\t\t\t},\n\t\t\t\t\t\tselectItems: [] as SelectInfo[]\n\t\t\t\t\t};\n\t\t\t\t\tfieldProperties.push(fieldData);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tawait this.getDataForOpeningDialog(fieldProperties);\n\t\tawait Promise.all(\n\t\t\tfieldProperties.map(async (fieldData) => {\n\t\t\t\tfieldData.visible = this.manifestSettings.visibleFields.length === 0 ? this.isFieldVisible(fieldData) : true;\n\t\t\t\tconst runtimeSelection = !this.isAdaptation ? await this.getRuntimeSelection(fieldData) : [];\n\t\t\t\tfieldData.selectItems = [...this.getDefaultSelectOptions(fieldData), ...runtimeSelection];\n\t\t\t})\n\t\t);\n\t\treturn fieldProperties;\n\t}\n\n\t/**\n\t * Gets the properties of dialog fields.\n\t * @returns The properties.\n\t */\n\tasync generateFieldsProperties(): Promise<MassFieldProperties[]> {\n\t\treturn this.getFieldsPropertiesFromInfo(this.getFieldsInfo());\n\t}\n\n\t/**\n\t * Gets the properties of the entity.\n\t * @returns The properties.\n\t */\n\tasync generateEntityFieldsProperties(): Promise<MassFieldProperties[]> {\n\t\treturn this.getFieldsPropertiesFromInfo(this.getEntityFieldsInfo());\n\t}\n\n\t/**\n\t * Gets the relevant data from the model needed after the opening of the dialog.\n\t * This method is called only in the degraded mode since the data is already fetched in the normal mode.\n\t * the degraded mode is set when the number of selected contexts is greater than the max analyzed rows.\n\t * @param fieldProperties The field properties\n\t * @returns A promise that resolves when the data is fetched.\n\t */\n\tprivate async getDataAfterOpeningDialog(fieldProperties: MassFieldProperties[]): Promise<void> {\n\t\tif (this.degradedMode) {\n\t\t\tconst missingContexts = this.contexts.slice(this.maxAnalyzedRows, this.contexts.length);\n\t\t\tconst bindingsToFetch = ([] as BindingToFetch[]).concat(\n\t\t\t\t...fieldProperties.map((fieldData) => [\n\t\t\t\t\t{ expression: compileExpression(fieldData.readOnlyExpression), contexts: this.contexts },\n\t\t\t\t\t{ expression: compileExpression(pathInModel(fieldData.propertyInfo.relativePath)), contexts: missingContexts },\n\t\t\t\t\t{\n\t\t\t\t\t\texpression: compileExpression(pathInModel(fieldData.propertyInfo.unitOrCurrencyPropertyPath)),\n\t\t\t\t\t\tcontexts: missingContexts\n\t\t\t\t\t}\n\t\t\t\t])\n\t\t\t);\n\t\t\tawait this.getMissingData(bindingsToFetch);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the relevant data from the model needed to open the dialog.\n\t * @param fieldProperties The field properties\n\t * @returns A promise that resolves when the data is fetched.\n\t */\n\tprivate async getDataForOpeningDialog(fieldProperties: MassFieldProperties[]): Promise<void> {\n\t\tconst bindingsToResolve = ([] as BindingToFetch[]).concat(\n\t\t\tfieldProperties.reduce((bindings: BindingToFetch[], fieldData) => {\n\t\t\t\tbindings = bindings.concat([\n\t\t\t\t\t{ expression: fieldData.textBinding.expression },\n\t\t\t\t\t{\n\t\t\t\t\t\texpression: compileExpression(pathInModel(fieldData.propertyInfo.relativePath)),\n\t\t\t\t\t\ttype: fieldData.textBinding.type\n\t\t\t\t\t},\n\t\t\t\t\t{ expression: compileExpression(pathInModel(fieldData.propertyInfo.unitOrCurrencyPropertyPath)) }\n\t\t\t\t]);\n\t\t\t\tif (!this.manifestSettings.visibleFields.length) {\n\t\t\t\t\tbindings = bindings.concat([\n\t\t\t\t\t\t{ expression: fieldData.visibilityBindings.isVisible },\n\t\t\t\t\t\t{ expression: fieldData.visibilityBindings.editMode }\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t\tif (!this.degradedMode) {\n\t\t\t\t\tbindings.push({ expression: compileExpression(fieldData.readOnlyExpression) });\n\t\t\t\t}\n\t\t\t\treturn bindings;\n\t\t\t}, [])\n\t\t);\n\t\tawait this.getMissingData(bindingsToResolve);\n\t}\n\n\t/**\n\t * Gets the missing data for the fields.\n\t * This method generates controls with the provided bindings to fetch the missing data.\n\t * The model requests the data to the backend when the contexts doesn't contains the related properties.\n\t * @param bindingsToFetch The binding to resolve and its property path reference\n\t * @returns A promise that resolves when the data is fetched.\n\t */\n\tprivate async getMissingData(bindingsToFetch: BindingToFetch[]): Promise<undefined> {\n\t\tif (this.isAdaptation) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.view.getViewData().converterType === \"ObjectPage\") {\n\t\t\tconst displayedProperties = this.table.getColumns().map((column) => column.getPropertyKey());\n\t\t\tif (this.manifestSettings.visibleFields.every((field) => displayedProperties.includes(field))) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tconst promises = [];\n\t\tconst controls = [];\n\t\tconst model = this.contexts[0].getModel();\n\t\tfor (const binding of bindingsToFetch.filter((binding) => binding.expression?.startsWith(\"{\"))) {\n\t\t\t// Avoid to fetch constant bindings\n\t\t\tconst parameters = {} as Record<string, CompiledBindingToolkitExpression>;\n\t\t\tconst analyzedContexts = binding.contexts ?? this.analyzedContexts;\n\t\t\tconst bindingType = binding.type ?? \"any\";\n\t\t\tparameters[bindingType] = binding.expression;\n\t\t\tfor (const context of analyzedContexts) {\n\t\t\t\tconst control = new Any(parameters);\n\t\t\t\tcontrol.setModel(model);\n\t\t\t\tcontrol.setBindingContext(context);\n\t\t\t\tcontrols.push(control);\n\t\t\t\tpromises.push(async () => {\n\t\t\t\t\tconst controlBinding = control.getBinding(bindingType) as ODataPropertyBinding | undefined;\n\t\t\t\t\tif (controlBinding) {\n\t\t\t\t\t\tcontrolBinding.setBindingMode(BindingMode.OneTime);\n\t\t\t\t\t\tif (controlBinding.isA<CompositeBinding>(\"sap.ui.model.CompositeBinding\")) {\n\t\t\t\t\t\t\tawait Promise.all(controlBinding.getBindings().map((nestedBinding) => nestedBinding.requestValue?.()));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tawait controlBinding.requestValue?.();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tawait Promise.all(promises.map(async (promise) => promise()));\n\t\tfor (const control of controls) {\n\t\t\tcontrol.destroy();\n\t\t}\n\t}\n\n\t/**\n\t * Gets the default value of the property when the related field is empty.\n\t * @param property The property\n\t * @param propertyPath The property path\n\t * @returns The default value.\n\t */\n\tgetEmptyValueForProperty(property: Property, propertyPath: string): PrimitiveType {\n\t\tif (property.nullable !== false) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\tconst context = this.contexts[0];\n\t\t\tconst anyObject = new Any({ any: compileExpression(formatWithTypeInformation(property, pathInModel(propertyPath))) });\n\t\t\tanyObject.setModel(context.getModel());\n\t\t\tanyObject.setBindingContext(context);\n\t\t\tconst value = anyObject.getBindingInfo(\"any\").binding.getType().parseValue(\"\", \"string\");\n\t\t\tanyObject.destroy();\n\t\t\treturn value;\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the property is clearable.\n\t * Some OData types don't access empty string or 0 as a valid value when it's not nullable.\n\t * For example, Edm.DateTime doesn't accept an empty string as a valid value.\n\t * @param property The property\n\t * @returns True if the property is clearable, false otherwise.\n\t */\n\tisPropertyClearable(property: Property): PrimitiveType {\n\t\tif (property.nullable !== false) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn ![\"Edm.DateTime\", \"Edm.DateTimeOffset\", \"Edm.TimeOfDay\", \"Edm.Time\", \"Edm.Date\", \"Edm.DateTimeWithTimezone\"].includes(\n\t\t\t\tproperty.type\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the selection options of a field generated by the selected contexts.\n\t * @param fieldData Data of the field used by both the static and the runtime model\n\t * @returns The select options of the field\n\t */\n\tprivate async getRuntimeSelection(fieldData: MassFieldProperties): Promise<SelectInfo[]> {\n\t\tconst distinctMap = new Set<string>();\n\t\tconst selectOptions: SelectInfo[] = [];\n\t\tif (fieldData.inputType === \"CheckBox\") {\n\t\t\treturn [];\n\t\t}\n\t\tconst anyObject = new Any({ anyText: fieldData.textBinding.expression });\n\t\tanyObject.setModel(this.contexts[0].getModel());\n\t\tfor (const selectedContext of this.analyzedContexts) {\n\t\t\tanyObject.setBindingContext(selectedContext);\n\t\t\tconst textBinding = anyObject.getBinding(\"anyText\");\n\t\t\tif (textBinding?.isA<CompositeBinding>(\"sap.ui.model.CompositeBinding\")) {\n\t\t\t\t// If the text binding is a composite binding, we need to request the value of each binding\n\t\t\t\t// to wait for the promise to resolve before getting the value of requestUnitsOfMeasure/requestCurrencyCodes\n\t\t\t\t// for the custom units of measure and currency codes.\n\t\t\t\t// We have to set the binding mode to OneTime to avoid the binding to be updated when the context changes.\n\t\t\t\t// Indeed even if the requestUnitsOfMeasure/requestCurrencyCodes doesn't change it's trigger a PATCH request\n\t\t\t\ttextBinding.setBindingMode(BindingMode.OneTime);\n\t\t\t\tawait Promise.all(textBinding.getBindings().map((binding) => binding.requestValue?.()));\n\t\t\t}\n\t\t\tconst propertyText = (anyObject.getBinding(\"anyText\") as PropertyBinding | undefined)?.getExternalValue();\n\t\t\tif (propertyText && !distinctMap.has(propertyText)) {\n\t\t\t\tdistinctMap.add(propertyText);\n\t\t\t\tselectOptions.push({\n\t\t\t\t\ttext: propertyText,\n\t\t\t\t\tkey: propertyText,\n\t\t\t\t\tunitOrCurrencyValue: fieldData.propertyInfo.unitOrCurrencyPropertyPath\n\t\t\t\t\t\t? selectedContext.getObject(fieldData.propertyInfo.unitOrCurrencyPropertyPath)\n\t\t\t\t\t\t: \"\",\n\t\t\t\t\tpropertyValue: selectedContext.getObject(fieldData.propertyInfo.relativePath)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tanyObject.destroy();\n\t\treturn selectOptions;\n\t}\n\n\t/**\n\t * Gets the default selection options of a field.\n\t * @param fieldData The property information\n\t * @returns The default select options.\n\t */\n\tprivate getDefaultSelectOptions(fieldData: MassFieldProperties): SelectInfo[] {\n\t\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.macros\") as ResourceBundle;\n\t\tconst keepEntry = {\n\t\t\ttext: resourceBundle.getText(\"C_MASS_EDIT_COMBOBOX_KEEP_VALUES\"),\n\t\t\tkey: SpecificSelectKeys.KeepKey\n\t\t};\n\t\tconst defaultOptions: SelectInfo[] = [];\n\t\tdefaultOptions.push(keepEntry);\n\t\tif (fieldData.inputType === \"CheckBox\") {\n\t\t\tdefaultOptions.push({ text: resourceBundle.getText(\"yes\"), key: \"true\" }, { text: resourceBundle.getText(\"no\"), key: \"false\" });\n\t\t} else {\n\t\t\tdefaultOptions.push({\n\t\t\t\ttext: resourceBundle.getText(\"C_MASS_EDIT_COMBOBOX_REPLACE_VALUES\"),\n\t\t\t\tkey: SpecificSelectKeys.ReplaceKey\n\t\t\t});\n\t\t\tif (fieldData.isFieldRequired !== \"true\" && fieldData.propertyInfo.clearable) {\n\t\t\t\tdefaultOptions.push({\n\t\t\t\t\ttext: resourceBundle.getText(\"C_MASS_EDIT_COMBOBOX_CLEAR_VALUES\"),\n\t\t\t\t\tkey: SpecificSelectKeys.ClearFieldValueKey\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn defaultOptions;\n\t}\n\n\t/**\n\t * Checks if the the field is editable.\n\t * @param expBinding The expression binding of the property.\n\t * @returns Returns true if the mass edit field is editable.\n\t */\n\tprivate getFieldEditable(expBinding: CompiledBindingToolkitExpression): boolean {\n\t\tif (expBinding === FieldEditMode.Editable) {\n\t\t\treturn true;\n\t\t} else if (Object.keys(FieldEditMode).includes(expBinding as FieldEditMode)) {\n\t\t\treturn false;\n\t\t} else if (expBinding) {\n\t\t\tconst anyControl = new Any({ any: expBinding });\n\t\t\tconst model = this.analyzedContexts[0].getModel();\n\t\t\tanyControl.setModel(model);\n\t\t\tconst visible = this.analyzedContexts.some((context) => {\n\t\t\t\tanyControl.setBindingContext(context);\n\t\t\t\treturn (anyControl.getBinding(\"any\") as PropertyBinding).getExternalValue() === FieldEditMode.Editable;\n\t\t\t});\n\t\t\tanyControl.destroy();\n\t\t\treturn visible;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the input type of the field.\n\t * @param dataFieldConverted The converted annotation fo the field\n\t * @param dataModelPath The dataModelObjectPath of the property\n\t * @returns The input type.\n\t */\n\tprivate getInputType(dataFieldConverted: DataFieldTypes, dataModelPath: DataModelObjectPath<Property>): string | undefined | null {\n\t\tconst editStyleProperties = {} as FieldBlockProperties;\n\t\tsetEditStyleProperties(editStyleProperties, dataFieldConverted, dataModelPath, true);\n\t\treturn editStyleProperties?.editStyle;\n\t}\n\n\t/**\n\t * Gets the visibility of the field\n\t * This visibility is not dependent on the context when\n\t *  - either the adaptation mode is set.\n\t *  - or the field is visible in the manifest and the degraded mode is set.\n\t * @param fieldProperties The properties of the mass edit field\n\t * @returns True if the field is visible, false otherwise\n\t */\n\tprivate isFieldVisible(fieldProperties: MassFieldProperties): boolean {\n\t\tif (this.isAdaptation || (this.manifestSettings.visibleFields.length && this.degradedMode)) {\n\t\t\tconst isStaticEditMode = Object.keys(FieldEditMode).includes(fieldProperties.visibilityBindings.editMode as FieldEditMode);\n\t\t\tconst isEditable =\n\t\t\t\t!isStaticEditMode || (isStaticEditMode && fieldProperties.visibilityBindings.editMode === FieldEditMode.Editable);\n\t\t\treturn isEditable && fieldProperties.visibilityBindings.isVisible !== \"false\";\n\t\t}\n\t\treturn (\n\t\t\tthis.getFieldEditable(fieldProperties.visibilityBindings.editMode) &&\n\t\t\t!this.isHiddenForContexts(fieldProperties.visibilityBindings.isVisible)\n\t\t);\n\t}\n}\n"],"mappings":"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","ignoreList":[],"file":"MassEditDialogHelper-dbg.js"}
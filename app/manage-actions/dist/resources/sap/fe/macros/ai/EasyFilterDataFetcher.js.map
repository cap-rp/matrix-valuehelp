{"version":3,"file":"EasyFilterDataFetcher.js","names":["getKeyPropertyFilter","valueList","keyProperty","operator","valueToMatch","filterValue","annotations","Common","IsUpperCase","valueOf","toUpperCase","Filter","path","keyPath","value1","async","resolveValueUsingValueList","model","valueListInfo","$model","CollectionPath","$select","generateSelectParameter","$search","CommonUtils","normalizeSearchTerm","Date","toISOString","toString","keyPropertyFilter","valueHelpKeyQuery","valueHelpSearchQuery","Promise","allSettled","bindList","undefined","requestContexts","mapResult","mapValueListToCodeList","status","value","length","FilterOperator","EQ","selectedValues","map","description","ensureDescription","arguments","context","data","getObject","descriptionPath","_exports","filter","includes","join","handleIntervals","resolvedValues","resolvedLowerBound","resolvedUpperBound","result","lowerBound","lowerBoundText","upperBound","upperBoundText","push","resolveTokenValue","setContinueOnError","valueListMetamodel","convertTypes","getMetaModel","resolvePath","target","isProperty","unresolvedResult","resolvedOperator","BT","NB","all","selectedValue","flat","values","_ref"],"sources":["./EasyFilterDataFetcher.ts"],"sourcesContent":["import type { Property } from \"@sap-ux/vocabularies-types\";\nimport type {\n\tCodeListType,\n\tTokenSelectedValuesDefinition,\n\tValueHelpSelectedValuesDefinition\n} from \"sap/fe/controls/easyFilter/EasyFilterBarContainer\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport { convertTypes } from \"sap/fe/core/converters/MetaModelConverter\";\nimport { isProperty } from \"sap/fe/core/helpers/TypeGuards\";\nimport { type ValueListInfo } from \"sap/fe/macros/internal/valuehelp/ValueListHelper\";\nimport type Context from \"sap/ui/model/Context\";\nimport Filter from \"sap/ui/model/Filter\";\nimport FilterOperator from \"sap/ui/model/FilterOperator\";\nimport type { CodeListEntry } from \"ux/eng/fioriai/reuse/easyfilter/EasyFilter\";\n\ntype ScalarOperator = Exclude<FilterOperator, FilterOperator.BT | FilterOperator.NB>;\ntype ScalarValue = string | boolean | number | Date;\n\n/**\n * Generates a filter for the key property of a value list.\n * @param valueList The value list information.\n * @param keyProperty The key property of the value list.\n * @param operator The filter operator.\n * @param valueToMatch The value to match.\n * @returns A filter for the key property.\n */\nfunction getKeyPropertyFilter(\n\tvalueList: ValueListInfo,\n\tkeyProperty: Property,\n\toperator: ScalarOperator,\n\tvalueToMatch: ScalarValue\n): Filter {\n\tlet filterValue = valueToMatch;\n\n\t// If the key property is known to contain only uppercase values, convert the filter value to uppercase as well\n\tif (typeof filterValue === \"string\" && keyProperty.annotations.Common?.IsUpperCase?.valueOf() === true) {\n\t\tfilterValue = filterValue.toUpperCase();\n\t}\n\n\treturn new Filter({ path: valueList.keyPath, operator, value1: filterValue });\n}\n\n/**\n * Resolves a single scalar value using a value list.\n * @param valueList The value list information.\n * @param keyProperty The key property of the value list.\n * @param operator The filter operator.\n * @param valueToMatch The value to match.\n * @returns A promise that resolves to the selected values.\n */\nasync function resolveValueUsingValueList(\n\tvalueList: ValueListInfo,\n\tkeyProperty: Property,\n\toperator: ScalarOperator,\n\tvalueToMatch: ScalarValue\n): Promise<ValueHelpSelectedValuesDefinition> {\n\tconst model = valueList.valueListInfo.$model;\n\tconst path = `/${valueList.valueListInfo.CollectionPath}`;\n\tconst $select = generateSelectParameter(valueList);\n\tconst $search = CommonUtils.normalizeSearchTerm(valueToMatch instanceof Date ? valueToMatch.toISOString() : valueToMatch.toString());\n\tconst keyPropertyFilter = getKeyPropertyFilter(valueList, keyProperty, operator, valueToMatch);\n\n\tconst [valueHelpKeyQuery, valueHelpSearchQuery] = await Promise.allSettled([\n\t\tmodel.bindList(path, undefined, undefined, keyPropertyFilter, { $select }).requestContexts(0, 1), // $filter on the key property of the value list\n\t\tmodel.bindList(path, undefined, undefined, undefined, { $search, $select }).requestContexts() // $search on the value list\n\t]);\n\n\tconst mapResult = mapValueListToCodeList(valueList, true);\n\n\tif (valueHelpKeyQuery.status === \"fulfilled\" && valueHelpKeyQuery.value.length > 0) {\n\t\t// There is at least one match in the key column:\n\t\t// - If the operator is EQ: This indicates an exact key match, so the returned data will be used.\n\t\t// - For other operators: One or more keys match the value based on the operator, so the original condition is preserved.\n\t\treturn operator === FilterOperator.EQ\n\t\t\t? { operator, selectedValues: valueHelpKeyQuery.value.map(mapResult) }\n\t\t\t: { operator, selectedValues: [{ value: valueToMatch, description: valueToMatch }] };\n\t}\n\n\tif (valueHelpSearchQuery.status === \"fulfilled\" && valueHelpSearchQuery.value.length > 0) {\n\t\t// The key query did not return any matches, but the search query found results. Use the search results instead.\n\t\treturn {\n\t\t\toperator: FilterOperator.EQ,\n\t\t\tselectedValues: valueHelpSearchQuery.value.map(mapResult)\n\t\t};\n\t}\n\n\t// No matches were found in either query; the original value will be used as a fallback.\n\treturn { operator, selectedValues: [{ value: valueToMatch, description: valueToMatch }] };\n}\n\n/**\n * Create a mapping function for mapping a value list query result to a code list.\n * @param valueList The value list information used to identify the key and description properties.\n * @param ensureDescription Whether to ensure that the description is always returned.\n * @returns A function that maps a single value list query result to a code list entry.\n */\nexport function mapValueListToCodeList(valueList: ValueListInfo, ensureDescription: true): (context: Context) => CodeListType;\nexport function mapValueListToCodeList(valueList: ValueListInfo, ensureDescription?: false): (context: Context) => CodeListEntry;\nexport function mapValueListToCodeList(\n\tvalueList: ValueListInfo,\n\tensureDescription = false\n): (context: Context) => CodeListEntry | CodeListType {\n\treturn (context: Context): CodeListEntry => {\n\t\tconst data = context.getObject();\n\t\tconst value = data[valueList.keyPath];\n\t\tconst description = valueList.descriptionPath ? data[valueList.descriptionPath] : undefined;\n\t\treturn { value, description: ensureDescription ? description ?? value : description };\n\t};\n}\n\n/**\n * Generates the $select parameter for a value list query.\n * @param valueList The value list information.\n * @returns The $select parameter as a string.\n */\nexport function generateSelectParameter(valueList: ValueListInfo): string {\n\treturn [valueList.keyPath, valueList.descriptionPath].filter((path) => path && !path.includes(\"/\")).join(\",\");\n}\n\nfunction handleIntervals(\n\toperator: FilterOperator.BT | FilterOperator.NB,\n\tresolvedValues: ValueHelpSelectedValuesDefinition[]\n): ValueHelpSelectedValuesDefinition[] {\n\tconst [resolvedLowerBound, resolvedUpperBound] = resolvedValues;\n\n\tconst result: ValueHelpSelectedValuesDefinition[] = [];\n\tfor (const { value: lowerBound, description: lowerBoundText } of resolvedLowerBound.selectedValues) {\n\t\tfor (const { value: upperBound, description: upperBoundText } of resolvedUpperBound.selectedValues) {\n\t\t\tresult.push({\n\t\t\t\toperator,\n\t\t\t\tselectedValues: [\n\t\t\t\t\t{ value: lowerBound, description: lowerBoundText ?? lowerBound },\n\t\t\t\t\t{ value: upperBound, description: upperBoundText ?? upperBound }\n\t\t\t\t]\n\t\t\t});\n\t\t}\n\t}\n\treturn result;\n}\n\n/**\n * Resolves token-based filter values using a value list.\n * @param valueList The value list used for resolving values.\n * @param value The token-based filter values to resolve.\n * @returns A promise that resolves to an array of resolved filter values.\n */\nexport async function resolveTokenValue(\n\tvalueList: ValueListInfo,\n\tvalue: TokenSelectedValuesDefinition\n): Promise<ValueHelpSelectedValuesDefinition[]> {\n\tconst { operator, selectedValues } = value;\n\tconst model = valueList.valueListInfo.$model;\n\n\t// Make sure all values are resolved, even if some requests fail. It can happen that the backend cannot process the $filter queries we\n\t// run on the value list, but we still want to get the fallback $search results.\n\tmodel.setContinueOnError(\"$auto\");\n\n\tconst valueListMetamodel = convertTypes(model.getMetaModel());\n\tconst keyProperty = valueListMetamodel.resolvePath(`/${valueList.valueListInfo.CollectionPath}/${valueList.keyPath}`)?.target;\n\n\tif (!isProperty(keyProperty)) {\n\t\t// something went wrong - the key property is not a property of the value list entity\n\t\treturn unresolvedResult([value]);\n\t}\n\n\tconst resolvedOperator = operator === FilterOperator.BT || operator === FilterOperator.NB ? FilterOperator.EQ : operator; // BT/NB: Use EQ for resolving the lower/upper bounds\n\tconst resolvedValues = await Promise.all(\n\t\tselectedValues.map(async (selectedValue) => resolveValueUsingValueList(valueList, keyProperty, resolvedOperator, selectedValue))\n\t);\n\n\treturn operator === FilterOperator.BT || operator === FilterOperator.NB\n\t\t? handleIntervals(operator, resolvedValues)\n\t\t: resolvedValues.flat();\n}\n\n/**\n * Returns the unresolved values in the format expected by the Easy Filter Bar.\n * @param values The values to be resolved.\n * @returns An array of unresolved values.\n */\nexport function unresolvedResult(values: TokenSelectedValuesDefinition[]): ValueHelpSelectedValuesDefinition[] {\n\treturn values.map(({ operator, selectedValues }) => ({\n\t\toperator,\n\t\tselectedValues: selectedValues.map((value) => ({ value, description: value }))\n\t})) as ValueHelpSelectedValuesDefinition[];\n}\n"],"mappings":"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","ignoreList":[]}
{"version":3,"names":["getKeyPropertyFilter","valueList","keyProperty","operator","valueToMatch","filterValue","annotations","Common","IsUpperCase","valueOf","toUpperCase","Filter","path","keyPath","value1","resolveValueUsingValueList","model","valueListInfo","$model","CollectionPath","$select","generateSelectParameter","$search","CommonUtils","normalizeSearchTerm","Date","toISOString","toString","keyPropertyFilter","valueHelpKeyQuery","valueHelpSearchQuery","Promise","allSettled","bindList","undefined","requestContexts","mapResult","mapValueListToCodeList","status","value","length","FilterOperator","EQ","selectedValues","map","description","ensureDescription","arguments","context","data","getObject","descriptionPath","_exports","filter","includes","join","handleIntervals","resolvedValues","resolvedLowerBound","resolvedUpperBound","result","lowerBound","lowerBoundText","upperBound","upperBoundText","push","resolveTokenValue","setContinueOnError","valueListMetamodel","convertTypes","getMetaModel","resolvePath","target","isProperty","unresolvedResult","resolvedOperator","BT","NB","all","selectedValue","flat","values","_ref"],"sourceRoot":".","sources":["EasyFilterDataFetcher.ts"],"sourcesContent":["import type { Property } from \"@sap-ux/vocabularies-types\";\nimport type {\n\tCodeListType,\n\tTokenSelectedValuesDefinition,\n\tValueHelpSelectedValuesDefinition\n} from \"sap/fe/controls/easyFilter/EasyFilterBarContainer\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport { convertTypes } from \"sap/fe/core/converters/MetaModelConverter\";\nimport { isProperty } from \"sap/fe/core/helpers/TypeGuards\";\nimport { type ValueListInfo } from \"sap/fe/macros/internal/valuehelp/ValueListHelper\";\nimport type Context from \"sap/ui/model/Context\";\nimport Filter from \"sap/ui/model/Filter\";\nimport FilterOperator from \"sap/ui/model/FilterOperator\";\nimport type { CodeListEntry } from \"ux/eng/fioriai/reuse/easyfilter/EasyFilter\";\n\ntype ScalarOperator = Exclude<FilterOperator, FilterOperator.BT | FilterOperator.NB>;\ntype ScalarValue = string | boolean | number | Date;\n\n/**\n * Generates a filter for the key property of a value list.\n * @param valueList The value list information.\n * @param keyProperty The key property of the value list.\n * @param operator The filter operator.\n * @param valueToMatch The value to match.\n * @returns A filter for the key property.\n */\nfunction getKeyPropertyFilter(\n\tvalueList: ValueListInfo,\n\tkeyProperty: Property,\n\toperator: ScalarOperator,\n\tvalueToMatch: ScalarValue\n): Filter {\n\tlet filterValue = valueToMatch;\n\n\t// If the key property is known to contain only uppercase values, convert the filter value to uppercase as well\n\tif (typeof filterValue === \"string\" && keyProperty.annotations.Common?.IsUpperCase?.valueOf() === true) {\n\t\tfilterValue = filterValue.toUpperCase();\n\t}\n\n\treturn new Filter({ path: valueList.keyPath, operator, value1: filterValue });\n}\n\n/**\n * Resolves a single scalar value using a value list.\n * @param valueList The value list information.\n * @param keyProperty The key property of the value list.\n * @param operator The filter operator.\n * @param valueToMatch The value to match.\n * @returns A promise that resolves to the selected values.\n */\nasync function resolveValueUsingValueList(\n\tvalueList: ValueListInfo,\n\tkeyProperty: Property,\n\toperator: ScalarOperator,\n\tvalueToMatch: ScalarValue\n): Promise<ValueHelpSelectedValuesDefinition> {\n\tconst model = valueList.valueListInfo.$model;\n\tconst path = `/${valueList.valueListInfo.CollectionPath}`;\n\tconst $select = generateSelectParameter(valueList);\n\tconst $search = CommonUtils.normalizeSearchTerm(valueToMatch instanceof Date ? valueToMatch.toISOString() : valueToMatch.toString());\n\tconst keyPropertyFilter = getKeyPropertyFilter(valueList, keyProperty, operator, valueToMatch);\n\n\tconst [valueHelpKeyQuery, valueHelpSearchQuery] = await Promise.allSettled([\n\t\tmodel.bindList(path, undefined, undefined, keyPropertyFilter, { $select }).requestContexts(0, 1), // $filter on the key property of the value list\n\t\tmodel.bindList(path, undefined, undefined, undefined, { $search, $select }).requestContexts() // $search on the value list\n\t]);\n\n\tconst mapResult = mapValueListToCodeList(valueList, true);\n\n\tif (valueHelpKeyQuery.status === \"fulfilled\" && valueHelpKeyQuery.value.length > 0) {\n\t\t// There is at least one match in the key column:\n\t\t// - If the operator is EQ: This indicates an exact key match, so the returned data will be used.\n\t\t// - For other operators: One or more keys match the value based on the operator, so the original condition is preserved.\n\t\treturn operator === FilterOperator.EQ\n\t\t\t? { operator, selectedValues: valueHelpKeyQuery.value.map(mapResult) }\n\t\t\t: { operator, selectedValues: [{ value: valueToMatch, description: valueToMatch }] };\n\t}\n\n\tif (valueHelpSearchQuery.status === \"fulfilled\" && valueHelpSearchQuery.value.length > 0) {\n\t\t// The key query did not return any matches, but the search query found results. Use the search results instead.\n\t\treturn {\n\t\t\toperator: FilterOperator.EQ,\n\t\t\tselectedValues: valueHelpSearchQuery.value.map(mapResult)\n\t\t};\n\t}\n\n\t// No matches were found in either query; the original value will be used as a fallback.\n\treturn { operator, selectedValues: [{ value: valueToMatch, description: valueToMatch }] };\n}\n\n/**\n * Create a mapping function for mapping a value list query result to a code list.\n * @param valueList The value list information used to identify the key and description properties.\n * @param ensureDescription Whether to ensure that the description is always returned.\n * @returns A function that maps a single value list query result to a code list entry.\n */\nexport function mapValueListToCodeList(valueList: ValueListInfo, ensureDescription: true): (context: Context) => CodeListType;\nexport function mapValueListToCodeList(valueList: ValueListInfo, ensureDescription?: false): (context: Context) => CodeListEntry;\nexport function mapValueListToCodeList(\n\tvalueList: ValueListInfo,\n\tensureDescription = false\n): (context: Context) => CodeListEntry | CodeListType {\n\treturn (context: Context): CodeListEntry => {\n\t\tconst data = context.getObject();\n\t\tconst value = data[valueList.keyPath];\n\t\tconst description = valueList.descriptionPath ? data[valueList.descriptionPath] : undefined;\n\t\treturn { value, description: ensureDescription ? description ?? value : description };\n\t};\n}\n\n/**\n * Generates the $select parameter for a value list query.\n * @param valueList The value list information.\n * @returns The $select parameter as a string.\n */\nexport function generateSelectParameter(valueList: ValueListInfo): string {\n\treturn [valueList.keyPath, valueList.descriptionPath].filter((path) => path && !path.includes(\"/\")).join(\",\");\n}\n\nfunction handleIntervals(\n\toperator: FilterOperator.BT | FilterOperator.NB,\n\tresolvedValues: ValueHelpSelectedValuesDefinition[]\n): ValueHelpSelectedValuesDefinition[] {\n\tconst [resolvedLowerBound, resolvedUpperBound] = resolvedValues;\n\n\tconst result: ValueHelpSelectedValuesDefinition[] = [];\n\tfor (const { value: lowerBound, description: lowerBoundText } of resolvedLowerBound.selectedValues) {\n\t\tfor (const { value: upperBound, description: upperBoundText } of resolvedUpperBound.selectedValues) {\n\t\t\tresult.push({\n\t\t\t\toperator,\n\t\t\t\tselectedValues: [\n\t\t\t\t\t{ value: lowerBound, description: lowerBoundText ?? lowerBound },\n\t\t\t\t\t{ value: upperBound, description: upperBoundText ?? upperBound }\n\t\t\t\t]\n\t\t\t});\n\t\t}\n\t}\n\treturn result;\n}\n\n/**\n * Resolves token-based filter values using a value list.\n * @param valueList The value list used for resolving values.\n * @param value The token-based filter values to resolve.\n * @returns A promise that resolves to an array of resolved filter values.\n */\nexport async function resolveTokenValue(\n\tvalueList: ValueListInfo,\n\tvalue: TokenSelectedValuesDefinition\n): Promise<ValueHelpSelectedValuesDefinition[]> {\n\tconst { operator, selectedValues } = value;\n\tconst model = valueList.valueListInfo.$model;\n\n\t// Make sure all values are resolved, even if some requests fail. It can happen that the backend cannot process the $filter queries we\n\t// run on the value list, but we still want to get the fallback $search results.\n\tmodel.setContinueOnError(\"$auto\");\n\n\tconst valueListMetamodel = convertTypes(model.getMetaModel());\n\tconst keyProperty = valueListMetamodel.resolvePath(`/${valueList.valueListInfo.CollectionPath}/${valueList.keyPath}`)?.target;\n\n\tif (!isProperty(keyProperty)) {\n\t\t// something went wrong - the key property is not a property of the value list entity\n\t\treturn unresolvedResult([value]);\n\t}\n\n\tconst resolvedOperator = operator === FilterOperator.BT || operator === FilterOperator.NB ? FilterOperator.EQ : operator; // BT/NB: Use EQ for resolving the lower/upper bounds\n\tconst resolvedValues = await Promise.all(\n\t\tselectedValues.map(async (selectedValue) => resolveValueUsingValueList(valueList, keyProperty, resolvedOperator, selectedValue))\n\t);\n\n\treturn operator === FilterOperator.BT || operator === FilterOperator.NB\n\t\t? handleIntervals(operator, resolvedValues)\n\t\t: resolvedValues.flat();\n}\n\n/**\n * Returns the unresolved values in the format expected by the Easy Filter Bar.\n * @param values The values to be resolved.\n * @returns An array of unresolved values.\n */\nexport function unresolvedResult(values: TokenSelectedValuesDefinition[]): ValueHelpSelectedValuesDefinition[] {\n\treturn values.map(({ operator, selectedValues }) => ({\n\t\toperator,\n\t\tselectedValues: selectedValues.map((value) => ({ value, description: value }))\n\t})) as ValueHelpSelectedValuesDefinition[];\n}\n"],"mappings":"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","ignoreList":[],"file":"EasyFilterDataFetcher-dbg.js"}
{"version":3,"file":"OperationParameterDialog.js","names":["ActionParameterDialog","action","parameters","parameterValues","entitySetName","messageHandler","this","isDialogOpen","buttonLock","actionParameterInfos","parameterModel","JSONModel","$displayMode","actionName","actionHelper","getActionName","metaModel","model","getMetaModel","resourceModel","view","getResourceModel","appComponent","parametersValuesPromise","Promise","resolve","reject","parametersValuesResolve","parametersValuesReject","_exports","_proto","prototype","getParameterEditMode","parameter","annotations","fieldControl","Common","FieldControl","immutable","Core","Immutable","valueOf","computed","Computed","constant","FieldEditMode","ReadOnly","ifElse","isReadOnlyExpression","isDisabledExpression","Disabled","Editable","createFormElement","async","actionMetaPath","isBound","getMetaPath","contexts","getPath","convertTypes","namespace","name","metaContext","createBindingContext","field","label","Label","getText","toString","streamParameter","isCollection","createMultiField","type","startsWith","getStreamProperty","createFileUploader","createField","_jsxs","_Fragment","children","_jsx","id","generate","text","parameterContext","display","FieldHelper","getAPDialogDisplayFormat","getObject","context","err","Log","warning","MultiValueField","placeholder","UI","Placeholder","items","path","delegate","editMode","width","multipleLines","MultiLineText","required","compileExpression","isActionParameterRequiredExpression","valueHelp","hasValueHelp","undefined","change","handleFieldChange","e","visible","not","equal","getExpressionFromAnnotation","Hidden","ariaLabelledBy","dependents","createParameterDialogValueHelp","MultiValueFieldItem","description","fileAcceptableMediaTypes","AcceptableMediaTypes","acceptedTypes","Array","from","map","join","handleTypeMissmatch","event","fileUploader","getSource","givenType","getParameter","getMimeType","showTypeMismatchDialog","fileMaximumSize","calculateMBfromByte","maxLength","handleFileSizeExceed","showFileSizeExceedDialog","getMaximumFileSize","toFixed","onUploadComplete","displayMessageForFailedUpload","FileUploader","buttonOnly","iconOnly","multiple","tooltip","icon","style","sendXHR","useMultipart","sameFilenameAllowed","uploadOnChange","mimeType","typeMissmatch","maximumFileSize","fileSizeExceed","httpRequestMethod","FileUploaderHttpRequestMethod","Put","uploadComplete","handleFileUploaderChange","Field","payload","retrieveTextFromValueList","value","AnnotationHelper","format","isMultiLineText","ValueHelp","propertyPath","getTargetNavigationPath","getInvolvedDataModelObjects","substring","lastIndexOf","qualifiers","valueHelpQualifier","validateInput","requiresValidation","typeahead","Popover","MTable","caseSensitive","useCaseSensitiveFilterRequests","entityContainer","Capabilities","FilterFunctions","useAsValueHelp","ValueListWithFixedValues","dialog","createFieldVHDialog","VHDialog","fieldPromise","parameterInfo","find","actionParameterInfo","validationPromise","removeMessagesForParameter","parametersValues","hasError","error","ActionRuntime","_addMessageForActionParameter","message","files","getBase64File","getMimeTypePath","getFileNamePath","ContentDisposition","Filename","MediaType","typeReference","properties","property","reader","FileReader","onload","result","split","readAsDataURL","item","messages","Messaging","getMessageModel","getData","controlId","relevantMessages","filter","msg","getControlIds","some","includes","removeMessages","getFormElements","formElements","getDialog","createDialog","dialogContents","dialogContentsWithParameters","actionParameters","slice","OperationParameterFacets","actionParameterGroups","forEach","facet","facetTitle","$Type","hasFieldGroupTarget","fieldGroup","Target","$target","groupedActionParameters","Data","group","push","Value","data","getGroupForm","all","bind","formData","parameterGroup","opFacets","dialogContent","Title","element","opFacet","registerActionParameterInfo","messageStrip","getCustomActionMessageStripText","endButton","Button","press","onCancel","Dialog","title","getTitleText","escapeHandler","draggable","resizable","afterClose","beforeOpen","afterOpen","initialFocus","beginButton","isCreateAction","getBeginButtonLabel","onApply","content","MessageStrip","showIcon","SimpleForm","columnsM","editable","labelSpanL","labelSpanM","binding","actionLabel","key","defaultKey","getOverriddenText","boundActionName","pop","suffixResourceKey","checkIfResourceKeyExists","getObjectBinding","getParameterContext","BusyLocker","lock","validateProperties","unlock","newValuesDictionary","Object","assign","values","getModel","getProperty","paramValue","Key","isNewValue","setProperty","UiModelConstants","DocumentModified","removeTransitionMessages","resetState","unlockDialog","updateDialogBindingContextForError","length","warningContext","infoContext","erroneousCtx","getMessages","getType","MessageType","Warning","Information","Error","contextToUse","setBindingContext","isLocked","FELibrary","Constants","CancelActionDialog","closeDialog","events","onParameterDialogClosed","close","openDialog","CommonUtils","setUserDefaults","setModels","addDependent","setOperationDefaultValues","open","setModel","bindElement","_event","waitForParametersValues","isOpen","getParameterDefaultValue","bindingParameter","operationBinding","parameterModelData","paramName","defaultValue","ParameterDefaultValue","isPathAnnotationExpression","pathForContext","replace","requestSingletonProperty","requestProperty","noPossibleValue","latePropertyError","getManifestFunctionValues","bindingContext","getBindingContext","defaultValuesExtensionFunction","FPMHelper","loadModuleAndCallMethod","getPreDefinedValues","boundFunctionName","DefaultValuesFunction","requestContextObject","functionParams","operations","callBoundFunction","requestObject","contextValues","promises","defaultValues","functionValues","manifestFunctionValues","firstVisibleParameter","getVisible","firstField","focusInfo","getFocusInfo","targetInfo","silent","focus","onParameterDialogOpened","isMultiValue","setParameter","i","parameterName","parameterProvidedValue","hasOwnProperty","setOfFunctionValues","Set","index","size","next","refresh","MessageBox","actions","Action","OK","emphasizedAction","onClose","extensionAPI","getController","getExtensionAPI","contentWidth","destroy"],"sources":["./OperationParameterDialog.tsx"],"sourcesContent":["import type { ComplexType, PathAnnotationExpression, PrimitiveType, Property, PropertyAnnotationValue } from \"@sap-ux/vocabularies-types\";\nimport { type Action, type ActionParameter } from \"@sap-ux/vocabularies-types\";\nimport { type PropertyAnnotations_Core } from \"@sap-ux/vocabularies-types/vocabularies/Core_Edm\";\nimport type { DataField, FieldGroupType, ReferenceFacet } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport type { PathInModelExpression } from \"sap/fe/base/BindingToolkit\";\nimport {\n\tcompileExpression,\n\tconstant,\n\tequal,\n\tgetExpressionFromAnnotation,\n\tifElse,\n\tnot,\n\ttype BindingToolkitExpression\n} from \"sap/fe/base/BindingToolkit\";\nimport type { ActionParameterInfo } from \"sap/fe/core/ActionRuntime\";\nimport ActionRuntime from \"sap/fe/core/ActionRuntime\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport type { FEView } from \"sap/fe/core/BaseController\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type ResourceModel from \"sap/fe/core/ResourceModel\";\nimport BusyLocker from \"sap/fe/core/controllerextensions/BusyLocker\";\nimport type MessageHandler from \"sap/fe/core/controllerextensions/MessageHandler\";\nimport UiModelConstants from \"sap/fe/core/controllerextensions/editFlow/editFlowConstants\";\nimport actionHelper from \"sap/fe/core/controllerextensions/editFlow/operations/actionHelper\";\nimport operations from \"sap/fe/core/controllerextensions/editFlow/operations/facade\";\nimport { convertTypes, getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport { hasFieldGroupTarget } from \"sap/fe/core/converters/annotations/DataField\";\nimport FPMHelper from \"sap/fe/core/helpers/FPMHelper\";\nimport { getResourceModel } from \"sap/fe/core/helpers/ResourceModelHelper\";\nimport { generate } from \"sap/fe/core/helpers/StableIdHelper\";\nimport { isPathAnnotationExpression } from \"sap/fe/core/helpers/TypeGuards\";\nimport FELibrary from \"sap/fe/core/library\";\nimport { getTargetNavigationPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { isActionParameterRequiredExpression, isDisabledExpression, isReadOnlyExpression } from \"sap/fe/core/templating/FieldControlHelper\";\nimport { hasValueHelp, isMultiLineText } from \"sap/fe/core/templating/PropertyHelper\";\nimport FieldHelper from \"sap/fe/macros/field/FieldHelper\";\nimport { requiresValidation, useCaseSensitiveFilterRequests } from \"sap/fe/macros/internal/valuehelp/ValueHelpTemplating\";\nimport type ListReportExtensionAPI from \"sap/fe/templates/ListReport/ExtensionAPI\";\nimport type ObjectPageExtensionAPI from \"sap/fe/templates/ObjectPage/ExtensionAPI\";\nimport Button from \"sap/m/Button\";\nimport type { Dialog$BeforeOpenEvent } from \"sap/m/Dialog\";\nimport Dialog from \"sap/m/Dialog\";\nimport Label from \"sap/m/Label\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport MessageStrip from \"sap/m/MessageStrip\";\nimport Messaging from \"sap/ui/core/Messaging\";\nimport Title from \"sap/ui/core/Title\";\nimport type Message from \"sap/ui/core/message/Message\";\nimport MessageType from \"sap/ui/core/message/MessageType\";\nimport SimpleForm from \"sap/ui/layout/form/SimpleForm\";\nimport type { Field$ChangeEvent } from \"sap/ui/mdc/Field\";\nimport Field from \"sap/ui/mdc/Field\";\nimport type { MultiValueField$ChangeEvent } from \"sap/ui/mdc/MultiValueField\";\nimport MultiValueField from \"sap/ui/mdc/MultiValueField\";\nimport ValueHelp from \"sap/ui/mdc/ValueHelp\";\nimport FieldEditMode from \"sap/ui/mdc/enums/FieldEditMode\";\nimport MultiValueFieldItem from \"sap/ui/mdc/field/MultiValueFieldItem\";\nimport VHDialog from \"sap/ui/mdc/valuehelp/Dialog\";\nimport Popover from \"sap/ui/mdc/valuehelp/Popover\";\nimport MTable from \"sap/ui/mdc/valuehelp/content/MTable\";\nimport type Context from \"sap/ui/model/Context\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport AnnotationHelper from \"sap/ui/model/odata/v4/AnnotationHelper\";\nimport type { default as ODataV4Context } from \"sap/ui/model/odata/v4/Context\";\nimport type ODataContextBinding from \"sap/ui/model/odata/v4/ODataContextBinding\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport type {\n\tFileUploader$ChangeEvent,\n\tFileUploader$FileSizeExceedEvent,\n\tFileUploader$TypeMissmatchEvent,\n\tFileUploader$UploadCompleteEvent\n} from \"sap/ui/unified/FileUploader\";\nimport FileUploader from \"sap/ui/unified/FileUploader\";\nimport FileUploaderHttpRequestMethod from \"sap/ui/unified/FileUploaderHttpRequestMethod\";\nimport { displayMessageForFailedUpload, showFileSizeExceedDialog, showTypeMismatchDialog } from \"../internal/helpers/Upload\";\n\ntype ParameterDefaultValue = { paramName: string; value: unknown; latePropertyError?: boolean; noPossibleValue?: boolean };\n\ntype ElementGroup = { facetTitle: PropertyAnnotationValue<string> | undefined; data: ActionParameter[] };\ntype ElementGroupConverted = { facetTitle: PropertyAnnotationValue<string> | undefined; data: DialogContentTypes[] };\n\ntype FormElementType = [Label, Field | MultiValueField];\n\ntype DialogContentTypes = {\n\tformElements: FormElementType;\n\tparameter: ActionParameter;\n};\nexport default class ActionParameterDialog {\n\tprivate parametersValuesPromise: Promise<Record<string, PrimitiveType>>;\n\n\tprivate parametersValuesResolve!: (resolveValue: Record<string, PrimitiveType>) => void;\n\n\tprivate parametersValuesReject!: (error: unknown) => void;\n\n\t// the dialog is considered as closed after the afterClose event has been triggered\n\t// this is asynchronous, so we need to keep track of the dialog state since the message handling is synchronous\n\t// and we need to know if the dialog is open or closed\n\tprivate isDialogOpen = false;\n\n\tprivate dialog: Dialog | undefined;\n\n\tprivate readonly actionName: string;\n\n\tprivate buttonLock = false;\n\n\tprivate readonly metaModel: ODataMetaModel;\n\n\tprivate readonly actionParameterInfos: (ActionParameterInfo & { parameter: ActionParameter })[] = [];\n\n\tprivate readonly parameterModel: JSONModel = new JSONModel({\n\t\t$displayMode: {}\n\t});\n\n\tprivate readonly resourceModel: ResourceModel;\n\n\tconstructor(\n\t\tprivate readonly action: Action,\n\t\tprivate readonly parameters: {\n\t\t\tappComponent: AppComponent;\n\t\t\tcontexts: ODataV4Context[];\n\t\t\tparametersValues: Record<string, PrimitiveType>;\n\t\t\tdefaultValuesExtensionFunction?: string;\n\t\t\tisCreateAction?: boolean;\n\t\t\tlabel?: string;\n\t\t\tmodel: ODataModel;\n\t\t\tview?: FEView;\n\t\t\tevents?: {\n\t\t\t\tonParameterDialogOpened?: () => void;\n\t\t\t\tonParameterDialogClosed?: () => void;\n\t\t\t};\n\t\t},\n\t\tprivate readonly parameterValues: Record<string, unknown>[] | undefined,\n\t\tprivate readonly entitySetName: string | undefined,\n\t\tprivate readonly messageHandler: MessageHandler\n\t) {\n\t\tthis.actionName = actionHelper.getActionName(this.action);\n\t\tthis.metaModel = this.parameters.model.getMetaModel();\n\t\tthis.resourceModel = this.parameters.view ? getResourceModel(this.parameters.view) : getResourceModel(this.parameters.appComponent);\n\t\tthis.parametersValuesPromise = new Promise((resolve, reject) => {\n\t\t\tthis.parametersValuesResolve = resolve;\n\t\t\tthis.parametersValuesReject = reject;\n\t\t});\n\t}\n\n\t/**\n\t * Gets binding expression of the edit mode property for a parameter.\n\t * @param parameter The parameter\n\t * @returns The binding expression.\n\t */\n\tprivate getParameterEditMode(parameter: ActionParameter): BindingToolkitExpression<FieldEditMode> {\n\t\tconst annotations = parameter.annotations,\n\t\t\tfieldControl = annotations.Common?.FieldControl,\n\t\t\timmutable = (annotations.Core as unknown as PropertyAnnotations_Core)?.Immutable?.valueOf(),\n\t\t\tcomputed = (annotations.Core as unknown as PropertyAnnotations_Core)?.Computed?.valueOf();\n\n\t\tif (immutable || computed) {\n\t\t\treturn constant(FieldEditMode.ReadOnly);\n\t\t} else if (fieldControl) {\n\t\t\treturn ifElse(\n\t\t\t\tisReadOnlyExpression(parameter),\n\t\t\t\tFieldEditMode.ReadOnly,\n\t\t\t\tifElse(isDisabledExpression(parameter), FieldEditMode.Disabled, FieldEditMode.Editable)\n\t\t\t);\n\t\t}\n\t\treturn constant(FieldEditMode.Editable);\n\t}\n\n\t/**\n\t * Creates the form element control for a parameter.\n\t * @param parameter The parameter\n\t * @returns The form element control.\n\t */\n\tprivate async createFormElement(parameter: ActionParameter): Promise<FormElementType> {\n\t\tconst actionMetaPath = this.action.isBound\n\t\t\t? `${this.metaModel.getMetaPath(this.parameters.contexts[0].getPath())}/${convertTypes(this.metaModel).namespace}.${\n\t\t\t\t\tthis.action.name\n\t\t\t  }`\n\t\t\t: `/${this.action.name}`;\n\t\tconst metaContext = this.metaModel.createBindingContext(`${actionMetaPath}/${parameter.name}`)!;\n\t\tlet field;\n\t\tlet label = parameter.annotations.Common?.Label\n\t\t\t? this.resourceModel.getText(parameter.annotations.Common.Label.toString())\n\t\t\t: parameter.name;\n\t\tlet streamParameter;\n\t\tif (parameter.isCollection) {\n\t\t\tfield = await this.createMultiField(parameter, metaContext);\n\t\t} else if (!parameter.type.startsWith(\"Edm.\") && this.getStreamProperty(parameter)) {\n\t\t\tstreamParameter = this.getStreamProperty(parameter);\n\t\t\t// calculate label from the stream property within the ComplexType\n\t\t\tlabel = streamParameter?.annotations.Common?.Label\n\t\t\t\t? this.resourceModel.getText(streamParameter.annotations.Common.Label.toString())\n\t\t\t\t: (streamParameter?.name as string);\n\t\t\tfield = this.createFileUploader(parameter);\n\t\t} else {\n\t\t\tfield = await this.createField(parameter, metaContext);\n\t\t}\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Label id={generate([\"APD_\", parameter.name, streamParameter?.name, \"Label\"])} text={label} />\n\t\t\t\t{field}\n\t\t\t</>\n\t\t);\n\t}\n\n\t/**\n\t * Creates the multi field control for a parameter.\n\t * @param parameter The parameter\n\t * @param parameterContext The parameter context\n\t * @returns The multi value field control.\n\t */\n\tprivate async createMultiField(parameter: ActionParameter, parameterContext: Context): Promise<MultiValueField> {\n\t\tlet display = \"Value\";\n\t\ttry {\n\t\t\tdisplay = await FieldHelper.getAPDialogDisplayFormat(parameterContext.getObject(), { context: parameterContext });\n\t\t} catch (err: unknown) {\n\t\t\tLog.warning(`Parameter dialog multifield: display format couldn't be calculated for parameter '${parameter.name}': ${err}`);\n\t\t}\n\t\treturn (\n\t\t\t<MultiValueField\n\t\t\t\tid={generate([\"APD_\", parameter.name])}\n\t\t\t\tplaceholder={parameter.annotations.UI?.Placeholder}\n\t\t\t\titems={{ path: `mvfview>/${parameter.name}` }}\n\t\t\t\tdelegate={{ name: \"sap/fe/core/controls/MultiValueParameterDelegate\" }}\n\t\t\t\tdisplay={display}\n\t\t\t\teditMode={this.getParameterEditMode(parameter)}\n\t\t\t\twidth=\"100%\"\n\t\t\t\tmultipleLines={parameter.annotations.UI?.MultiLineText?.valueOf() === true}\n\t\t\t\trequired={compileExpression(isActionParameterRequiredExpression(parameter, this.action, convertTypes(this.metaModel)))}\n\t\t\t\tvalueHelp={hasValueHelp(parameter) ? generate([this.actionName, parameter.name]) : undefined}\n\t\t\t\tchange={async (e): Promise<void> => this.handleFieldChange(e, parameter)}\n\t\t\t\tvisible={compileExpression(not(equal(getExpressionFromAnnotation(parameter.annotations?.UI?.Hidden), true)))}\n\t\t\t\tariaLabelledBy={[generate([\"APD_\", parameter.name, \"Label\"])]}\n\t\t\t\tdependents={this.createParameterDialogValueHelp(parameter, parameterContext)}\n\t\t\t>\n\t\t\t\t<MultiValueFieldItem key=\"{path: 'mvfview>Key', type:'sap.ui.model.type.String'}\" description=\"{mvfview>Desc}\" />\n\t\t\t</MultiValueField>\n\t\t);\n\t}\n\n\t/**\n\t * Creates the FileUploader control for a parameter.\n\t * @param parameter The parameter\n\t * @returns The FileUploader control.\n\t */\n\tprivate createFileUploader(parameter: ActionParameter): FileUploader {\n\t\tlet fileAcceptableMediaTypes;\n\t\tif (this.getStreamProperty(parameter)?.annotations.Core?.AcceptableMediaTypes) {\n\t\t\tconst acceptedTypes = Array.from(\n\t\t\t\tthis.getStreamProperty(parameter)?.annotations.Core?.AcceptableMediaTypes as unknown as string[]\n\t\t\t).map((type) => `'${type}'`);\n\t\t\tfileAcceptableMediaTypes = `{=odata.collection([${acceptedTypes.join(\",\")}])}`;\n\t\t}\n\t\tconst handleTypeMissmatch = function (event: FileUploader$TypeMissmatchEvent): void {\n\t\t\tconst fileUploader = event.getSource();\n\t\t\tconst givenType = event.getParameter(\"mimeType\");\n\t\t\tconst acceptedTypes = fileUploader.getMimeType();\n\t\t\tif (givenType) {\n\t\t\t\tshowTypeMismatchDialog(fileUploader, givenType, acceptedTypes);\n\t\t\t}\n\t\t};\n\t\t// verify check for stream\n\t\tconst fileMaximumSize = FieldHelper.calculateMBfromByte(this.getStreamProperty(parameter)?.maxLength);\n\t\tconst handleFileSizeExceed = function (event: FileUploader$FileSizeExceedEvent): void {\n\t\t\tconst fileUploader = event?.getSource();\n\t\t\tshowFileSizeExceedDialog(fileUploader, fileUploader.getMaximumFileSize().toFixed(3));\n\t\t};\n\t\tconst onUploadComplete = function (event: FileUploader$UploadCompleteEvent): void {\n\t\t\tif (event.getParameter(\"status\") === 0 || (event.getParameter(\"status\") as number) >= 400) {\n\t\t\t\tdisplayMessageForFailedUpload(\n\t\t\t\t\tevent.getSource(),\n\t\t\t\t\t(event.getParameter(\"responseRaw\") as string) || (event.getParameter(\"response\") as string)\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t\treturn (\n\t\t\t<FileUploader\n\t\t\t\tname=\"FEV4FileUpload\"\n\t\t\t\tbuttonOnly=\"false\"\n\t\t\t\ticonOnly=\"true\"\n\t\t\t\tmultiple=\"false\"\n\t\t\t\ttooltip=\"{sap.fe.i18n>M_FIELD_FILEUPLOADER_UPLOAD_BUTTON_TOOLTIP}\"\n\t\t\t\ticon=\"sap-icon://upload\"\n\t\t\t\tstyle=\"Transparent\"\n\t\t\t\tsendXHR=\"true\"\n\t\t\t\tuseMultipart=\"false\"\n\t\t\t\tsameFilenameAllowed=\"true\"\n\t\t\t\tuploadOnChange=\"false\"\n\t\t\t\tmimeType={fileAcceptableMediaTypes}\n\t\t\t\ttypeMissmatch={handleTypeMissmatch}\n\t\t\t\tmaximumFileSize={fileMaximumSize}\n\t\t\t\tfileSizeExceed={handleFileSizeExceed}\n\t\t\t\thttpRequestMethod={FileUploaderHttpRequestMethod.Put}\n\t\t\t\tuploadComplete={onUploadComplete}\n\t\t\t\tchange={async (e): Promise<void> => this.handleFileUploaderChange(e, parameter)}\n\t\t\t/>\n\t\t);\n\t}\n\n\t/**\n\t * Creates the field control for a parameter.\n\t * @param parameter The parameter\n\t * @param parameterContext The parameter context\n\t * @returns The field control.\n\t */\n\tprivate async createField(parameter: ActionParameter, parameterContext: Context): Promise<Field> {\n\t\tlet display = \"Value\";\n\t\ttry {\n\t\t\tdisplay = await FieldHelper.getAPDialogDisplayFormat(parameterContext.getObject(), { context: parameterContext });\n\t\t} catch (err: unknown) {\n\t\t\tLog.warning(`Parameter dialog field: display format couldn't be calculated for parameter '${parameter.name}': ${err}`);\n\t\t}\n\t\treturn (\n\t\t\t<Field\n\t\t\t\tdelegate={{ name: \"sap/fe/macros/field/FieldBaseDelegate\", payload: { retrieveTextFromValueList: true } }}\n\t\t\t\tid={generate([\"APD_\", parameter.name])}\n\t\t\t\tvalue={AnnotationHelper.format(parameterContext.getObject(), { context: parameterContext })}\n\t\t\t\tplaceholder={parameter.annotations.UI?.Placeholder}\n\t\t\t\tdisplay={display}\n\t\t\t\teditMode={this.getParameterEditMode(parameter)}\n\t\t\t\twidth=\"100%\"\n\t\t\t\tmultipleLines={isMultiLineText(parameter)}\n\t\t\t\trequired={compileExpression(isActionParameterRequiredExpression(parameter, this.action, convertTypes(this.metaModel)))}\n\t\t\t\tchange={async (e): Promise<void> => this.handleFieldChange(e, parameter)}\n\t\t\t\tvalueHelp={hasValueHelp(parameter) ? generate([this.actionName, parameter.name]) : undefined}\n\t\t\t\tdependents={this.createParameterDialogValueHelp(parameter, parameterContext)}\n\t\t\t\tvisible={compileExpression(\n\t\t\t\t\tifElse(\n\t\t\t\t\t\tparameter.name === \"ResultIsActiveEntity\",\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tnot(equal(getExpressionFromAnnotation(parameter.annotations?.UI?.Hidden), true))\n\t\t\t\t\t)\n\t\t\t\t)}\n\t\t\t\tariaLabelledBy={[generate([\"APD_\", parameter.name, \"Label\"])]}\n\t\t\t/>\n\t\t);\n\t}\n\n\t/**\n\t * Creates the valueHelp  for a parameter.\n\t * @param parameter The parameter\n\t * @param parameterContext The parameter context\n\t * @returns A valueHelp if the parameter has a VH, undefined otherwise\n\t */\n\tprivate createParameterDialogValueHelp(parameter: ActionParameter, parameterContext: Context): ValueHelp | undefined {\n\t\tif (!hasValueHelp(parameter)) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn (\n\t\t\t<ValueHelp\n\t\t\t\tid={generate([this.actionName, parameter.name])}\n\t\t\t\tdelegate={{\n\t\t\t\t\tname: \"sap/fe/macros/valuehelp/ValueHelpDelegate\",\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tpropertyPath: this.action.isBound\n\t\t\t\t\t\t\t? `${getTargetNavigationPath(getInvolvedDataModelObjects<ActionParameter>(parameterContext))}/${\n\t\t\t\t\t\t\t\t\tthis.actionName\n\t\t\t\t\t\t\t  }/${parameter.name}`\n\t\t\t\t\t\t\t: `/${this.action.name.substring(this.action.name.lastIndexOf(\".\") + 1)}/${parameter.name}`,\n\t\t\t\t\t\tqualifiers: {},\n\t\t\t\t\t\tvalueHelpQualifier: \"\"\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\tvalidateInput={requiresValidation(parameter)}\n\t\t\t\ttypeahead={\n\t\t\t\t\t<Popover>\n\t\t\t\t\t\t<MTable\n\t\t\t\t\t\t\tid={generate([this.actionName, parameter.name, \"Popover\", \"qualifier\"])}\n\t\t\t\t\t\t\tcaseSensitive={\n\t\t\t\t\t\t\t\tthis.action.isBound\n\t\t\t\t\t\t\t\t\t? useCaseSensitiveFilterRequests(\n\t\t\t\t\t\t\t\t\t\t\tgetInvolvedDataModelObjects<ActionParameter>(parameterContext),\n\t\t\t\t\t\t\t\t\t\t\t(convertTypes(this.metaModel).entityContainer.annotations.Capabilities\n\t\t\t\t\t\t\t\t\t\t\t\t?.FilterFunctions as unknown as string[]) ?? []\n\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t\t: false\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tuseAsValueHelp={!!parameter.annotations.Common?.ValueListWithFixedValues}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Popover>\n\t\t\t\t}\n\t\t\t\tdialog={this.createFieldVHDialog(parameter)}\n\t\t\t></ValueHelp>\n\t\t);\n\t}\n\n\t/**\n\t * Creates the ValueHelp dialog for a parameter.\n\t * @param parameter The parameter\n\t * @returns A dialog if the parameter has a VH, undefined otherwise\n\t */\n\tprivate createFieldVHDialog(parameter: ActionParameter): VHDialog | undefined {\n\t\tif (parameter.annotations.Common?.ValueListWithFixedValues?.valueOf() !== true) {\n\t\t\treturn <VHDialog />;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Handles the field change event for a parameter.\n\t * @param event The ui5 event\n\t * @param parameter The parameter\n\t * @returns Promise.\n\t */\n\tprivate async handleFieldChange(event: MultiValueField$ChangeEvent | Field$ChangeEvent, parameter: ActionParameter): Promise<void> {\n\t\tconst fieldPromise = (event as Field$ChangeEvent).getParameter(\"promise\");\n\t\tconst field = (event as Field$ChangeEvent).getSource() as Field | MultiValueField;\n\t\tconst parameterInfo = this.actionParameterInfos.find((actionParameterInfo) => actionParameterInfo.field === field);\n\t\tif (!parameterInfo) {\n\t\t\treturn;\n\t\t}\n\t\tparameterInfo.validationPromise = fieldPromise;\n\t\t// field value is being changed, thus existing messages related to that field are not valid anymore\n\t\tthis.removeMessagesForParameter(parameter);\n\t\ttry {\n\t\t\tparameterInfo.value = await fieldPromise;\n\t\t\tthis.parameters.parametersValues[parameterInfo.parameter.name] = parameterInfo.value;\n\t\t\tparameterInfo.hasError = false;\n\t\t} catch (error) {\n\t\t\tdelete parameterInfo.value;\n\t\t\tparameterInfo.hasError = true;\n\t\t\tActionRuntime._addMessageForActionParameter([\n\t\t\t\t{\n\t\t\t\t\tactionParameterInfo: parameterInfo,\n\t\t\t\t\tmessage: (error as { message: string }).message\n\t\t\t\t}\n\t\t\t]);\n\t\t}\n\t}\n\n\t/**\n\t * Handles the FileUploader change event for a parameter.\n\t * @param event The SAPUI5 event corresponding to the FileUploader change event.\n\t * @param parameter The action parameter.\n\t * @returns Promise.\n\t */\n\tprivate async handleFileUploaderChange(event: FileUploader$ChangeEvent, parameter: ActionParameter): Promise<void> {\n\t\tconst files = event.getParameter(\"files\");\n\t\tconst fileUploader = event.getSource();\n\t\t// correction needed for multiple file uploaders\n\t\tconst parameterInfo = this.actionParameterInfos.find((actionParameterInfo) => actionParameterInfo.field === fileUploader);\n\t\tif (!parameterInfo || !files) {\n\t\t\treturn;\n\t\t}\n\t\tthis.removeMessagesForParameter(parameter);\n\t\tparameterInfo.value = {};\n\t\tif (this.getStreamProperty(parameter)) {\n\t\t\tparameterInfo.value[this.getStreamProperty(parameter)?.name as keyof typeof parameterInfo.value] =\n\t\t\t\tawait this.getBase64File(files);\n\t\t\tparameterInfo.value[(this.getMimeTypePath(parameter) as PathInModelExpression<string>).path] =\n\t\t\t\t(files[0] as File).type || \"application/octet-stream\";\n\t\t\tparameterInfo.value[this.getFileNamePath(parameter) as string] = (files[0] as File).name;\n\t\t\tparameterInfo.hasError = false;\n\t\t\tthis.parameters.parametersValues[parameterInfo.parameter.name] = parameterInfo.value;\n\t\t}\n\t}\n\n\t/**\n\t * Provides the property name for the file name associated with the Stream property in the action parameter.\n\t * @param parameter The action parameter.\n\t * @returns Path as a string.\n\t */\n\tprivate getFileNamePath(parameter: ActionParameter): string | undefined {\n\t\treturn (this.getStreamProperty(parameter)?.annotations.Core?.ContentDisposition?.Filename as PathAnnotationExpression<string>).path;\n\t}\n\n\t/**\n\t * Provides the property name for the Mime type with the associated Stream property in the action parameter.\n\t * @param parameter The action parameter.\n\t * @returns The path expression.\n\t */\n\tprivate getMimeTypePath(parameter: ActionParameter): BindingToolkitExpression<string> | undefined {\n\t\treturn getExpressionFromAnnotation(this.getStreamProperty(parameter)?.annotations.Core?.MediaType);\n\t}\n\n\t/**\n\t * Provides the Stream property associated with the Complex type action parameter.\n\t * @param parameter The action parameter.\n\t * @returns The Edm.Stream property.\n\t */\n\tprivate getStreamProperty(parameter: ActionParameter): Property | undefined {\n\t\treturn (parameter.typeReference as ComplexType).properties?.find((property) => property.type === \"Edm.Stream\");\n\t}\n\n\t/**\n\t * Provides the content of the file.\n\t * @param files The file selected.\n\t * @returns The file content.\n\t */\n\tprivate async getBase64File(files: object[]): Promise<string> {\n\t\treturn new Promise((resolve) => {\n\t\t\tconst reader = new FileReader();\n\t\t\treader.onload = (): void => {\n\t\t\t\tif (!reader.result) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tresolve((reader.result as string).split(\",\")[1]);\n\t\t\t};\n\t\t\treader.readAsDataURL((files as unknown as FileList).item(0)!);\n\t\t});\n\t}\n\n\t/**\n\t * Removes the messages for a parameter.\n\t * @param parameter The parameter\n\t */\n\tprivate removeMessagesForParameter(parameter: ActionParameter): void {\n\t\tconst messages = Messaging.getMessageModel().getData();\n\t\tconst controlId = generate([\"APD_\", parameter.name]);\n\t\t// also remove messages assigned to inner controls, but avoid removing messages for different parameters (with name being substring of another parameter name)\n\t\tconst relevantMessages = messages.filter((msg: Message) =>\n\t\t\tmsg.getControlIds().some((id: string) => controlId.split(\"-\").includes(id))\n\t\t);\n\t\tMessaging.removeMessages(relevantMessages);\n\t}\n\n\t/**\n\t * Gets the FormElements along with the array of parameters.\n\t * @param parameter The parameter\n\t * @returns The parameter information along with the FormElements.\n\t */\n\tprivate async getFormElements(parameter: ActionParameter): Promise<DialogContentTypes> {\n\t\tconst formElements = await this.createFormElement(parameter);\n\t\treturn {\n\t\t\tformElements: formElements,\n\t\t\tparameter: parameter\n\t\t};\n\t}\n\n\t/**\n\t * Gets the action parameter dialog.\n\t * @returns The dialog or undefined.\n\t */\n\tgetDialog(): Dialog | undefined {\n\t\treturn this.dialog;\n\t}\n\n\t/**\n\t * Creates the action parameter dialog.\n\t * @returns The dialog.\n\t */\n\tasync createDialog(): Promise<Dialog> {\n\t\tlet dialogContents: FormElementType[] = [];\n\t\tlet dialogContentsWithParameters: DialogContentTypes[] = [];\n\t\tconst actionParameters = this.action.isBound ? this.action.parameters.slice(1) : this.action.parameters;\n\n\t\t// If OperationalParameterFacets have been defined for this action, they are used to group the action parameters\n\t\t// with titles\n\t\tif (this.action.annotations?.UI?.OperationParameterFacets) {\n\t\t\tconst actionParameterGroups: ElementGroup[] = [];\n\t\t\tthis.action.annotations.UI?.OperationParameterFacets?.forEach(function (facet: ReferenceFacet) {\n\t\t\t\tlet facetTitle;\n\t\t\t\tif (facet.$Type === UIAnnotationTypes.ReferenceFacet) {\n\t\t\t\t\tfacetTitle = facet.Label;\n\t\t\t\t}\n\t\t\t\tif (hasFieldGroupTarget(facet)) {\n\t\t\t\t\tconst fieldGroup = facet?.Target?.$target as FieldGroupType;\n\t\t\t\t\tconst groupedActionParameters: ActionParameter[] = [];\n\n\t\t\t\t\tfieldGroup.Data.forEach(function (group: unknown) {\n\t\t\t\t\t\tgroupedActionParameters.push((group as DataField).Value.$target as ActionParameter);\n\t\t\t\t\t});\n\t\t\t\t\tactionParameterGroups.push({\n\t\t\t\t\t\tfacetTitle: facetTitle as PropertyAnnotationValue<string> | undefined,\n\t\t\t\t\t\tdata: groupedActionParameters\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Get the fields for each parameter group\n\t\t\tconst getGroupForm = async (group: ElementGroup): Promise<ElementGroupConverted> => {\n\t\t\t\tconst formElements = await Promise.all(group.data.map(this.getFormElements.bind(this)));\n\t\t\t\treturn { facetTitle: group.facetTitle, data: formElements };\n\t\t\t};\n\n\t\t\tconst formData = actionParameterGroups.map(async (parameterGroup) => getGroupForm(parameterGroup));\n\t\t\tconst opFacets = await Promise.all(formData);\n\n\t\t\t// Add the title control to each parameter group\n\t\t\topFacets.forEach((dialogContent) => {\n\t\t\t\tdialogContents.push(<Title text={dialogContent.facetTitle} />);\n\t\t\t\treturn dialogContent.data.map((element) => dialogContents.push(element.formElements));\n\t\t\t});\n\n\t\t\topFacets.forEach(function (opFacet) {\n\t\t\t\topFacet.data.forEach(function (element) {\n\t\t\t\t\tdialogContentsWithParameters.push(element);\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\t// No OperationParameterFacets have been defined\n\t\t\tdialogContentsWithParameters = await Promise.all(actionParameters.map(this.getFormElements.bind(this)));\n\t\t\tdialogContents = dialogContentsWithParameters.map((dialogContent) => {\n\t\t\t\treturn dialogContent.formElements;\n\t\t\t});\n\t\t}\n\n\t\tthis.registerActionParameterInfo(dialogContentsWithParameters);\n\n\t\t// In case of deferred create we have no view, so we need to get the resource model from the app component\n\n\t\tconst messageStrip = this.getCustomActionMessageStripText();\n\n\t\tconst endButton = (\n\t\t\t<Button\n\t\t\t\tid={generate([\"fe\", \"APD_\", this.actionName, \"Action\", \"Cancel\"])}\n\t\t\t\ttext={this.resourceModel.getText(\"C_COMMON_ACTION_PARAMETER_DIALOG_CANCEL\")}\n\t\t\t\tpress={(): void => {\n\t\t\t\t\tthis.onCancel.bind(this)();\n\t\t\t\t}}\n\t\t\t/>\n\t\t);\n\t\tconst dialog = (\n\t\t\t<Dialog\n\t\t\t\ttitle={this.getTitleText(this.parameters.label)}\n\t\t\t\tid={generate([\"fe\", \"APD_\", this.actionName])}\n\t\t\t\tescapeHandler={this.onCancel.bind(this)}\n\t\t\t\tdraggable={true}\n\t\t\t\tresizable={true}\n\t\t\t\tafterClose={this.afterClose.bind(this)}\n\t\t\t\tbeforeOpen={this.beforeOpen.bind(this)}\n\t\t\t\tafterOpen={(): void => {\n\t\t\t\t\tthis.afterOpen();\n\t\t\t\t}}\n\t\t\t\tinitialFocus={endButton} // The initial focus is set programmatically in afterOpen, to avoid opening the VH dialog\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tbeginButton: (\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tid={generate([\"fe\", \"APD_\", this.actionName, \"Action\", \"Ok\"])}\n\t\t\t\t\t\t\ttext={\n\t\t\t\t\t\t\t\tthis.parameters.isCreateAction === true\n\t\t\t\t\t\t\t\t\t? this.resourceModel.getText(\"C_TRANSACTION_HELPER_SAPFE_ACTION_CREATE_BUTTON_CONTINUE\")\n\t\t\t\t\t\t\t\t\t: this.getBeginButtonLabel(this.parameters.label)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpress={(): void => {\n\t\t\t\t\t\t\t\tthis.onApply.bind(this)();\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\ttype=\"Emphasized\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t),\n\t\t\t\t\tendButton: endButton,\n\t\t\t\t\tcontent: (\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t// @ts-ignore (unknown property binding)\n\t\t\t\t\t\t// columnsM only takes effect if there are titles in the content.\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t{messageStrip && <MessageStrip showIcon=\"true\" text={messageStrip}></MessageStrip>}\n\t\t\t\t\t\t\t<SimpleForm columnsM={\"2\"} editable=\"true\" labelSpanL={\"12\"} labelSpanM={\"12\"} binding={\"$Parameter\"}>\n\t\t\t\t\t\t\t\t{{ content: dialogContents }}\n\t\t\t\t\t\t\t</SimpleForm>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)\n\t\t\t\t}}\n\t\t\t</Dialog>\n\t\t);\n\t\tthis.dialog = dialog;\n\t\treturn dialog;\n\t}\n\n\t/**\n\t * Gets the label for the begin button of the dialog.\n\t * @param actionLabel The label of the action\n\t * @returns The label.\n\t */\n\tprivate getBeginButtonLabel(actionLabel: string | undefined): string {\n\t\tconst key = \"ACTION_PARAMETER_DIALOG_ACTION_NAME\";\n\t\tconst defaultKey = \"C_COMMON_DIALOG_OK\";\n\t\treturn this.getOverriddenText(key, defaultKey, actionLabel);\n\t}\n\n\t/**\n\t * Gets the title of the dialog.\n\t * @param actionLabel The label of the action\n\t * @returns The title.\n\t */\n\tprivate getTitleText(actionLabel: string | undefined): string {\n\t\tconst key = \"ACTION_PARAMETER_DIALOG_ACTION_TITLE\";\n\t\tconst defaultKey = \"C_OPERATIONS_ACTION_PARAMETER_DIALOG_TITLE\";\n\t\treturn this.getOverriddenText(key, defaultKey, actionLabel);\n\t}\n\n\t/**\n\t * Gets an overridden text for message strip.\n\t * @returns The overridden text for message strip.\n\t */\n\tprivate getCustomActionMessageStripText(): string | undefined {\n\t\tconst key = \"ACTION_PARAMETER_DIALOG_MESSAGE_TEXT\";\n\t\tlet boundActionName = this.actionName;\n\t\tboundActionName = boundActionName.split(\".\").pop() ?? boundActionName;\n\t\tconst suffixResourceKey = boundActionName && this.entitySetName ? `${this.entitySetName}|${boundActionName}` : \"\";\n\t\tif (this.resourceModel.checkIfResourceKeyExists(`${key}|${suffixResourceKey}`)) {\n\t\t\treturn this.resourceModel.getText(key, undefined, suffixResourceKey);\n\t\t} else if (this.resourceModel.checkIfResourceKeyExists(`${key}|${this.entitySetName}`)) {\n\t\t\treturn this.resourceModel.getText(key, undefined, `${this.entitySetName}`);\n\t\t} else if (this.resourceModel.checkIfResourceKeyExists(`${key}`)) {\n\t\t\treturn this.resourceModel.getText(key);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Gets an overridden text.\n\t * @param key The key for an overridden text\n\t * @param defaultKey The default key for the text\n\t * @param actionLabel The label of the action\n\t * @returns The overridden text or label.\n\t */\n\tprivate getOverriddenText(key: string, defaultKey: string, actionLabel?: string): string {\n\t\tlet boundActionName = this.actionName;\n\t\tboundActionName = boundActionName.split(\".\").pop() ?? boundActionName;\n\t\tconst suffixResourceKey = boundActionName && this.entitySetName ? `${this.entitySetName}|${boundActionName}` : \"\";\n\t\tif (actionLabel) {\n\t\t\tif (this.resourceModel.checkIfResourceKeyExists(`${key}|${suffixResourceKey}`)) {\n\t\t\t\treturn this.resourceModel.getText(key, undefined, suffixResourceKey);\n\t\t\t} else if (this.resourceModel.checkIfResourceKeyExists(`${key}|${this.entitySetName}`)) {\n\t\t\t\treturn this.resourceModel.getText(key, undefined, `${this.entitySetName}`);\n\t\t\t} else if (this.resourceModel.checkIfResourceKeyExists(`${key}`)) {\n\t\t\t\treturn this.resourceModel.getText(key);\n\t\t\t} else {\n\t\t\t\treturn actionLabel;\n\t\t\t}\n\t\t} else {\n\t\t\treturn this.resourceModel.getText(defaultKey);\n\t\t}\n\t}\n\n\t/**\n\t * Manages the press event of the begin button of the dialog.\n\t * @returns The promise.\n\t */\n\tprivate async onApply(): Promise<void> {\n\t\t// prevent multiple press events. The BusyLocker is not fast enough. (BCP: 2370130210)\n\t\tif (this.buttonLock || !this.dialog) {\n\t\t\treturn;\n\t\t}\n\t\tconst dialog = this.dialog;\n\n\t\tconst parameterContext = (dialog.getObjectBinding() as ODataContextBinding | undefined)?.getParameterContext();\n\n\t\t// lock the button to prevent multiple press events\n\t\tthis.buttonLock = true;\n\t\tBusyLocker.lock(dialog);\n\n\t\t// validate the action parameters. It is important to do this as a first operation as there is a\n\t\t// wait done for the value changes to complete updating the model. Even in cases where validation is\n\t\t// not configured this promise needs to be resolved to read from the model to return user entered values.\n\t\tif (!(await ActionRuntime.validateProperties(this.actionParameterInfos, this.resourceModel))) {\n\t\t\tBusyLocker.unlock(dialog);\n\t\t\tthis.buttonLock = false;\n\t\t\treturn;\n\t\t}\n\n\t\tconst newValuesDictionary = Object.assign(\n\t\t\t{},\n\t\t\t...this.actionParameterInfos.map((actionParameterInfos) => {\n\t\t\t\tconst parameter = actionParameterInfos.parameter;\n\t\t\t\tlet value;\n\t\t\t\tif (parameter.isCollection) {\n\t\t\t\t\tvalue = Object.values((dialog.getModel(\"mvfview\") as JSONModel).getProperty(`/${parameter.name}`) ?? {}).map(\n\t\t\t\t\t\t(paramValue) => (paramValue as { Key?: PrimitiveType })?.Key\n\t\t\t\t\t);\n\t\t\t\t} else if (!parameter.type.startsWith(\"Edm.\") && this.getStreamProperty(parameter)) {\n\t\t\t\t\t// File Uploader\n\t\t\t\t\tvalue = actionParameterInfos.value;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = parameterContext?.getProperty(parameter.name);\n\t\t\t\t}\n\t\t\t\treturn { [parameter.name]: value };\n\t\t\t})\n\t\t) as Record<string, PrimitiveType>;\n\t\tconst isNewValue = Object.values(newValuesDictionary).some((value) => !!value);\n\n\t\tthis.parametersValuesResolve(newValuesDictionary);\n\n\t\tthis.parameters.appComponent.getModel(\"ui\").setProperty(UiModelConstants.DocumentModified, isNewValue);\n\t\t// Due to using the search and value helps on the action dialog transient messages could appear\n\t\t// we need an UX design for those to show them to the user - for now remove them before continuing\n\t\tthis.messageHandler.removeTransitionMessages();\n\t}\n\n\t/**\n\t * Reset the state of the dialog to start a new iteration.\n\t *\n\t */\n\tpublic resetState(): void {\n\t\tthis.unlockDialog();\n\t\tthis.buttonLock = false;\n\t\tthis.updateDialogBindingContextForError();\n\t\tthis.parametersValuesPromise = new Promise((resolve, reject) => {\n\t\t\tthis.parametersValuesResolve = resolve;\n\t\t\tthis.parametersValuesReject = reject;\n\t\t});\n\t}\n\n\t/**\n\t * Change the binding context of the dialog to one with priority message.\n\t *\n\t * On initial action execution, we might have bound messages with any selected contexts as target apart from the dialog's initial context.\n\t * We change the binding context of dialog for the parameter fields' to get the valid value state from the priority bound message.\n\t */\n\tupdateDialogBindingContextForError(): void {\n\t\tif (this.parameters.contexts.length < 2) {\n\t\t\t// We would need to switch the binding context of the dialog only when we have multiple contexts for executing the action.\n\t\t\treturn;\n\t\t}\n\n\t\tlet warningContext: ODataV4Context | undefined, infoContext: ODataV4Context | undefined;\n\t\tconst erroneousCtx = this.parameters.contexts.find((context) => {\n\t\t\tconst messages = context.getMessages();\n\t\t\treturn messages.some((msg) => {\n\t\t\t\t// We hold first context with warning or info messages.\n\t\t\t\twarningContext = !warningContext && msg.getType() === MessageType.Warning ? context : undefined;\n\t\t\t\tinfoContext = !infoContext && msg.getType() === MessageType.Information ? context : undefined;\n\t\t\t\t// Error is found!!! We shall exit.\n\t\t\t\treturn msg.getType() === MessageType.Error;\n\t\t\t});\n\t\t});\n\t\tconst contextToUse = erroneousCtx ?? warningContext ?? infoContext;\n\n\t\tif (contextToUse) {\n\t\t\tthis.dialog?.setBindingContext(contextToUse);\n\t\t}\n\t}\n\n\t/**\n\t * Removes the busy state of the dialog.\n\t */\n\tprivate unlockDialog(): void {\n\t\tif (this.dialog && BusyLocker.isLocked(this.dialog)) {\n\t\t\tBusyLocker.unlock(this.dialog);\n\t\t}\n\t}\n\n\t/**\n\t * Handler for the cancel action of the dialog.\n\t */\n\tprivate onCancel(): void {\n\t\tthis.parametersValuesReject(FELibrary.Constants.CancelActionDialog);\n\t\tthis.closeDialog();\n\t}\n\n\t/**\n\t * Closes the dialog.\n\t */\n\tpublic closeDialog(): void {\n\t\tif (this.dialog) {\n\t\t\tthis.parameters.events?.onParameterDialogClosed?.();\n\t\t\tthis.dialog.close();\n\t\t}\n\t\tthis.isDialogOpen = false;\n\t}\n\n\t/**\n\t * Opens the dialog.\n\t * @returns The promise of the action result.\n\t */\n\tasync openDialog(): Promise<void> {\n\t\tif (!this.dialog) {\n\t\t\tthrow new Error(\"Error on opening the dialog\");\n\t\t}\n\t\tawait CommonUtils.setUserDefaults(\n\t\t\tthis.parameters.appComponent,\n\t\t\tthis.actionParameterInfos.map((actionParameterInfo) => actionParameterInfo.parameter),\n\t\t\tthis.parameterModel,\n\t\t\ttrue\n\t\t);\n\t\tthis.setModels(this.dialog);\n\t\tthis.parameters.view?.addDependent(this.dialog);\n\t\tawait this.setOperationDefaultValues(this.dialog);\n\t\tthis.dialog.open();\n\t\tthis.isDialogOpen = true;\n\t}\n\n\t/**\n\t * Sets the model configuration for the dialog.\n\t * @param dialog The owner of the dialog\n\t */\n\tprivate setModels(dialog: Dialog): void {\n\t\tdialog.setModel(this.parameterModel, \"paramsModel\");\n\t\tdialog.bindElement({\n\t\t\tpath: \"/\",\n\t\t\tmodel: \"paramsModel\"\n\t\t});\n\t\tdialog.setModel(this.parameters.model);\n\t\tdialog.bindElement({\n\t\t\tpath: `${this.parameters.contexts.length ? \"\" : \"/\"}${this.actionName}(...)`\n\t\t});\n\n\t\tif (this.parameters.contexts.length) {\n\t\t\tdialog.setBindingContext(this.parameters.contexts[0]); // use context of first selected line item\n\t\t}\n\t\t// empty model to add elements dynamically depending on number of MVF fields defined on the dialog\n\t\tdialog.setModel(new JSONModel({}), \"mvfview\");\n\t}\n\n\t/**\n\t * Removes the messages before opening the dialog.\n\t * @param _event\n\t */\n\tprivate beforeOpen(_event: Dialog$BeforeOpenEvent): void {\n\t\tthis.messageHandler.removeTransitionMessages();\n\t}\n\n\t/**\n\t * Wait for the parameter values to be set.\n\t * @returns Promise containing the parameter values.\n\t */\n\tpublic async waitForParametersValues(): Promise<Record<string, PrimitiveType>> {\n\t\treturn this.parametersValuesPromise;\n\t}\n\n\t/**\n\t * Determines if the dialog is opened.\n\t * @returns True if the dialog is opened, false otherwise.\n\t */\n\tpublic isOpen(): boolean {\n\t\treturn this.isDialogOpen;\n\t}\n\n\t/**\n\t * Gets the default values for a parameter.\n\t * @param parameter The parameter\n\t * @param bindingParameter The binding parameter\n\t * @param dialog The dialog\n\t * @returns The promise of the default values.\n\t */\n\tprivate async getParameterDefaultValue(\n\t\tparameter: ActionParameter,\n\t\tbindingParameter: string,\n\t\tdialog: Dialog\n\t): Promise<ParameterDefaultValue> {\n\t\tconst operationBinding = dialog.getObjectBinding() as ODataContextBinding;\n\t\tconst parameterModelData = this.parameterModel.getData();\n\t\tconst paramName = parameter.name;\n\t\tconst defaultValue = parameter.annotations.UI?.ParameterDefaultValue;\n\t\t// Case 1: There is a ParameterDefaultValue annotation\n\t\tif (defaultValue) {\n\t\t\tif (this.parameters.contexts.length > 0 && isPathAnnotationExpression(defaultValue)) {\n\t\t\t\ttry {\n\t\t\t\t\tconst pathForContext: string =\n\t\t\t\t\t\tbindingParameter && defaultValue.path.startsWith(`${bindingParameter}/`)\n\t\t\t\t\t\t\t? defaultValue.path.replace(`${bindingParameter}/`, \"\")\n\t\t\t\t\t\t\t: defaultValue.path;\n\t\t\t\t\tlet paramValue = await CommonUtils.requestSingletonProperty(defaultValue.path, operationBinding.getModel());\n\t\t\t\t\tif (paramValue === null) {\n\t\t\t\t\t\tparamValue = await operationBinding.getParameterContext().requestProperty(defaultValue.path);\n\t\t\t\t\t}\n\t\t\t\t\tif (this.parameters.contexts.length > 1) {\n\t\t\t\t\t\t// For multi select, need to loop over contexts (as contexts cannot be retrieved via binding parameter of the operation binding)\n\n\t\t\t\t\t\tif (this.parameters.contexts.some((context) => context.getProperty(pathForContext) !== paramValue)) {\n\t\t\t\t\t\t\t// if the values from the contexts are not all the same, do not prefill\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tparamName,\n\t\t\t\t\t\t\t\tvalue: undefined,\n\t\t\t\t\t\t\t\tnoPossibleValue: true\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn { paramName, value: paramValue };\n\t\t\t\t} catch (error) {\n\t\t\t\t\tLog.error(\"Error while reading default action parameter\", paramName, this.action.name);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tparamName,\n\t\t\t\t\t\tvalue: undefined,\n\t\t\t\t\t\tlatePropertyError: true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Case 1.2: ParameterDefaultValue defines a fixed string value (i.e. vParamDefaultValue = 'someString')\n\t\t\t\treturn { paramName, value: defaultValue.valueOf() };\n\t\t\t}\n\t\t}\n\t\treturn { paramName, value: parameterModelData[paramName] };\n\t}\n\n\t/**\n\t * Gets the manifest values.\n\t * @returns The promise of the manifest values.\n\t */\n\tprivate async getManifestFunctionValues(): Promise<Record<string, unknown>> {\n\t\tconst bindingContext = this.dialog?.getBindingContext();\n\t\tif (!this.parameters.view || !this.parameters.defaultValuesExtensionFunction || !bindingContext) {\n\t\t\treturn {};\n\t\t}\n\n\t\treturn FPMHelper.loadModuleAndCallMethod(\n\t\t\tthis.parameters.defaultValuesExtensionFunction\n\t\t\t\t.substring(0, this.parameters.defaultValuesExtensionFunction.lastIndexOf(\".\") || -1)\n\t\t\t\t.replace(/\\./gi, \"/\"),\n\t\t\tthis.parameters.defaultValuesExtensionFunction.substring(\n\t\t\t\tthis.parameters.defaultValuesExtensionFunction.lastIndexOf(\".\") + 1,\n\t\t\t\tthis.parameters.defaultValuesExtensionFunction.length\n\t\t\t),\n\t\t\tthis.parameters.view,\n\t\t\tbindingContext,\n\t\t\tthis.parameters.contexts\n\t\t) as Promise<Record<string, unknown>>;\n\t}\n\n\t/**\n\t * Gets the predefined values for the parameters.\n\t * @param bindingParameter The binding parameter\n\t * @param dialog The dialog\n\t * @returns The promise containing all predefined values.\n\t */\n\tprivate async getPreDefinedValues(\n\t\tbindingParameter: string,\n\t\tdialog: Dialog\n\t): Promise<{\n\t\tcontextValues: Record<string, unknown>;\n\t\tdefaultValues: ParameterDefaultValue[];\n\t\tfunctionValues: ODataV4Context[];\n\t\tmanifestFunctionValues: Record<string, unknown>;\n\t}> {\n\t\tconst boundFunctionName = this.action.annotations.Common?.DefaultValuesFunction?.valueOf();\n\t\tlet requestContextObject: Promise<Record<string, unknown>> = Promise.resolve({});\n\t\tlet functionParams: Promise<ODataV4Context>[] = [];\n\t\tif (this.action.isBound) {\n\t\t\tif (typeof boundFunctionName === \"string\") {\n\t\t\t\tfunctionParams = this.parameters.contexts.map(async (context) =>\n\t\t\t\t\toperations.callBoundFunction(boundFunctionName, context, context.getModel())\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (this.parameters.contexts.length > 0) {\n\t\t\t\trequestContextObject = this.parameters.contexts[0].requestObject();\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tconst contextValues = await requestContextObject;\n\n\t\t\tconst promises = await Promise.all([\n\t\t\t\tPromise.all(\n\t\t\t\t\tthis.actionParameterInfos.map(async (actionParameterInfo) =>\n\t\t\t\t\t\tthis.getParameterDefaultValue(actionParameterInfo.parameter, bindingParameter, dialog)\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\tPromise.all(functionParams),\n\t\t\t\tthis.getManifestFunctionValues()\n\t\t\t]);\n\t\t\treturn {\n\t\t\t\tcontextValues,\n\t\t\t\tdefaultValues: promises[0],\n\t\t\t\tfunctionValues: promises[1],\n\t\t\t\tmanifestFunctionValues: promises[2]\n\t\t\t};\n\t\t} catch (error: unknown) {\n\t\t\tLog.error(\"Error while retrieving the parameter\", error as string);\n\t\t\t// Remove messages relating to the function for default values as they aren't helpful for a user\n\t\t\tthis.messageHandler.removeTransitionMessages();\n\t\t\treturn {\n\t\t\t\tcontextValues: {},\n\t\t\t\tdefaultValues: [],\n\t\t\t\tfunctionValues: [],\n\t\t\t\tmanifestFunctionValues: {}\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * Callback when the dialog is opened. Sets the focus on the first field without opening the VH dialog.\n\t */\n\tprivate afterOpen(): void {\n\t\tconst firstVisibleParameter = this.actionParameterInfos.find((parameterInfo) => parameterInfo.field.getVisible());\n\t\tif (firstVisibleParameter) {\n\t\t\tconst firstField = firstVisibleParameter?.field;\n\t\t\tconst focusInfo = firstField?.getFocusInfo() as { targetInfo: object };\n\t\t\tfocusInfo.targetInfo = { silent: true };\n\t\t\tfirstField?.focus(focusInfo);\n\t\t}\n\t\tthis.parameters.events?.onParameterDialogOpened?.();\n\t}\n\n\t/**\n\t * Registers the action parameter info.\n\t * @param dialogContents The dialog contents\n\t */\n\tprivate registerActionParameterInfo(dialogContents: DialogContentTypes[]): void {\n\t\t//Register the field\n\t\tdialogContents.forEach((dialogContent) => {\n\t\t\tconst parameter = dialogContent?.parameter;\n\t\t\tconst field = dialogContent?.formElements?.[1];\n\t\t\tthis.actionParameterInfos.push({\n\t\t\t\tparameter,\n\t\t\t\tfield,\n\t\t\t\tisMultiValue: parameter.isCollection,\n\t\t\t\thasError: false\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Sets the default values for the parameters.\n\t * @param dialog The dialog\n\t * @returns The promise.\n\t */\n\tprivate async setOperationDefaultValues(dialog: Dialog): Promise<void> {\n\t\tconst bindingParameter = this.action.isBound ? this.action.parameters[0].name : \"\";\n\t\tconst { contextValues, defaultValues, functionValues, manifestFunctionValues } = await this.getPreDefinedValues(\n\t\t\tbindingParameter,\n\t\t\tdialog\n\t\t);\n\t\tconst operationBinding = dialog.getObjectBinding() as ODataContextBinding;\n\n\t\tif (bindingParameter) {\n\t\t\toperationBinding.setParameter(bindingParameter, contextValues);\n\t\t}\n\n\t\tfor (const i in this.actionParameterInfos) {\n\t\t\tif (this.actionParameterInfos[i].parameter.name !== \"ResultIsActiveEntity\") {\n\t\t\t\tconst parameterName = this.actionParameterInfos[i].parameter.name;\n\t\t\t\t// Parameter values provided in the call of invokeAction overrule other sources\n\t\t\t\tconst parameterProvidedValue = this.parameterValues?.find((element) => element.name === parameterName)?.value;\n\t\t\t\tif (parameterProvidedValue) {\n\t\t\t\t\toperationBinding.setParameter(parameterName, parameterProvidedValue);\n\t\t\t\t} else if (manifestFunctionValues.hasOwnProperty(parameterName)) {\n\t\t\t\t\toperationBinding.setParameter(parameterName, manifestFunctionValues[parameterName]);\n\t\t\t\t} else if (defaultValues[i] && defaultValues[i].value !== undefined) {\n\t\t\t\t\toperationBinding.setParameter(parameterName, defaultValues[i].value);\n\t\t\t\t} else if (this.action.annotations.Common?.DefaultValuesFunction && !defaultValues[i].noPossibleValue) {\n\t\t\t\t\tconst setOfFunctionValues = new Set<string>(\n\t\t\t\t\t\tthis.parameters.contexts.map((context, index) => functionValues[index].getObject(parameterName))\n\t\t\t\t\t);\n\t\t\t\t\tif (setOfFunctionValues.size === 1 && setOfFunctionValues.values().next().value !== undefined) {\n\t\t\t\t\t\t//param values are all the same:\n\t\t\t\t\t\toperationBinding.setParameter(parameterName, Array.from(setOfFunctionValues)[0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If at least one Default Property is a Late Property and an eTag error was raised.\n\t\tif (defaultValues.some((value) => value.latePropertyError)) {\n\t\t\tconst refresh = this.resourceModel.getText(\"C_COMMON_SAPFE_REFRESH\");\n\t\t\tMessageBox.warning(getResourceModel(this.parameters.appComponent).getText(\"C_APP_COMPONENT_SAPFE_ETAG_LATE_PROPERTY\"), {\n\t\t\t\tactions: [refresh, MessageBox.Action.OK],\n\t\t\t\temphasizedAction: refresh,\n\t\t\t\tonClose: (action: string) => {\n\t\t\t\t\tif (action === refresh) {\n\t\t\t\t\t\tconst extensionAPI = this.parameters.view?.getController().getExtensionAPI();\n\t\t\t\t\t\t(extensionAPI as ListReportExtensionAPI | ObjectPageExtensionAPI).refresh();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcontentWidth: \"25em\"\n\t\t\t} as object);\n\t\t}\n\t}\n\n\t/**\n\t * Manages the close of the dialog.\n\t */\n\tprivate afterClose(): void {\n\t\t// when the dialog is cancelled, messages need to be removed in case the same action should be executed again\n\t\tfor (const i in this.actionParameterInfos) {\n\t\t\tthis.removeMessagesForParameter(this.actionParameterInfos[i].parameter);\n\t\t}\n\t\tthis.dialog?.destroy();\n\t\tthis.buttonLock = false; //needed here, not in the press events finally clause. In case the UI is sluggish, begin button could be pressed again.\n\t}\n}\n"],"mappings":"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","ignoreList":[]}
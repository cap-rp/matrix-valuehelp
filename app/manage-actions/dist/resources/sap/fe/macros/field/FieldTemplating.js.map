{"version":3,"file":"FieldTemplating.js","names":["addTextArrangementToBindingExpression","bindingExpressionToEnhance","fullContextPath","transformRecursively","expression","outExpression","modelName","undefined","oPropertyDataModelPath","enhanceDataModelPath","path","CommonFormatters","getBindingWithTextArrangement","_exports","formatValueRecursively","targetObject","formatWithTypeInformation","getTextBindingExpression","oPropertyDataModelObjectPath","fieldFormatOptions","getTextBinding","inputDataModelPath","asObject","arguments","length","customFormatter","isAnnotationOfType","fieldValue","getExpressionFromAnnotation","Value","compileExpression","isPathAnnotationExpression","$target","oPropertyBindingExpression","pathInModel","getContextRelativeTargetObjectPath","oTargetBinding","propertyDataModelObjectPath","oTargetProperty","annotations","UI","InputMask","type","formatOptions","mask","Mask","toString","placeholderSymbol","PlaceholderSymbol","maskRule","_getMaskingRules","Rules","Common","Masked","valueOf","editStyle","Measures","Unit","ISOCurrency","UIFormatters","getBindingWithUnitOrCurrency","showOnlyUnitDecimals","measureDisplayMode","isComplexTypeExpression","showMeasure","Timezone","getBindingWithTimezone","IsTimezone","getBindingForTimezone","DateTimeStyle","dateTimePattern","dateTimeStyle","getBindingForDateFormat","getValueBinding","ignoreUnit","ignoreFormatting","bindingParameters","targetTypeAny","keepUnit","decimalPadding","forDisplay","oNavPath","targetEntityType","resolvePath","target","visitedObjects","forEach","oNavObj","isNavigationProperty","navigationProperties","push","isProperty","oBindingExpression","isPathInModelExpression","Communication","IsEmailAddress","style","targetFormatOptions","String","isCurrencyOrUnitAligned","ExternalID","constraints","parameters","targetType","$Type","getAssociatedTextBinding","textPropertyPath","PropertyHelper","getAssociatedTextPropertyPath","oTextPropertyPath","allowPatch","valueListOutParameters","ValueList","Parameters","map","parameter","LocalDataProperty","fullyQualifiedName","includes","$$noPatch","isUsedInNavigationWithQuickViewFacets","oDataModelPath","oProperty","aNavigationProperties","aSemanticObjects","SemanticKey","bIsUsedInNavigationWithQuickViewFacets","oNavProp","referentialConstraint","oRefConstraint","sourceProperty","name","QuickViewFacets","contextLocation","targetEntitySet","aIsTargetSemanticKey","some","oSemantic","isKey","isRetrieveTextFromValueListEnabled","oPropertyPath","Text","hasValueHelp","textAlignMode","getTextAlignment","dataFieldModelPath","computedEditMode","considerTextAnnotation","typeForAlignment","Target","displayMode","textAnnotation","textArrangementAnnotation","TextArrangement","FieldHelper","getPropertyAlignment","getVisibleExpression","generateVisibleExpression","visibleExpressionsForConnectedFieldsFormElement","dataFieldForAnnotation","visibleExpression","dataFieldsBindingExpressions","connectedFields","Object","values","Data","filter","connectedField","hasOwnProperty","dataField","bindingExpressionObject","or","getQuickViewBinding","getQuickViewType","dataFieldDataModelObjectPath","Url","IsPhoneNumber","getSemanticObjects","aSemObjExprToResolve","sCustomDataKey","sCustomDataValue","aSemObjCustomData","item","key","value","oSemanticObjectsModel","JSONModel","$$valueAsPromise","createBindingContext","getMultipleLinesForDataField","oThis","isMultiLineText","wrap","_hasValueHelpToShow","oPropertyUnit","getAssociatedUnitProperty","oPropertyCurrency","getAssociatedCurrencyProperty","getMinMaxDateExpression","dateAnnotation","relativeLocation","fixedDate","Validation","$Date","dateProperty","formatResult","constant","valueFormatters","provideDateInstance","BindingToolkit","setEditStyleProperties","oProps","oDataField","onlyEditStyle","Maximum","Minimum","propertyBindingExpression","valueBindingExpression","getBindingForDatePicker","editStylePlaceholder","Placeholder","dataPointAnnotation","isDataFieldForAnnotation","Visualization","QuickInfo","ratingIndicatorTooltip","ratingIndicatorTargetValue","TargetValue","hasStaticPercentUnit","textBindingExpression","dataModelPathExternalID","isJSONModelUsedForValue","test","description","getRelativePaths","maxDateExpression","minDateExpression","showTimezone","MultiLineText","staticDescription","maskingRules","symbol","regex","maskingRule","MaskSymbol","RegExp","hasSemanticObjectInNavigationOrProperty","property","SemanticObjectHelper","hasSemanticObject","lastNavProp","find","contextNavProp","getDataModelObjectPathForValue","initialDataModelObjectPath","valuePath","isAnnotationOfTerm","indexOf","replace","hasPropertyInsertRestrictions","nonInsertableProperties","getContextPropertyRestriction","capabilities","InsertRestrictions","NonInsertableProperties","nonInsertableProperty","getDraftIndicatorVisibleBinding","draftIndicatorKey","getAvatarShape","IsImageURL","IsNaturalPerson","IsImage","entityAnnotationTarget","avatarShapeExpression","ifElse","AvatarShape","Circle","Square"],"sources":["./FieldTemplating.ts"],"sourcesContent":["import type {\n\tNavigationProperty,\n\tPathAnnotationExpression,\n\tProperty,\n\tPropertyAnnotationValue,\n\tServiceObjectAndAnnotation\n} from \"@sap-ux/vocabularies-types\";\nimport type { EntitySetAnnotations_Capabilities } from \"@sap-ux/vocabularies-types/vocabularies/Capabilities_Edm\";\nimport type {\n\tValueListParameterInOut,\n\tValueListParameterOutTypes,\n\tValueListParameterTypes\n} from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport type { PropertyAnnotations } from \"@sap-ux/vocabularies-types/vocabularies/Edm_Types\";\nimport type {\n\tDataField,\n\tDataFieldAbstractTypes,\n\tDataFieldTypes,\n\tDataFieldWithAction,\n\tDataFieldWithIntentBasedNavigation,\n\tDataFieldWithNavigationPath,\n\tDataFieldWithUrl,\n\tDataPointType,\n\tDataPointTypeTypes,\n\tInputMaskRuleTypeTypes\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTerms, UIAnnotationTypes, type DataFieldForAnnotation } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport type {\n\tBindingToolkitExpression,\n\tCompiledBindingToolkitExpression,\n\tExpressionOrPrimitive,\n\tFormatOptions,\n\tPathInModelExpression,\n\tPrimitiveType\n} from \"sap/fe/base/BindingToolkit\";\nimport * as BindingToolkit from \"sap/fe/base/BindingToolkit\";\nimport {\n\tcompileExpression,\n\tconstant,\n\tformatResult,\n\tformatWithTypeInformation,\n\tgetExpressionFromAnnotation,\n\tifElse,\n\tisComplexTypeExpression,\n\tisPathInModelExpression,\n\tor,\n\tpathInModel,\n\ttransformRecursively\n} from \"sap/fe/base/BindingToolkit\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport { isDataFieldForAnnotation } from \"sap/fe/core/converters/annotations/DataField\";\nimport valueFormatters from \"sap/fe/core/formatters/ValueFormatter\";\nimport {\n\tisAnnotationOfTerm,\n\tisAnnotationOfType,\n\tisNavigationProperty,\n\tisPathAnnotationExpression,\n\tisProperty\n} from \"sap/fe/core/helpers/TypeGuards\";\nimport * as CommonFormatters from \"sap/fe/core/templating/CommonFormatters\";\nimport { generateVisibleExpression } from \"sap/fe/core/templating/DataFieldFormatters\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport {\n\tenhanceDataModelPath,\n\tgetContextPropertyRestriction,\n\tgetContextRelativeTargetObjectPath,\n\tgetRelativePaths\n} from \"sap/fe/core/templating/DataModelPathHelper\";\nimport * as PropertyHelper from \"sap/fe/core/templating/PropertyHelper\";\nimport { hasStaticPercentUnit } from \"sap/fe/core/templating/PropertyHelper\";\nimport * as SemanticObjectHelper from \"sap/fe/core/templating/SemanticObjectHelper\";\nimport type { DisplayMode, PropertyOrPath } from \"sap/fe/core/templating/UIFormatters\";\nimport * as UIFormatters from \"sap/fe/core/templating/UIFormatters\";\nimport type { InputMaskRule } from \"sap/fe/core/type/InputMask\";\nimport type { FieldBlockProperties } from \"sap/fe/macros/internal/field/FieldStructureHelper\";\nimport AvatarShape from \"sap/m/AvatarShape\";\nimport type Context from \"sap/ui/model/Context\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type FieldFormatOptions from \"./FieldFormatOptions\";\nimport FieldHelper from \"./FieldHelper\";\n\n/**\n * Recursively add the text arrangement to a binding expression.\n * @param bindingExpressionToEnhance The binding expression to be enhanced\n * @param fullContextPath The current context path we're on (to properly resolve the text arrangement properties)\n * @returns An updated expression containing the text arrangement binding.\n */\nexport const addTextArrangementToBindingExpression = function (\n\tbindingExpressionToEnhance: BindingToolkitExpression<PrimitiveType>,\n\tfullContextPath: DataModelObjectPath<PageContextPathTarget>\n): BindingToolkitExpression<PrimitiveType> {\n\treturn transformRecursively(bindingExpressionToEnhance, \"PathInModel\", (expression: PathInModelExpression<PrimitiveType>) => {\n\t\tlet outExpression: BindingToolkitExpression<PrimitiveType> = expression;\n\t\tif (expression.modelName === undefined) {\n\t\t\t// In case of default model we then need to resolve the text arrangement property\n\t\t\tconst oPropertyDataModelPath = enhanceDataModelPath<Property>(fullContextPath, expression.path);\n\t\t\toutExpression = CommonFormatters.getBindingWithTextArrangement(oPropertyDataModelPath, expression);\n\t\t}\n\t\treturn outExpression;\n\t});\n};\n\nexport const formatValueRecursively = function (\n\tbindingExpressionToEnhance: BindingToolkitExpression<unknown>,\n\tfullContextPath: DataModelObjectPath<unknown>\n): BindingToolkitExpression<unknown> {\n\treturn transformRecursively(bindingExpressionToEnhance, \"PathInModel\", (expression: PathInModelExpression<unknown>) => {\n\t\tlet outExpression: BindingToolkitExpression<unknown> = expression;\n\t\tif (expression.modelName === undefined) {\n\t\t\t// In case of default model we then need to resolve the text arrangement property\n\t\t\tconst oPropertyDataModelPath = enhanceDataModelPath<Property>(fullContextPath, expression.path);\n\t\t\tif (oPropertyDataModelPath.targetObject) {\n\t\t\t\toutExpression = formatWithTypeInformation(oPropertyDataModelPath.targetObject, expression);\n\t\t\t}\n\t\t}\n\t\treturn outExpression;\n\t});\n};\n\nexport const getTextBindingExpression = function (\n\toPropertyDataModelObjectPath: DataModelObjectPath<Property>,\n\tfieldFormatOptions: Partial<FieldFormatOptions>\n): BindingToolkitExpression<string> {\n\treturn getTextBinding(oPropertyDataModelObjectPath, fieldFormatOptions, true) as BindingToolkitExpression<string>;\n};\n\nexport const getTextBinding = function (\n\tinputDataModelPath: DataModelObjectPath<DataFieldAbstractTypes | DataPointTypeTypes | Property>,\n\tfieldFormatOptions: Partial<FieldFormatOptions>,\n\tasObject = false,\n\tcustomFormatter?: string\n): BindingToolkitExpression<string> | CompiledBindingToolkitExpression {\n\tif (\n\t\tisAnnotationOfType<\n\t\t\t| DataField\n\t\t\t| DataPointType\n\t\t\t| DataFieldWithNavigationPath\n\t\t\t| DataFieldWithUrl\n\t\t\t| DataFieldWithIntentBasedNavigation\n\t\t\t| DataFieldWithAction\n\t\t>(inputDataModelPath.targetObject, [\n\t\t\tUIAnnotationTypes.DataField,\n\t\t\tUIAnnotationTypes.DataPointType,\n\t\t\tUIAnnotationTypes.DataFieldWithNavigationPath,\n\t\t\tUIAnnotationTypes.DataFieldWithUrl,\n\t\t\tUIAnnotationTypes.DataFieldWithIntentBasedNavigation,\n\t\t\tUIAnnotationTypes.DataFieldWithAction\n\t\t])\n\t) {\n\t\t// If there is no resolved property, the value is returned as a constant\n\t\tconst fieldValue = getExpressionFromAnnotation(inputDataModelPath.targetObject.Value) ?? \"\";\n\t\treturn compileExpression(fieldValue);\n\t}\n\tif (isPathAnnotationExpression(inputDataModelPath.targetObject) && inputDataModelPath.targetObject.$target) {\n\t\tinputDataModelPath = enhanceDataModelPath<Property>(inputDataModelPath, inputDataModelPath.targetObject.path);\n\t}\n\t// When targetObject is a constant value\n\tif (typeof inputDataModelPath.targetObject === \"string\") {\n\t\treturn inputDataModelPath.targetObject;\n\t}\n\tconst oPropertyBindingExpression = pathInModel(getContextRelativeTargetObjectPath(inputDataModelPath));\n\tlet oTargetBinding;\n\tconst propertyDataModelObjectPath = inputDataModelPath as DataModelObjectPath<Property>; // At this point we should only have a property\n\tconst oTargetProperty = propertyDataModelObjectPath.targetObject;\n\t// formatting\n\n\tif (oTargetProperty?.annotations?.UI?.InputMask) {\n\t\toTargetBinding = formatWithTypeInformation(oTargetProperty, oPropertyBindingExpression);\n\t\toTargetBinding.type = \"sap.fe.core.type.InputMask\";\n\t\toTargetBinding.formatOptions = {\n\t\t\tmask: oTargetProperty.annotations?.UI?.InputMask?.Mask.toString(),\n\t\t\tplaceholderSymbol: oTargetProperty.annotations?.UI?.InputMask?.PlaceholderSymbol.toString(),\n\t\t\tmaskRule: _getMaskingRules(oTargetProperty.annotations?.UI?.InputMask?.Rules)\n\t\t} as unknown as FormatOptions;\n\t} else if (oTargetProperty?.annotations?.Common?.Masked?.valueOf()) {\n\t\toTargetBinding = formatWithTypeInformation(oTargetProperty, oPropertyBindingExpression);\n\t\toTargetBinding.formatOptions = {\n\t\t\teditStyle: \"Masked\"\n\t\t} as unknown as FormatOptions;\n\t} else if (oTargetProperty?.annotations?.Measures?.Unit || oTargetProperty?.annotations?.Measures?.ISOCurrency) {\n\t\toTargetBinding = UIFormatters.getBindingWithUnitOrCurrency(\n\t\t\tpropertyDataModelObjectPath,\n\t\t\toPropertyBindingExpression,\n\t\t\tundefined,\n\t\t\t{},\n\t\t\ttrue,\n\t\t\tfieldFormatOptions.showOnlyUnitDecimals\n\t\t);\n\t\tif (fieldFormatOptions?.measureDisplayMode === \"Hidden\" && isComplexTypeExpression(oTargetBinding)) {\n\t\t\t// TODO: Refactor once types are less generic here\n\t\t\toTargetBinding.formatOptions = {\n\t\t\t\t...oTargetBinding.formatOptions,\n\t\t\t\tshowMeasure: false\n\t\t\t};\n\t\t}\n\t} else if (oTargetProperty?.annotations?.Common?.Timezone && oTargetProperty.type == \"Edm.DateTimeOffset\") {\n\t\toTargetBinding = UIFormatters.getBindingWithTimezone(\n\t\t\tpropertyDataModelObjectPath,\n\t\t\toPropertyBindingExpression,\n\t\t\tfalse,\n\t\t\ttrue,\n\t\t\tfieldFormatOptions as FieldFormatOptions\n\t\t);\n\t} else if (oTargetProperty?.annotations?.Common?.IsTimezone) {\n\t\toTargetBinding = UIFormatters.getBindingForTimezone(propertyDataModelObjectPath, oPropertyBindingExpression);\n\t} else if (\n\t\toTargetProperty?.annotations?.UI?.DateTimeStyle ||\n\t\tfieldFormatOptions?.dateTimePattern ||\n\t\tfieldFormatOptions?.dateTimeStyle\n\t) {\n\t\toTargetBinding = UIFormatters.getBindingForDateFormat(propertyDataModelObjectPath, oPropertyBindingExpression, fieldFormatOptions);\n\t} else {\n\t\toTargetBinding = CommonFormatters.getBindingWithTextArrangement(\n\t\t\tpropertyDataModelObjectPath,\n\t\t\toPropertyBindingExpression,\n\t\t\tfieldFormatOptions,\n\t\t\tcustomFormatter\n\t\t);\n\t}\n\n\tif (asObject) {\n\t\treturn oTargetBinding;\n\t}\n\t// We don't include $$nopatch and parseKeepEmptyString as they make no sense in the text binding case\n\treturn compileExpression(oTargetBinding);\n};\n\nexport const getValueBinding = function (\n\toPropertyDataModelObjectPath: DataModelObjectPath<Property | DataFieldTypes>,\n\tfieldFormatOptions: Partial<FieldFormatOptions>,\n\tignoreUnit = false,\n\tignoreFormatting = false,\n\tbindingParameters?: object,\n\ttargetTypeAny = false,\n\tkeepUnit = false,\n\tdecimalPadding?: number,\n\tforDisplay = false,\n\tasObject = false\n): CompiledBindingToolkitExpression {\n\tif (isPathAnnotationExpression(oPropertyDataModelObjectPath.targetObject) && oPropertyDataModelObjectPath.targetObject.$target) {\n\t\tconst oNavPath = oPropertyDataModelObjectPath.targetEntityType.resolvePath(oPropertyDataModelObjectPath.targetObject.path, true);\n\t\toPropertyDataModelObjectPath.targetObject = oNavPath.target;\n\t\toNavPath.visitedObjects.forEach((oNavObj: ServiceObjectAndAnnotation) => {\n\t\t\tif (isNavigationProperty(oNavObj)) {\n\t\t\t\toPropertyDataModelObjectPath.navigationProperties.push(oNavObj);\n\t\t\t}\n\t\t});\n\t}\n\n\tconst targetObject = oPropertyDataModelObjectPath.targetObject;\n\tif (isProperty(targetObject)) {\n\t\tlet oBindingExpression: BindingToolkitExpression<unknown> = pathInModel(\n\t\t\tgetContextRelativeTargetObjectPath(oPropertyDataModelObjectPath)\n\t\t);\n\t\tif (isPathInModelExpression(oBindingExpression)) {\n\t\t\tif (targetObject.annotations?.Communication?.IsEmailAddress) {\n\t\t\t\toBindingExpression = formatWithTypeInformation(targetObject, oBindingExpression);\n\t\t\t\toBindingExpression.type = \"sap.fe.core.type.Email\";\n\t\t\t} else if (targetObject.annotations?.UI?.InputMask) {\n\t\t\t\toBindingExpression = formatWithTypeInformation(targetObject, oBindingExpression);\n\t\t\t\toBindingExpression.type = \"sap.fe.core.type.InputMask\";\n\t\t\t\toBindingExpression.formatOptions = {\n\t\t\t\t\t...oBindingExpression.formatOptions,\n\t\t\t\t\tmask: targetObject.annotations.UI.InputMask.Mask,\n\t\t\t\t\tplaceholderSymbol: targetObject.annotations.UI.InputMask.PlaceholderSymbol,\n\t\t\t\t\tmaskRule: _getMaskingRules(targetObject.annotations.UI.InputMask.Rules)\n\t\t\t\t} as FormatOptions;\n\t\t\t} else if (targetObject.annotations?.Common?.Masked?.valueOf()) {\n\t\t\t\toBindingExpression = formatWithTypeInformation(targetObject, oBindingExpression);\n\t\t\t\toBindingExpression.formatOptions = {\n\t\t\t\t\t...oBindingExpression.formatOptions,\n\t\t\t\t\tstyle: \"password\"\n\t\t\t\t} as FormatOptions;\n\t\t\t} else if (!ignoreUnit && (targetObject.annotations?.Measures?.ISOCurrency || targetObject.annotations?.Measures?.Unit)) {\n\t\t\t\tconst targetFormatOptions: {\n\t\t\t\t\tshowMeasure?: boolean;\n\t\t\t\t\tdecimalPadding?: number;\n\t\t\t\t} = {};\n\t\t\t\tif (!keepUnit) {\n\t\t\t\t\ttargetFormatOptions[\"showMeasure\"] = false;\n\t\t\t\t}\n\t\t\t\tif (String(fieldFormatOptions.isCurrencyOrUnitAligned) === \"true\") {\n\t\t\t\t\ttargetFormatOptions[\"decimalPadding\"] = decimalPadding;\n\t\t\t\t}\n\t\t\t\toBindingExpression = UIFormatters.getBindingWithUnitOrCurrency(\n\t\t\t\t\toPropertyDataModelObjectPath as DataModelObjectPath<Property>,\n\t\t\t\t\toBindingExpression,\n\t\t\t\t\ttrue,\n\t\t\t\t\tkeepUnit ? undefined : targetFormatOptions,\n\t\t\t\t\tforDisplay,\n\t\t\t\t\tfieldFormatOptions.showOnlyUnitDecimals\n\t\t\t\t);\n\t\t\t} else if (targetObject?.annotations?.Common?.IsTimezone) {\n\t\t\t\toBindingExpression = UIFormatters.getBindingForTimezone(\n\t\t\t\t\toPropertyDataModelObjectPath as DataModelObjectPath<Property>,\n\t\t\t\t\toBindingExpression\n\t\t\t\t);\n\t\t\t} else if (\n\t\t\t\ttargetObject?.annotations?.UI?.DateTimeStyle ||\n\t\t\t\tfieldFormatOptions?.dateTimePattern ||\n\t\t\t\tfieldFormatOptions?.dateTimeStyle\n\t\t\t) {\n\t\t\t\toBindingExpression = UIFormatters.getBindingForDateFormat(\n\t\t\t\t\toPropertyDataModelObjectPath as DataModelObjectPath<Property>,\n\t\t\t\t\toBindingExpression,\n\t\t\t\t\tfieldFormatOptions\n\t\t\t\t);\n\t\t\t} else if (targetObject?.annotations?.Common?.Timezone && targetObject.type === \"Edm.DateTimeOffset\") {\n\t\t\t\toBindingExpression = UIFormatters.getBindingWithTimezone(\n\t\t\t\t\toPropertyDataModelObjectPath as DataModelObjectPath<Property>,\n\t\t\t\t\toBindingExpression,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\toBindingExpression = formatWithTypeInformation(targetObject, oBindingExpression);\n\t\t\t\tif (targetObject.annotations.Common?.ExternalID) {\n\t\t\t\t\t(oBindingExpression as { path: string }).path += \"@$ui5.fe.@Common/ExternalID\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isPathInModelExpression(oBindingExpression)) {\n\t\t\t\tif (ignoreFormatting) {\n\t\t\t\t\tdelete oBindingExpression.formatOptions;\n\t\t\t\t\tdelete oBindingExpression.constraints;\n\t\t\t\t\tdelete oBindingExpression.type;\n\t\t\t\t}\n\t\t\t\tif (bindingParameters) {\n\t\t\t\t\toBindingExpression.parameters = bindingParameters;\n\t\t\t\t}\n\t\t\t\tif (targetTypeAny) {\n\t\t\t\t\toBindingExpression.targetType = \"any\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (asObject) {\n\t\t\t\treturn oBindingExpression as unknown as CompiledBindingToolkitExpression;\n\t\t\t}\n\t\t\treturn compileExpression(oBindingExpression);\n\t\t} else {\n\t\t\t// if somehow we could not compile the binding -> return empty string\n\t\t\treturn \"\";\n\t\t}\n\t} else if (\n\t\ttargetObject?.$Type === UIAnnotationTypes.DataFieldWithUrl ||\n\t\ttargetObject?.$Type === UIAnnotationTypes.DataFieldWithNavigationPath\n\t) {\n\t\treturn compileExpression(getExpressionFromAnnotation((targetObject as DataFieldWithUrl).Value));\n\t} else {\n\t\treturn \"\";\n\t}\n};\n\nexport const getAssociatedTextBinding = function (\n\toPropertyDataModelObjectPath: DataModelObjectPath<Property>,\n\tfieldFormatOptions: Partial<FieldFormatOptions>\n): CompiledBindingToolkitExpression {\n\tconst textPropertyPath = PropertyHelper.getAssociatedTextPropertyPath(oPropertyDataModelObjectPath.targetObject);\n\tif (textPropertyPath) {\n\t\tconst oTextPropertyPath = enhanceDataModelPath<Property>(oPropertyDataModelObjectPath, textPropertyPath);\n\t\t//BCP 2380120806: getValueBinding needs to be able to set formatOptions.parseKeepsEmptyString.\n\t\t//Otherwise emptying an input field that has a text annotation to a not nullable string would result in\n\t\t//an error message. Therefore import param 'ignoreFormatting' is now set to false.\n\t\tlet allowPatch = false;\n\t\tconst valueListOutParameters: string[] =\n\t\t\toPropertyDataModelObjectPath.targetObject?.annotations?.Common?.ValueList?.Parameters.map(\n\t\t\t\t(parameter: ValueListParameterTypes) => {\n\t\t\t\t\tif (!parameter) {\n\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t}\n\t\t\t\t\treturn (\n\t\t\t\t\t\t(parameter as ValueListParameterInOut | ValueListParameterOutTypes)?.LocalDataProperty?.$target\n\t\t\t\t\t\t\t?.fullyQualifiedName ?? \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t) || [];\n\t\tif (\n\t\t\toTextPropertyPath?.targetObject?.fullyQualifiedName &&\n\t\t\tvalueListOutParameters.includes(oTextPropertyPath.targetObject.fullyQualifiedName)\n\t\t) {\n\t\t\tallowPatch = true;\n\t\t}\n\t\tconst bindingParameters = allowPatch ? undefined : { $$noPatch: true };\n\t\treturn getValueBinding(oTextPropertyPath, fieldFormatOptions, true, false, bindingParameters, false, false, undefined, true);\n\t}\n\treturn undefined;\n};\n\nexport const isUsedInNavigationWithQuickViewFacets = function (oDataModelPath: DataModelObjectPath<unknown>, oProperty: Property): boolean {\n\tconst aNavigationProperties = oDataModelPath?.targetEntityType?.navigationProperties || [];\n\tconst aSemanticObjects = oDataModelPath?.targetEntityType?.annotations?.Common?.SemanticKey || [];\n\tlet bIsUsedInNavigationWithQuickViewFacets = false;\n\taNavigationProperties.forEach((oNavProp: NavigationProperty) => {\n\t\tif (oNavProp.referentialConstraint && oNavProp.referentialConstraint.length) {\n\t\t\toNavProp.referentialConstraint.forEach((oRefConstraint) => {\n\t\t\t\tif (oRefConstraint?.sourceProperty === oProperty.name) {\n\t\t\t\t\tif (oNavProp?.targetType?.annotations?.UI?.QuickViewFacets) {\n\t\t\t\t\t\tbIsUsedInNavigationWithQuickViewFacets = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\tif (oDataModelPath.contextLocation?.targetEntitySet !== oDataModelPath.targetEntitySet) {\n\t\tconst aIsTargetSemanticKey = aSemanticObjects.some(function (oSemantic) {\n\t\t\treturn oSemantic?.$target?.name === oProperty.name;\n\t\t});\n\t\tif ((aIsTargetSemanticKey || oProperty.isKey) && oDataModelPath?.targetEntityType?.annotations?.UI?.QuickViewFacets) {\n\t\t\tbIsUsedInNavigationWithQuickViewFacets = true;\n\t\t}\n\t}\n\treturn bIsUsedInNavigationWithQuickViewFacets;\n};\n\nexport const isRetrieveTextFromValueListEnabled = function (\n\toPropertyPath: PropertyOrPath<Property>,\n\tfieldFormatOptions: { displayMode?: DisplayMode; textAlignMode?: string }\n): boolean {\n\tconst oProperty: Property = (isPathAnnotationExpression(oPropertyPath) && oPropertyPath.$target) || (oPropertyPath as Property);\n\tif (\n\t\t!oProperty.annotations?.Common?.Text &&\n\t\t!oProperty.annotations?.Measures &&\n\t\tPropertyHelper.hasValueHelp(oProperty) &&\n\t\tfieldFormatOptions.textAlignMode === \"Form\"\n\t) {\n\t\treturn true;\n\t}\n\treturn false;\n};\n\n/**\n * Calculates text alignment based on the dataModelObjectPath.\n * @param dataFieldModelPath The property's type\n * @param formatOptions The field format options\n * @param formatOptions.displayMode Display format\n * @param formatOptions.textAlignMode Text alignment of the field\n * @param computedEditMode The editMode used in this case\n * @param considerTextAnnotation Whether to consider the text annotation when computing the alignment\n * @returns The property alignment\n */\nexport const getTextAlignment = function (\n\tdataFieldModelPath: DataModelObjectPath<DataFieldAbstractTypes>,\n\tformatOptions: { displayMode?: string; textAlignMode?: string },\n\tcomputedEditMode: BindingToolkitExpression<string>,\n\tconsiderTextAnnotation = false\n): CompiledBindingToolkitExpression {\n\t// check for the target value type directly, or in case it is pointing to a DataPoint we look at the dataPoint's value\n\tlet typeForAlignment =\n\t\t(dataFieldModelPath.targetObject as DataFieldTypes)?.Value?.$target.type ||\n\t\t((dataFieldModelPath.targetObject as DataFieldForAnnotation)?.Target?.$target as DataPointType)?.Value.$target.type;\n\n\tif (\n\t\tPropertyHelper.isKey(\n\t\t\t(dataFieldModelPath.targetObject as DataFieldTypes)?.Value?.$target ||\n\t\t\t\t((dataFieldModelPath.targetObject as DataFieldForAnnotation)?.Target?.$target as DataPointType)?.Value?.$target\n\t\t)\n\t) {\n\t\treturn \"Begin\";\n\t}\n\tif (\n\t\tconsiderTextAnnotation &&\n\t\tformatOptions.displayMode &&\n\t\t[\"Description\", \"DescriptionValue\", \"ValueDescription\"].includes(formatOptions.displayMode)\n\t) {\n\t\tconst textAnnotation = (dataFieldModelPath.targetObject as DataFieldTypes)?.Value?.$target.annotations?.Common?.Text;\n\t\tconst textArrangementAnnotation = textAnnotation?.annotations?.UI?.TextArrangement.valueOf();\n\t\tif (textAnnotation && textArrangementAnnotation !== \"UI.TextArrangementType/TextSeparate\") {\n\t\t\ttypeForAlignment = textAnnotation.$target.type;\n\t\t}\n\t}\n\n\treturn FieldHelper.getPropertyAlignment(typeForAlignment, formatOptions, computedEditMode);\n};\n\n/**\n * Returns the binding expression to evaluate the visibility of a DataField or DataPoint annotation.\n *\n * SAP Fiori elements will evaluate either the UI.Hidden annotation defined on the annotation itself or on the target property.\n * @param dataFieldModelPath The metapath referring to the annotation we are evaluating.\n * @param [formatOptions] FormatOptions optional.\n * @param formatOptions.isAnalytics This flag is set when using an analytical table.\n * @returns An expression that you can bind to the UI.\n */\nexport const getVisibleExpression = function (\n\tdataFieldModelPath: DataModelObjectPath<DataFieldAbstractTypes | DataPointTypeTypes | Property>,\n\tformatOptions?: { isAnalytics?: boolean }\n): CompiledBindingToolkitExpression {\n\treturn compileExpression(generateVisibleExpression(dataFieldModelPath, formatOptions));\n};\n\n/**\n * Returns the Boolean or other expression for the visibility of a FormElement.\n * The FormElement is visible if at least one content is visible, otherwise invisible.\n * @param dataFieldModelPath The metapath referring to the annotation we are evaluating.\n * @returns A Boolean or other expression that can be bound to the UI.\n */\nexport const visibleExpressionsForConnectedFieldsFormElement = function (\n\tdataFieldModelPath: DataModelObjectPath<DataFieldAbstractTypes | DataPointTypeTypes | Property>\n): CompiledBindingToolkitExpression {\n\tconst dataFieldForAnnotation = dataFieldModelPath.targetObject as DataFieldAbstractTypes;\n\tconst visibleExpression = compileExpression(generateVisibleExpression(dataFieldModelPath));\n\n\tconst dataFieldsBindingExpressions: (boolean | BindingToolkitExpression<boolean>)[] = [];\n\tif (typeof visibleExpression === \"string\" && visibleExpression.includes(\"{=\")) {\n\t\treturn visibleExpression;\n\t}\n\tif (\n\t\tdataFieldForAnnotation.$Type === UIAnnotationTypes.DataFieldForAnnotation &&\n\t\tdataFieldForAnnotation.Target.$target?.$Type === UIAnnotationTypes.ConnectedFieldsType\n\t) {\n\t\tconst connectedFields = Object.values(dataFieldForAnnotation.Target.$target.Data).filter(\n\t\t\t(connectedField) => connectedField?.hasOwnProperty(\"Value\")\n\t\t) as DataFieldAbstractTypes[];\n\t\tconnectedFields.forEach((dataField) => {\n\t\t\tdataFieldModelPath.targetObject = dataField;\n\t\t\tconst bindingExpressionObject = generateVisibleExpression(dataFieldModelPath);\n\t\t\tif (bindingExpressionObject !== undefined) {\n\t\t\t\tdataFieldsBindingExpressions.push(bindingExpressionObject);\n\t\t\t}\n\t\t});\n\t\t/* Combine the expressions with or */\n\t\treturn dataFieldsBindingExpressions.length ? compileExpression(or(...dataFieldsBindingExpressions)) : visibleExpression;\n\t}\n\treturn visibleExpression;\n};\n\n/**\n * Returns the binding for a property in a QuickViewFacets.\n * @param propertyDataModelObjectPath The DataModelObjectPath of the property\n * @returns A string of the value, or a BindingExpression\n */\nexport const getQuickViewBinding = function (\n\tpropertyDataModelObjectPath: DataModelObjectPath<Property>\n): BindingToolkitExpression<string> | CompiledBindingToolkitExpression | string {\n\tif (!propertyDataModelObjectPath.targetObject) {\n\t\treturn \"\";\n\t}\n\tif (typeof propertyDataModelObjectPath.targetObject === \"string\") {\n\t\treturn propertyDataModelObjectPath.targetObject;\n\t}\n\n\treturn getTextBinding(propertyDataModelObjectPath, {} as FieldFormatOptions);\n};\n\n/**\n * Return the type of the QuickViewGroupElement.\n * @param dataFieldDataModelObjectPath The DataModelObjectPath of the DataField\n * @returns The type of the QuickViewGroupElement\n */\nexport const getQuickViewType = function (dataFieldDataModelObjectPath: DataModelObjectPath<DataFieldTypes | Property>): string {\n\tconst targetObject = dataFieldDataModelObjectPath.targetObject;\n\tif (isAnnotationOfType<DataFieldWithUrl>(targetObject, UIAnnotationTypes.DataFieldWithUrl) && targetObject?.Url) {\n\t\treturn \"link\";\n\t}\n\tif (\n\t\t(!isProperty(targetObject) && targetObject?.Value.$target?.annotations?.Communication?.IsEmailAddress) ||\n\t\t(isProperty(targetObject) && targetObject?.annotations?.Communication?.IsEmailAddress)\n\t) {\n\t\treturn \"email\";\n\t}\n\tif (\n\t\t(!isProperty(targetObject) && targetObject?.Value.$target?.annotations?.Communication?.IsPhoneNumber) ||\n\t\t(isProperty(targetObject) && targetObject?.annotations?.Communication?.IsPhoneNumber)\n\t) {\n\t\treturn \"phone\";\n\t}\n\treturn \"text\";\n};\n\nexport type SemanticObjectCustomData = {\n\tkey: string;\n\tvalue: string;\n};\n\nexport const getSemanticObjects = function (\n\taSemObjExprToResolve: { key: string; value: PropertyAnnotationValue<PrimitiveType> }[]\n): Context {\n\tif (aSemObjExprToResolve.length > 0) {\n\t\tlet sCustomDataKey = \"\";\n\t\tlet sCustomDataValue: CompiledBindingToolkitExpression = \"\";\n\t\tconst aSemObjCustomData: { key: string; value: CompiledBindingToolkitExpression }[] = [];\n\t\tfor (const item of aSemObjExprToResolve) {\n\t\t\tsCustomDataKey = item.key;\n\t\t\tsCustomDataValue = compileExpression(getExpressionFromAnnotation(item.value));\n\t\t\taSemObjCustomData.push({\n\t\t\t\tkey: sCustomDataKey,\n\t\t\t\tvalue: sCustomDataValue\n\t\t\t});\n\t\t}\n\t\tconst oSemanticObjectsModel = new JSONModel(aSemObjCustomData);\n\t\t(oSemanticObjectsModel as { $$valueAsPromise?: boolean }).$$valueAsPromise = true;\n\t\treturn oSemanticObjectsModel.createBindingContext(\"/\");\n\t} else {\n\t\treturn new JSONModel([]).createBindingContext(\"/\");\n\t}\n};\n\n/**\n * Method to get MultipleLines for a DataField.\n * @param {any} oThis The current object\n * @param {boolean} isMultiLineText The property isMultiLineText\n * @returns {CompiledBindingToolkitExpression<string>} The binding expression to determine if a data field should be a MultiLineText or not\n * @public\n */\n\nexport const getMultipleLinesForDataField = function (oThis: Partial<{ wrap?: boolean }>, isMultiLineText: boolean): boolean {\n\tif (oThis.wrap === false) {\n\t\treturn false;\n\t}\n\treturn isMultiLineText;\n};\n\nconst _hasValueHelpToShow = function (oProperty: Property, measureDisplayMode: string | undefined): boolean | undefined {\n\t// we show a value help if teh property has one or if its visible unit has one\n\tconst oPropertyUnit = PropertyHelper.getAssociatedUnitProperty(oProperty);\n\tconst oPropertyCurrency = PropertyHelper.getAssociatedCurrencyProperty(oProperty);\n\treturn (\n\t\t(PropertyHelper.hasValueHelp(oProperty) && oProperty.type !== \"Edm.Boolean\") ||\n\t\t(measureDisplayMode !== \"Hidden\" &&\n\t\t\t((oPropertyUnit && PropertyHelper.hasValueHelp(oPropertyUnit)) ||\n\t\t\t\t(oPropertyCurrency && PropertyHelper.hasValueHelp(oPropertyCurrency))))\n\t);\n};\n\n/**\n * Sets the minimum and maximum date for the date field.\n * @param dateAnnotation Property Annotations for the date field.\n * @param type Either 'Maximum' or 'Minimum'.\n * @param relativeLocation\n * @returns Mininum or Maximum date expression.\n */\nexport const getMinMaxDateExpression = function (\n\tdateAnnotation: PropertyAnnotations | undefined,\n\ttype: \"Maximum\" | \"Minimum\",\n\trelativeLocation: string[]\n): BindingToolkitExpression<unknown> | undefined {\n\tconst fixedDate = dateAnnotation?.Validation?.[type]?.$Date;\n\tconst dateProperty = dateAnnotation?.Validation?.[type];\n\tif (fixedDate) {\n\t\treturn formatResult([constant(fixedDate)], valueFormatters.provideDateInstance);\n\t} else if (dateProperty) {\n\t\treturn BindingToolkit.getExpressionFromAnnotation(dateAnnotation?.Validation?.[type], relativeLocation);\n\t}\n\treturn undefined;\n};\n\n/**\n * Sets Edit Style properties for Field in case of Macro Field and MassEditDialog fields.\n * @param oProps Field Properties for the Macro Field.\n * @param oDataField DataField Object.\n * @param oDataModelPath DataModel Object Path to the property.\n * @param onlyEditStyle To add only editStyle.\n */\nexport const setEditStyleProperties = function (\n\toProps: FieldBlockProperties,\n\toDataField: DataFieldAbstractTypes | DataPointTypeTypes,\n\toDataModelPath: DataModelObjectPath<Property | DataFieldTypes>,\n\tonlyEditStyle?: boolean\n): void {\n\tconst oProperty = oDataModelPath.targetObject;\n\tif (\n\t\t!isProperty(oProperty) ||\n\t\t[\n\t\t\tUIAnnotationTypes.DataFieldForAction,\n\t\t\tUIAnnotationTypes.DataFieldWithNavigationPath,\n\t\t\tUIAnnotationTypes.DataFieldForActionGroup,\n\t\t\tUIAnnotationTypes.DataFieldForIntentBasedNavigation\n\t\t].includes(oDataField.$Type)\n\t) {\n\t\toProps.editStyle = null;\n\t\treturn;\n\t}\n\tif (!onlyEditStyle) {\n\t\tif (oProperty?.annotations?.Validation?.Maximum?.$Date || oProperty?.annotations?.Validation?.Minimum?.$Date) {\n\t\t\tconst propertyBindingExpression = pathInModel(getContextRelativeTargetObjectPath(oDataModelPath));\n\t\t\toProps.valueBindingExpression = UIFormatters.getBindingForDatePicker(\n\t\t\t\toDataModelPath,\n\t\t\t\tpropertyBindingExpression\n\t\t\t) as CompiledBindingToolkitExpression;\n\t\t} else {\n\t\t\toProps.valueBindingExpression = oProps.value ? oProps.value : getValueBinding(oDataModelPath, oProps.formatOptions);\n\t\t}\n\n\t\tconst editStylePlaceholder =\n\t\t\t(oDataField as unknown as Property).annotations?.UI?.Placeholder ||\n\t\t\t(oDataField as DataField)?.Value?.$target?.annotations?.UI?.Placeholder;\n\n\t\tif (editStylePlaceholder) {\n\t\t\toProps.editStylePlaceholder = compileExpression(getExpressionFromAnnotation(editStylePlaceholder));\n\t\t}\n\t}\n\n\t// Setup RatingIndicator\n\tconst dataPointAnnotation = (isDataFieldForAnnotation(oDataField) ? oDataField.Target?.$target : oDataField) as DataPointType;\n\tif (dataPointAnnotation?.Visualization === \"UI.VisualizationType/Rating\") {\n\t\toProps.editStyle = \"RatingIndicator\";\n\n\t\tif (dataPointAnnotation.annotations?.Common?.QuickInfo) {\n\t\t\toProps.ratingIndicatorTooltip = compileExpression(\n\t\t\t\tgetExpressionFromAnnotation(dataPointAnnotation.annotations?.Common?.QuickInfo)\n\t\t\t);\n\t\t}\n\n\t\toProps.ratingIndicatorTargetValue = compileExpression(getExpressionFromAnnotation(dataPointAnnotation.TargetValue));\n\t\treturn;\n\t}\n\n\tif (\n\t\t_hasValueHelpToShow(oProperty, oProps.formatOptions?.measureDisplayMode) ||\n\t\t(oProps.formatOptions?.measureDisplayMode !== \"Hidden\" &&\n\t\t\t(oProperty.annotations?.Measures?.ISOCurrency || (oProperty.annotations?.Measures?.Unit && !hasStaticPercentUnit(oProperty))))\n\t) {\n\t\tif (!onlyEditStyle) {\n\t\t\t/* The textBindingExpression is used for mdcField-attribute 'additionalValue' and means the description of the value */\n\t\t\tconst textBindingExpression = oProperty.annotations?.Common?.ExternalID\n\t\t\t\t? getAssociatedTextBinding(oProps.dataModelPathExternalID as DataModelObjectPath<Property>, oProps.formatOptions)\n\t\t\t\t: getAssociatedTextBinding(oDataModelPath as DataModelObjectPath<Property>, oProps.formatOptions);\n\n\t\t\tconst isJSONModelUsedForValue = !!oProps.value && /{\\w+>.+}/.test(oProps.value);\n\n\t\t\tif (isJSONModelUsedForValue) {\n\t\t\t\tif (oProps.description) {\n\t\t\t\t\toProps.textBindingExpression = oProps.description;\n\t\t\t\t} else {\n\t\t\t\t\toProps.textBindingExpression = undefined;\n\t\t\t\t\toProps.formatOptions.displayMode = \"Value\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toProps.textBindingExpression = textBindingExpression;\n\t\t\t}\n\n\t\t\tif (oProps.formatOptions?.measureDisplayMode !== \"Hidden\") {\n\t\t\t\t// for the MDC Field we need to keep the unit inside the valueBindingExpression\n\t\t\t\toProps.valueBindingExpression = oProps.value\n\t\t\t\t\t? oProps.value\n\t\t\t\t\t: getValueBinding(oDataModelPath, oProps.formatOptions, false, false, undefined, false, true);\n\t\t\t}\n\t\t}\n\t\toProps.editStyle = \"InputWithValueHelp\";\n\t\treturn;\n\t}\n\n\tswitch (oProperty.type) {\n\t\tcase \"Edm.Date\":\n\t\t\toProps.editStyle = \"DatePicker\";\n\t\t\tconst relativeLocation = getRelativePaths(oDataModelPath);\n\t\t\tif (oProperty?.annotations?.Validation?.Maximum) {\n\t\t\t\toProps.maxDateExpression = getMinMaxDateExpression(oProperty?.annotations, \"Maximum\", relativeLocation);\n\t\t\t}\n\t\t\tif (oProperty?.annotations?.Validation?.Minimum) {\n\t\t\t\toProps.minDateExpression = getMinMaxDateExpression(oProperty?.annotations, \"Minimum\", relativeLocation);\n\t\t\t}\n\t\t\treturn;\n\t\tcase \"Edm.Time\":\n\t\tcase \"Edm.TimeOfDay\":\n\t\t\toProps.editStyle = \"TimePicker\";\n\t\t\treturn;\n\t\tcase \"Edm.DateTime\":\n\t\tcase \"Edm.DateTimeOffset\":\n\t\t\toProps.editStyle = \"DateTimePicker\";\n\t\t\t// No timezone defined. Also for compatibility reasons.\n\t\t\tif (!oProperty.annotations?.Common?.Timezone) {\n\t\t\t\toProps.showTimezone = undefined;\n\t\t\t} else {\n\t\t\t\toProps.showTimezone = true;\n\t\t\t}\n\t\t\treturn;\n\t\tcase \"Edm.Boolean\":\n\t\t\toProps.editStyle = \"CheckBox\";\n\t\t\treturn;\n\t\tcase \"Edm.Stream\":\n\t\t\toProps.editStyle = \"File\";\n\t\t\treturn;\n\t\tcase \"Edm.String\":\n\t\t\tif (oProperty.annotations?.UI?.MultiLineText?.valueOf()) {\n\t\t\t\toProps.editStyle = \"TextArea\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (oProperty.annotations?.UI?.InputMask?.valueOf()) {\n\t\t\t\toProps.editStyle = \"InputMask\";\n\t\t\t\toProps.mask = {\n\t\t\t\t\tmask: oProperty.annotations?.UI?.InputMask?.Mask.toString(),\n\t\t\t\t\tplaceholderSymbol: oProperty.annotations?.UI?.InputMask?.PlaceholderSymbol.toString(),\n\t\t\t\t\tmaskRule: _getMaskingRules(oProperty.annotations?.UI?.InputMask?.Rules)\n\t\t\t\t};\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (oProperty.annotations?.Common?.Masked?.valueOf()) {\n\t\t\t\toProps.editStyle = \"Masked\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (hasStaticPercentUnit(oProperty)) {\n\t\t\t\toProps.staticDescription = \"%\";\n\t\t\t}\n\t\t\toProps.editStyle = \"Input\";\n\t}\n\n\toProps.editStyle = \"Input\";\n};\n\nconst _getMaskingRules = (maskingRules: InputMaskRuleTypeTypes[] | undefined): InputMaskRule[] => {\n\tif (!maskingRules || maskingRules.length === 0) {\n\t\treturn [{ symbol: \"*\", regex: \"[a-zA-Z0-9]\" }];\n\t}\n\n\treturn maskingRules.map((maskingRule) => ({\n\t\tsymbol: maskingRule.MaskSymbol.toString(),\n\t\tregex: maskingRule.RegExp.toString()\n\t}));\n};\n\nexport const hasSemanticObjectInNavigationOrProperty = (propertyDataModelObjectPath: DataModelObjectPath<Property>): boolean => {\n\tconst property = propertyDataModelObjectPath.targetObject as Property;\n\tif (SemanticObjectHelper.hasSemanticObject(property)) {\n\t\treturn true;\n\t}\n\tconst lastNavProp = propertyDataModelObjectPath?.navigationProperties?.length\n\t\t? propertyDataModelObjectPath?.navigationProperties[propertyDataModelObjectPath?.navigationProperties?.length - 1]\n\t\t: null;\n\tif (\n\t\t!lastNavProp ||\n\t\tpropertyDataModelObjectPath.contextLocation?.navigationProperties?.find(\n\t\t\t(contextNavProp) => contextNavProp.name === lastNavProp.name\n\t\t)\n\t) {\n\t\treturn false;\n\t}\n\treturn SemanticObjectHelper.hasSemanticObject(lastNavProp);\n};\n\n/**\n * Get the dataModelObjectPath with the value property as targetObject if it exists\n * for a dataModelObjectPath targeting a DataField or a DataPoint annotation.\n * @param initialDataModelObjectPath\n * @returns The dataModelObjectPath targetiing the value property or undefined\n */\nexport const getDataModelObjectPathForValue = (\n\tinitialDataModelObjectPath: DataModelObjectPath<DataFieldAbstractTypes | DataPointTypeTypes>\n): DataModelObjectPath<Property> | undefined => {\n\tif (!initialDataModelObjectPath.targetObject) {\n\t\treturn undefined;\n\t}\n\tlet valuePath = \"\";\n\t// data point annotations need not have $Type defined, so add it if missing\n\tif (isAnnotationOfTerm(initialDataModelObjectPath, UIAnnotationTerms.DataPoint)) {\n\t\tinitialDataModelObjectPath.targetObject.$Type = initialDataModelObjectPath.targetObject.$Type || UIAnnotationTypes.DataPointType;\n\t}\n\tswitch (initialDataModelObjectPath.targetObject.$Type) {\n\t\tcase UIAnnotationTypes.DataField:\n\t\tcase UIAnnotationTypes.DataPointType:\n\t\tcase UIAnnotationTypes.DataFieldWithNavigationPath:\n\t\tcase UIAnnotationTypes.DataFieldWithUrl:\n\t\tcase UIAnnotationTypes.DataFieldWithIntentBasedNavigation:\n\t\tcase UIAnnotationTypes.DataFieldWithAction:\n\t\t\tif (typeof initialDataModelObjectPath.targetObject.Value === \"object\") {\n\t\t\t\tvaluePath = initialDataModelObjectPath.targetObject.Value.path;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.DataFieldForAnnotation:\n\t\t\tif (initialDataModelObjectPath.targetObject.Target.$target) {\n\t\t\t\tif (\n\t\t\t\t\tisAnnotationOfType<DataField | DataPointType>(initialDataModelObjectPath.targetObject.Target.$target, [\n\t\t\t\t\t\tUIAnnotationTypes.DataPointType,\n\t\t\t\t\t\tUIAnnotationTypes.DataField\n\t\t\t\t\t])\n\t\t\t\t) {\n\t\t\t\t\tif (initialDataModelObjectPath.targetObject.Target.value.indexOf(\"/\") > 0) {\n\t\t\t\t\t\tvaluePath = initialDataModelObjectPath.targetObject.Target.value.replace(\n\t\t\t\t\t\t\t/\\/@.*/,\n\t\t\t\t\t\t\t`/${initialDataModelObjectPath.targetObject.Target.$target.Value?.path}`\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvaluePath = initialDataModelObjectPath.targetObject.Target.$target.Value?.path;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvaluePath = (initialDataModelObjectPath.targetObject.Target as unknown as PathAnnotationExpression<unknown>)?.path;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.DataFieldForAction:\n\t\tcase UIAnnotationTypes.DataFieldForIntentBasedNavigation:\n\t\tcase UIAnnotationTypes.DataFieldForActionGroup:\n\t\tcase UIAnnotationTypes.DataFieldWithActionGroup:\n\t\t\tbreak;\n\t}\n\n\tif (valuePath && valuePath.length > 0) {\n\t\treturn enhanceDataModelPath(initialDataModelObjectPath, valuePath);\n\t} else {\n\t\treturn undefined;\n\t}\n};\n\n/**\n * Check if the considered property is a non-insertable property\n * A first check is done on the last navigation from the contextLocation:\n * - If the annotation 'nonInsertableProperty' is found and the property is listed, then the property is non-insertable,\n * - Else the same check is done on the target entity.\n * @param propertyDataModelObjectPath\n * @returns True if the property is not insertable\n */\nexport const hasPropertyInsertRestrictions = (propertyDataModelObjectPath: DataModelObjectPath<Property>): boolean => {\n\tconst nonInsertableProperties = getContextPropertyRestriction(propertyDataModelObjectPath, (capabilities) => {\n\t\treturn (capabilities as EntitySetAnnotations_Capabilities | undefined)?.InsertRestrictions?.NonInsertableProperties;\n\t});\n\n\treturn nonInsertableProperties.some((nonInsertableProperty) => {\n\t\treturn nonInsertableProperty?.$target?.fullyQualifiedName === propertyDataModelObjectPath.targetObject?.fullyQualifiedName;\n\t});\n};\n\n/**\n * Get the binding for the draft indicator visibility.\n * @param draftIndicatorKey\n * @returns  The visibility binding expression.\n */\nexport const getDraftIndicatorVisibleBinding = (draftIndicatorKey: string | undefined): string | undefined => {\n\treturn draftIndicatorKey\n\t\t? compileExpression(\n\t\t\t\tformatResult(\n\t\t\t\t\t[\n\t\t\t\t\t\tconstant(draftIndicatorKey),\n\t\t\t\t\t\tpathInModel(\"semanticKeyHasDraftIndicator\", \"internal\"),\n\t\t\t\t\t\tpathInModel(\"HasDraftEntity\"),\n\t\t\t\t\t\tpathInModel(\"IsActiveEntity\"),\n\t\t\t\t\t\tpathInModel(\"hideDraftInfo\", \"pageInternal\")\n\t\t\t\t\t],\n\t\t\t\t\t\"sap.fe.macros.field.FieldRuntime.isDraftIndicatorVisible\"\n\t\t\t\t)\n\t\t  )\n\t\t: \"false\";\n};\n/**\n * Returns the DisplayShape for the Avatar depending on the annotation IsNaturalPerson.\n *\n * If the entity type is annotated with \"IsNaturalPerson\", then all Streams and ImageURls\n * in this entity are considered to be person therefore have shape circle by default.\n *\n * If a property within such an entity is annotated with UI.IsImage or UI.IsImageURL, both\n * of these annotations can be annotated with Common.IsNaturalPerson.\n *\n * The annotation at the property level overrides the annotation at the entity type.\n * @param dataModelPath\n * @param property\n * @returns The shape of the Avatar as string or as an expression\n */\n\nexport const getAvatarShape = (dataFieldModelPath: DataModelObjectPath<Property>): CompiledBindingToolkitExpression => {\n\tconst targetObject =\n\t\tdataFieldModelPath.targetObject?.annotations?.UI?.IsImageURL?.annotations?.Common?.IsNaturalPerson ||\n\t\tdataFieldModelPath.targetObject?.annotations?.UI?.IsImage?.annotations?.Common?.IsNaturalPerson;\n\tconst entityAnnotationTarget = dataFieldModelPath.targetEntityType.annotations?.Common?.IsNaturalPerson;\n\tlet avatarShapeExpression: ExpressionOrPrimitive<boolean>;\n\n\tif (targetObject) {\n\t\tavatarShapeExpression = getExpressionFromAnnotation(targetObject);\n\t} else if (entityAnnotationTarget) {\n\t\tavatarShapeExpression = getExpressionFromAnnotation(entityAnnotationTarget);\n\t} else avatarShapeExpression = false;\n\n\treturn compileExpression(ifElse(avatarShapeExpression, AvatarShape.Circle, AvatarShape.Square));\n};\n"],"mappings":"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","ignoreList":[]}
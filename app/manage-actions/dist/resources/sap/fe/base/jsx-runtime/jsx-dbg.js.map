{"version":3,"names":["renderNextAsXML","renderNextUsingRenderManager","xmlNamespaceMap","jsx","ControlType","mSettings","key","jsxControl","jsxContext","undefined","jsxRenderManager","jsxXml","renderUsingRenderManager","renderManager","control","renderMethod","returnValue","defineXMLNamespaceMap","namespaceMap","renderAsXML","getContext","withContext","context","functionToExecute","callBackReturn"],"sourceRoot":".","sources":["jsx.ts"],"sourcesContent":["import jsxControl from \"sap/fe/base/jsx-runtime/jsx-control\";\nimport jsxRenderManager from \"sap/fe/base/jsx-runtime/jsx-renderManager\";\nimport jsxXml from \"sap/fe/base/jsx-runtime/jsx-xml\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport type Control from \"sap/ui/core/Control\";\nimport type Element from \"sap/ui/core/Element\";\nimport type RenderManager from \"sap/ui/core/RenderManager\";\n\nimport type View from \"sap/ui/core/mvc/View\";\n\ntype ControlPropertyNames<T> = {\n\t[K in keyof T]: T[K] extends string | boolean | Function | number | undefined | string[] ? never : K;\n}[keyof T];\nexport type ControlProperties<T> = Partial<Record<ControlPropertyNames<T>, Element>> & {\n\t[k: string]: Element;\n};\nexport type NonControlProperties<T> = Partial<Omit<T, ControlPropertyNames<T>>>;\nexport type CommandProperties = `cmd:${string}|${string}`;\n\nlet renderNextAsXML = false;\nlet renderNextUsingRenderManager: RenderManager | undefined;\nlet xmlNamespaceMap: Record<string, string> = {};\nconst jsx = function <T>(\n\tControlType: typeof Control,\n\tmSettings: NonControlProperties<T> & { key: string; children?: Element | ControlProperties<T> },\n\tkey: string\n): string | Control | Control[] | undefined {\n\tif (!renderNextAsXML && !renderNextUsingRenderManager) {\n\t\treturn jsxControl(ControlType, mSettings, key, jsxContext);\n\t} else if (renderNextUsingRenderManager !== undefined) {\n\t\treturn jsxRenderManager(\n\t\t\tControlType as unknown as string,\n\t\t\tmSettings as Record<string, string>,\n\t\t\tkey,\n\t\t\trenderNextUsingRenderManager\n\t\t) as unknown as string | Control | Control[] | undefined;\n\t} else {\n\t\treturn jsxXml(ControlType, mSettings, key, xmlNamespaceMap);\n\t}\n};\njsx.renderUsingRenderManager = function (renderManager: RenderManager, control: Control, renderMethod: Function): void {\n\trenderNextUsingRenderManager = renderManager;\n\tconst returnValue = renderMethod(control);\n\trenderNextUsingRenderManager = undefined;\n\treturnValue();\n};\njsx.defineXMLNamespaceMap = async function (namespaceMap: Record<string, string>, renderMethod: Function): Promise<unknown> {\n\txmlNamespaceMap = namespaceMap;\n\tconst returnValue = await renderMethod();\n\txmlNamespaceMap = {};\n\treturn returnValue;\n};\n/**\n * Indicates that the next JSX call should be rendered as XML.\n * @param renderMethod The method that needs to be rendered as XML\n * @returns The XML representation of the control\n */\njsx.renderAsXML = function <T>(renderMethod: () => T): T {\n\trenderNextAsXML = true;\n\tconst returnValue = renderMethod();\n\trenderNextAsXML = false;\n\treturn returnValue;\n};\n\nexport type Ref<T extends Element> = {\n\tcurrent?: T;\n\tsetCurrent(oControlInstance: T): void;\n};\n\nexport type JSXContext = {\n\townerControl?: Control & {\n\t\tcontrolReferences?: Record<string, Element>;\n\t\tcontrolReferencesId?: number;\n\t};\n\tview?: View;\n\tappComponent?: AppComponent;\n};\nlet jsxContext: JSXContext = {};\njsx.getContext = function (): JSXContext {\n\treturn jsxContext;\n};\n\njsx.withContext = function <T>(context: JSXContext, functionToExecute: () => T): T {\n\tjsxContext = context;\n\tconst callBackReturn = functionToExecute();\n\tjsxContext = {};\n\treturn callBackReturn;\n};\n\nexport default jsx;\n"],"mappings":";;;;;;;EAmBA,IAAIA,eAAe,GAAG,KAAK;EAC3B,IAAIC,4BAAuD;EAC3D,IAAIC,eAAuC,GAAG,CAAC,CAAC;EAChD,MAAMC,GAAG,GAAG,SAAAA,CACXC,WAA2B,EAC3BC,SAA+F,EAC/FC,GAAW,EACgC;IAC3C,IAAI,CAACN,eAAe,IAAI,CAACC,4BAA4B,EAAE;MACtD,OAAOM,UAAU,CAACH,WAAW,EAAEC,SAAS,EAAEC,GAAG,EAAEE,UAAU,CAAC;IAC3D,CAAC,MAAM,IAAIP,4BAA4B,KAAKQ,SAAS,EAAE;MACtD,OAAOC,gBAAgB,CACtBN,WAAW,EACXC,SAAS,EACTC,GAAG,EACHL,4BACD,CAAC;IACF,CAAC,MAAM;MACN,OAAOU,MAAM,CAACP,WAAW,EAAEC,SAAS,EAAEC,GAAG,EAAEJ,eAAe,CAAC;IAC5D;EACD,CAAC;EACDC,GAAG,CAACS,wBAAwB,GAAG,UAAUC,aAA4B,EAAEC,OAAgB,EAAEC,YAAsB,EAAQ;IACtHd,4BAA4B,GAAGY,aAAa;IAC5C,MAAMG,WAAW,GAAGD,YAAY,CAACD,OAAO,CAAC;IACzCb,4BAA4B,GAAGQ,SAAS;IACxCO,WAAW,CAAC,CAAC;EACd,CAAC;EACDb,GAAG,CAACc,qBAAqB,GAAG,gBAAgBC,YAAoC,EAAEH,YAAsB,EAAoB;IAC3Hb,eAAe,GAAGgB,YAAY;IAC9B,MAAMF,WAAW,GAAG,MAAMD,YAAY,CAAC,CAAC;IACxCb,eAAe,GAAG,CAAC,CAAC;IACpB,OAAOc,WAAW;EACnB,CAAC;EACD;AACA;AACA;AACA;AACA;EACAb,GAAG,CAACgB,WAAW,GAAG,UAAaJ,YAAqB,EAAK;IACxDf,eAAe,GAAG,IAAI;IACtB,MAAMgB,WAAW,GAAGD,YAAY,CAAC,CAAC;IAClCf,eAAe,GAAG,KAAK;IACvB,OAAOgB,WAAW;EACnB,CAAC;EAeD,IAAIR,UAAsB,GAAG,CAAC,CAAC;EAC/BL,GAAG,CAACiB,UAAU,GAAG,YAAwB;IACxC,OAAOZ,UAAU;EAClB,CAAC;EAEDL,GAAG,CAACkB,WAAW,GAAG,UAAaC,OAAmB,EAAEC,iBAA0B,EAAK;IAClFf,UAAU,GAAGc,OAAO;IACpB,MAAME,cAAc,GAAGD,iBAAiB,CAAC,CAAC;IAC1Cf,UAAU,GAAG,CAAC,CAAC;IACf,OAAOgB,cAAc;EACtB,CAAC;EAAC,OAEarB,GAAG;AAAA","ignoreList":[],"file":"jsx-dbg.js"}
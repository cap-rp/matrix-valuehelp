{"version":3,"file":"jsx.js","names":["renderNextAsXML","renderNextUsingRenderManager","xmlNamespaceMap","jsx","ControlType","mSettings","key","jsxControl","jsxContext","undefined","jsxRenderManager","jsxXml","renderUsingRenderManager","renderManager","control","renderMethod","returnValue","defineXMLNamespaceMap","async","namespaceMap","renderAsXML","getContext","withContext","context","functionToExecute","callBackReturn"],"sources":["./jsx.ts"],"sourcesContent":["import jsxControl from \"sap/fe/base/jsx-runtime/jsx-control\";\nimport jsxRenderManager from \"sap/fe/base/jsx-runtime/jsx-renderManager\";\nimport jsxXml from \"sap/fe/base/jsx-runtime/jsx-xml\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport type Control from \"sap/ui/core/Control\";\nimport type Element from \"sap/ui/core/Element\";\nimport type RenderManager from \"sap/ui/core/RenderManager\";\n\nimport type View from \"sap/ui/core/mvc/View\";\n\ntype ControlPropertyNames<T> = {\n\t[K in keyof T]: T[K] extends string | boolean | Function | number | undefined | string[] ? never : K;\n}[keyof T];\nexport type ControlProperties<T> = Partial<Record<ControlPropertyNames<T>, Element>> & {\n\t[k: string]: Element;\n};\nexport type NonControlProperties<T> = Partial<Omit<T, ControlPropertyNames<T>>>;\nexport type CommandProperties = `cmd:${string}|${string}`;\n\nlet renderNextAsXML = false;\nlet renderNextUsingRenderManager: RenderManager | undefined;\nlet xmlNamespaceMap: Record<string, string> = {};\nconst jsx = function <T>(\n\tControlType: typeof Control,\n\tmSettings: NonControlProperties<T> & { key: string; children?: Element | ControlProperties<T> },\n\tkey: string\n): string | Control | Control[] | undefined {\n\tif (!renderNextAsXML && !renderNextUsingRenderManager) {\n\t\treturn jsxControl(ControlType, mSettings, key, jsxContext);\n\t} else if (renderNextUsingRenderManager !== undefined) {\n\t\treturn jsxRenderManager(\n\t\t\tControlType as unknown as string,\n\t\t\tmSettings as Record<string, string>,\n\t\t\tkey,\n\t\t\trenderNextUsingRenderManager\n\t\t) as unknown as string | Control | Control[] | undefined;\n\t} else {\n\t\treturn jsxXml(ControlType, mSettings, key, xmlNamespaceMap);\n\t}\n};\njsx.renderUsingRenderManager = function (renderManager: RenderManager, control: Control, renderMethod: Function): void {\n\trenderNextUsingRenderManager = renderManager;\n\tconst returnValue = renderMethod(control);\n\trenderNextUsingRenderManager = undefined;\n\treturnValue();\n};\njsx.defineXMLNamespaceMap = async function (namespaceMap: Record<string, string>, renderMethod: Function): Promise<unknown> {\n\txmlNamespaceMap = namespaceMap;\n\tconst returnValue = await renderMethod();\n\txmlNamespaceMap = {};\n\treturn returnValue;\n};\n/**\n * Indicates that the next JSX call should be rendered as XML.\n * @param renderMethod The method that needs to be rendered as XML\n * @returns The XML representation of the control\n */\njsx.renderAsXML = function <T>(renderMethod: () => T): T {\n\trenderNextAsXML = true;\n\tconst returnValue = renderMethod();\n\trenderNextAsXML = false;\n\treturn returnValue;\n};\n\nexport type Ref<T extends Element> = {\n\tcurrent?: T;\n\tsetCurrent(oControlInstance: T): void;\n};\n\nexport type JSXContext = {\n\townerControl?: Control & {\n\t\tcontrolReferences?: Record<string, Element>;\n\t\tcontrolReferencesId?: number;\n\t};\n\tview?: View;\n\tappComponent?: AppComponent;\n};\nlet jsxContext: JSXContext = {};\njsx.getContext = function (): JSXContext {\n\treturn jsxContext;\n};\n\njsx.withContext = function <T>(context: JSXContext, functionToExecute: () => T): T {\n\tjsxContext = context;\n\tconst callBackReturn = functionToExecute();\n\tjsxContext = {};\n\treturn callBackReturn;\n};\n\nexport default jsx;\n"],"mappings":";;;;iKAmBA,IAAIA,EAAkB,MACtB,IAAIC,EACJ,IAAIC,EAA0C,CAAC,EAC/C,MAAMC,EAAM,SACXC,EACAC,EACAC,GAEA,IAAKN,IAAoBC,EAA8B,CACtD,OAAOM,EAAWH,EAAaC,EAAWC,EAAKE,EAChD,MAAO,GAAIP,IAAiCQ,UAAW,CACtD,OAAOC,EACNN,EACAC,EACAC,EACAL,EAEF,KAAO,CACN,OAAOU,EAAOP,EAAaC,EAAWC,EAAKJ,EAC5C,CACD,EACAC,EAAIS,yBAA2B,SAAUC,EAA8BC,EAAkBC,GACxFd,EAA+BY,EAC/B,MAAMG,EAAcD,EAAaD,GACjCb,EAA+BQ,UAC/BO,GACD,EACAb,EAAIc,sBAAwBC,eAAgBC,EAAsCJ,GACjFb,EAAkBiB,EAClB,MAAMH,QAAoBD,IAC1Bb,EAAkB,CAAC,EACnB,OAAOc,CACR,EAMAb,EAAIiB,YAAc,SAAaL,GAC9Bf,EAAkB,KAClB,MAAMgB,EAAcD,IACpBf,EAAkB,MAClB,OAAOgB,CACR,EAeA,IAAIR,EAAyB,CAAC,EAC9BL,EAAIkB,WAAa,WAChB,OAAOb,CACR,EAEAL,EAAImB,YAAc,SAAaC,EAAqBC,GACnDhB,EAAae,EACb,MAAME,EAAiBD,IACvBhB,EAAa,CAAC,EACd,OAAOiB,CACR,EAAE,OAEatB,CAAG","ignoreList":[]}
{"version":3,"file":"MultipleModeControl.js","names":["BindingAction","MultipleModeControl","_dec","defineUI5Class","_dec2","property","type","_dec3","defaultValue","_dec4","_dec5","_dec6","aggregation","multiple","isDefault","_dec7","association","_dec8","_dec9","event","_class","_class2","_Control","id","settings","_this","call","this","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_inheritsLoose","_proto","prototype","onBeforeRendering","getTabsModel","oFilterControl","_getFilterControl","setCountsOutDated","oFilterBarAPI","getParent","getAllInnerControls","forEach","oMacroAPI","showCounts","attachEvent","internalRefreshTabsCount","bind","suspendBinding","_onSearch","_onFilterChanged","onAfterRendering","getSelectedInnerControl","resumeBinding","getProperty","setVisibleOverridden","setProperty","macroAPI","iconTabFilter","_getTabFromInnerControl","originSetVisible","setVisible","value","getVisible","refreshTabCount","render","oRm","oControl","renderControl","content","sTabsModel","oContent","undefined","oModel","getModel","JSONModel","setModel","oSelectedTab","getItems","find","oItem","getKey","getSelectedKey","handleTabChange","oEvent","oIconTabBar","getSource","oMultiControl","mParameters","getParameters","_setInnerBinding","sPreviousSelectedKey","previousKey","sSelectedKey","selectedKey","oFilterBar","_refreshCustomView","getFilterConditions","ControlPersonalizationWriteAPI","add","changes","changeSpecificData","changeType","previousSelectedKey","selectorElement","_getViewController","getExtensionAPI","updateAppState","fireEvent","iconTabBar","refreshSelectedInnerControlContent","invalidateContent","keys","key","bValue","arguments","length","setFreezeContent","_updateMultiTabNotApplicableFields","tabsModel","results","view","CommonUtils","getTargetView","viewData","getViewData","useHiddenFilterBar","oTab","sTabId","mIgnoredFields","refreshNotApplicableFields","notApplicable","fields","title","_setTabMessageStrip","entityTypePath","data","ignoredFields","getText","isA","checkNonFilterableEntitySet","setData","resourceModel","getResourceModel","oChart","getContent","bEntitySetFilerable","MetaModelConverter","getInvolvedDataModelObjects","getMetaModel","getContext","targetObject","annotations","Capabilities","FilterRestrictions","Filterable","includes","bOnlyForVisibleTab","innerControls","reduce","aInnerControls","sInnerControl","UI5Element","getElementById","push","filter","oInnerControl","filterControl","oView","getController","oFilterConditions","sRefreshCause","onViewNeedsRefresh","filterConditions","currentTabId","refreshCause","getCounts","setCount","then","count","catch","error","Log","tableEvent","eventMacroAPI","targetKey","refreshTabsCount","split","oIconTabFilter","countsOutDated","setTabContentToBeRefreshedOnNextOpening","selectedTabKey","tabKeys","refreshSelectedTabContent","bRequestIfNotInitialized","bIsSelectedKey","sAction","Resume","Suspend","properties","sText","aIgnoredFields","Array","isArray","aIgnoredLabels","MessageStrip","getLabels","getParameter","Control","_applyDecoratedDescriptor","configurable","enumerable","writable","initializer"],"sources":["./MultipleModeControl.ts"],"sourcesContent":["import type { EntitySet } from \"@sap-ux/vocabularies-types\";\nimport Log from \"sap/base/Log\";\nimport type { PropertiesOf } from \"sap/fe/base/ClassSupport\";\nimport { aggregation, association, defineUI5Class, event, property } from \"sap/fe/base/ClassSupport\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type PageController from \"sap/fe/core/PageController\";\nimport * as MetaModelConverter from \"sap/fe/core/converters/MetaModelConverter\";\nimport MessageStrip from \"sap/fe/core/helpers/MessageStrip\";\nimport { getResourceModel } from \"sap/fe/core/helpers/ResourceModelHelper\";\nimport type MacroAPI from \"sap/fe/macros/MacroAPI\";\nimport type FilterBar from \"sap/fe/macros/controls/FilterBar\";\nimport type ListReportController from \"sap/fe/templates/ListReport/ListReportController.controller\";\nimport type IconTabBar from \"sap/m/IconTabBar\";\nimport type { IconTabBar$SelectEvent } from \"sap/m/IconTabBar\";\nimport type IconTabFilter from \"sap/m/IconTabFilter\";\nimport type CoreEvent from \"sap/ui/base/Event\";\nimport type { $ControlSettings } from \"sap/ui/core/Control\";\nimport Control from \"sap/ui/core/Control\";\nimport UI5Element from \"sap/ui/core/Element\";\nimport type RenderManager from \"sap/ui/core/RenderManager\";\nimport ControlPersonalizationWriteAPI from \"sap/ui/fl/write/api/ControlPersonalizationWriteAPI\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\n\nexport type InnerControlType = MacroAPI &\n\tPartial<{\n\t\tresumeBinding: Function;\n\t\tsuspendBinding: Function;\n\t\tgetCounts: Function;\n\t\trefreshNotApplicableFields: Function;\n\t\tinvalidateContent: Function;\n\t\tgetContent: Function;\n\t}>;\n\ntype MessageStripProperties = {\n\tentityTypePath: string;\n\tignoredFields: string[];\n\ttitle: string;\n};\n\nenum BindingAction {\n\tSuspend = \"suspendBinding\",\n\tResume = \"resumeBinding\"\n}\n\n@defineUI5Class(\"sap.fe.templates.ListReport.controls.MultipleModeControl\")\nclass MultipleModeControl extends Control {\n\t@property({ type: \"boolean\" })\n\tshowCounts!: boolean;\n\n\t@property({ type: \"boolean\", defaultValue: false })\n\tsetVisibleOverridden!: boolean;\n\n\t@property({ type: \"boolean\", defaultValue: false })\n\tfreezeContent!: boolean;\n\n\t@property({ type: \"boolean\", defaultValue: false })\n\tcountsOutDated!: boolean;\n\n\t@aggregation({ type: \"sap.m.IconTabBar\", multiple: false, isDefault: true })\n\tcontent!: IconTabBar;\n\n\t@association({ type: \"sap.ui.core.Control\", multiple: true })\n\tinnerControls!: string[];\n\n\t@association({ type: \"sap.fe.macros.controls.FilterBar\", multiple: false })\n\tfilterControl!: string;\n\n\t@event()\n\tselect!: Function;\n\n\tconstructor(\n\t\tid?: string | undefined | (PropertiesOf<MultipleModeControl> & $ControlSettings),\n\t\tsettings?: $ControlSettings & PropertiesOf<MultipleModeControl>\n\t) {\n\t\tsuper(id as string, settings);\n\t}\n\n\tonBeforeRendering(): void {\n\t\tthis.getTabsModel(); // Generate the model which is mandatory for some bindings\n\n\t\tconst oFilterControl = this._getFilterControl();\n\t\tif (!oFilterControl) {\n\t\t\t// In case there's no filterbar, we have to update the counts in the tabs immediately\n\t\t\tthis.setCountsOutDated(true);\n\t\t}\n\t\tconst oFilterBarAPI = oFilterControl?.getParent();\n\t\tthis.getAllInnerControls().forEach((oMacroAPI) => {\n\t\t\tif (this.showCounts) {\n\t\t\t\toMacroAPI.attachEvent(\"internalDataRequested\", this.internalRefreshTabsCount.bind(this));\n\t\t\t}\n\t\t\toMacroAPI.suspendBinding?.();\n\t\t});\n\t\tif (oFilterBarAPI) {\n\t\t\toFilterBarAPI.attachEvent(\"internalSearch\", this._onSearch.bind(this));\n\t\t\toFilterBarAPI.attachEvent(\"internalFilterChanged\", this._onFilterChanged.bind(this));\n\t\t}\n\t}\n\n\tonAfterRendering(): void {\n\t\tthis.getSelectedInnerControl()?.resumeBinding?.(!this.getProperty(\"freezeContent\"));\n\t\tif (this.showCounts && !this.setVisibleOverridden) {\n\t\t\tthis.setProperty(\"setVisibleOverridden\", true);\n\t\t\tthis.getAllInnerControls().forEach((macroAPI: MacroAPI): void => {\n\t\t\t\tconst iconTabFilter = this._getTabFromInnerControl(macroAPI);\n\t\t\t\t// No count to show\n\t\t\t\tif (!iconTabFilter) return;\n\n\t\t\t\tconst originSetVisible = iconTabFilter.setVisible;\n\t\t\t\ticonTabFilter.setVisible = (value: boolean): IconTabFilter => {\n\t\t\t\t\tif (iconTabFilter.getVisible() === false && value) {\n\t\t\t\t\t\tthis.refreshTabCount(macroAPI);\n\t\t\t\t\t}\n\t\t\t\t\treturn originSetVisible.bind(iconTabFilter)(value);\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t}\n\n\tstatic render(oRm: RenderManager, oControl: MultipleModeControl): void {\n\t\toRm.renderControl(oControl.content);\n\t}\n\n\t/**\n\t * Gets the model containing information related to the IconTabFilters.\n\t * @returns The model\n\t */\n\tgetTabsModel(): JSONModel | undefined {\n\t\tconst sTabsModel = \"tabsInternal\";\n\t\tconst oContent = this.content;\n\t\tif (!oContent) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet oModel = oContent.getModel(sTabsModel) as JSONModel | undefined;\n\t\tif (!oModel) {\n\t\t\toModel = new JSONModel({});\n\t\t\toContent.setModel(oModel, sTabsModel);\n\t\t}\n\t\treturn oModel;\n\t}\n\n\t/**\n\t * Gets the inner control of the displayed tab.\n\t * @returns The control\n\t */\n\tgetSelectedInnerControl(): InnerControlType | undefined {\n\t\tconst oSelectedTab = this.content?.getItems().find((oItem) => (oItem as IconTabFilter).getKey() === this.content.getSelectedKey());\n\t\treturn oSelectedTab\n\t\t\t? this.getAllInnerControls().find((oMacroAPI) => this._getTabFromInnerControl(oMacroAPI) === oSelectedTab)\n\t\t\t: undefined;\n\t}\n\n\t/**\n\t * Manages the binding of all inner controls when the selected IconTabFilter is changed.\n\t * @param oEvent Event fired by the IconTabBar\n\t */\n\tstatic handleTabChange(oEvent: IconTabBar$SelectEvent): void {\n\t\tconst oIconTabBar = oEvent.getSource();\n\t\tconst oMultiControl = oIconTabBar.getParent() as MultipleModeControl;\n\n\t\tconst mParameters = oEvent.getParameters();\n\t\toMultiControl._setInnerBinding(true);\n\t\tconst sPreviousSelectedKey = mParameters?.previousKey;\n\t\tconst sSelectedKey = mParameters?.selectedKey;\n\n\t\tif (sSelectedKey && sPreviousSelectedKey !== sSelectedKey) {\n\t\t\tconst oFilterBar = oMultiControl._getFilterControl();\n\t\t\tif (oFilterBar && !oMultiControl.getProperty(\"freezeContent\")) {\n\t\t\t\tif (!oMultiControl.getSelectedInnerControl()) {\n\t\t\t\t\t//custom tab\n\t\t\t\t\toMultiControl._refreshCustomView(oFilterBar.getFilterConditions(), \"tabChanged\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tControlPersonalizationWriteAPI.add({\n\t\t\t\tchanges: [\n\t\t\t\t\t{\n\t\t\t\t\t\tchangeSpecificData: {\n\t\t\t\t\t\t\tchangeType: \"selectIconTabBarFilter\",\n\t\t\t\t\t\t\tcontent: {\n\t\t\t\t\t\t\t\tselectedKey: sSelectedKey,\n\t\t\t\t\t\t\t\tpreviousSelectedKey: sPreviousSelectedKey\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tselectorElement: oIconTabBar\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t});\n\t\t}\n\n\t\toMultiControl._getViewController()?.getExtensionAPI()?.updateAppState();\n\n\t\toMultiControl.fireEvent(\"select\", {\n\t\t\ticonTabBar: oIconTabBar,\n\t\t\tselectedKey: sSelectedKey,\n\t\t\tpreviousKey: sPreviousSelectedKey\n\t\t});\n\t}\n\n\t/**\n\t * Refreshes the content of the selected inner control.\n\t *\n\t */\n\trefreshSelectedInnerControlContent(): void {\n\t\tif (this.getSelectedInnerControl()) {\n\t\t\tthis.getSelectedInnerControl()?.invalidateContent?.();\n\t\t\tthis.getSelectedInnerControl()?.resumeBinding?.(true);\n\t\t} else {\n\t\t\t// custom tab\n\t\t\tthis._refreshCustomView(undefined, \"forcedRefresh\");\n\t\t}\n\t}\n\n\t/**\n\t * Invalidates the content of the inner controls.\n\t * @param [keys] The list of the keys identifying the views defined in the manifest for which the views' content will be invalidated. If not provided, all the views' content will be invalidated\n\t */\n\tinvalidateContent(keys?: string[]): void {\n\t\tthis.setCountsOutDated(true);\n\t\tthis.getAllInnerControls().forEach((macroAPI) => {\n\t\t\tif (keys) {\n\t\t\t\tconst iconTabFilter = this._getTabFromInnerControl(macroAPI);\n\t\t\t\tfor (const key of keys) {\n\t\t\t\t\tif (\n\t\t\t\t\t\ticonTabFilter &&\n\t\t\t\t\t\t(iconTabFilter.getKey() === `fe::table::${key}::LineItem` || iconTabFilter.getKey() === `fe::CustomTab::${key}`)\n\t\t\t\t\t) {\n\t\t\t\t\t\tmacroAPI.invalidateContent?.();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmacroAPI.invalidateContent?.();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Sets the counts to \"out of date\" or \"up to date\"\n\t * If the counts are set to \"out of date\" and the selected IconTabFilter doesn't contain an inner control, all inner controls are requested to get the new counts.\n\t * @param bValue Either freezes the control or not\n\t */\n\tsetCountsOutDated(bValue = true): void {\n\t\tthis.setProperty(\"countsOutDated\", bValue);\n\t\t// if the current tab is not configured with no inner Control\n\t\t// the tab counts must be manually refreshed since no Macro API will sent event internalDataRequested\n\t\tif (bValue && !this.getSelectedInnerControl()) {\n\t\t\tthis.internalRefreshTabsCount();\n\t\t}\n\t}\n\n\t/**\n\t * Freezes the content :\n\t * - content is frozen: the binding of the inner controls are suspended.\n\t * - content is unfrozen: the binding of inner control related to the selected IconTabFilter is resumed.\n\t * @param bValue Freeze or not the control\n\t */\n\tsetFreezeContent(bValue: boolean): void {\n\t\tthis.setProperty(\"freezeContent\", bValue);\n\t\tthis._setInnerBinding();\n\t}\n\n\t/**\n\t * Updates the internal model with the properties that are not applicable on each IconTabFilter (containing inner control) according to the entityType of the filter control.\n\t *\n\t */\n\t_updateMultiTabNotApplicableFields(): void {\n\t\tconst tabsModel = this.getTabsModel();\n\t\tconst oFilterControl = this._getFilterControl() as Control;\n\t\tif (tabsModel && oFilterControl) {\n\t\t\tconst results: Record<string, { notApplicable: { fields: string[]; title: string | undefined } }> = {};\n\t\t\tconst view = CommonUtils.getTargetView(this);\n\t\t\tconst viewData = view.getViewData();\n\t\t\tif (!viewData.useHiddenFilterBar) {\n\t\t\t\tthis.getAllInnerControls().forEach((oMacroAPI) => {\n\t\t\t\t\tconst oTab = this._getTabFromInnerControl(oMacroAPI);\n\t\t\t\t\tif (oTab) {\n\t\t\t\t\t\tconst sTabId = oTab.getKey();\n\t\t\t\t\t\tconst mIgnoredFields = oMacroAPI.refreshNotApplicableFields?.(oFilterControl) || [];\n\t\t\t\t\t\tresults[sTabId] = {\n\t\t\t\t\t\t\tnotApplicable: {\n\t\t\t\t\t\t\t\tfields: mIgnoredFields,\n\t\t\t\t\t\t\t\ttitle: this._setTabMessageStrip({\n\t\t\t\t\t\t\t\t\tentityTypePath: oFilterControl.data(\"entityType\"),\n\t\t\t\t\t\t\t\t\tignoredFields: mIgnoredFields,\n\t\t\t\t\t\t\t\t\ttitle: oTab.getText()\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (oMacroAPI && oMacroAPI.isA(\"sap.fe.macros.Chart\")) {\n\t\t\t\t\t\t\tresults[sTabId] = this.checkNonFilterableEntitySet(oMacroAPI, sTabId, results);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\ttabsModel.setData(results);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Modifies the messagestrip message based on entity set is filerable or not.\n\t * @param oMacroAPI Macro chart api\n\t * @param sTabId Tab key ID\n\t * @param results Should contain fields and title\n\t * @returns An object of modified fields and title\n\t */\n\tcheckNonFilterableEntitySet(\n\t\toMacroAPI: InnerControlType,\n\t\tsTabId: string,\n\t\tresults: Record<string, { notApplicable: { fields: string[]; title: string | undefined } }>\n\t): { notApplicable: { fields: string[]; title: string | undefined } } {\n\t\tconst resourceModel = getResourceModel(oMacroAPI);\n\t\tconst oChart = oMacroAPI?.getContent ? oMacroAPI.getContent() : undefined;\n\t\tconst bEntitySetFilerable =\n\t\t\toChart &&\n\t\t\tMetaModelConverter.getInvolvedDataModelObjects<EntitySet>(\n\t\t\t\t(oChart.getModel() as ODataModel).getMetaModel().getContext(`${oChart.data(\"targetCollectionPath\")}`)\n\t\t\t)?.targetObject?.annotations?.Capabilities?.FilterRestrictions?.Filterable;\n\t\tif (bEntitySetFilerable !== undefined && !bEntitySetFilerable) {\n\t\t\tif (results[sTabId].notApplicable.fields.includes(\"$search\")) {\n\t\t\t\tresults[sTabId].notApplicable.title += \" \" + resourceModel.getText(\"C_LR_MULTIVIZ_CHART_MULTI_NON_FILTERABLE\");\n\t\t\t} else {\n\t\t\t\tresults[sTabId].notApplicable.fields = [\"nonFilterable\"];\n\t\t\t\tresults[sTabId].notApplicable.title = resourceModel.getText(\"C_LR_MULTIVIZ_CHART_MULTI_NON_FILTERABLE\");\n\t\t\t}\n\t\t}\n\t\treturn results[sTabId];\n\t}\n\n\t/**\n\t * Gets the inner controls.\n\t * @param bOnlyForVisibleTab Should display only the visible controls\n\t * @returns An array of controls\n\t */\n\tgetAllInnerControls(bOnlyForVisibleTab = false): InnerControlType[] {\n\t\treturn (\n\t\t\tthis.innerControls.reduce((aInnerControls: InnerControlType[], sInnerControl: string) => {\n\t\t\t\tconst oControl = UI5Element.getElementById(sInnerControl) as InnerControlType;\n\t\t\t\tif (oControl) {\n\t\t\t\t\taInnerControls.push(oControl);\n\t\t\t\t}\n\t\t\t\treturn aInnerControls.filter(\n\t\t\t\t\t(oInnerControl) => !bOnlyForVisibleTab || this._getTabFromInnerControl(oInnerControl)?.getVisible()\n\t\t\t\t);\n\t\t\t}, []) || []\n\t\t);\n\t}\n\n\t_getFilterControl(): FilterBar | undefined {\n\t\treturn UI5Element.getElementById(this.filterControl) as FilterBar | undefined;\n\t}\n\n\t_getTabFromInnerControl(oControl: Control): IconTabFilter | undefined {\n\t\tlet oTab: UI5Element | undefined = oControl;\n\t\tif (oTab && !oTab.isA<IconTabFilter>(\"sap.m.IconTabFilter\") && (oTab as { getParent?: Function }).getParent) {\n\t\t\toTab = oControl.getParent() as UI5Element | undefined;\n\t\t}\n\t\treturn oTab && oTab.isA<IconTabFilter>(\"sap.m.IconTabFilter\") ? oTab : undefined;\n\t}\n\n\t_getViewController(): PageController {\n\t\tconst oView = CommonUtils.getTargetView(this);\n\t\treturn oView && oView.getController();\n\t}\n\n\t_refreshCustomView(oFilterConditions: unknown, sRefreshCause: string): void {\n\t\t(this._getViewController() as ListReportController)?.onViewNeedsRefresh?.({\n\t\t\tfilterConditions: oFilterConditions,\n\t\t\tcurrentTabId: this.content.getSelectedKey(),\n\t\t\trefreshCause: sRefreshCause\n\t\t});\n\t}\n\n\t/**\n\t * Get the count of the Tab containing the macro passed as parameter.\n\t * @param macroAPI The content of the tab we want to refresh\n\t */\n\trefreshTabCount(macroAPI: InnerControlType): void {\n\t\tconst iconTabFilter = this._getTabFromInnerControl(macroAPI);\n\t\tif (!iconTabFilter) {\n\t\t\treturn;\n\t\t}\n\t\tif (macroAPI?.getCounts) {\n\t\t\ticonTabFilter.setCount(\"...\");\n\t\t\tmacroAPI\n\t\t\t\t.getCounts()\n\t\t\t\t.then((count: string): IconTabFilter => {\n\t\t\t\t\treturn iconTabFilter.setCount(count || \"0\");\n\t\t\t\t})\n\t\t\t\t.catch(function (error: unknown): void {\n\t\t\t\t\tLog.error(`Error while requesting Counts for Control: ${error}`);\n\t\t\t\t});\n\t\t}\n\t}\n\n\tinternalRefreshTabsCount(tableEvent?: CoreEvent): void {\n\t\t// If the refresh is triggered by an event (internalDataRequested)\n\t\t// we cannot use the selected key as reference since table can be refreshed by SideEffects\n\t\t// so the table could be into a different tab -> we use the source of the event to find the targeted tab\n\t\t// If not triggered by an event -> refresh at least the counts of the current MacroAPI\n\t\tconst eventMacroAPI = tableEvent?.getSource() as MacroAPI;\n\t\tconst targetKey = eventMacroAPI ? this._getTabFromInnerControl(eventMacroAPI)?.getKey() : this.content?.getSelectedKey();\n\t\tif (targetKey) {\n\t\t\tthis.refreshTabsCount([targetKey.split(\"::\")[2]]);\n\t\t}\n\t}\n\n\t/**\n\t * Refreshes the count of the views in the MultiMode control.\n\t * @param [keys] The list of the keys identifying the views defined in the manifest for which the views' count will be refreshed. If not provided, all the views' count will be refreshed\n\t */\n\trefreshTabsCount(keys?: string[]): void {\n\t\tif (!keys) {\n\t\t\tthis.setCountsOutDated(true);\n\t\t}\n\t\tthis.getAllInnerControls(true).forEach((oMacroAPI): void => {\n\t\t\tconst oIconTabFilter = this._getTabFromInnerControl(oMacroAPI);\n\t\t\tif (this.countsOutDated || (keys && oIconTabFilter && keys.includes(oIconTabFilter.getKey().split(\"::\")[2]))) {\n\t\t\t\tthis.refreshTabCount(oMacroAPI);\n\t\t\t}\n\t\t});\n\t\tthis.setCountsOutDated(false);\n\t}\n\n\t/**\n\t * Refreshes the content of the underlying views upon the next opening.\n\t * Note: The content of the selected view, if part of the provided keys, will be refreshed immediately.\n\t * @param [keys] The list of the keys identifying the views defined in the manifest for which the views' content will be refreshed. If not provided, all the views' content will be refreshed\n\t */\n\tsetTabContentToBeRefreshedOnNextOpening(keys?: string[]): void {\n\t\tconst selectedTabKey = this?.content.getSelectedKey();\n\t\tconst tabKeys: string[] = [];\n\t\tconst refreshSelectedTabContent = keys ? keys.includes(selectedTabKey?.split(\"::\")[2]) : true;\n\t\tif (keys) {\n\t\t\tfor (const key of keys) {\n\t\t\t\tif (selectedTabKey !== `fe::table::${key}::LineItem` && selectedTabKey !== `fe::CustomTab::${key}`) {\n\t\t\t\t\ttabKeys.push(key);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis?.getAllInnerControls().forEach((macroAPI) => {\n\t\t\t\tconst iconTabFilter = this?._getTabFromInnerControl(macroAPI);\n\t\t\t\tif (iconTabFilter && iconTabFilter.getKey() !== selectedTabKey) {\n\t\t\t\t\ttabKeys.push(iconTabFilter.getKey().split(\"::\")[2]);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis?.invalidateContent(tabKeys);\n\t\tif (refreshSelectedTabContent) {\n\t\t\tthis?.refreshSelectedInnerControlContent();\n\t\t}\n\t}\n\n\t_setInnerBinding(bRequestIfNotInitialized = false): void {\n\t\tif (this.content) {\n\t\t\tthis.getAllInnerControls().forEach((oMacroAPI) => {\n\t\t\t\tconst oIconTabFilter = this._getTabFromInnerControl(oMacroAPI);\n\t\t\t\tconst bIsSelectedKey = oIconTabFilter?.getKey() === this.content.getSelectedKey();\n\t\t\t\tconst sAction = bIsSelectedKey && !this.getProperty(\"freezeContent\") ? BindingAction.Resume : BindingAction.Suspend;\n\t\t\t\toMacroAPI[sAction]?.(sAction === BindingAction.Resume ? bRequestIfNotInitialized && bIsSelectedKey : undefined);\n\t\t\t});\n\t\t}\n\t}\n\n\t_setTabMessageStrip(properties: MessageStripProperties): string | undefined {\n\t\tlet sText = \"\";\n\t\tconst aIgnoredFields = properties.ignoredFields;\n\t\tconst oFilterControl = this._getFilterControl() as Control;\n\t\tif (oFilterControl && Array.isArray(aIgnoredFields) && aIgnoredFields.length > 0 && properties.title) {\n\t\t\tconst aIgnoredLabels = MessageStrip.getLabels(\n\t\t\t\taIgnoredFields,\n\t\t\t\tproperties.entityTypePath,\n\t\t\t\toFilterControl,\n\t\t\t\tgetResourceModel(oFilterControl)\n\t\t\t);\n\t\t\tsText = MessageStrip.getText(aIgnoredLabels, oFilterControl, properties.title);\n\t\t\treturn sText;\n\t\t}\n\t}\n\n\t_onSearch(oEvent: CoreEvent<{ conditions: unknown }>): void {\n\t\tthis.setCountsOutDated(true);\n\t\tthis.setFreezeContent(false);\n\t\tif (this.getSelectedInnerControl()) {\n\t\t\tthis._updateMultiTabNotApplicableFields();\n\t\t} else {\n\t\t\t// custom tab\n\t\t\tthis._refreshCustomView(oEvent.getParameter(\"conditions\"), \"search\");\n\t\t}\n\t}\n\n\t_onFilterChanged(oEvent: CoreEvent<{ conditionsBased: boolean }>): void {\n\t\tif (oEvent.getParameter(\"conditionsBased\")) {\n\t\t\tthis.setFreezeContent(true);\n\t\t}\n\t}\n}\n\nexport default MultipleModeControl;\n"],"mappings":"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","ignoreList":[]}
{"version":3,"file":"TransportSelection.js","names":["TransportSelection","_dec","defineUI5Class","_dec2","property","type","_dec3","controllerExtensionHandler","_class","_class2","_BuildingBlock","props","others","_this","call","this","_initializerDefineProperty","_descriptor","_exports","_inheritsLoose","_proto","prototype","onMetadataAvailable","_ownerComponent","content","createContent","selectTransport","async","actionName","context","getBindingContext","label","messageStrip","getLink","getText","getPageController","editFlow","invokeAction","contexts","getTypeExpression","relativePath","getRelativePaths","transportPropertyObjectPath","requiredExpression","isRequiredExpression","targetObject","ifElse","and","not","pathInModel","definition","transportRequestProperty","MessageType","Warning","Information","getLinkTextExpression","getTranslatedText","getStripText","textExpression","getTextBindingExpression","noTransportSelected","transportSelected","concat","getStripVisible","actionEnabledExpression","UI","IsEditable","dataModelObjects","getDataModelObjectPath","getManifestWrapper","getTransportSelection","selectTransportAction","targetEntityType","actions","convertedTypes","namespace","getActionEnabledExpression","enhanceDataModelPath","_jsx","MessageStrip","text","showIcon","customIcon","class","visible","children","link","Link","press","bind","fullyQualifiedName","validateTransportRequestBeforeSave","getVisible","getType","leadingControl","Promise","resolve","BuildingBlock","_applyDecoratedDescriptor","configurable","enumerable","writable","initializer","Object","getOwnPropertyDescriptor"],"sources":["./TransportSelection.tsx"],"sourcesContent":["import type { Property } from \"@sap-ux/vocabularies-types\";\nimport type { BindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { and, concat, ifElse, not, pathInModel } from \"sap/fe/base/BindingToolkit\";\nimport type { PropertiesOf } from \"sap/fe/base/ClassSupport\";\nimport { defineUI5Class, property } from \"sap/fe/base/ClassSupport\";\nimport { controllerExtensionHandler } from \"sap/fe/base/HookSupport\";\nimport type TemplateComponent from \"sap/fe/core/TemplateComponent\";\nimport BuildingBlock from \"sap/fe/core/buildingBlocks/BuildingBlock\";\nimport type { TransportSelectionDefinition } from \"sap/fe/core/converters/ManifestSettings\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport { UI } from \"sap/fe/core/helpers/BindingHelper\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { enhanceDataModelPath, getRelativePaths } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { isRequiredExpression } from \"sap/fe/core/templating/FieldControlHelper\";\nimport { getActionEnabledExpression } from \"sap/fe/core/templating/UIFormatters\";\nimport { getTextBindingExpression } from \"sap/fe/macros/field/FieldTemplating\";\nimport Link from \"sap/m/Link\";\nimport MessageStrip from \"sap/m/MessageStrip\";\nimport MessageType from \"sap/ui/core/message/MessageType\";\nimport type ODataV4Context from \"sap/ui/model/odata/v4/Context\";\n\n@defineUI5Class(\"sap.fe.templates.ObjectPage.view.fragments.TransportSelection\")\nexport default class TransportSelection extends BuildingBlock<MessageStrip> {\n\t// The transport selection definition\n\tprivate definition?: TransportSelectionDefinition;\n\n\t// a flag to indicate the leading control, also taking care on validating on safe\n\t@property({ type: \"boolean\" })\n\tpublic leadingControl!: boolean;\n\n\t// Reference to the message strip\n\tmessageStrip!: MessageStrip;\n\n\t// the selectTransport action enablement\n\tactionEnabledExpression!: BindingToolkitExpression<boolean>;\n\n\t// data model object path to the transport property\n\ttransportPropertyObjectPath!: DataModelObjectPath<Property>;\n\n\tconstructor(props?: PropertiesOf<TransportSelection>, others?: PropertiesOf<TransportSelection>) {\n\t\tsuper(props, others);\n\t}\n\n\tonMetadataAvailable(_ownerComponent: TemplateComponent): void {\n\t\tsuper.onMetadataAvailable(_ownerComponent);\n\t\tthis.content = this.createContent();\n\t}\n\n\t/**\n\t * Call the selectTransportAction once the user clicks on the link in the message strip.\n\t * @param actionName The name of the action to be called\n\t * @returns Promise that is resolved once a transport request was selected\n\t */\n\tasync selectTransport(actionName: string): Promise<unknown> {\n\t\tconst context = this.getBindingContext() as ODataV4Context;\n\t\tconst label = this.messageStrip.getLink().getText();\n\n\t\treturn this.getPageController()?.editFlow.invokeAction(actionName, { contexts: context, label: label });\n\t}\n\n\t/**\n\t * Get expression for the message strip type.\n\t *\n\t * If mandatory and no transport request is given the type is Warning,\n\t * otherwise it's Information.\n\t * @returns Expression to determine the message strip type.\n\t */\n\tgetTypeExpression(): BindingToolkitExpression<MessageType> {\n\t\tconst relativePath = getRelativePaths(this.transportPropertyObjectPath);\n\t\tconst requiredExpression = isRequiredExpression(this.transportPropertyObjectPath.targetObject, relativePath);\n\t\treturn ifElse(\n\t\t\tand(requiredExpression, not(pathInModel(this.definition?.transportRequestProperty))),\n\t\t\tMessageType.Warning,\n\t\t\tMessageType.Information\n\t\t);\n\t}\n\n\t/**\n\t * Get expression for the link text.\n\t *\n\t * If transport request is given the text shall be change transport, if not\n\t * it shall be select transport.\n\t * @returns Expression to determine the link text.\n\t */\n\tgetLinkTextExpression(): BindingToolkitExpression<string> {\n\t\treturn ifElse(\n\t\t\tpathInModel(this.definition?.transportRequestProperty),\n\t\t\tthis.getTranslatedText(\"T_TRANSPORT_SELECTION_CHANGE_TRANSPORT\"),\n\t\t\tthis.getTranslatedText(\"T_TRANSPORT_SELECTION_SELECT_TRANSPORT\")\n\t\t);\n\t}\n\n\t/**\n\t * Get expression for the message strip text.\n\t *\n\t * If no transport given we show a warning text, if one is given we show the\n\t * selected transport request, and also consider the text annotation on the\n\t * transport request property.\n\t * @returns Expression to determine the message strip text\n\t */\n\tgetStripText(): BindingToolkitExpression<string | undefined> {\n\t\tconst textExpression = getTextBindingExpression(this.transportPropertyObjectPath, {});\n\t\tconst noTransportSelected = this.getTranslatedText(\"T_TRANSPORT_SELECTION_NO_TRANSPORT_SELECTED\");\n\t\tconst transportSelected = concat(`${this.getTranslatedText(\"T_TRANSPORT_SELECTION_SELECTED_TRANSPORT\")} `, textExpression);\n\t\treturn ifElse(pathInModel(this.definition?.transportRequestProperty), transportSelected, noTransportSelected);\n\t}\n\n\t/**\n\t * Get expression for the message strip visibility.\n\t *\n\t * If not in edit mode we don't show the message strip at all. If in edit\n\t * mode we check the OperationAvailable annotation on the selectTransportAction.\n\t * @returns Expression to determine the  message strip visibility\n\t */\n\tgetStripVisible(): BindingToolkitExpression<boolean> {\n\t\t// The visibility of the strip relies on the Core.OperationAvailable set on the transport select action\n\t\treturn ifElse(this.actionEnabledExpression, UI.IsEditable, false);\n\t}\n\n\t/**\n\t * Get the message strip to be shown in the object page header.\n\t * @returns Message strip or nothing in case the feature is not enabled\n\t */\n\tcreateContent(): MessageStrip | undefined {\n\t\tconst dataModelObjects = this.getDataModelObjectPath<PageContextPathTarget>();\n\n\t\tthis.definition = this.getManifestWrapper()?.getTransportSelection();\n\t\tif (this.definition) {\n\t\t\tlet selectTransportAction = dataModelObjects?.targetEntityType.actions[this.definition.selectTransportAction];\n\t\t\tif (!selectTransportAction) {\n\t\t\t\t// if the action wasn't found give it a try by adding the namespace\n\t\t\t\tselectTransportAction =\n\t\t\t\t\tdataModelObjects?.targetEntityType.actions[\n\t\t\t\t\t\t`${dataModelObjects?.convertedTypes.namespace}.${this.definition.selectTransportAction}`\n\t\t\t\t\t];\n\t\t\t}\n\n\t\t\tif (dataModelObjects && selectTransportAction) {\n\t\t\t\tthis.actionEnabledExpression = getActionEnabledExpression(\n\t\t\t\t\tselectTransportAction,\n\t\t\t\t\tdataModelObjects?.convertedTypes,\n\t\t\t\t\tdataModelObjects\n\t\t\t\t);\n\t\t\t\tthis.transportPropertyObjectPath = enhanceDataModelPath<Property>(\n\t\t\t\t\tdataModelObjects,\n\t\t\t\t\tthis.definition.transportRequestProperty\n\t\t\t\t);\n\n\t\t\t\tthis.messageStrip = (\n\t\t\t\t\t<MessageStrip\n\t\t\t\t\t\ttext={this.getStripText()}\n\t\t\t\t\t\ttype={this.getTypeExpression()}\n\t\t\t\t\t\tshowIcon=\"true\"\n\t\t\t\t\t\tcustomIcon=\"sap-icon://shipping-status\"\n\t\t\t\t\t\tclass=\"sapUiSmallMarginTop\"\n\t\t\t\t\t\tvisible={this.getStripVisible()}\n\t\t\t\t\t>\n\t\t\t\t\t\t{{\n\t\t\t\t\t\t\tlink: (\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tpress={this.selectTransport.bind(this, selectTransportAction.fullyQualifiedName)}\n\t\t\t\t\t\t\t\t\ttext={this.getLinkTextExpression()}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}}\n\t\t\t\t\t</MessageStrip>\n\t\t\t\t);\n\t\t\t\treturn this.messageStrip;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Show selectTransport dialog if no transport chosen.\n\t *\n\t * We check if the TransportSelection feature is enabled and if the message strip\n\t * type is warning (= mandatory but no transport request chosen). If so we show the selectTransport dialog.\n\t * @returns Promise that is resolved once a transport request was selected\n\t */\n\t@controllerExtensionHandler(\"editFlow\", \"onBeforeSave\")\n\tasync validateTransportRequestBeforeSave(): Promise<unknown> {\n\t\tif (\n\t\t\tthis.messageStrip.getVisible() &&\n\t\t\tthis.messageStrip.getType() === MessageType.Warning &&\n\t\t\tthis.leadingControl &&\n\t\t\tthis.definition\n\t\t) {\n\t\t\treturn this.selectTransport(this.definition?.selectTransportAction);\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n}\n"],"mappings":"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","ignoreList":[]}